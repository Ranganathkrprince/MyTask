package com.niftem.app.implementation;

import java.io.File;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Random;
import java.util.stream.Collectors;

import javax.transaction.Transactional;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.niftem.app.entity.AcademicCalender;
import com.niftem.app.entity.AcademicCalenderActivity;
import com.niftem.app.entity.AcademicCalenderLog;
import com.niftem.app.entity.AcademicYear;
import com.niftem.app.entity.Batch;
import com.niftem.app.entity.Colleges;
import com.niftem.app.entity.Courses;
import com.niftem.app.entity.CoursesRegistration;
import com.niftem.app.entity.CoursesType;
import com.niftem.app.entity.Degree;
import com.niftem.app.entity.Department;
import com.niftem.app.entity.ExamAnnouncement;
import com.niftem.app.entity.ExamAttendance;
import com.niftem.app.entity.ExamBarcodes;
import com.niftem.app.entity.FeedbackConfiguration;
import com.niftem.app.entity.GradeReport;
import com.niftem.app.entity.InternalMarksConfiguration;
import com.niftem.app.entity.LateRegistration;
import com.niftem.app.entity.Mentor;
import com.niftem.app.entity.MidTermMarks;
import com.niftem.app.entity.OrderTransaction;
import com.niftem.app.entity.PenaltyConfiguration;
import com.niftem.app.entity.ProgrammeYear;
import com.niftem.app.entity.Programmes;
import com.niftem.app.entity.RegistrationType;
import com.niftem.app.entity.Section;
import com.niftem.app.entity.SemesterRegistration;
import com.niftem.app.entity.SemesterRegistrationConfiguration;
import com.niftem.app.entity.Semster;
import com.niftem.app.entity.Staffpersonal;
import com.niftem.app.entity.Stream;
import com.niftem.app.entity.Studentadmission;
import com.niftem.app.entity.Studentpersonal;
import com.niftem.app.entity.User;
import com.niftem.app.model.AcademicCalenderRequest;
import com.niftem.app.model.CoursesRegistrationRequest;
import com.niftem.app.model.ForwardLateRegApproveRequest;
import com.niftem.app.model.InternalMarksRequest;
import com.niftem.app.model.LateRegListApproval;
import com.niftem.app.model.LateRegStudentApprove;
import com.niftem.app.model.LateRegistrationRequest;
import com.niftem.app.model.PenaltyRequest;
import com.niftem.app.model.SemesterEligibility;
import com.niftem.app.model.SemesterRegistrationConfigurationRequest;
import com.niftem.app.model.SemesterRegistrationRequest;
import com.niftem.app.repository.AccountApproveRepository;
import com.niftem.app.service.CollegeAcademicService;
import com.niftem.app.util.AutoManager;

@Service
@Transactional
public class CollegeAcademicImpl extends AutoManager implements CollegeAcademicService {

	private static Logger logger = LoggerFactory.getLogger("master-log");
	private static Logger excellog = LoggerFactory.getLogger("excel-log");

	@Autowired
	AccountApproveRepository accountpprove;

	@Override
	public Map<String, String> createAcademicClender(AcademicCalenderRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}
			
			List<User> user = super.user.findByIdAndExIsDeleteAndExIsActive(request.getUser(), false, true);
			if (user.size() <= 0) {
				info.put("status", "2");
				info.put("message", "User id not present");
				return info;
			}
			
			List<AcademicCalenderActivity> tasks = super.academiccalenderactivity
					.findByExIsDeleteAndExIsActiveAndAcademicYearIdAndExIsEven(false, true, request.getAcademicYear(),
							request.getExIsEven());
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "AcademicCalender Activity not created for academic Year..");
				return info;
			}
									
			List<Batch> batch = new ArrayList<Batch>();
			for (int i = 0; i < request.getBatch().size(); i++) {
				Long number = request.getBatch().get(i);
				Long col = new Long(number);
				Optional<Batch> bat = super.batch.findByIdAndExIsDeleteAndExIsActive(col, false, true);
				if (!bat.isPresent()) {
					info.put("status", "2");
					info.put("message", "Selected Batch not present");
					return info;
				}
				batch.add(bat.get());
			}
			Date date = new Date();
			AcademicCalender AcademicCalender = new AcademicCalender();
			AcademicCalender.setExIsActive(request.getExIsActive());
			AcademicCalender.setExIsDelete(false);
			AcademicCalender.setExIsEven(request.getExIsEven());			
			AcademicCalender.setExIsPublish(false);
			AcademicCalender.setExCreateDate(date);
			AcademicCalender.setAcademicYear(academic.get());
			AcademicCalender.setBatch(batch);
			AcademicCalender.setExIsUpdate(false);
			AcademicCalender.setUser(user.get(0));
			AcademicCalender.setExRemark("NA");
			academicCalender.save(AcademicCalender);
			
			// get the activity 
			for(AcademicCalenderActivity e :tasks) {
				AcademicCalenderLog log = new AcademicCalenderLog();
				log.setExProposedDates("NA");
				log.setAcademicCalender(AcademicCalender);
				log.setExActivityName(e.getExName());
				log.setExIsUpdate(false);
				log.setAcademicCalenderActivity(e);	
				log.setExSerialNnumber("NA");
				super.academicCalenderLog.save(log);
			}
			

			info.put("status", "1");
			info.put("message", "AcademicCalender created successfully");
			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getAcademicClender(AcademicCalenderRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<AcademicCalender> tasks = super.academicCalender.findByExIsDelete(false);
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "AcademicCalender not created");
				return info;
			} else {
				List dataList = new LinkedList();
				for (AcademicCalender e : tasks) {
					Map<Object, Object> data = new HashMap<Object, Object>();
					data.put("id", e.getId());
					data.put("exIsActive", e.getExIsActive());
					data.put("exIsEven", e.getExIsEven());		
					data.put("exIsUpdate", e.getExIsUpdate());	
					data.put("exIsPublish", e.getExIsPublish());
					data.put("academicYear", e.getAcademicYear().getExYear());
					data.put("academicYearId", e.getAcademicYear().getId());
					data.put("remark", e.getExRemark());
					List batchId = new LinkedList();
					List batch = new LinkedList();
					for (int i = 0; i < e.getBatch().size(); i++) {
						batchId.add(e.getBatch().get(i).getExName());
						batch.add(e.getBatch().get(i).getId());
					}
					
					
					data.put("batchId",batchId);
					data.put("batch", batch);
					dataList.add(data);
				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getAcademicClenderlist(AcademicCalenderRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<AcademicCalender> tasks = super.academicCalender
					.findByExIsDeleteAndExIsActiveAndAcademicYearIdAndExIsEven(false, true, request.getAcademicYear(),
							request.getExIsEven());
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "AcademicCalender not created");
				return info;
			} else {
				List dataList = new LinkedList();
				for (AcademicCalender e : tasks) {
					Map<Object, Object> data = new HashMap<Object, Object>();
					data.put("id", e.getId());
					data.put("exIsActive", e.getExIsActive());
					data.put("exIsEven", e.getExIsEven());
					//data.put("exProposedDates", e.getExProposedDates());
					data.put("exCreateDate", e.getExCreateDate());
					data.put("exUpdateDate", e.getExUpdateDate());

					data.put("academicYear", e.getAcademicYear().getExYear());
					data.put("academicYearId", e.getAcademicYear().getId());

				//	data.put("calenderActivity", e.getAcademicCalenderActivity().getExName());
					//data.put("calenderActivityId", e.getAcademicCalenderActivity().getId());

					dataList.add(data);
				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> updateAcademicClender(AcademicCalenderRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}
			Optional<AcademicCalenderActivity> AcademicCalenderActivity = super.academiccalenderactivity
					.findByIdAndExIsDeleteAndExIsActive(request.getCalenderActivity(), false, true);
			if (!AcademicCalenderActivity.isPresent()) {
				info.put("status", "2");
				info.put("message", "AcademicCalenderActivity not present");
				return info;
			}

			List<AcademicCalender> tasks = super.academicCalender.findByIdAndExIsDelete(request.getId(), false);
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "AcademicCalender Id not created");
				return info;
			} else {

				Date date = new Date();
				int retval = super.academicCalender.updateAcademicCalenderRecord(request.getExProposedDates(),
						request.getCalenderActivity(), request.getExIsActive(), request.getExIsEven(), date,
						request.getId());
				if (retval == 1) {
					info.put("status", "1");
					info.put("message", "AcademicCalender updated successfully");
					return info;
				} else {
					info.put("status", "2");
					info.put("message", "AcademicCalender id not present");
					return info;
				}

			}
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> deleteacademicClender(AcademicCalenderRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<AcademicCalender> task = super.academicCalender.findById(request.getId());
			if (task.isPresent()) {
				if (task.get().getExIsDelete()) {
					info.put("status", "2");
					info.put("message", "AcademicCalender already deleted");
					return info;
				}
				Boolean exIsDelete = true;
				Boolean is_active = false;
				int result = super.academicCalender.deleteAcademicCalender(exIsDelete, is_active, task.get().getId());
				if (result == 0) {
					info.put("status", "2");
					info.put("message", "Something went wrong");
					return info;
				}
				info.put("status", "1");
				info.put("message", "AcademicCalender deleted successfully");
				return info;
			}
			info.put("status", "2");
			info.put("message", "AcademicCalender id not present");
			return info;
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> validateSemesterConfiguration(SemesterRegistrationConfigurationRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Optional<Colleges> Colleges = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),
					false, true);
			if (!Colleges.isPresent() || !Colleges.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}

			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent() || !academic.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}

			Optional<Programmes> Programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Programmes.isPresent() || !Programmes.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}

			Optional<ProgrammeYear> programmeYear = super.programmeYear
					.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
			if (!programmeYear.isPresent() || !programmeYear.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!sem.isPresent() || !sem.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Semster not present");
				return info;
			}

			Optional<ExamAnnouncement> examAnnouncement = super.examAnnouncement
					.findByExIsDeleteAndExIsActiveAndId(false, true, request.getExamAnnouncement());
			if (!examAnnouncement.isPresent() || !examAnnouncement.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "examAnnouncement not present");
				return info;
			}

			List<RegistrationType> registration = super.registrationType
					.findByIdAndExIsDelete(request.getRegistrationType(), false);
			if (registration.size() <= 0) {
				info.put("status", "2");
				info.put("message", "RegistrationType not present");
				return info;
			}

			if (sem.get().getExIdentifier() == null || sem.get().getExIdentifier().equals("null")) {
				info.put("status", "2");
				info.put("message", "Semster  Identifier missing");
				return info;
			}
			Boolean iseven = commonHelper.getEvenorOddsem(sem.get().getExIdentifier());

			Date date = new Date();
			List<SemesterRegistrationConfiguration> task = super.semesterRegistrationConfiguration
					.findByExIsDeleteAndExIsActiveAndProgrammesIdAndCollegesIdAndDegreeIdAndAcademicYearIdAndProgrammeYearIdAndSemesterIdAndRegistrationIdAndExamAnnouncementIdAndDepartmentIdAndBatchId(
							false, true, request.getProgrammes(), request.getColleges(), request.getDegree(),
							request.getAcademicYear(), request.getProgrammeYear(), request.getSemester(),
							request.getRegistrationType(), request.getExamAnnouncement(), request.getDepartment() , request.getBatch());
			if (task.size() > 0) {
				// if registration start date is grater than or equals current date than
				// registration started
				if (!date.after(task.get(0).getExStartDate())) {
					info.put("status", "0");
					info.put("message", "Registraion not started");
					return info;
				}
				if (!date.before(task.get(0).getExExtendDate())) {
					info.put("status", "3");
					info.put("message", "Registraion closed");
					return info;
				}
				System.out.println("passing parameters");
			
				if (date.after(task.get(0).getExStartDate()) && date.before(task.get(0).getExExtendDate())) {
					info.put("status", "1");
					info.put("message", "Registraion is Open");
					return info;
				}
				if (date.after(task.get(0).getExEndDate()) && date.before(task.get(0).getExExtendDate())) {
					info.put("status", "4");
					info.put("message", "Late Registraion is open");
					return info;
				}

				else {
					info.put("status", "3");
					info.put("message", "Registraion closed");
					return info;
				}
			} else {
				info.put("status", "2");
				info.put("message", "No records found");
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> createsemesterRegistration(SemesterRegistrationRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {

			if (request.getCourses().size() <= 0) {
				info.put("status", "2");
				info.put("message", "please select course to proceed further");
				return info;
			}
			Optional<Colleges> Colleges = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),
					false, true);
			if (!Colleges.isPresent() || !Colleges.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}

			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent() || !academic.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}

			Optional<ProgrammeYear> programmeYear = super.programmeYear
					.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
			if (!programmeYear.isPresent() || !programmeYear.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!sem.isPresent() || !sem.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Semster not present");
				return info;
			}

			Optional<ExamAnnouncement> examAnnouncement = super.examAnnouncement
					.findByIdAndExIsDeleteAndExIsActiveAndSemesterId(request.getExamAnnouncement(), false, true,
							request.getSemester());
			if (!examAnnouncement.isPresent()) {
				info.put("status", "2");
				info.put("message", "Please select " + sem.get().getExName() + " semester examination");
				return info;
			}
			Optional<Studentadmission> studentadmission = super.studentadmission
					.findByExIsDeleteAndExIsActiveAndId(false, true, request.getStudent());
			if (!studentadmission.isPresent()) {
				info.put("status", "2");
				info.put("message", "student not present");
				return info;
			}

			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department not present");
				return info;
			}
			List<RegistrationType> registration = super.registrationType
					.findByIdAndExIsDeleteAndExIsActive(request.getRegistrationType(), false, true);
			if (registration.size() <= 0) {
				info.put("status", "2");
				info.put("message", "RegistrationType not present");
				return info;
			}

			Optional<Programmes> program = super.programmes.findByIdAndExIsDeleteAndExIsActive(request.getProgrammes(),
					false, true);
			if (!program.isPresent()) {
				info.put("status", "2");
				info.put("message", "programmes not present");
				return info;
			}

			Stream stream = null;
			if (request.getStream() == null || request.getStream().equals("")) {
				stream = null;
			} else {
				Optional<Stream> res = super.stream.findByIdAndExIsDeleteAndExIsActive(request.getStream(), false,
						true);
				if (!res.isPresent()) {
					info.put("status", "2");
					info.put("message", "Stream id not present");
					return info;
				}
				stream = res.get();
			}

			Date date = new Date();
			List<SemesterRegistrationConfiguration> task = super.semesterRegistrationConfiguration
					.findByExIsDeleteAndExIsActiveAndProgrammesIdAndCollegesIdAndDegreeIdAndAcademicYearIdAndProgrammeYearIdAndSemesterIdAndRegistrationIdAndDepartmentIdAndBatchId(
							false, true, request.getProgrammes(), request.getColleges(), request.getDegree(),
							request.getAcademicYear(), request.getProgrammeYear(), request.getSemester(),
							request.getRegistrationType(), request.getDepartment() ,studentadmission.get().getBatch().getId());
			if (task.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Registraion is Not open");
				return info;
			}
			Integer totalnotcomplsary = task.get(0).getNotCompulsory();
			Integer complsary = task.get(0).getCompulsory();
			if (totalnotcomplsary == null || complsary == null) {
				info.put("status", "2");
				info.put("message", "please contact examination cell");
				return info;
			}

			int totcoplsy = 0;
			int totnotcplsy = 0;

			List<Courses> courses = new ArrayList<Courses>();
			for (int i = 0; i < request.getCourses().size(); i++) {
				Long number = request.getCourses().get(i);
				Long col = new Long(number);
				Optional<Courses> Courseres = super.courses
						.findByCollegesIdAndDegreeIdAndProgrammesIdAndDepartmentIdAndIdAndExIsDeleteAndExIsActive(
								request.getColleges(), request.getDegree(), request.getProgrammes(),
								request.getDepartment(), col, false, true);
				if (!Courseres.isPresent()) {
					info.put("status", "2");
					info.put("message", "Selected Courseres not present for particular department");
					return info;
				}
				if (Courseres.get().getExIscompulsory() == null || Courseres.get().getExIscompulsory() == false) {
					totnotcplsy = totnotcplsy + 1;
				} else {
					totcoplsy = totcoplsy + 1;
				}

				courses.add(Courseres.get());
			}
			boolean flag = true;
			if(request.getSemester() == 1 && request.getProgrammes() == 1) {
				flag = false;				
			}
								
			if (totnotcplsy != totalnotcomplsary) {
				info.put("status", "2");
				info.put("message", "Please select  " + totalnotcomplsary + " non compulsory courses");
				if(flag) {
					return info;
				}
				
			}
			if (totcoplsy != complsary) {
				info.put("status", "2");
				info.put("message", "Please select  " + complsary + " compulsory courses");
				if(flag) {
					return info;
				}
			}

			List<SemesterRegistration> duplicate = super.semesterRegistration
					.findByExIsDeleteAndExIsActiveAndProgrammesIdAndCollegesIdAndDegreeIdAndAcademicYearIdAndProgrammeYearIdAndSemesterIdAndDepartmentIdAndStudentadmissionIdAndExIsRegistration(
							false, true, request.getProgrammes(), request.getColleges(), request.getDegree(),
							request.getAcademicYear(), request.getProgrammeYear(), request.getSemester(),
							request.getDepartment(), request.getStudent(), true);
			if ((duplicate.size() > 0)) {
				if (!duplicate.get(0).getProgrammes().getExIdentifier().equals("MBA")) {
					if (duplicate.size() > 0) {
						info.put("status", "3");
						info.put("message", "SemesterRegistration is completed to payment is pending");
						return info;
					}
				} else

				if (duplicate.size() > 1) {
					info.put("status", "4");
					info.put("message", "SemesterRegistration is completed to payment is pending");
					return info;
				}
			}
			SemesterRegistration data = new SemesterRegistration();
			data.setColleges(Colleges.get());
			data.setDegree(degree.get());
			data.setAcademicYear(academic.get());
			data.setProgrammes(program.get());
			data.setDepartment(department.get());
			data.setStream(stream);
			data.setProgrammeYear(programmeYear.get());
			data.setSemester(sem.get());
			data.setExCreateDate(date);
			data.setExIsActive(true);
			data.setStudentadmission(studentadmission.get());
			data.setExIsRegistration(true);
			data.setExIsDelete(false);
			data.setExIsApproved(false);
			data.setExIsAttendence(false);
			data.setExIsEligible(false);
			data.setExSemesterStatus(false);
			data.setExIsHostelApprove(false);
			data.setExIsLibraryApprove(false);
			data.setExSemesterStatus(false);
			data.setExIsComputerlabApprove(false);
			data.setExIsDeanApprove(false);
			data.setExIsExaminationApprove(false);
			data.setExIsItDepartmentApprove(false);
			data.setExIsMentorApprove(false);
			data.setExIsMentorApprove(false);
			data.setExIsPaid(false);
			data.setRegistrationType(registration.get(0));
			data.setExIsAccountsApprove(false);
			semesterRegistration.save(data);

			Boolean result = savecoursesRegistration(data, registration, courses, examAnnouncement);
			// update semester status
			if (request.getSemester() != 1) {
				semesterRegistration.updateStudentStatus(request.getSemester() - 1, request.getStudent());
			}

			info.put("status", "1");
			info.put("message", "SemesterRegistration completed Succesfully");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	private Boolean savecoursesRegistration(SemesterRegistration data2, List<RegistrationType> registration,
			List<Courses> courses, Optional<ExamAnnouncement> examAnnouncement) {
		try {// T
			Date date = new Date();
			int i = 0;
			List dataList = new LinkedList();
			for (i = 0; i < courses.size(); i++) {
				CoursesRegistration data = new CoursesRegistration();
				data.setColleges(data2.getColleges());
				data.setDegree(data2.getDegree());
				data.setAcademicYear(data2.getAcademicYear());
				data.setProgrammes(data2.getProgrammes());
				data.setDepartment(data2.getDepartment());
				data.setStream(data2.getStream());
				data.setProgrammeYear(data2.getProgrammeYear());
				data.setSemester(data2.getSemester());
				data.setExCreateDate(date);
				data.setExIsActive(true);
				data.setStudentadmission(data2.getStudentadmission());
				data.setExIsRegistration(true);
				data.setExIsDelete(false);
				data.setExIsApproved(false);
				data.setExIsAttendence(false);
				data.setExIsEligible(false);
				data.setExSemesterStatus(false);
				data.setExSemesterStatus(false);
				data.setRegistration(registration.get(0));
				data.setCourses(courses.get(i));
				data.setExamAnnouncement(examAnnouncement.get());
				dataList.add(data);

			}
			coursesRegistration.saveAll(dataList);
			return true;
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());

			return false;
		}
	}

	@Override
	public Map<String, Object> unRegistrationStudentList(SemesterRegistrationRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Optional<Colleges> Colleges = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),
					false, true);
			if (!Colleges.isPresent() || !Colleges.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}

			Optional<Programmes> Programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Programmes.isPresent() || !Programmes.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}

			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department not present");
				return info;
			}

			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent() || !academic.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}

			Optional<ProgrammeYear> programmeYear = super.programmeYear
					.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
			if (!programmeYear.isPresent() || !programmeYear.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!sem.isPresent() || !sem.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Semster not present");
				return info;
			}

			Stream stream = null;
			if (request.getStream() == null || request.getStream().equals("")) {
				stream = null;
			} else {
				Optional<Stream> res = super.stream.findByIdAndExIsDeleteAndExIsActive(request.getStream(), false,
						true);
				if (!res.isPresent()) {
					info.put("status", "2");
					info.put("message", "Stream id not present");
					return info;
				}
				stream = res.get();
			}
			List<SemesterRegistrationConfiguration> task = super.semesterRegistrationConfiguration
					.findByExIsDeleteAndExIsActiveAndProgrammesIdAndCollegesIdAndDegreeIdAndAcademicYearIdAndProgrammeYearIdAndSemesterIdAndDepartmentIdAndBatchId(
							false, true, request.getProgrammes(), request.getColleges(), request.getDegree(),
							request.getAcademicYear(), request.getProgrammeYear(), request.getSemester(),
							request.getDepartment(),request.getBatch());
			if (task.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Registraioon not open");
				return info;
			}

			List dataList = new LinkedList();
			// List<Studentpersonal> res
			// =super.studentpersonal.findByStudentadmissionExIsActiveAndStudentadmissionExIsDeleteAndStudentadmissionExIsApproveAndStudentadmissionCollegesIdAndStudentadmissionDegreeIdAndStudentadmissionProgrammesIdAndStudentadmissionDepartmentId(true,false,0,request.getColleges(),request.getDegree(),request.getDepartment());

			List<Studentpersonal> res = super.studentpersonal
					.findByStudentadmissionExIsActiveAndStudentadmissionExIsDeleteAndStudentadmissionExIsApproveAndStudentadmissionCollegesIdAndStudentadmissionDegreeIdAndStudentadmissionProgrammesIdAndStudentadmissionDepartmentId(
							true, false, 0, request.getColleges(), request.getDegree(), request.getProgrammes(),
							request.getDepartment());
			for (Studentpersonal e : res) {
				List stmtype = new LinkedList();
				List stmTypeId = new LinkedList();
				Map<Object, Object> Studentadmissiondata = new HashMap<Object, Object>();
				Studentadmissiondata.put("id", e.getId());
				Studentadmissiondata.put("exIsActive", e.getStudentadmission().getExIsActive());

				Studentadmissiondata.put("exBatch", e.getStudentadmission().getBatch().getExName());
				Studentadmissiondata.put("exBatchId", e.getStudentadmission().getBatch().getId());
				Studentadmissiondata.put("exProgramType", e.getStudentadmission().getProgramtype().getExName());
				Studentadmissiondata.put("exProgramTypeId", e.getStudentadmission().getProgramtype().getId());

				Studentadmissiondata.put("exName", e.getStudentadmission().getExName());
				Studentadmissiondata.put("exNameInHindi", e.getStudentadmission().getExNameInHindi());
				Studentadmissiondata.put("exRollNo", e.getStudentadmission().getExRollNo());
				Studentadmissiondata.put("exEnrollementNo", e.getStudentadmission().getExEnrollementNo());

				Studentadmissiondata.put("exContactDetails", e.getExContactDetails());
				Studentadmissiondata.put("exEmailId", e.getExEmailId());
				Studentadmissiondata.put("exParentContactDetails", e.getExParentContactDetails());
				Studentadmissiondata.put("exPermanentAddress", e.getExPermanentAddress());
				Studentadmissiondata.put("exPresentAddress", e.getExPresentAddress());

				for (int i = 0; i < e.getStudentadmission().getStream().size(); i++) {
					stmtype.add(e.getStudentadmission().getStream().get(i).getExName());
					stmTypeId.add(e.getStudentadmission().getStream().get(i).getId());
				}

				Studentadmissiondata.put("stream", stmtype);
				Studentadmissiondata.put("streamId", stmTypeId);
				dataList.add(Studentadmissiondata);
			}
			info.put("status", "1");
			info.put("message", "success");
			info.put("programmeYear", programmeYear.get().getExName());
			info.put("programmeYearId", programmeYear.get().getId());
			info.put("semester", sem.get().getExName());
			info.put("semesterId", sem.get().getId());
			info.put("academicYear", academic.get().getExYear());
			info.put("academicYearId", academic.get().getId());
			info.put("exCollege", Colleges.get().getExName());
			info.put("exCollegeId", Colleges.get().getId());
			info.put("exDegree", degree.get().getExName());
			info.put("exDegreeId", degree.get().getId());
			info.put("exProgrammes", Programmes.get().getExName());
			info.put("exProgrammesId", Programmes.get().getId());
			info.put("exDepartmentId", department.get().getId());
			info.put("exDepartment", department.get().getExName());
			info.put("details", dataList);
			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> lateRegStudentApprove(LateRegStudentApprove request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Optional<Colleges> Colleges = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),
					false, true);
			if (!Colleges.isPresent() || !Colleges.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}

			Optional<Programmes> Programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Programmes.isPresent() || !Programmes.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}

			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department not present");
				return info;
			}

			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent() || !academic.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}

			Optional<ProgrammeYear> programmeYear = super.programmeYear
					.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
			if (!programmeYear.isPresent() || !programmeYear.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!sem.isPresent() || !sem.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Semster not present");
				return info;
			}

			if (request.getType().equalsIgnoreCase("hod")) {
				if (request.getExIsApproveType() == 0) {
					for (int i = 0; i < request.getStudent().size(); i++) {
						Long number = request.getStudent().get(i);
						Long col = new Long(number);
						List<LateRegistration> res = super.lateRegistration
								.findByExIsDeleteAndExIsActiveAndProgrammesIdAndCollegesIdAndDegreeIdAndAcademicYearIdAndProgrammeYearIdAndSemesterIdAndDepartmentIdAndStudentadmissionIdAndExIsApproveType(
										false, true, request.getProgrammes(), request.getColleges(),
										request.getDegree(), request.getAcademicYear(), request.getProgrammeYear(),
										request.getSemester(), request.getDepartment(), col,
										request.getExIsApproveType());
						if (res.size() <= 0) {
							info.put("status", "2");
							info.put("message", "student not requested for approval");
							return info;
						}
						int hod = request.getExIsApprove().intValue();
						int mentor = 1;
						System.out.println(">>>>>>>>>>hod>>>>>>>>>" + request.getExIsApprove());

						int val1ue = super.lateRegistration.updatedrecordHod(false, true, hod, mentor,
								request.getColleges(), request.getDegree(), request.getProgrammes(),
								request.getAcademicYear(), request.getProgrammeYear(), request.getSemester(),
								request.getDepartment(), col, request.getExIsApprove());

						System.out.println(">>>>>>>>>>>>>>>>>>>>" + val1ue);
						int student = super.studentadmission.updatedstudent(false, true, hod, request.getColleges(),
								request.getDegree(), request.getProgrammes(), request.getDepartment(), col);

						info.put("status", "1");
						info.put("message", request.getExIsApprove() == 1 ? "student are approved  successfully by HOD"
								: "student are rejected for approval by HOD");
						return info;
					}
				}
				if (request.getExIsApproveType() == 1) {
					for (int i = 0; i < request.getStudent().size(); i++) {
						Long number = request.getStudent().get(i);
						Long col = new Long(number);
						List<LateRegistration> res = super.lateRegistration
								.findByExIsDeleteAndExIsActiveAndProgrammesIdAndCollegesIdAndDegreeIdAndAcademicYearIdAndProgrammeYearIdAndSemesterIdAndDepartmentIdAndStudentadmissionIdAndExIsApproveType(
										false, true, request.getProgrammes(), request.getColleges(),
										request.getDegree(), request.getAcademicYear(), request.getProgrammeYear(),
										request.getSemester(), request.getDepartment(), col,
										request.getExIsApproveType());
						if (res.size() <= 0) {
							info.put("status", "2");
							info.put("message", "student not requested for approval");
							return info;
						}
						List<Long> cours = new ArrayList<>();
						for (LateRegistration e : res) {
							cours.add(e.getCourses().getId());
						}
						int hod = request.getExIsApprove();
						int mentor = 1;
						int eligible = 1;
						int val1ue = super.lateRegistration.updatedrecordHod(false, true, hod, mentor,
								request.getColleges(), request.getDegree(), request.getProgrammes(),
								request.getAcademicYear(), request.getProgrammeYear(), request.getSemester(),
								request.getDepartment(), col, request.getExIsApproveType());
						int course = super.coursesRegistration.updatecourses(false, true, eligible,
								request.getColleges(), request.getDegree(), request.getProgrammes(),
								request.getDepartment(), col, request.getProgrammeYear(), request.getSemester(), cours);
						info.put("status", "1");
						info.put("message", request.getExIsApprove() == 1 ? "student are approved  successfully by HOD"
								: "student are rejected for approval by HOD");
						return info;
					}

				}

			}

			if (request.getType().equalsIgnoreCase("dean")) {
				if (request.getExIsApproveType() == 0) {
					for (int i = 0; i < request.getStudent().size(); i++) {
						Long number = request.getStudent().get(i);
						Long col = new Long(number);
						List<LateRegistration> res = super.lateRegistration
								.findByExIsDeleteAndExIsActiveAndProgrammesIdAndCollegesIdAndDegreeIdAndAcademicYearIdAndProgrammeYearIdAndSemesterIdAndDepartmentIdAndStudentadmissionIdAndExIsApproveType(
										false, true, request.getProgrammes(), request.getColleges(),
										request.getDegree(), request.getAcademicYear(), request.getProgrammeYear(),
										request.getSemester(), request.getDepartment(), col,
										request.getExIsApproveType());
						if (res.size() <= 0) {
							info.put("status", "2");
							info.put("message", "student not requested for approval");
							return info;
						}
						int dean = request.getExIsApprove();
						int mentor = 1;
						int value = super.lateRegistration.updatedrecord(false, true, dean, mentor,
								request.getColleges(), request.getDegree(), request.getProgrammes(),
								request.getAcademicYear(), request.getProgrammeYear(), request.getSemester(),
								request.getDepartment(), col, request.getExIsApproveType());
						int student = super.studentadmission.updatedstudent(false, true, dean, request.getColleges(),
								request.getDegree(), request.getProgrammes(), request.getDepartment(), col);

						info.put("status", "1");
						info.put("message", request.getExIsApprove() == 1 ? "student are approved by Dean successfully "
								: "student are rejected for approval by Dean");
						return info;
					}
				}

				if (request.getExIsApproveType() == 1) {
					for (int i = 0; i < request.getStudent().size(); i++) {
						Long number = request.getStudent().get(i);
						Long col = new Long(number);
						List<LateRegistration> res = super.lateRegistration
								.findByExIsDeleteAndExIsActiveAndProgrammesIdAndCollegesIdAndDegreeIdAndAcademicYearIdAndProgrammeYearIdAndSemesterIdAndDepartmentIdAndStudentadmissionIdAndExIsApproveType(
										false, true, request.getProgrammes(), request.getColleges(),
										request.getDegree(), request.getAcademicYear(), request.getProgrammeYear(),
										request.getSemester(), request.getDepartment(), col,
										request.getExIsApproveType());
						if (res.size() <= 0) {
							info.put("status", "2");
							info.put("message", "student not requested for approval");
							return info;
						}

						List<Long> cours = new ArrayList<>();
						for (LateRegistration e : res) {
							cours.add(e.getCourses().getId());
						}
						int dean = request.getExIsApprove();
						int mentor = 1;
						int eligible = 1;
						int value = super.lateRegistration.updatedrecord(false, true, dean, mentor,
								request.getColleges(), request.getDegree(), request.getProgrammes(),
								request.getAcademicYear(), request.getProgrammeYear(), request.getSemester(),
								request.getDepartment(), col, request.getExIsApproveType());
						int course = super.coursesRegistration.updatecourses(false, true, eligible,
								request.getColleges(), request.getDegree(), request.getProgrammes(),
								request.getDepartment(), col, request.getProgrammeYear(), request.getSemester(), cours);

						info.put("status", "1");
						info.put("message", request.getExIsApprove() == 1 ? "student are approved by Dean successfully "
								: "student are rejected for approval by Dean");
						return info;

					}

				}

			}
			info.put("status", "2");
			info.put("message", "type not found");
			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> lateRegRequest(LateRegistrationRequest request) {
		// TODO Auto-generated method stub
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Optional<Colleges> Colleges = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),
					false, true);
			if (!Colleges.isPresent() || !Colleges.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}

			Optional<Programmes> Programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Programmes.isPresent() || !Programmes.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}

			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department not present");
				return info;
			}

			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent() || !academic.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}

			Optional<ProgrammeYear> programmeYear = super.programmeYear
					.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
			if (!programmeYear.isPresent() || !programmeYear.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!sem.isPresent() || !sem.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Semster not present");
				return info;
			}
			Optional<Studentadmission> studeent = super.studentadmission.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getStudent());
			if (!studeent.isPresent()) {
				info.put("status", "2");
				info.put("message", " student not present");
				return info;
			}
			if (request.getExdocument() == null || request.getExdocument().isEmpty()) {
				info.put("status", "2");
				info.put("message", "please select document zip file");
				return info;

			}

			int isMentor = 2, exIsHod = 0, exIsDean = 0;

			if (request.getExIsApproveType() == 0) {
				List<LateRegistration> dupliaction = super.lateRegistration
						.findByExIsDeleteAndExIsActiveAndProgrammesIdAndCollegesIdAndDegreeIdAndAcademicYearIdAndProgrammeYearIdAndSemesterIdAndDepartmentIdAndStudentadmissionIdAndExIsApproveType(
								false, true, request.getProgrammes(), request.getColleges(), request.getDegree(),
								request.getAcademicYear(), request.getProgrammeYear(), request.getSemester(),
								request.getDepartment(), request.getStudent(), request.getExIsApproveType());
				if (dupliaction.size() > 0) {
					info.put("status", "2");
					info.put("message", "LateRegistration request accepted already wait for the approval");
					return info;
				}
				if (sem.get().getExIdentifier() == 1 && programmeYear.get().getExIdentifier() == 1) {
					isMentor = 1;
					exIsHod = 0;
					exIsDean = 2;

				}
			}

			Courses setCoursesvalue = null;
			CoursesType getcoursesType = null;

			if (request.getExIsApproveType() == 1) {
				if (request.getCourses() == null) {

					info.put("status", "2");
					info.put("message", "please select the courses");
					return info;
				}

				Optional<Courses> Courses = super.courses.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getCourses());
				if (!Courses.isPresent() || !Courses.get().getExIsActive()) {

					if (!Courses.isPresent() || !Courses.get().getExIsActive()) {

						info.put("status", "2");
						info.put("message", "Courses not present");
						return info;

					}

					Optional<CoursesType> coursesType = super.coursestype.findByExIsDeleteAndExIsActiveAndId(false,
							true, request.getCoursesType());
					if (!coursesType.isPresent() || !coursesType.get().getExIsActive()) {
						info.put("status", "2");
						info.put("message", "coursesType not present");
						return info;
					}

					List<LateRegistration> dupliaction = super.lateRegistration
							.findByExIsDeleteAndExIsActiveAndProgrammesIdAndCollegesIdAndDegreeIdAndAcademicYearIdAndProgrammeYearIdAndSemesterIdAndDepartmentIdAndStudentadmissionIdAndExIsApproveTypeAndCoursesId(
									false, true, request.getProgrammes(), request.getColleges(), request.getDegree(),
									request.getAcademicYear(), request.getProgrammeYear(), request.getSemester(),
									request.getDepartment(), request.getStudent(), request.getExIsApproveType(),
									Courses.get().getId());
					if (dupliaction.size() > 0) {
						info.put("status", "2");
						info.put("message", "Shortage of Attendence  request accepted already wait for the approval");
						return info;
					}
					setCoursesvalue = Courses.get();
					getcoursesType = coursesType.get();
					exIsDean = 0;

				}
				List<LateRegistration> dupliaction = super.lateRegistration
						.findByExIsDeleteAndExIsActiveAndProgrammesIdAndCollegesIdAndDegreeIdAndAcademicYearIdAndProgrammeYearIdAndSemesterIdAndDepartmentIdAndStudentadmissionIdAndExIsApproveTypeAndCoursesId(
								false, true, request.getProgrammes(), request.getColleges(), request.getDegree(),
								request.getAcademicYear(), request.getProgrammeYear(), request.getSemester(),
								request.getDepartment(), request.getStudent(), request.getExIsApproveType(),
								Courses.get().getId());
				if (dupliaction.size() > 0) {
					info.put("status", "2");
					info.put("message", "Shortage of Attendence  request accepted already wait for the approval");
					return info;
				}
				setCoursesvalue = Courses.get();
				exIsDean = 0;

			}

			String pathValue = request.getExIsApproveType() == 0 ? "LateRegistration" : "ShortageOfAttendence";
			String folder = createFolder(academic.get().getExYear(),
					request.getExIsApproveType() == 0 ? "LateRegistration" : "ShortageOfAttendence",
					studeent.get().getExRollNo());

			Random random = new Random(System.nanoTime() % 100000);
			int randomInt = random.nextInt(1000000000);
			byte[] bytes = request.getExdocument().getBytes();

			System.out.println("?????request.getExdocument().getOriginalFilename()????????????"
					+ request.getExdocument().getOriginalFilename());

			String newfilename = randomInt + "-" + request.getExdocument().getOriginalFilename();
			System.out.println("?????newfilename????????????" + newfilename);

			Path path = Paths.get(folder + newfilename);
			System.out.println("?????????????????" + path);

			Files.write(path, bytes);
			excellog.info("Document Path :" + folder + newfilename);

			File filenew = new File(path.toString());
			if (filenew.exists()) {
				filenew.setExecutable(true, false);
				filenew.setReadable(true, false);
				filenew.setWritable(true, false);
			}
			String DocPath = "/" + academic.get().getExYear() + "/" + pathValue + "/" + studeent.get().getExRollNo()
					+ "/" + request.getExdocument().getOriginalFilename();
			Date date = new Date();

			LateRegistration LateRegistration = new LateRegistration();
			if (request.getMentor() == null || request.getMentor().equals("")) {
				LateRegistration.setMentor(null);
			} else {
				Optional<Mentor> mentor = super.mentor.findByIdAndExIsDeleteAndExIsActive(request.getMentor(), false,
						true);
				if (!mentor.isPresent()) {
					info.put("status", "2");
					info.put("message", "mentor id not present");
					return info;
				}

				LateRegistration.setMentor(mentor.get());
			}

			LateRegistration.setColleges(Colleges.get());
			LateRegistration.setDegree(degree.get());
			LateRegistration.setAcademicYear(academic.get());
			LateRegistration.setProgrammes(Programmes.get());
			LateRegistration.setProgrammeYear(programmeYear.get());
			LateRegistration.setSemester(sem.get());
			LateRegistration.setDepartment(department.get());
			LateRegistration.setStudentadmission(studeent.get());
			LateRegistration.setExIsMentor(isMentor);
			LateRegistration.setExIsHod(exIsHod);
			LateRegistration.setExIsDean(exIsDean);
			LateRegistration.setExRemark(request.getExremark());
			LateRegistration.setExCreateDate(date);
			LateRegistration.setExIsActive(true);
			LateRegistration.setExIsDelete(false);
			LateRegistration.setExIsApproveType(request.getExIsApproveType());
			LateRegistration.setCourses(setCoursesvalue);
			LateRegistration.setCoursesType(getcoursesType);
			LateRegistration.setExDocumentPath(DocPath);
			lateRegistration.save(LateRegistration);
			info.put("status", "1");
			info.put("message", request.getExIsApproveType() == 0 ? "Late registration request is accepted successfully"
					: " Shortage of Attendence request is accepted successfully");
			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	private String createFolder(String exYear, String string, String exRollNo) {
		try {
			String UPLOADED_FOLDER = super.commonHelper.getSettingValue("DOCUMENT_PATH");

			File file2 = new File(UPLOADED_FOLDER + "/" + exYear);
			if (file2.mkdir()) {
				file2.setExecutable(true, false);
				file2.setReadable(true, false);
				file2.setWritable(true, false);

			}
			String academic = file2.getPath();
			File file3 = new File(academic + "/" + string);
			if (file3.mkdir()) {
				file3.setExecutable(true, false);
				file3.setReadable(true, false);
				file3.setWritable(true, false);
			}

			String collegename = file3.getPath();
			File file4 = new File(collegename + "/" + exRollNo);
			if (file4.mkdir()) {
				file4.setExecutable(true, false);
				file4.setReadable(true, false);
				file4.setWritable(true, false);
			}

			return UPLOADED_FOLDER + "/" + exYear + "/" + string + "/" + exRollNo + "/";
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
		}
		return "NA";
	}

	@Override
	public Map<String, Object> getlateRegRequestForMentor(LateRegListApproval request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Optional<Colleges> Colleges = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),
					false, true);
			if (!Colleges.isPresent() || !Colleges.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}

			Optional<Programmes> Programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Programmes.isPresent() || !Programmes.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}

			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department not present");
				return info;
			}

			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent() || !academic.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}

			Optional<ProgrammeYear> programmeYear = super.programmeYear
					.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
			if (!programmeYear.isPresent() || !programmeYear.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!sem.isPresent() || !sem.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Semster not present");
				return info;
			}

			/*
			 * List<SemesterRegistrationConfiguration> task
			 * =super.semesterRegistrationConfiguration.
			 * findByExIsDeleteAndExIsActiveAndProgrammesIdAndCollegesIdAndDegreeIdAndAcademicYearIdAndProgrammeYearIdAndSemesterId
			 * (false, true, request.getProgrammes(),
			 * request.getColleges(),request.getDegree(),request.getAcademicYear(),request.
			 * getProgrammeYear(),request.getSemester()); if(task.size() <=0) {
			 * info.put("status", "2"); info.put("message", "Registraioon not open"); return
			 * info; }
			 */
			String localurl = commonHelper.getSettingValue("SERVER_IP");

			List dataList = new LinkedList();

			// List<Studentpersonal> res
			// =super.studentpersonal.findByStudentadmissionExIsActiveAndStudentadmissionExIsDeleteAndStudentadmissionExIsApproveAndStudentadmissionCollegesIdAndStudentadmissionDegreeIdAndStudentadmissionProgrammesIdAndStudentadmissionDepartmentId(true,false,0,request.getColleges(),request.getDegree(),request.getDepartment());
			if (request.getType().equalsIgnoreCase("Mentor")) {

				Optional<Mentor> mentor = super.mentor.findByIdAndExIsDeleteAndExIsActive(request.getMentor(), false,
						true);
				if (!mentor.isPresent()) {
					info.put("status", "2");
					info.put("message", "mentor id not present");
					return info;
				}

				List<LateRegistration> dupliaction = super.lateRegistration
						.findByExIsDeleteAndExIsActiveAndProgrammesIdAndCollegesIdAndDegreeIdAndAcademicYearIdAndProgrammeYearIdAndSemesterIdAndDepartmentIdAndExIsMentorAndExIsApproveTypeAndMentorId(
								false, true, request.getProgrammes(), request.getColleges(), request.getDegree(),
								request.getAcademicYear(), request.getProgrammeYear(), request.getSemester(),
								request.getDepartment(), 2, request.getExIsApproveType(), request.getMentor());
				if (dupliaction.size() <= 0) {
					info.put("status", "2");
					info.put("message", "No record found for mentor approval");
					return info;
				}
				for (LateRegistration e : dupliaction) {
					Map<Object, Object> Studentadmissiondata = new HashMap<Object, Object>();
					Studentadmissiondata.put("id", e.getId());
					Studentadmissiondata.put("exIsActive", e.getStudentadmission().getExIsActive());
					Studentadmissiondata.put("exCollege", e.getStudentadmission().getColleges().getExName());
					Studentadmissiondata.put("exCollegeId", e.getStudentadmission().getColleges().getId());
					Studentadmissiondata.put("exDegree", e.getStudentadmission().getDegree().getExName());
					Studentadmissiondata.put("exDegreeId", e.getStudentadmission().getDegree().getId());
					Studentadmissiondata.put("exProgrammes", e.getStudentadmission().getProgrammes().getExName());
					Studentadmissiondata.put("exProgrammesId", e.getStudentadmission().getProgrammes().getId());
					Studentadmissiondata.put("exDepartmentId", e.getStudentadmission().getDepartment().getId());
					Studentadmissiondata.put("exDepartment", e.getStudentadmission().getDepartment().getExName());
					Studentadmissiondata.put("exBatch", e.getStudentadmission().getBatch().getExName());
					Studentadmissiondata.put("exBatchId", e.getStudentadmission().getBatch().getId());
					Studentadmissiondata.put("exProgramType", e.getStudentadmission().getProgramtype().getExName());
					Studentadmissiondata.put("exProgramTypeId", e.getStudentadmission().getProgramtype().getId());
					Studentadmissiondata.put("streamId", e.getStudentadmission().getStream() == null ? "NA"
							: e.getStudentadmission().getStream().get(0).getId());
					Studentadmissiondata.put("stream", e.getStudentadmission().getStream() == null ? "NA"
							: e.getStudentadmission().getStream().get(0).getExName());
					Studentadmissiondata.put("exName", e.getStudentadmission().getExName());
					Studentadmissiondata.put("exNameInHindi", e.getStudentadmission().getExNameInHindi());
					Studentadmissiondata.put("exRollNo", e.getStudentadmission().getExRollNo());
					Studentadmissiondata.put("exRemark", e.getExRemark());
					Studentadmissiondata.put("exDocumentPath:",
							e.getExDocumentPath() == null ? "NA" : localurl + e.getExDocumentPath());

					Studentadmissiondata.put("programmeYear", e.getProgrammeYear().getExName());
					Studentadmissiondata.put("programmeYearId", e.getProgrammeYear().getId());
					Studentadmissiondata.put("semester", e.getSemester().getExName());
					Studentadmissiondata.put("semesterId", e.getSemester().getId());
					Studentadmissiondata.put("academicYear", e.getAcademicYear().getExYear());
					Studentadmissiondata.put("academicYearId", e.getAcademicYear().getId());

					Studentadmissiondata.put("mentor", e.getMentor().getExName());
					Studentadmissiondata.put("mentorId", e.getMentor().getId());

					// Studentadmissiondata.put("exContactDetails", e.getExContactDetails());
					// Studentadmissiondata.put("exEmailId", e.getExEmailId());
					// Studentadmissiondata.put("exParentContactDetails",
					// e.getExParentContactDetails());
					// Studentadmissiondata.put("exPermanentAddress", e.getExPermanentAddress());
					// Studentadmissiondata.put("exPresentAddress", e.getExPresentAddress());
					dataList.add(Studentadmissiondata);
				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}

			if (request.getType().equalsIgnoreCase("hod")) {
				int hodvalue = 2;
				List<LateRegistration> dupliaction = super.lateRegistration
						.findByExIsDeleteAndExIsActiveAndProgrammesIdAndCollegesIdAndDegreeIdAndAcademicYearIdAndProgrammeYearIdAndSemesterIdAndDepartmentIdAndExIsHodAndExIsApproveType(
								false, true, request.getProgrammes(), request.getColleges(), request.getDegree(),
								request.getAcademicYear(), request.getProgrammeYear(), request.getSemester(),
								request.getDepartment(), hodvalue, request.getExIsApproveType());
				if (dupliaction.size() <= 0) {
					info.put("status", "2");
					info.put("message", "No record found for hod approval");
					return info;
				}

				for (LateRegistration e : dupliaction) {
					Map<Object, Object> Studentadmissiondata = new HashMap<Object, Object>();
					Studentadmissiondata.put("id", e.getId());
					Studentadmissiondata.put("exIsActive", e.getStudentadmission().getExIsActive());
					Studentadmissiondata.put("exCollege", e.getStudentadmission().getColleges().getExName());
					Studentadmissiondata.put("exCollegeId", e.getStudentadmission().getColleges().getId());
					Studentadmissiondata.put("exDegree", e.getStudentadmission().getDegree().getExName());
					Studentadmissiondata.put("exDegreeId", e.getStudentadmission().getDegree().getId());
					Studentadmissiondata.put("exProgrammes", e.getStudentadmission().getProgrammes().getExName());
					Studentadmissiondata.put("exProgrammesId", e.getStudentadmission().getProgrammes().getId());
					Studentadmissiondata.put("exDepartmentId", e.getStudentadmission().getDepartment().getId());
					Studentadmissiondata.put("exDepartment", e.getStudentadmission().getDepartment().getExName());
					Studentadmissiondata.put("exBatch", e.getStudentadmission().getBatch().getExName());
					Studentadmissiondata.put("exBatchId", e.getStudentadmission().getBatch().getId());
					Studentadmissiondata.put("exProgramType", e.getStudentadmission().getProgramtype().getExName());
					Studentadmissiondata.put("exProgramTypeId", e.getStudentadmission().getProgramtype().getId());
					Studentadmissiondata.put("streamId", e.getStudentadmission().getStream() == null ? "NA"
							: e.getStudentadmission().getStream().get(0).getId());
					Studentadmissiondata.put("stream", e.getStudentadmission().getStream() == null ? "NA"
							: e.getStudentadmission().getStream().get(0).getExName());
					Studentadmissiondata.put("exName", e.getStudentadmission().getExName());
					Studentadmissiondata.put("exNameInHindi", e.getStudentadmission().getExNameInHindi());
					Studentadmissiondata.put("exRollNo", e.getStudentadmission().getExRollNo());
					Studentadmissiondata.put("exRemark", e.getExRemark());
					Studentadmissiondata.put("programmeYear", e.getProgrammeYear().getExName());
					Studentadmissiondata.put("programmeYearId", e.getProgrammeYear().getId());
					Studentadmissiondata.put("semester", e.getSemester().getExName());
					Studentadmissiondata.put("semesterId", e.getSemester().getId());
					Studentadmissiondata.put("academicYear", e.getAcademicYear().getExYear());
					Studentadmissiondata.put("academicYearId", e.getAcademicYear().getId());
					Studentadmissiondata.put("exDocumentPath:",
							e.getExDocumentPath() == null ? "NA" : localurl + e.getExDocumentPath());

					// Studentadmissiondata.put("exContactDetails", e.getExContactDetails());
					// Studentadmissiondata.put("exEmailId", e.getExEmailId());
					// Studentadmissiondata.put("exParentContactDetails",
					// e.getExParentContactDetails());
					// Studentadmissiondata.put("exPermanentAddress", e.getExPermanentAddress());
					// Studentadmissiondata.put("exPresentAddress", e.getExPresentAddress());
					dataList.add(Studentadmissiondata);
				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}

			if (request.getType().equalsIgnoreCase("dean")) {
				int deanvalue = 2;
				List<LateRegistration> dupliaction = super.lateRegistration
						.findByExIsDeleteAndExIsActiveAndProgrammesIdAndCollegesIdAndDegreeIdAndAcademicYearIdAndProgrammeYearIdAndSemesterIdAndDepartmentIdAndExIsDeanAndExIsApproveType(
								false, true, request.getProgrammes(), request.getColleges(), request.getDegree(),
								request.getAcademicYear(), request.getProgrammeYear(), request.getSemester(),
								request.getDepartment(), deanvalue, request.getExIsApproveType());
				if (dupliaction.size() <= 0) {
					info.put("status", "2");
					info.put("message", "No record found for dean approval");
					return info;
				}

				for (LateRegistration e : dupliaction) {
					Map<Object, Object> Studentadmissiondata = new HashMap<Object, Object>();
					Studentadmissiondata.put("id", e.getId());
					Studentadmissiondata.put("exIsActive", e.getStudentadmission().getExIsActive());
					Studentadmissiondata.put("exCollege", e.getStudentadmission().getColleges().getExName());
					Studentadmissiondata.put("exCollegeId", e.getStudentadmission().getColleges().getId());
					Studentadmissiondata.put("exDegree", e.getStudentadmission().getDegree().getExName());
					Studentadmissiondata.put("exDegreeId", e.getStudentadmission().getDegree().getId());
					Studentadmissiondata.put("exProgrammes", e.getStudentadmission().getProgrammes().getExName());
					Studentadmissiondata.put("exProgrammesId", e.getStudentadmission().getProgrammes().getId());
					Studentadmissiondata.put("exDepartmentId", e.getStudentadmission().getDepartment().getId());
					Studentadmissiondata.put("exDepartment", e.getStudentadmission().getDepartment().getExName());
					Studentadmissiondata.put("exBatch", e.getStudentadmission().getBatch().getExName());
					Studentadmissiondata.put("exBatchId", e.getStudentadmission().getBatch().getId());
					Studentadmissiondata.put("exProgramType", e.getStudentadmission().getProgramtype().getExName());
					Studentadmissiondata.put("exProgramTypeId", e.getStudentadmission().getProgramtype().getId());
					Studentadmissiondata.put("streamId", e.getStudentadmission().getStream() == null ? "NA"
							: e.getStudentadmission().getStream().get(0).getId());
					Studentadmissiondata.put("stream", e.getStudentadmission().getStream() == null ? "NA"
							: e.getStudentadmission().getStream().get(0).getExName());
					Studentadmissiondata.put("exName", e.getStudentadmission().getExName());
					Studentadmissiondata.put("exNameInHindi", e.getStudentadmission().getExNameInHindi());
					Studentadmissiondata.put("exRollNo", e.getStudentadmission().getExRollNo());
					Studentadmissiondata.put("exRemark", e.getExRemark());
					Studentadmissiondata.put("programmeYear", e.getProgrammeYear().getExName());
					Studentadmissiondata.put("programmeYearId", e.getProgrammeYear().getId());
					Studentadmissiondata.put("semester", e.getSemester().getExName());
					Studentadmissiondata.put("semesterId", e.getSemester().getId());
					Studentadmissiondata.put("academicYear", e.getAcademicYear().getExYear());
					Studentadmissiondata.put("academicYearId", e.getAcademicYear().getId());
					Studentadmissiondata.put("exDocumentPath:",
							e.getExDocumentPath() == null ? "NA" : localurl + e.getExDocumentPath());

					// Studentadmissiondata.put("exContactDetails", e.getExContactDetails());
					// Studentadmissiondata.put("exEmailId", e.getExEmailId());
					// Studentadmissiondata.put("exParentContactDetails",
					// e.getExParentContactDetails());
					// Studentadmissiondata.put("exPermanentAddress", e.getExPermanentAddress());
					// Studentadmissiondata.put("exPresentAddress", e.getExPresentAddress());
					dataList.add(Studentadmissiondata);
				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			} else {
				info.put("status", "2");
				info.put("message", "type not found");
				return info;
			}

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> forwardlateRegRequest(ForwardLateRegApproveRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Optional<Colleges> Colleges = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),
					false, true);
			if (!Colleges.isPresent() || !Colleges.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}

			Optional<Programmes> Programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Programmes.isPresent() || !Programmes.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}

			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department not present");
				return info;
			}

			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent() || !academic.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}

			Optional<ProgrammeYear> programmeYear = super.programmeYear
					.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
			if (!programmeYear.isPresent() || !programmeYear.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!sem.isPresent() || !sem.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Semster not present");
				return info;
			}

			System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" + request);

			List dataList = new LinkedList();
			if (request.getType().equalsIgnoreCase("hod")) {
				for (int i = 0; i < request.getStudent().size(); i++) {
					Long number = request.getStudent().get(i);
					Long col = new Long(number);
					List<LateRegistration> res = super.lateRegistration
							.findByExIsDeleteAndExIsActiveAndProgrammesIdAndCollegesIdAndDegreeIdAndAcademicYearIdAndProgrammeYearIdAndSemesterIdAndDepartmentIdAndStudentadmissionId(
									false, true, request.getProgrammes(), request.getColleges(), request.getDegree(),
									request.getAcademicYear(), request.getProgrammeYear(), request.getSemester(),
									request.getDepartment(), col);

					System.out.println(">>>>>>>>>res>>>>>>>>>>>>>>>>>>>>>>>>>>" + res);

					if (res.size() <= 0) {
						info.put("status", "2");
						info.put("message", "student not requested for approval");
						return info;
					}
					int hod = 2;
					int mentor = 1;
					int val1ue = super.lateRegistration.updatedrecordHod(false, true, hod, mentor,
							request.getColleges(), request.getDegree(), request.getProgrammes(),
							request.getAcademicYear(), request.getProgrammeYear(), request.getSemester(),
							request.getDepartment(), col, request.getExIsApproveType());

				}
				info.put("status", "1");
				info.put("message", "request is forwarded to Hod");
				return info;
			}

			if (request.getType().equalsIgnoreCase("dean")) {
				for (int i = 0; i < request.getStudent().size(); i++) {
					Long number = request.getStudent().get(i);
					Long col = new Long(number);
					List<LateRegistration> res = super.lateRegistration
							.findByExIsDeleteAndExIsActiveAndProgrammesIdAndCollegesIdAndDegreeIdAndAcademicYearIdAndProgrammeYearIdAndSemesterIdAndDepartmentIdAndStudentadmissionId(
									false, true, request.getProgrammes(), request.getColleges(), request.getDegree(),
									request.getAcademicYear(), request.getProgrammeYear(), request.getSemester(),
									request.getDepartment(), col);
					if (res.size() <= 0) {
						info.put("status", "2");
						info.put("message", "student not requested for approval");
						return info;
					}
					int dean = 2;
					int mentor = 1;
					int val1ue = super.lateRegistration.updatedrecord(false, true, dean, mentor, request.getColleges(),
							request.getDegree(), request.getProgrammes(), request.getAcademicYear(),
							request.getProgrammeYear(), request.getSemester(), request.getDepartment(), col,
							request.getExIsApproveType());

					System.out.println("dddddddddddddddddddddeedddddd" + val1ue);
				}
				info.put("status", "1");
				info.put("message", "request is forwarded to Dean");
				return info;
			}

			else {
				info.put("status", "2");
				info.put("message", "type not found");
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> checkSemesterEligibility(SemesterEligibility request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			long semid = request.getSemester();

			Optional<Studentadmission> studeent = super.studentadmission.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getStudent());
			if (!studeent.isPresent()) {
				info.put("status", "2");
				info.put("message", " student not present");
				return info;
			}

			/*
			 * long retvalue = super.commonHelper.getSem(studeent.get().getExRollNo());
			 * logger.info("Request :"+retvalue +" - "+studeent.get().getExRollNo());
			 * 
			 * if(retvalue == 0) { if(studeent.get().getBatch().getId() == 6) {
			 * request.setSemester(8L); request.setProgrammeYear(4L); semid =
			 * request.getSemester(); }
			 * 
			 * if(studeent.get().getBatch().getId() == 7) { request.setSemester(6L);
			 * request.setProgrammeYear(3L); semid = request.getSemester(); }
			 * if(studeent.get().getBatch().getId() == 8) { request.setSemester(4L);
			 * request.setProgrammeYear(2L); semid = request.getSemester(); } }else {
			 * if(retvalue == 8) { request.setSemester(8L); request.setProgrammeYear(4L);
			 * semid = request.getSemester(); }
			 * 
			 * if(retvalue == 6) { request.setSemester(6L); request.setProgrammeYear(3L);
			 * semid = request.getSemester(); } if(retvalue == 4) { request.setSemester(4L);
			 * request.setProgrammeYear(2L); semid = request.getSemester(); }
			 * 
			 * }
			 * 
			 * 
			 * if(request.getDegree() == 2) { request.setSemester(4L);
			 * request.setProgrammeYear(2L); semid = request.getSemester(); }
			 */
			

			String semname = "";
			Optional<Colleges> Colleges = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),
					false, true);
			if (!Colleges.isPresent() || !Colleges.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<Programmes> Programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Programmes.isPresent() || !Programmes.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department not present");
				return info;
			}

			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent() || !academic.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}

			Optional<ProgrammeYear> programmeYear = super.programmeYear
					.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
			if (!programmeYear.isPresent() || !programmeYear.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!sem.isPresent()) {
				info.put("status", "2");
				info.put("message", "Semster not present");
				return info;
			}
			semname = sem.get().getExName();

			// check already register
			// check barcode genrated or not
			List<ExamBarcodes> attendenceval = super.exambarcode
					.findByExIsDeleteAndCollegesIdAndDegreeIdAndProgrammesIdAndRegistrationTypeIdAndDepartmentIdAndStudentadmissionIdAndSemesterIdAndProgrammeYearId(
							false, request.getColleges(), request.getDegree(), request.getProgrammes(), 1L,
							request.getDepartment(), request.getStudent(), request.getSemester(),
							request.getProgrammeYear());
			logger.info("kkkattendencevalkkkkkkkk" + attendenceval.size());
			if (attendenceval.size() <= 0) {
				// barcode not created
				// check semester registration completed or not
				List<SemesterRegistration> duplicate = super.semesterRegistration
						.findByExIsDeleteAndExIsActiveAndProgrammesIdAndCollegesIdAndDegreeIdAndProgrammeYearIdAndSemesterIdAndDepartmentIdAndStudentadmissionIdAndExIsRegistration(
								false, true, request.getProgrammes(), request.getColleges(), request.getDegree(),
								request.getProgrammeYear(), request.getSemester(), request.getDepartment(),
								request.getStudent(), true);
				logger.info("kkkduplicatekkkkkkkk" + duplicate.size());
				if (duplicate.size() <= 0) {

				} else {
					/*
					 * info.put("status", "4"); info.put("message",
					 * "Your semester Registration is completed"); return info;
					 */

					
					/*
					 * int nextsem1 = sem.get().getExIdentifier() + 1; List<Semster>
					 * nextsemdetails1=
					 * super.semester.findByExIdentifierAndExIsDeleteAndExIsActive(nextsem1, false,
					 * true); if (nextsemdetails1.size() <= 0) { info.put("status", "2");
					 * info.put("message", "Next semester details not present in semester Master");
					 * return info; } semid = nextsemdetails1.get(0).getId(); semname =
					 * nextsemdetails1.get(0).getExName();
					 * 
					 * List<AccountApprove> det =
					 * accountpprove.findBySemesterIdAndStudentadmissionId(semid,request.getStudent(
					 * )); if(det.size() <= 0) { info.put("status", "4"); info.put("message",
					 * "Your semester Registration is completed"); return info; }else {
					 * if(det.get(0).getExIsPaid() == true ) {
					 * 
					 * }else { info.put("status", "2"); info.put("message",
					 * "Please contact account department"); return info; } }
					 */
					 

					// check payment is done or not
					List<OrderTransaction> transaction = transactionRepository
							.findByPaymentstatusAndStudentadmissionIdAndAcademicYearIdAndSemesterIdAndProgrammeYearIdAndRegistrationId(
									"Success", studeent.get().getId(), request.getAcademicYear(), request.getSemester(),
									request.getProgrammeYear(), 1L);
					if (transaction.size() <= 0) {												
						if (accountpprove.findBySemesterIdAndStudentadmissionIdAndExIsPaid(semid, studeent.get().getId(), true).size() > 0) {
							info.put("status", "3");
							info.put("message", "Your semester Registration is completed");
							 return info;
						} else {
							info.put("status", "2");
							info.put("message", "Your semester Registration Fee is pending ");
							 return info;
						}						
					} else {
						info.put("status", "4");
						info.put("message", "Your semester Registration is completed");
						 return info;
					}
				}
			} else {
				// next semester
				int nextsem = sem.get().getExIdentifier() + 1;
				List<Semster> nextsemdetails = super.semester.findByExIdentifierAndExIsDeleteAndExIsActive(nextsem,
						false, true);
				if (nextsemdetails.size() <= 0) {
					info.put("status", "2");
					info.put("message", "Next semester details not present in semester Master");
					return info;
				}
				semid = nextsemdetails.get(0).getId();
				semname = nextsemdetails.get(0).getExName();

				Boolean checkpro = super.commonHelper.validateBTech(request);
				if (checkpro == false) {
					info.put("status", "2");
					info.put("message", "student have more than 4 blacklock");
					//return info;
				}

			}
			List<Courses> courses = super.courses
					.findByProgrammesIdAndAndDegreeIdAndExIsDeleteAndExIsActiveAndCollegesIdAndAndSemesterIdAndDepartmentIdAndBatchId(
							request.getProgrammes(), request.getDegree(), false, true, request.getColleges(), semid,
							request.getDepartment(), studeent.get().getBatch().getId());

			if (courses.size() <= 0) {
				info.put("status", "2");
				info.put("message", "courses are not present");
				return info;
			}
			List dataList = new LinkedList();
			for (Courses e : courses) {
				boolean subjectType = false;

				List coursestype = new LinkedList();
				List coursesTypeId = new LinkedList();
				Map<Object, Object> coursesdata = new HashMap<Object, Object>();
				coursesdata.put("id", e.getId());
				coursesdata.put("exName", e.getExName());
				coursesdata.put("exIsActive", e.getExIsActive());
				coursesdata.put("exIsDelete", e.getExIsDelete());
				coursesdata.put("exCoursesCode", e.getExCoursesCode());
				coursesdata.put("creditHours", e.getCreditHours().getExCreditHourTitle());
				coursesdata.put("creditHoursId", e.getCreditHours().getId());
				for (int i = 0; i < e.getCoursesType().size(); i++) {
					coursestype.add(e.getCoursesType().get(i).getExName());
					coursesTypeId.add(e.getCoursesType().get(i).getId());
				}
				coursesdata.put("coursesType", coursestype);
				coursesdata.put("coursesTypeId", coursesTypeId);

				if (checkCoursesType(e.getExSubjectCode())) {
					subjectType = true;
				}
				coursesdata.put("subjectType", subjectType);
				coursesdata.put("subjectCode", e.getExSubjectCode() == null ? "NA" : e.getExSubjectCode());

				coursesdata.put("isCompulsory", e.getExIscompulsory() == null ? 0 : e.getExIscompulsory());
				dataList.add(coursesdata);
			}
			// check regular fee paid or not
			List<OrderTransaction> fee = transactionRepository
					.findByStudentadmissionIdAndSemesterIdAndRegistrationIdAndPaymentstatus(studeent.get().getId(),
							semid, 1L, "Success");
			if (fee.size() <= 0) {
				// check from approval
				if (accountpprove.findBySemesterIdAndStudentadmissionIdAndExIsPaid(semid, studeent.get().getId(), true).size() > 0) {
					info.put("isPaid", true);
				} else {
					info.put("isPaid", false);
				}
			} else {
				info.put("isPaid", true);
			}

			info.put("status", "1");
			info.put("message", "success");
			info.put("programmes", Programmes.get().getExName());
			info.put("programmesId", Programmes.get().getId());
			info.put("department", department.get() == null ? "NA" : department.get().getExName());
			info.put("departmentId", department.get() == null ? "NA" : department.get().getId());

			info.put("nextsemester", semname);
			info.put("nextsemesterId", semid);

			Optional<ProgrammeYear> nextprogram = super.commonHelper.getProgramYaerId(semid);

			info.put("nextprogrammeYear", nextprogram.get().getExName());
			info.put("nextprogrammeYearId", nextprogram.get().getId());

			info.put("academicYear", academic.get().getExYear());
			info.put("academicYearId", academic.get().getId());

			info.put("degree", degree.get().getExName());
			info.put("degreeId", degree.get().getId());

			info.put("colleges", Colleges.get().getExName());
			info.put("collegesId", Colleges.get().getId());

			info.put("details", dataList);

			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	private Boolean checkCoursesType(String coursestype) {
		if (coursestype == null) {
			return false;
		}
		if (coursestype.equalsIgnoreCase("CC")) {
			return true;
		}
		if (coursestype.equalsIgnoreCase("AECC")) {
			return true;
		}
		if (coursestype.equalsIgnoreCase("SEC/MOOC")) {
			return true;
		}
		if (coursestype.equalsIgnoreCase("BSC")) {
			return true;
		}
		if (coursestype.equalsIgnoreCase("ESC")) {
			return true;
		}

		return false;

	}

	@Override
	public Map<String, Object> getStudentInternalComponentMarks(InternalMarksRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		List dataList = new LinkedList();
		try {
			long semid = request.getSemester();
			String semname = "";
			Optional<Colleges> Colleges = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),
					false, true);
			if (!Colleges.isPresent() || !Colleges.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<Programmes> Programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Programmes.isPresent() || !Programmes.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department not present");
				return info;
			}

			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent() || !academic.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}

			Optional<ProgrammeYear> programmeYear = super.programmeYear
					.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
			if (!programmeYear.isPresent() || !programmeYear.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!sem.isPresent()) {
				info.put("status", "2");
				info.put("message", "Semster not present");
				return info;
			}

			Optional<Courses> courses = super.courses.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getCourses());
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not present");
				return info;
			}
			List<CoursesRegistration> coursereg = coursesRegistration
					.findByExIsDeleteAndExIsActiveAndAcademicYearIdAndSemesterIdAndCoursesIdOrderByStudentadmissionIdAsc(
							false, true, request.getAcademicYear(), request.getSemester(), request.getCourses());
			if (coursereg.size() <= 0) {
				info.put("status", "3");
				info.put("message", "Course Registration not present ");
				return info;
			}

			for (CoursesRegistration e : coursereg) {
				Map<Object, Object> coursesdata = new HashMap<Object, Object>();
				DecimalFormat df2 = new DecimalFormat("####0.00");
			
				coursesdata.put("id", e.getId());
				coursesdata.put("exName", e.getStudentadmission().getExName());
				coursesdata.put("exRollNo", e.getStudentadmission().getExRollNo());
				coursesdata.put("exEnrollementNo", e.getStudentadmission().getExEnrollementNo());
				coursesdata.put("studentadmissionId", e.getStudentadmission().getId());

				List<MidTermMarks> getresult = super.midtermmarksMarks
						.findByCoursesIdAndAcademicYearIdAndExIsActiveAndExIsDeleteAndCollegesIdAndDegreeIdAndProgrammesIdAndDepartmentIdAndProgrammeYearIdAndSemesterIdAndStudentadmissionId(
								courses.get().getId(), academic.get().getId(), true, false, request.getColleges(),
								request.getDegree(), request.getProgrammes(), request.getDepartment(),
								request.getProgrammeYear(), request.getSemester(), e.getStudentadmission().getId());

				List<ExamBarcodes> getdata = super.ExamBarcodes
						.findByCoursesIdAndAcademicYearIdAndExIsActiveAndExIsDeleteAndCollegesIdAndDegreeIdAndProgrammesIdAndDepartmentIdAndProgrammeYearIdAndSemesterIdAndStudentadmissionId(
								courses.get().getId(), academic.get().getId(), true, false, request.getColleges(),
								request.getDegree(), request.getProgrammes(), request.getDepartment(),
								request.getProgrammeYear(), request.getSemester(), e.getStudentadmission().getId());

				if (getresult.size() <= 0 || getdata.size() <= 0) {
					coursesdata.put("exAssignmentMarks", "0.00");
					coursesdata.put("exMidTermRemarks", "NA");
					coursesdata.put("exAttendenceMarks", "0.00");
					coursesdata.put("exMidTermMarks", "0.00");
					coursesdata.put("exPracticalLearning", "0.00");
					coursesdata.put("exPracticalRecordMarks", "0.00");

					coursesdata.put("exLabExperiment", "0.00");
					coursesdata.put("exViva", "0.0");
					coursesdata.put("exEndTermMarks", "0.00");

					coursesdata.put("exQuizMarks", "0.00");
					coursesdata.put("coursesId", courses.get().getId());
					coursesdata.put("courses", courses.get().getExName());
					coursesdata.put("coursesCode", courses.get().getExCoursesCode());
					coursesdata.put("exCaseStudy", "");

				} else {
					coursesdata.put("coursesId", courses.get().getId());
					coursesdata.put("courses", courses.get().getExName());
					coursesdata.put("coursesCode", courses.get().getExCoursesCode());

					if (getresult.get(0).getExAssignmentMarkRemark() == null
							|| getresult.get(0).getExAssignmentMarkRemark().equals("NA")) {
						
						double assignment = (getresult.get(0).getExAssignmentMarks() == null ? 0.00 : getresult.get(0).getExAssignmentMarks());
						String sass = df2.format(assignment);
						//coursesdata.put("exAssignmentMarks", getresult.get(0).getExAssignmentMarks() == null ? "0.00"
						//		: getresult.get(0).getExAssignmentMarks());
						coursesdata.put("exAssignmentMarks",sass);	
					} else {
						coursesdata.put("exAssignmentMarks",
								getresult.get(0).getExAssignmentMarkRemark() == null ? "0.00"
										: getresult.get(0).getExAssignmentMarkRemark());

					}

					if (getresult.get(0).getExAttendenceRemark() == null
							|| getresult.get(0).getExAttendenceRemark().equals("NA")) {
						
						double attendance =(getresult.get(0).getExAttendenceMarks() == null ? 0.00 : getresult.get(0).getExAttendenceMarks());
						String satt = df2.format(attendance);
						coursesdata.put("exAttendenceMarks",satt );
						
						//coursesdata.put("exAttendenceMarks", getresult.get(0).getExAttendenceMarks() == null ? "0.0"
							//	: getresult.get(0).getExAttendenceMarks());
					} else {
						coursesdata.put("exAttendenceMarks", getresult.get(0).getExAttendenceRemark() == null ? "0.00"
								: getresult.get(0).getExAttendenceRemark());

					}

					if (getresult.get(0).getExMidTermRemarks() == null
							|| getresult.get(0).getExMidTermRemarks().equals("NA")) {
						
						double Midterm = (getresult.get(0).getExMidTermMarks() == null ? 0.00 : getresult.get(0).getExMidTermMarks());
						String sMidterm = df2.format(Midterm);

						coursesdata.put("exMidTermMarks",sMidterm );
						
						//coursesdata.put("exMidTermMarks", getresult.get(0).getExMidTermMarks() == null ? "0.0"
							//	: getresult.get(0).getExMidTermMarks());
					} else {
						coursesdata.put("exMidTermMarks", getresult.get(0).getExMidTermRemarks() == null ? "0.00"
								: getresult.get(0).getExMidTermRemarks());

					}

					// coursesdata.put("exMidTermMarks", getresult.get(0).getExMidTermMarks()== null
					// ?"0.0": getresult.get(0).getExMidTermMarks());

					coursesdata.put("exMidTermRemarks", getresult.get(0).getExMidTermRemarks() == null ? "NA"
							: getresult.get(0).getExMidTermRemarks());

					double plearning = (getresult.get(0).getExPracticalLearning() == null ? 0.00 : getresult.get(0).getExPracticalLearning());
					String spl = df2.format(plearning);
					
					coursesdata.put("exPracticalLearning",spl );
					//coursesdata.put("exPracticalLearning", getresult.get(0).getExPracticalLearning() == null ? "0.0"
					//		: getresult.get(0).getExPracticalLearning());
					
					double precord =(getresult.get(0).getExPracticalRecordMarks() == null ? 0.00 : getresult.get(0).getExPracticalRecordMarks());
					String spr = df2.format(precord);
					coursesdata.put("exPracticalRecordMarks",spr);
					
					//coursesdata.put("exPracticalRecordMarks",
						//	getresult.get(0).getExPracticalRecordMarks() == null ? "0.0"
							//		: getresult.get(0).getExPracticalRecordMarks());

					// coursesdata.put("exQuizMarks", getresult.get(0).getExQuizMarks()== null
					// ?"0.0":getresult.get(0).getExQuizMarks());

					if (getresult.get(0).getExQuizRemark() == null || getresult.get(0).getExQuizRemark().equals("NA")) {
						
						double Quizz = (getresult.get(0).getExQuizMarks() == null ? 0.00 : getresult.get(0).getExQuizMarks());
						String squiz = df2.format(Quizz);
						coursesdata.put("exQuizMarks",squiz);		
					//	coursesdata.put("exQuizMarks",
						//		getresult.get(0).getExQuizMarks() == null ? "0.0" : getresult.get(0).getExQuizMarks());
						
					} else {
						coursesdata.put("exQuizMarks", getresult.get(0).getExQuizRemark() == null ? "0.00"
								: getresult.get(0).getExQuizRemark());

					}

					if (getresult.get(0).getExCaseStudyRemark() == null
							|| getresult.get(0).getExCaseStudyRemark().equals("NA")) {
						double casestudy = (getresult.get(0).getExCaseStudy() == null ? 0.00 : getresult.get(0).getExCaseStudy());
						String scase = df2.format(casestudy);
						coursesdata.put("exCaseStudy",scase);
						//coursesdata.put("exCaseStudy",
							//	getresult.get(0).getExCaseStudy() == null ? "0.0" : getresult.get(0).getExCaseStudy());
					} else {
						coursesdata.put("exCaseStudy", getresult.get(0).getExCaseStudyRemark() == null ? "0.00"
								: getresult.get(0).getExCaseStudyRemark());

					}

					if (getdata.get(0).getExLabExperimentRemarks() == null
							|| getdata.get(0).getExLabExperimentRemarks().equals("NA")) {
						
						double Lab = (getdata.get(0).getExLabExperiment() == null ? 0.00 : getdata.get(0).getExLabExperiment());
						String slb = df2.format(Lab);
						coursesdata.put("exLabExperiment", slb);
						//coursesdata.put("exLabExperiment", getdata.get(0).getExLabExperiment() == null ? "0.0"
								//: getdata.get(0).getExLabExperiment());
					} else {
						coursesdata.put("exLabExperimentRemarks",
								getdata.get(0).getExLabExperimentRemarks() == null ? "0.00"
										: getdata.get(0).getExLabExperimentRemarks());

					}

					if (getdata.get(0).getExVivaRemarks() == null || getdata.get(0).getExVivaRemarks().equals("NA")) {
						
						double viva =(getdata.get(0).getExViva() == null ? 0.00 :getdata.get(0).getExViva());
						String svv = df2.format(viva);
						coursesdata.put("exViva",svv);
						//coursesdata.put("exViva",
								//getdata.get(0).getExViva() == null ? "0.0" : getdata.get(0).getExViva());
					} else {
						coursesdata.put("exVivaRemarks",
								getdata.get(0).getExVivaRemarks() == null ? "0.00" : getdata.get(0).getExVivaRemarks());

					}

					if (getdata.get(0).getExEndTermRemark() == null
							|| getdata.get(0).getExEndTermRemark().equals("NA")) {
						
						
						double viva =(getdata.get(0).getExEndTermMarks() == null ? 0.00 :getdata.get(0).getExEndTermMarks());
						String svv1 = df2.format(viva);
						coursesdata.put("exEndTerm", svv1);
						
						//coursesdata.put("exEndTerm", getdata.get(0).getExEndTermMarks() == null ? "0.0"
								//: getdata.get(0).getExEndTermMarks());
					} else {
						coursesdata.put("exEndTermRemarks", getdata.get(0).getExEndTermRemark() == null ? "0.00"
								: getdata.get(0).getExEndTermRemark());

					}

					coursesdata.put("staffId",
							getresult.get(0).getStaff() == null ? "NA" : getresult.get(0).getStaff().getId());
					coursesdata.put("Staff",
							getresult.get(0).getStaff() == null ? "NA" : getresult.get(0).getStaff().getExName());

				}
				dataList.add(coursesdata);
			}
			if (dataList.size() > 0) {
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				info.put("academicYearId", academic.get().getId());
				info.put("academicYear", academic.get().getExYear());
				info.put("collegesId", Colleges.get().getId());
				info.put("colleges", Colleges.get().getExName());
				info.put("coursesId", courses.get().getId());
				info.put("courses", courses.get().getExName());

				info.put("programmeYearId", programmeYear.get().getId());
				info.put("programmeYear", programmeYear.get().getExName());
				info.put("programmesId", Programmes.get().getId());
				info.put("programmes", Programmes.get().getExName());
				info.put("examAnnouncmentId", coursereg.get(0).getExamAnnouncement().getId());
				info.put("examAnnouncment", coursereg.get(0).getExamAnnouncement().getExName());

				info.put("semesterId", sem.get().getId());
				info.put("semester", sem.get().getExName());

				info.put("department", department.get() == null ? "NA" : department.get().getExName());
				info.put("departmentId", department.get() == null ? "NA" : department.get().getId());

				return info;
			} else {
				info.put("status", "2");
				info.put("message", "No record found");
				return info;
			}

			/*
			 * List<MidTermMarks> midterm = super.midtermmarksMarks.
			 * findByCoursesIdAndAcademicYearIdAndExIsActiveAndExIsDeleteAndCollegesIdAndDegreeIdAndProgrammesIdAndDepartmentIdAndProgrammeYearIdAndSemesterId(
			 * courses.get().getId(), academic.get().getId(),
			 * true,false,request.getColleges(),request.getDegree(),request.getProgrammes(),
			 * request.getDepartment(),request.getProgrammeYear(),request.getSemester());
			 * if(midterm.size()<=0) { info.put("status", "2"); info.put("message",
			 * "Internal component not uploaded"); return info;
			 * 
			 * } List dataList = new LinkedList();
			 * 
			 * if(request.getCoursesType()==1) {
			 * 
			 * for(MidTermMarks e : midterm) { Map<Object, Object> coursesdata = new
			 * HashMap<Object, Object>(); coursesdata.put("id", e.getId());
			 * coursesdata.put("exName",e.getStudentadmission().getExName());
			 * coursesdata.put("exRollNo",e.getStudentadmission().getExRollNo());
			 * coursesdata.put("exEnrollementNo",
			 * e.getStudentadmission().getExEnrollementNo());
			 * coursesdata.put("exAssignmentMarks", e.getExAssignmentMarks());
			 * coursesdata.put("exAttendenceMarks", e.getExAttendenceMarks());
			 * coursesdata.put("exMidTermMarks", e.getExMidTermMarks());
			 * coursesdata.put("exMidTermRemarks", e.getExMidTermRemarks());
			 * coursesdata.put("exQuizMarks", e.getExQuizMarks());
			 * coursesdata.put("StudentadmissionId", e.getStudentadmission().getId());
			 * coursesdata.put("exIsActive", e.getExIsActive());
			 * coursesdata.put("exIsDelete", e.getExIsDelete());
			 * 
			 * dataList.add(coursesdata);
			 * 
			 * } } if(request.getCoursesType()==2) { for(MidTermMarks e : midterm) {
			 * Map<Object, Object> coursesdata = new HashMap<Object, Object>();
			 * 
			 * coursesdata.put("id", e.getId());
			 * coursesdata.put("exName",e.getStudentadmission().getExName());
			 * coursesdata.put("exRollNo",e.getStudentadmission().getExRollNo());
			 * coursesdata.put("exEnrollementNo",
			 * e.getStudentadmission().getExEnrollementNo());
			 * coursesdata.put("exPracticalRecordMarks", e.getExPracticalRecordMarks());
			 * 
			 * coursesdata.put("StudentadmissionId", e.getStudentadmission().getId());
			 * coursesdata.put("exIsActive", e.getExIsActive());
			 * coursesdata.put("exIsDelete", e.getExIsDelete());
			 * 
			 * dataList.add(coursesdata);
			 * 
			 * } } info.put("status", "1"); info.put("message", "success");
			 * info.put("programmes", Programmes.get().getExName());
			 * info.put("programmesId", Programmes.get().getId()); info.put("department",
			 * department.get() == null ? "NA" : department.get().getExName());
			 * info.put("departmentId", department.get() == null ? "NA" :
			 * department.get().getId());
			 * 
			 * info.put("programmeYear", programmeYear.get().getExName());
			 * info.put("programmeYearId", programmeYear.get().getId());
			 * 
			 * info.put("semster", sem.get().getExName()); info.put("semsterId",
			 * sem.get().getId());
			 * 
			 * info.put("academicYear", academic.get().getExYear());
			 * info.put("academicYearId", academic.get().getId());
			 * 
			 * 
			 * info.put("degree", degree.get().getExName()); info.put("degreeId",
			 * degree.get().getId());
			 * 
			 * info.put("colleges", Colleges.get().getExName()); info.put("collegesId",
			 * Colleges.get().getId());
			 * 
			 * 
			 * info.put("courses", courses.get().getExName()); info.put("coursesId",
			 * courses.get().getId());
			 * 
			 * 
			 * // info.put("coursesType", CoursesType.get().getExName()); //
			 * info.put("coursesTypeId", CoursesType.get().getId());
			 * 
			 * 
			 * info.put("details", dataList);
			 */

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> getStudentExternalComponentMarks(InternalMarksRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			long semid = request.getSemester();
			String semname = "";
			Optional<Colleges> Colleges = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),
					false, true);
			if (!Colleges.isPresent() || !Colleges.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<Programmes> Programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Programmes.isPresent() || !Programmes.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department not present");
				return info;
			}

			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent() || !academic.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}

			Optional<ProgrammeYear> programmeYear = super.programmeYear
					.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
			if (!programmeYear.isPresent() || !programmeYear.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!sem.isPresent()) {
				info.put("status", "2");
				info.put("message", "Semster not present");
				return info;
			}

			Optional<Courses> courses = super.courses.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getCourses());
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not present");
				return info;
			}

			Optional<RegistrationType> RegistrationType = super.registrationType
					.findByExIsDeleteAndExIsActiveAndId(false, true, request.getRegistrationType());
			if (!RegistrationType.isPresent()) {
				info.put("status", "2");
				info.put("message", "RegistrationType not present");
				return info;
			}

			List<ExamBarcodes> endterm = super.ExamBarcodes
					.findByCoursesIdAndAcademicYearIdAndExIsActiveAndExIsDeleteAndCollegesIdAndDegreeIdAndProgrammesIdAndDepartmentIdAndProgrammeYearIdAndSemesterIdAndExamAnnouncementIdAndRegistrationTypeId(
							courses.get().getId(), academic.get().getId(), true, false, request.getColleges(),
							request.getDegree(), request.getProgrammes(), request.getDepartment(),
							request.getProgrammeYear(), request.getSemester(), request.getExamAnnouncement(),
							request.getRegistrationType());
			if (endterm.size() <= 0) {
				info.put("status", "2");
				info.put("message", "EndTerm Marks not uploaded");
				return info;

			}
			List dataList = new LinkedList();

			for (ExamBarcodes e : endterm) {
				Map<Object, Object> coursesdata = new HashMap<Object, Object>();
				coursesdata.put("id", e.getId());
				coursesdata.put("exName", e.getStudentadmission().getExName());
				coursesdata.put("exRollNo", e.getStudentadmission().getExRollNo());
				coursesdata.put("exEnrollementNo", e.getStudentadmission().getExEnrollementNo());
				coursesdata.put("exEndTermMarks", e.getExEndTermMarks());
				coursesdata.put("exEndTermRemark", e.getExEndTermRemark());
				coursesdata.put("exLabExperiment", e.getExLabExperiment());

				coursesdata.put("StudentadmissionId", e.getStudentadmission().getId());
				coursesdata.put("exIsActive", e.getExIsActive());
				coursesdata.put("exIsDelete", e.getExIsDelete());

				dataList.add(coursesdata);

			}

			info.put("status", "1");
			info.put("message", "success");
			info.put("programmes", Programmes.get().getExName());
			info.put("programmesId", Programmes.get().getId());
			info.put("department", department.get() == null ? "NA" : department.get().getExName());
			info.put("departmentId", department.get() == null ? "NA" : department.get().getId());

			info.put("programmeYear", programmeYear.get().getExName());
			info.put("programmeYearId", programmeYear.get().getId());

			info.put("semster", sem.get().getExName());
			info.put("semsterId", sem.get().getId());

			info.put("academicYear", academic.get().getExYear());
			info.put("academicYearId", academic.get().getId());

			info.put("degree", degree.get().getExName());
			info.put("degreeId", degree.get().getId());

			info.put("colleges", Colleges.get().getExName());
			info.put("collegesId", Colleges.get().getId());

			info.put("courses", courses.get().getExName());
			info.put("coursesId", courses.get().getId());

			info.put("registrationType", RegistrationType.get().getExName());
			info.put("registrationTypeId", RegistrationType.get().getId());

			info.put("details", dataList);

			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> updateStudentInternalComponentMarks(InternalMarksRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			System.out.println("????????????????????????????????????????" + request);
			Optional<Colleges> Colleges = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),
					false, true);
			if (!Colleges.isPresent() || !Colleges.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<Programmes> Programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Programmes.isPresent() || !Programmes.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department not present");
				return info;
			}

			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent() || !academic.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}

			Optional<Courses> courses = super.courses.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getCourses());
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not present");
				return info;
			}

			Date date = new Date();
			if (request.getCoursesType() == 1L) {

				Double assigment = 0.0;
				String remarks = "NA";
				if (super.commonHelper.isNumeric(request.getExAssignmentMarks())) {
					assigment = commonHelper.getMarks(request.getExAssignmentMarks());
				} else {
					remarks = "ABSENT";
				}
				if (super.commonHelper.checkDoubleOrNot(request.getExAssignmentMarks().toString())
						&& super.commonHelper.checkDoubleOrNot(request.getExAttendenceMarks().toString())
						&& super.commonHelper.checkDoubleOrNot(request.getExQuizMarks().toString())
						&& super.commonHelper.checkDoubleOrNot(request.getExMidTermMarks().toString())) {
					int retval = super.midtermmarksMarks.updateInternalComponentMarks(assigment,
							commonHelper.getMarks(request.getExAttendenceMarks()),
							commonHelper.getMarks(request.getExQuizMarks()),
							commonHelper.getMarks(request.getExMidTermMarks()), request.getAcademicYear(),
							request.getColleges(), request.getProgrammes(), request.getCourses(),
							request.getStudentAdmissionId(), date, request.getDegree(), request.getExamAnnouncement());
					if (retval == 1) {
						info.put("status", "1");
						info.put("message", "Internal component marks updated successfully");
						return info;
					} else {
						info.put("status", "2");
						info.put("message", "Internal component not updated");
						return info;
					}
				}

				else if (super.commonHelper.checkDoubleOrNot(request.getExAssignmentMarks().toString())) {

					int retval = super.midtermmarksMarks.updateAssignmentMarks(assigment, request.getAcademicYear(),
							request.getColleges(), request.getProgrammes(), request.getCourses(),
							request.getStudentAdmissionId(), date, request.getDegree(), request.getExamAnnouncement());
					if (retval == 1) {
						info.put("status", "1");
						info.put("message", "Assignment marks updated successfully");
						return info;
					} else {
						info.put("status", "2");
						info.put("message", "Assignment  marks not updated");
						return info;
					}

				} else if (super.commonHelper.checkDoubleOrNot(request.getExAttendenceMarks().toString())) {
					int retval = super.midtermmarksMarks.updateAttendenceMarks(
							commonHelper.getMarks(request.getExAttendenceMarks()), request.getAcademicYear(),
							request.getColleges(), request.getProgrammes(), request.getCourses(),
							request.getStudentAdmissionId(), date, request.getDegree(), request.getExamAnnouncement());
					if (retval == 1) {
						info.put("status", "1");
						info.put("message", "Attendence marks updated successfully");
						return info;
					} else {
						info.put("status", "2");
						info.put("message", "Attendence marks not updated");
						return info;
					}
				}

				else if (super.commonHelper.checkDoubleOrNot(request.getExQuizMarks().toString())) {

					int retval = super.midtermmarksMarks.updateQuizMarks(
							commonHelper.getMarks(request.getExQuizMarks()), request.getAcademicYear(),
							request.getColleges(), request.getProgrammes(), request.getCourses(),
							request.getStudentAdmissionId(), date, request.getDegree(), request.getExamAnnouncement());
					if (retval == 1) {
						info.put("status", "1");
						info.put("message", "Quiz marks updated successfully");
						return info;
					} else {
						info.put("status", "2");
						info.put("message", "Quiz marks not updated");
						return info;
					}

				}

				else if (super.commonHelper.checkDoubleOrNot(request.getExMidTermMarks().toString())) {
					int retval = super.midtermmarksMarks.updateMidtermMarks(
							commonHelper.getMarks(request.getExMidTermMarks()), request.getAcademicYear(),
							request.getColleges(), request.getProgrammes(), request.getCourses(),
							request.getStudentAdmissionId(), date, request.getDegree(), request.getExamAnnouncement());
					if (retval == 1) {
						info.put("status", "1");
						info.put("message", "MidTerm marks updated successfully");
						return info;
					} else {
						info.put("status", "2");
						info.put("message", "MidTerm marks not updated");
						return info;
					}
				} else {

					info.put("status", "2");
					info.put("message", "Theory Marks not updated");
					return info;
				}
			}

			if (request.getCoursesType() == 2L) {

				if (super.commonHelper.checkDoubleOrNot(request.getExPracticalRecordMarks().toString())
						&& super.commonHelper.checkDoubleOrNot(request.getExPracticalLearning().toString())) {
					int retval = super.midtermmarksMarks.updatePracticalInternalComponentMarks(
							request.getExPracticalLearning(), request.getExPracticalRecordMarks(),
							request.getAcademicYear(), request.getColleges(), request.getProgrammes(),
							request.getCourses(), request.getStudentAdmissionId(), date, request.getDegree(),
							request.getExamAnnouncement());
					if (retval == 1) {
						info.put("status", "1");
						info.put("message", "practical marks updated successfully");
						return info;
					} else {
						info.put("status", "2");
						info.put("message", "practical marks not updated");
						return info;
					}
				}
			} else if (request.getCoursesType() == 2L) {
				System.out.println(">>>>>>>>>>>>>>>>>>>>>request>>>>>>" + request);
				if (super.commonHelper.checkDoubleOrNot(request.getExPracticalRecordMarks().toString())) {
					int retval = super.midtermmarksMarks.updatePracticalMarks(request.getExPracticalRecordMarks(),
							request.getAcademicYear(), request.getColleges(), request.getProgrammes(),
							request.getCourses(), request.getStudentAdmissionId(), date, request.getDegree(),
							request.getExamAnnouncement());
					if (retval == 1) {
						info.put("status", "1");
						info.put("message", "Practical record marks updated successfully");
						return info;
					} else {
						info.put("status", "2");
						info.put("message", "Practical record marks not updated");
						return info;
					}

				} else {

					info.put("status", "2");
					info.put("message", "Practical record Marks not updated");
					return info;
				}

			}

			else if (request.getCoursesType() == 2L) {
				System.out.println(">>>>>>>>>>>>>>>>>>>>>request>>>>>>" + request);
				if (super.commonHelper.checkDoubleOrNot(request.getExPracticalLearning().toString())) {
					int retval = super.midtermmarksMarks.updatePracticalLearning(request.getExPracticalLearning(),
							request.getAcademicYear(), request.getColleges(), request.getProgrammes(),
							request.getCourses(), request.getStudentAdmissionId(), date, request.getDegree(),
							request.getExamAnnouncement());
					if (retval == 1) {
						info.put("status", "1");
						info.put("message", "getExPracticalLearning updated successfully");
						return info;
					} else {
						info.put("status", "2");
						info.put("message", "getExPracticalLearning not updated");
						return info;
					}

				} else {

					info.put("status", "2");
					info.put("message", "Practical learning  not updated");
					return info;
				}

			}

			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> updateStudentExternalMarks(InternalMarksRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {

			Optional<Colleges> Colleges = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),
					false, true);
			if (!Colleges.isPresent() || !Colleges.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<Programmes> Programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Programmes.isPresent() || !Programmes.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department not present");
				return info;
			}

			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent() || !academic.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}

			Optional<Courses> courses = super.courses.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getCourses());
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not present");
				return info;
			}
			List<RegistrationType> registration = super.registrationType
					.findByIdAndExIsDeleteAndExIsActive(request.getRegistrationType(), false, true);
			if (registration.size() <= 0) {
				info.put("status", "2");
				info.put("message", "RegistrationType not present");
				return info;
			}

			Optional<ExamAnnouncement> examAnnouncement = super.examAnnouncement
					.findByExIsDeleteAndExIsActiveAndId(false, true, request.getExamAnnouncement());
			if (!examAnnouncement.isPresent() || !examAnnouncement.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "examAnnouncement not present");
				return info;
			}
			System.out.println("???????????????????" + request);

			Date date = new Date();
			if (request.getExEndTermMarks() != null) {
				int retval = super.ExamBarcodes.updateEndTermMarks(request.getExEndTermMarks(),
						request.getAcademicYear(), request.getColleges(), request.getProgrammes(), request.getCourses(),
						request.getStudentAdmissionId(), date, request.getDegree(), request.getExamAnnouncement(),
						request.getRegistrationType());
				if (retval == 1) {
					info.put("status", "1");
					info.put("message", "EndTerm marks updated successfully");
					return info;
				} else {
					info.put("status", "2");
					info.put("message", "EndTerm marks not updated");
					return info;
				}
			}
			info.put("status", "2");
			info.put("message", "EndTerm marks not updated");
			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> createPenaltyConfiguration(@Valid PenaltyRequest request) {
		Map<String, String> info = new LinkedHashMap();
		try {

			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!sem.isPresent() || !sem.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "semester not present");
				return info;
			}
			Optional<Programmes> programs = super.programme.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!programs.isPresent() || !programs.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Programs not present");
				return info;
			}
			Optional<ProgrammeYear> programyear = super.programmeYear
					.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
			if (!programyear.isPresent()) {
				info.put("status", "2");
				info.put("message", "ProgrammeYear not present");
				return info;
			}
			SimpleDateFormat date1 = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
			Date date = new Date();
			List<PenaltyConfiguration> sconfig = super.penaltyconfig.validateDate(true, false, request.getDegree(),
					request.getProgrammeYear(), request.getSemester(), request.getProgrammes(),
					date1.parse(request.getExStartDate() + " 00:00:00"),
					date1.parse(request.getExEndDate() + " 23:59:00"));
			if (sconfig.size() > 0) {
				info.put("status", "2");
				info.put("message", "Please change start and end date");
				return info;
			}
			PenaltyConfiguration config = new PenaltyConfiguration();
			config.setExStartDate(date1.parse(request.getExStartDate() + " 00:00:00"));
			config.setExEndDate(date1.parse(request.getExEndDate() + " 23:59:00"));
			config.setExDueDate(date1.parse(request.getExDueDate() + " 23:59:00"));
			config.setExIsActive(request.getExIsActive());
			config.setDegree(degree.get());
			config.setProgrammeYear(programyear.get());
			config.setExIncAmount(request.getExIncAmount());
			config.setProgrammes(programs.get());
			config.setSemester(sem.get());
			config.setExIsDelete(false);
			config.setExCreateDate(date);
			super.penaltyconfig.save(config);
			info.put("status", "1");
			info.put("message", "Penalty created successfully");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> getPenaltyConfiguration(PenaltyRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<PenaltyConfiguration> tasks = super.penaltyconfig.findByExIsDelete(false);
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "PenaltyConfiguration not created");
				return info;
			} else {
				List dataList = new LinkedList();
				for (PenaltyConfiguration e : tasks) {
					Map<Object, Object> data = new HashMap<Object, Object>();
					data.put("id", e.getId());
					data.put("exDueDate", e.getExDueDate().toString());
					// data.put("exStartDate", e.getExStartDate().toString());
					data.put("exStartDate",
							e.getExStartDate() == null ? "NA" : e.getExStartDate().toString().substring(0, 10));
					data.put("exEndDate", e.getExEndDate().toString());
					data.put("exIncAmount", e.getExIncAmount());
					data.put("programmeYear", e.getProgrammeYear().getExName());
					data.put("semester", e.getSemester().getExName());
					data.put("semesterId", e.getSemester().getId());
					data.put("degree", e.getDegree().getExName());
					data.put("degreeId", e.getDegree().getId());
					data.put("programmeYearId", e.getProgrammeYear().getId());
					data.put("semesterId", e.getSemester().getId());
					data.put("exIsActive", e.getExIsActive());
					data.put("exIsDelete", e.getExIsDelete());
					data.put("programmes", e.getProgrammes().getExName());
					data.put("programmesId", e.getProgrammes().getId());

					dataList.add(data);
				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> deletePenaltyConfiguration(PenaltyRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<PenaltyConfiguration> task = super.penaltyconfig.findById(request.getId());
			if (task.isPresent()) {
				if (task.get().getExIsDelete()) {
					info.put("status", "2");
					info.put("message", "PenaltyConfiguration already deleted");
					return info;
				}
				Boolean exIsDelete = true;
				Boolean is_active = false;
				int result = super.penaltyconfig.deletePenalty(exIsDelete, is_active, task.get().getId());
				if (result == 0) {
					info.put("status", "2");
					info.put("message", "Something went wrong");
					return info;
				}
				info.put("status", "1");
				info.put("message", "PenaltyConfiguration deleted successfully");
				return info;
			}

			info.put("status", "2");
			info.put("message", "PenaltyConfiguration id not present");
			return info;
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> updatePenaltyConfiguration(PenaltyRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			SimpleDateFormat date1 = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
			Date date = new Date();

			List<PenaltyConfiguration> sconfig1 = super.penaltyconfig.updatevalidateDate(true, false,
					date1.parse(request.getExDueDate() + " 23:59:00"),
					date1.parse(request.getExStartDate() + " 00:00:00"),
					date1.parse(request.getExEndDate() + " 23:59:00"), request.getId());
			if (sconfig1.size() > 0) {
				info.put("status", "2");
				info.put("message", "Please change start and end date");
				return info;
			}

			Optional<PenaltyConfiguration> sconfig = super.penaltyconfig.findById(request.getId());
			if (!sconfig.isPresent()) {
				info.put("status", "2");
				info.put("message", "Id not present");
				return info;
			}

			int resultvalue = super.penaltyconfig.updatePenalty(request.getExIsActive(), false,
					date1.parse(request.getExStartDate() + " 00:00:00"),
					date1.parse(request.getExEndDate() + " 23:59:00"),
					date1.parse(request.getExDueDate() + " 23:59:00"), request.getExIncAmount(), request.getId(), date);
			if (resultvalue == 1) {
				info.put("status", "1");
				info.put("message", "Penalty updated successfully");
				return info;
			} else {
				info.put("status", "0");
				info.put("message", "something went wrong");
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> studentListForLibrary(SemesterRegistrationRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Optional<Colleges> Colleges = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),
					false, true);
			if (!Colleges.isPresent() || !Colleges.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}

			Optional<Programmes> Programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Programmes.isPresent() || !Programmes.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}

			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department not present");
				return info;
			}

			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent() || !academic.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}

			Optional<ProgrammeYear> programmeYear = super.programmeYear
					.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
			if (!programmeYear.isPresent() || !programmeYear.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!sem.isPresent() || !sem.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Semster not present");
				return info;
			}

			List<SemesterRegistration> list = super.semesterRegistration
					.findByExIsDeleteAndExIsActiveAndProgrammesIdAndCollegesIdAndDegreeIdAndAcademicYearIdAndSemesterIdAndDepartmentIdAndProgrammeYearIdOrderByStudentadmissionIdAsc(
							false, true, request.getProgrammes(), request.getColleges(), request.getDegree(),
							request.getAcademicYear(), request.getSemester(), request.getDepartment(),
							request.getProgrammeYear());

			List dataList = new LinkedList();
			for (SemesterRegistration e : list) {
				Map<Object, Object> Studentadmissiondata = new HashMap<Object, Object>();
				Studentadmissiondata.put("student", e.getId());
				Studentadmissiondata.put("exName", e.getStudentadmission().getExName());
				Studentadmissiondata.put("exRollNo", e.getStudentadmission().getExRollNo());
				Studentadmissiondata.put("libraryApprove", e.getExIsLibraryApprove());
				Studentadmissiondata.put("hostelApprove", e.getExIsHostelApprove());
				dataList.add(Studentadmissiondata);
			}
			info.put("status", "1");
			info.put("message", "success");
			info.put("details", dataList);
			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> approveLibrary(SemesterRegistrationRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Optional<Colleges> Colleges = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),
					false, true);
			if (!Colleges.isPresent() || !Colleges.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}

			Optional<Programmes> Programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Programmes.isPresent() || !Programmes.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}

			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department not present");
				return info;
			}

			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent() || !academic.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}

			Optional<ProgrammeYear> programmeYear = super.programmeYear
					.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
			if (!programmeYear.isPresent() || !programmeYear.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!sem.isPresent() || !sem.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Semster not present");
				return info;
			}

			boolean isupdate = false;
			// Update Student in

			for (int i = 0; i < request.getStudentList().size(); i++) {
				long studentid = Long.parseLong(request.getStudentList().get(i).toString());
				int updatresult = super.semesterRegistration.updateLibraryApprove(true, request.getAcademicYear(),
						request.getProgrammes(), request.getProgrammeYear(), request.getSemester(), studentid,
						request.getDegree(), request.getColleges());
				if (updatresult == 1) {
					isupdate = true;
				}
			}
			if (isupdate) {
				info.put("status", "1");
				info.put("message", "Library Approved successfully");
				return info;
			} else {
				info.put("status", "2");
				info.put("message", "Student not found");
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> saveAssignmentMarks(InternalMarksRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {

			Optional<Colleges> Colleges = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),
					false, true);
			if (!Colleges.isPresent() || !Colleges.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<Programmes> Programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Programmes.isPresent() || !Programmes.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department not present");
				return info;
			}

			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent() || !academic.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}

			Optional<Courses> courses = super.courses.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getCourses());
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not present");
				return info;
			}
			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "semester not present");
				return info;
			}
			Optional<Stream> stream = super.stream.findByExIsDeleteAndExIsActiveAndId(false, true, request.getStream());
			if (!stream.isPresent()) {
				info.put("status", "2");
				info.put("message", "stream not present");
				return info;
			}
			Optional<CoursesType> coursestype = super.coursestype
					.findByIdAndExIsDeleteAndExIsActive(request.getCoursesType(), false, true);
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "coursestype not present");
				return info;
			}
			Optional<ExamAnnouncement> examannouncement = super.examAnnouncement
					.findByExIsDeleteAndExIsActiveAndId(false, true, request.getExamAnnouncement());
			if (!examannouncement.isPresent()) {
				info.put("status", "2");
				info.put("message", "Examannouncement  not present");
				return info;
			}
			Optional<ProgrammeYear> programyear = super.programmeYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammeYear());
			if (!programyear.isPresent()) {
				info.put("status", "2");
				info.put("message", "ProgrammeYear not present");
				return info;
			}

			Optional<Studentadmission> student = super.studentadmission.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getStudentAdmissionId());

			if (!student.isPresent()) {
				info.put("status", "2");
				info.put("message", "Student not Present");
				return info;
			}
			List<CoursesRegistration> coursereg = super.coursesRegistration
					.findByExIsDeleteAndExIsActiveAndCoursesIdAndStudentadmissionId(false, true, courses.get().getId(),
							student.get().getId());

			if (coursereg.size() <= 0) {

				info.put("status", "2");
				info.put("message", "student not present in courseregistration");
				return info;
			}

			List<Staffpersonal> staff = super.staffpersonal.findByIdAndExIsDelete(request.getStaff(), false);
			if (staff.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Staff id not present");
				return info;
			}
			Date date = new Date();
			Boolean upload = false;

			List<MidTermMarks> getresult = super.midtermmarksMarks
					.findByCollegesIdAndDegreeIdAndProgrammesIdAndCoursesIdAndSemesterIdAndExIsActiveAndExIsDeleteAndStudentadmissionId(
							request.getColleges(), request.getDegree(), request.getProgrammes(), request.getCourses(),
							request.getSemester(), true, false, request.getStudentAdmissionId());
			System.out.println("??//" + getresult);

			Double marks = 0.0;
			String remarks = "NA";
			if (super.commonHelper.isNumeric(request.getExAssignmentMarks())) {
				marks = commonHelper.getMarks(request.getExAssignmentMarks());
			} else {
				if (request.getExAssignmentMarks() == null || request.getExAssignmentMarks().trim().equals("")) {
					remarks = "NA";
				} else {
					remarks = request.getExAssignmentMarks();
				}

			}

			if (getresult.size() <= 0) {
				upload = true;
				// super.midtermmarksMarks.updateStatus(false , true ,
				// request.getColleges(),request.getProgrammes() , request.getCourses()
				// ,request.getStudentAdmissionId() , request.getDegree());
				MidTermMarks mid = new MidTermMarks();
				mid.setAcademicYear(academic.get());
				mid.setSection(student.get().getSection());
				mid.setCourses(courses.get());
				mid.setExCreateDate(date);
				mid.setColleges(Colleges.get());
				mid.setProgrammes(Programmes.get());
				mid.setProgrammeYear(courses.get().getProgrammeYear());
				mid.setStudentadmission(student.get());
				mid.setExRollNo(student.get().getExRollNo());
				mid.setDegree(degree.get());
				mid.setStream(stream.get());
				mid.setStaff(staff.get(0));
				mid.setExIsActive(true);
				mid.setExIsDelete(false);
				mid.setExIsSave(false);
				mid.setExIsSubmit(false);
				mid.setExAssignmentMarks(marks);
				mid.setSemester(sem.get());
				mid.setDepartment(courses.get().getDepartment());
				mid.setExamAnnouncement(examannouncement.get());
				mid.setExAssignmentMarkRemark(remarks);
				super.midtermmarksMarks.save(mid);
			} else {
				int retval = super.midtermmarksMarks.updateAssignmetMarksByStaff(marks, date, request.getAcademicYear(),
						request.getColleges(), request.getProgrammes(), request.getCourses(),
						request.getStudentAdmissionId(), request.getDegree(), courses.get().getProgrammeYear().getId(),
						staff.get(0).getId(), student.get().getSection(), remarks);
			}
			if (upload) {
				info.put("status", "1");
				info.put("message", "Assignment saved successfully");
				return info;

			} else {
				info.put("status", "1");
				info.put("message", "Assignment updated successfully");
				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> saveQuizMarks(InternalMarksRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {

			Optional<Colleges> Colleges = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),
					false, true);
			if (!Colleges.isPresent() || !Colleges.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<Programmes> Programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Programmes.isPresent() || !Programmes.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department not present");
				return info;
			}

			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent() || !academic.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}

			Optional<Courses> courses = super.courses.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getCourses());
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not present");
				return info;
			}
			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "semester not present");
				return info;
			}
			Optional<Stream> stream = super.stream.findByExIsDeleteAndExIsActiveAndId(false, true, request.getStream());
			if (!stream.isPresent()) {
				info.put("status", "2");
				info.put("message", "stream not present");
				return info;
			}
			if (request.getExQuizMarks() == null) {
				info.put("status", "2");
				info.put("message", "Quiz marks  is required");
				return info;
			}
			Optional<CoursesType> coursestype = super.coursestype
					.findByIdAndExIsDeleteAndExIsActive(request.getCoursesType(), false, true);
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "coursestype not present");
				return info;
			}
			Optional<ExamAnnouncement> examannouncement = super.examAnnouncement
					.findByExIsDeleteAndExIsActiveAndId(false, true, request.getExamAnnouncement());
			if (!examannouncement.isPresent()) {
				info.put("status", "2");
				info.put("message", "Examannouncement  not present");
				return info;
			}
			Optional<ProgrammeYear> programyear = super.programmeYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammeYear());
			if (!programyear.isPresent()) {
				info.put("status", "2");
				info.put("message", "ProgrammeYear not present");
				return info;
			}

			Optional<Studentadmission> student = super.studentadmission.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getStudentAdmissionId());

			if (!student.isPresent()) {
				info.put("status", "2");
				info.put("message", "Student not registered");
				return info;
			}
			List<CoursesRegistration> coursereg = super.coursesRegistration
					.findByExIsDeleteAndExIsActiveAndCoursesIdAndStudentadmissionId(false, true, courses.get().getId(),
							student.get().getId());

			if (coursereg.size() <= 0) {

				info.put("status", "2");
				info.put("message", "student   not present in courseregistration");
				return info;
			}

			List<Staffpersonal> staff = super.staffpersonal.findByIdAndExIsDelete(request.getStaff(), false);
			if (staff.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Staff id not present");
				return info;
			}
			Date date = new Date();
			Boolean upload = false;
			// List<InternalMarks> internal =
			// InternalMarksRepository.findByExStudentIdAndCoursesIdAndAcademicyearIdAndExIsActiveAndExIsDelete(request.getExStudentId(),
			// course.get().getId(), request.getAcademicYear() , true ,false);

			String remarks = "NA";
			Double marks = 0.0;
			if (super.commonHelper.isNumeric(request.getExQuizMarks())) {
				marks = commonHelper.getMarks(request.getExQuizMarks());
			} else {
				if (request.getExQuizMarks() == null || request.getExQuizMarks().trim().equals("")) {
					remarks = "NA";
				} else {					
						remarks = request.getExQuizMarks();											
				}
			}

			List<MidTermMarks> getresult = super.midtermmarksMarks
					.findByCollegesIdAndDegreeIdAndProgrammesIdAndCoursesIdAndSemesterIdAndExIsActiveAndExIsDeleteAndStudentadmissionId(
							request.getColleges(), request.getDegree(), request.getProgrammes(), request.getCourses(),
							request.getSemester(), true, false, request.getStudentAdmissionId());
			System.out.println("??//" + getresult);

			if (getresult.size() <= 0) {

				upload = true;
				super.midtermmarksMarks.updateStatus(false, true, request.getColleges(), request.getProgrammes(),
						request.getCourses(), request.getStudentAdmissionId(), request.getDegree());
				MidTermMarks mid = new MidTermMarks();
				mid.setAcademicYear(academic.get());
				mid.setCourses(courses.get());
				mid.setExCreateDate(date);
				mid.setColleges(Colleges.get());
				mid.setProgrammes(Programmes.get());
				mid.setSection(student.get().getSection());
				mid.setProgrammeYear(courses.get().getProgrammeYear());
				mid.setStudentadmission(student.get());
				mid.setExRollNo(student.get().getExRollNo());
				mid.setDegree(degree.get());
				mid.setStream(stream.get());
				mid.setStaff(staff.get(0));
				mid.setExIsDelete(false);
				mid.setExIsActive(true);
				mid.setExIsSave(false);
				mid.setExIsSubmit(false);
				mid.setExQuizMarks(marks);
				mid.setExQuizRemark(remarks);
				mid.setSemester(sem.get());
				mid.setDepartment(courses.get().getDepartment());
				mid.setExamAnnouncement(examannouncement.get());
				super.midtermmarksMarks.save(mid);
			} else {
				int retval = super.midtermmarksMarks.updateQuizMarksByStaff(marks, date, request.getAcademicYear(),
						request.getColleges(), request.getProgrammes(), request.getCourses(),
						request.getStudentAdmissionId(), request.getDegree(), courses.get().getProgrammeYear().getId(),
						staff.get(0).getId(), student.get().getSection(), remarks);
			}
			if (upload) {
				info.put("status", "1");
				info.put("message", "Quiz Marks saved successfully");
				return info;

			} else {
				info.put("status", "1");
				info.put("message", "Quiz Marks updated successfully");
				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> saveMidTermMarks(InternalMarksRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {

			Optional<Colleges> Colleges = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),
					false, true);
			if (!Colleges.isPresent() || !Colleges.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<Programmes> Programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Programmes.isPresent() || !Programmes.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department not present");
				return info;
			}

			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent() || !academic.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}

			Optional<Courses> courses = super.courses.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getCourses());
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not present");
				return info;
			}
			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "semester not present");
				return info;
			}
			Optional<Stream> stream = super.stream.findByExIsDeleteAndExIsActiveAndId(false, true, request.getStream());
			if (!stream.isPresent()) {
				info.put("status", "2");
				info.put("message", "stream not present");
				return info;
			}
			if (request.getExMidTermMarks() == null) {
				info.put("status", "2");
				info.put("message", "midterm  marks  is required");
				return info;
			}
			Optional<CoursesType> coursestype = super.coursestype
					.findByIdAndExIsDeleteAndExIsActive(request.getCoursesType(), false, true);
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "coursestype not present");
				return info;
			}
			Optional<ExamAnnouncement> examannouncement = super.examAnnouncement
					.findByExIsDeleteAndExIsActiveAndId(false, true, request.getExamAnnouncement());
			if (!examannouncement.isPresent()) {
				info.put("status", "2");
				info.put("message", "Examannouncement  not present");
				return info;
			}
			Optional<ProgrammeYear> programyear = super.programmeYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammeYear());
			if (!programyear.isPresent()) {
				info.put("status", "2");
				info.put("message", "ProgrammeYear not present");
				return info;
			}

			Optional<Studentadmission> student = super.studentadmission.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getStudentAdmissionId());

			if (!student.isPresent()) {
				info.put("status", "2");
				info.put("message", "Student not Present");
				return info;
			}
			List<CoursesRegistration> coursereg = super.coursesRegistration
					.findByExIsDeleteAndExIsActiveAndCoursesIdAndStudentadmissionId(false, true, courses.get().getId(),
							student.get().getId());

			if (coursereg.size() <= 0) {

				info.put("status", "2");
				info.put("message", "student  not present in courseregistration");
				return info;
			}

			List<Staffpersonal> staff = super.staffpersonal.findByIdAndExIsDelete(request.getStaff(), false);
			if (staff.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Staff id not present");
				return info;
			}
			Date date = new Date();
			Boolean upload = false;
			// List<InternalMarks> internal =
			// InternalMarksRepository.findByExStudentIdAndCoursesIdAndAcademicyearIdAndExIsActiveAndExIsDelete(request.getExStudentId(),
			// course.get().getId(), request.getAcademicYear() , true ,false);

			List<MidTermMarks> getresult = super.midtermmarksMarks
					.findByCollegesIdAndDegreeIdAndProgrammesIdAndCoursesIdAndSemesterIdAndExIsActiveAndExIsDeleteAndStudentadmissionId(
							request.getColleges(), request.getDegree(), request.getProgrammes(), request.getCourses(),
							request.getSemester(), true, false, request.getStudentAdmissionId());
			System.out.println("??//" + getresult);
			String remarks = "NA";
			Double marks = 0.0;
			if (super.commonHelper.isNumeric(request.getExMidTermMarks())) {
				marks = commonHelper.getMarks(request.getExMidTermMarks());
			} else {
				if (request.getExMidTermMarks() == null || request.getExMidTermMarks().trim().equals("")) {
					remarks = "NA";
				} else {
					remarks = request.getExMidTermMarks();
				}
			}
			if (getresult.size() <= 0) {
				upload = true;
				super.midtermmarksMarks.updateStatus(false, true, request.getColleges(), request.getProgrammes(),
						request.getCourses(), request.getStudentAdmissionId(), request.getDegree());
				MidTermMarks mid = new MidTermMarks();
				mid.setAcademicYear(academic.get());
				mid.setCourses(courses.get());
				mid.setExCreateDate(date);
				mid.setSection(student.get().getSection());
				mid.setColleges(Colleges.get());
				mid.setProgrammes(Programmes.get());
				mid.setProgrammeYear(courses.get().getProgrammeYear());
				mid.setStudentadmission(student.get());
				mid.setExRollNo(student.get().getExRollNo());
				mid.setDegree(degree.get());
				mid.setStream(stream.get());
				mid.setExIsActive(true);
				mid.setExIsDelete(false);
				mid.setExIsSave(false);
				mid.setExIsSubmit(false);
				mid.setStaff(staff.get(0));
				mid.setExMidTermMarks(marks);
				mid.setExMidTermRemarks(remarks);
				mid.setSemester(sem.get());
				mid.setDepartment(courses.get().getDepartment());
				mid.setExamAnnouncement(examannouncement.get());
				super.midtermmarksMarks.save(mid);
			} else {
				int retval = super.midtermmarksMarks.updateMidTermMarksByStaff(marks, remarks, date,
						request.getAcademicYear(), request.getColleges(), request.getProgrammes(), request.getCourses(),
						request.getStudentAdmissionId(), request.getDegree(), courses.get().getProgrammeYear().getId(),
						staff.get(0).getId(), student.get().getSection());
			}
			if (upload) {
				info.put("status", "1");
				info.put("message", "Midterm Marks saved successfully");
				return info;

			} else {
				info.put("status", "1");
				info.put("message", "Midterm Marks updated successfully");
				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> savePracticalMarks(InternalMarksRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {

			Optional<Colleges> Colleges = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),
					false, true);
			if (!Colleges.isPresent() || !Colleges.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<Programmes> Programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Programmes.isPresent() || !Programmes.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department not present");
				return info;
			}

			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent() || !academic.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}

			Optional<Courses> courses = super.courses.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getCourses());
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not present");
				return info;
			}
			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "semester not present");
				return info;
			}
			Optional<Stream> stream = super.stream.findByExIsDeleteAndExIsActiveAndId(false, true, request.getStream());
			if (!stream.isPresent()) {
				info.put("status", "2");
				info.put("message", "stream not present");
				return info;
			}

			if (request.getExPracticalRecordMarks() == null) {
				info.put("status", "2");
				info.put("message", "practical marks  is required");
				return info;
			}
			Optional<CoursesType> coursestype = super.coursestype
					.findByIdAndExIsDeleteAndExIsActive(request.getCoursesType(), false, true);
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "coursestype not present");
				return info;
			}
			Optional<ExamAnnouncement> examannouncement = super.examAnnouncement
					.findByExIsDeleteAndExIsActiveAndId(false, true, request.getExamAnnouncement());
			if (!examannouncement.isPresent()) {
				info.put("status", "2");
				info.put("message", "Examannouncement  not present");
				return info;
			}
			Optional<ProgrammeYear> programyear = super.programmeYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammeYear());
			if (!programyear.isPresent()) {
				info.put("status", "2");
				info.put("message", "ProgrammeYear not present");
				return info;
			}

			Optional<Studentadmission> student = super.studentadmission.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getStudentAdmissionId());

			if (!student.isPresent()) {
				info.put("status", "2");
				info.put("message", "Student not present");
				return info;
			}
			List<CoursesRegistration> coursereg = super.coursesRegistration
					.findByExIsDeleteAndExIsActiveAndCoursesIdAndStudentadmissionId(false, true, courses.get().getId(),
							student.get().getId());

			if (coursereg.size() <= 0) {

				info.put("status", "2");
				info.put("message", "student   not present in courseregistration");
				return info;
			}

			List<Staffpersonal> staff = super.staffpersonal.findByIdAndExIsDelete(request.getStaff(), false);
			if (staff.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Staff id not present");
				return info;
			}
			Date date = new Date();
			Boolean upload = false;
			// List<InternalMarks> internal =
			// InternalMarksRepository.findByExStudentIdAndCoursesIdAndAcademicyearIdAndExIsActiveAndExIsDelete(request.getExStudentId(),
			// course.get().getId(), request.getAcademicYear() , true ,false);

			List<MidTermMarks> getresult = super.midtermmarksMarks
					.findByCollegesIdAndDegreeIdAndProgrammesIdAndCoursesIdAndSemesterIdAndExIsActiveAndExIsDeleteAndStudentadmissionId(
							request.getColleges(), request.getDegree(), request.getProgrammes(), request.getCourses(),
							request.getSemester(), true, false, request.getStudentAdmissionId());
			System.out.println("??//" + getresult);

			if (getresult.size() <= 0) {
				upload = true;
				super.midtermmarksMarks.updateStatus(false, true, request.getColleges(), request.getProgrammes(),
						request.getCourses(), request.getStudentAdmissionId(), request.getDegree());
				MidTermMarks mid = new MidTermMarks();
				mid.setAcademicYear(academic.get());
				mid.setCourses(courses.get());
				mid.setExCreateDate(date);
				mid.setColleges(Colleges.get());
				mid.setProgrammes(Programmes.get());
				mid.setSection(student.get().getSection());
				mid.setProgrammeYear(courses.get().getProgrammeYear());
				mid.setStudentadmission(student.get());
				mid.setDegree(degree.get());
				mid.setStream(stream.get());
				mid.setExRollNo(student.get().getExRollNo());
				mid.setExIsActive(true);
				mid.setExIsDelete(false);
				mid.setExIsSave(false);
				mid.setExIsSubmit(false);
				mid.setStaff(staff.get(0));
				mid.setExPracticalRecordMarks(request.getExPracticalRecordMarks());
				mid.setSemester(sem.get());
				mid.setDepartment(courses.get().getDepartment());
				mid.setExamAnnouncement(examannouncement.get());
				super.midtermmarksMarks.save(mid);
			} else {
				int retval = super.midtermmarksMarks.updatePracticalRecordMarksByStaff(
						request.getExPracticalRecordMarks(), date, request.getAcademicYear(), request.getColleges(),
						request.getProgrammes(), request.getCourses(), request.getStudentAdmissionId(),
						request.getDegree(), courses.get().getProgrammeYear().getId(), staff.get(0).getId(),
						student.get().getSection());
			}
			if (upload) {
				info.put("status", "1");
				info.put("message", "Practical Marks saved successfully");
				return info;

			} else {
				info.put("status", "1");
				info.put("message", "Practical Marks updated successfully");
				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> saveAttendanceMarks(InternalMarksRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {

			Optional<Colleges> Colleges = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),
					false, true);
			if (!Colleges.isPresent() || !Colleges.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<Programmes> Programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Programmes.isPresent() || !Programmes.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department not present");
				return info;
			}

			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent() || !academic.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}

			Optional<Courses> courses = super.courses.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getCourses());
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not present");
				return info;
			}
			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "semester not present");
				return info;
			}
			Optional<Stream> stream = super.stream.findByExIsDeleteAndExIsActiveAndId(false, true, request.getStream());
			if (!stream.isPresent()) {
				info.put("status", "2");
				info.put("message", "stream not present");
				return info;
			}
			if (request.getExAttendenceMarks() == null) {
				info.put("status", "2");
				info.put("message", "attendance marks  is required");
				return info;
			}
			Optional<CoursesType> coursestype = super.coursestype
					.findByIdAndExIsDeleteAndExIsActive(request.getCoursesType(), false, true);
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "coursestype not present");
				return info;
			}
			Optional<ExamAnnouncement> examannouncement = super.examAnnouncement
					.findByExIsDeleteAndExIsActiveAndId(false, true, request.getExamAnnouncement());
			if (!examannouncement.isPresent()) {
				info.put("status", "2");
				info.put("message", "Examannouncement  not present");
				return info;
			}
			Optional<ProgrammeYear> programyear = super.programmeYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammeYear());
			if (!programyear.isPresent()) {
				info.put("status", "2");
				info.put("message", "ProgrammeYear not present");
				return info;
			}

			Optional<Studentadmission> student = super.studentadmission.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getStudentAdmissionId());

			if (!student.isPresent()) {
				info.put("status", "2");
				info.put("message", "Student not registered");
				return info;
			}
			List<CoursesRegistration> coursereg = super.coursesRegistration
					.findByExIsDeleteAndExIsActiveAndCoursesIdAndStudentadmissionId(false, true, courses.get().getId(),
							student.get().getId());

			if (coursereg.size() <= 0) {

				info.put("status", "2");
				info.put("message", "student   not present in courseregistration");
				return info;
			}

			List<Staffpersonal> staff = super.staffpersonal.findByIdAndExIsDelete(request.getStaff(), false);
			if (staff.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Staff id not present");
				return info;
			}
			Date date = new Date();
			Boolean upload = false;
			// List<InternalMarks> internal =
			// InternalMarksRepository.findByExStudentIdAndCoursesIdAndAcademicyearIdAndExIsActiveAndExIsDelete(request.getExStudentId(),
			// course.get().getId(), request.getAcademicYear() , true ,false);

			List<MidTermMarks> getresult = super.midtermmarksMarks
					.findByCollegesIdAndDegreeIdAndProgrammesIdAndCoursesIdAndSemesterIdAndExIsActiveAndExIsDeleteAndStudentadmissionId(
							request.getColleges(), request.getDegree(), request.getProgrammes(), request.getCourses(),
							request.getSemester(), true, false, request.getStudentAdmissionId());
			System.out.println("??//" + getresult);

			String remarks = "NA";
			Double marks = 0.0;
			if (super.commonHelper.isNumeric(request.getExAttendenceMarks())) {
				marks = commonHelper.getMarks(request.getExAttendenceMarks());
			} else {
				if (request.getExAttendenceMarks() == null || request.getExAttendenceMarks().trim().equals("")) {
					remarks = "NA";
				} else {
					remarks = request.getExAttendenceMarks();
				}
			}

			if (getresult.size() <= 0) {
				upload = true;
				super.midtermmarksMarks.updateStatus(false, true, request.getColleges(), request.getProgrammes(),
						request.getCourses(), request.getStudentAdmissionId(), request.getDegree());
				MidTermMarks mid = new MidTermMarks();
				mid.setAcademicYear(academic.get());
				mid.setCourses(courses.get());
				mid.setExCreateDate(date);
				mid.setColleges(Colleges.get());
				mid.setProgrammes(Programmes.get());
				mid.setSection(student.get().getSection());
				mid.setProgrammeYear(courses.get().getProgrammeYear());
				mid.setStudentadmission(student.get());
				mid.setExRollNo(student.get().getExRollNo());
				mid.setDegree(degree.get());
				mid.setStream(stream.get());
				mid.setExRollNo(student.get().getExRollNo());
				mid.setExIsActive(true);
				mid.setExIsDelete(false);
				mid.setExIsSave(false);
				mid.setExIsSubmit(false);
				mid.setStaff(staff.get(0));
				mid.setExAttendenceMarks(marks);

				mid.setExAttendenceRemark(remarks);
				mid.setSemester(sem.get());
				mid.setDepartment(courses.get().getDepartment());
				mid.setExamAnnouncement(examannouncement.get());
				super.midtermmarksMarks.save(mid);
			} else {
				int retval = super.midtermmarksMarks.updateAttendanceMarksByStaff(marks, date,
						request.getAcademicYear(), request.getColleges(), request.getProgrammes(), request.getCourses(),
						request.getStudentAdmissionId(), request.getDegree(), courses.get().getProgrammeYear().getId(),
						staff.get(0).getId(), student.get().getSection(), remarks);
			}
			if (upload) {
				info.put("status", "1");
				info.put("message", "AttendanceMarks saved successfully");
				return info;

			} else {
				info.put("status", "1");
				info.put("message", "AttendanceMarks updated successfully");
				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> savePracticalExternalMarks(InternalMarksRequest request) {

		Map<String, Object> info = new LinkedHashMap<>();
		try {

			Optional<ProgrammeYear> programyear = super.programmeYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammeYear());
			if (!programyear.isPresent()) {
				info.put("status", "2");
				info.put("message", "ProgrammeYear not present");
				return info;
			}
			Optional<ExamAnnouncement> Examannouncement = super.examAnnouncement
					.findByExIsDeleteAndExIsActiveAndId(false, true, request.getExamAnnouncement());
			if (!Examannouncement.isPresent()) {
				info.put("status", "2");
				info.put("message", "Examannouncement id not present");
				return info;
			}

			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!sem.isPresent()) {
				info.put("status", "2");
				info.put("message", " Semster not present");
				return info;
			}

			Optional<Colleges> col = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!col.isPresent()) {
				info.put("status", "2");
				info.put("message", "college id not present");
				return info;
			}

			Optional<Programmes> Prog = super.programme.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Prog.isPresent()) {
				info.put("status", "2");
				info.put("message", " Programe not present");
				return info;
			}
			Optional<AcademicYear> academic = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getAcademicYear());
			if (!Prog.isPresent()) {
				info.put("status", "2");
				info.put("message", " academic year not present");
				return info;
			}

			Optional<Courses> courses = super.courses.findByIdAndExIsDeleteAndExIsActive(request.getCourses(), false,
					true);
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<Department> department = super.department
					.findByIdAndExIsDeleteAndExIsActive(request.getDepartment(), false, true);
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "department  not present");
				return info;
			}
			List<RegistrationType> registration = super.registrationType
					.findByIdAndExIsDelete(request.getRegistrationType(), false);
			if (registration.size() <= 0) {
				info.put("status", "2");
				info.put("message", "RegistrationType id not present");
				return info;
			}

			Optional<ExamAttendance> ExamAttendance = super.examAttendance
					.findByExIsDeleteAndExIsActiveAndStudentadmissionIdAndCollegesIdAndDegreeIdAndProgrammesIdAndExamAnnouncementIdAndCoursesId(
							false, true, request.getStudentAdmissionId(), request.getColleges(), request.getDegree(),
							request.getProgrammes(), request.getExamAnnouncement(), request.getCourses());

			if (!ExamAttendance.isPresent()) {
				info.put("status", "2");
				info.put("message", "examattendance   not present");
				return info;
			}

			User users;
			if (request.getUser() == null || request.getUser().equals("")) {
				users = null;
			} else {
				List<User> user = super.user.findByIdAndExIsDeleteAndExIsActive(request.getUser(), false, true);
				if (user.size() <= 0) {
					info.put("status", "2");
					info.put("message", "User id not present");
					return info;
				}
				users = user.get(0);

			}
			Date date = new Date();
			int retval = super.ExamBarcodes.UpdatelabExperiment(commonHelper.getMarks(request.getExLabExperiment()),
					commonHelper.getMarks(request.getExViva()), request.getExIsPracticalAttendance(), date,
					degree.get().getId(), sem.get().getId(), programyear.get().getId(), Prog.get().getId(),
					courses.get().getId(), request.getStudentAdmissionId(), true, false, users,
					request.getExamAnnouncement(), registration.get(0).getId());
			if (retval == 1) {
				info.put("status", "1");
				info.put("message", "Practicalexternal Marks  updated successfully");
				return info;
			} else {
				info.put("status", "2");
				info.put("message", "Practicalexternal Marks not updated");
				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> sumbitInternalMarks(InternalMarksRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {

			if (request.getStudentList().size() <= 0) {
				info.put("status", "2");
				info.put("message", "Please select Student List");
				return info;
			}
			Optional<ProgrammeYear> programyear = super.programmeYear
					.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
			if (!programyear.isPresent()) {
				info.put("status", "2");
				info.put("message", "ProgrammeYear not present");
				return info;
			}
			Optional<AcademicYear> academicYearid = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academicYearid.isPresent()) {
				info.put("status", "2");
				info.put("message", "AcademicYear id not present");
				return info;
			}

			Optional<Semster> sem = super.semester.findByIdAndExIsActiveAndExIsDelete(request.getSemester(), true,
					false);
			if (!sem.isPresent()) {
				info.put("status", "2");
				info.put("message", "Semester not present");
				return info;
			}

			Optional<Programmes> Prog = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Prog.isPresent()) {
				info.put("status", "2");
				info.put("message", "Programmes not present");
				return info;
			}
			Optional<Courses> course = super.courses.findByIdAndExIsDeleteAndExIsActive(request.getCourses(), false,
					true);
			if (!course.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not  present");
				return info;

			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}

			Optional<Colleges> collage = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!collage.isPresent()) {
				info.put("status", "2");
				info.put("message", "College Id not Present");
				return info;
			}

			Optional<Department> department = super.department
					.findByIdAndExIsDeleteAndExIsActive(request.getDepartment(), false, true);
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department Id not Present");
				return info;
			}

			List<Staffpersonal> staff = super.staffpersonal.findByIdAndExIsDelete(request.getStaff(), false);
			if (staff.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Staff id not present");
				return info;
			}
			int retval = super.midtermmarksMarks.submitIADetails(true, request.getAcademicYear(), request.getColleges(),
					request.getProgrammes(), request.getCourses(), request.getStudentList(), request.getDegree(),
					course.get().getProgrammeYear().getId(), request.getDepartment(), request.getSemester());

			info.put("status", "1");
			info.put("message", "Internal component Marks submited successfully");
			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> saveInternalMarks(InternalMarksRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {

			List<Studentadmission> admision = super.studentadmission
					.findByExRollNoAndProgrammesIdAndExIsActiveAndExIsDelete(request.getExRollNo(),
							request.getProgrammes(), true, false);
			if (admision.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Student not found for selected program");
				return info;
			}

			Optional<ProgrammeYear> programyear = super.programmeYear
					.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
			if (!programyear.isPresent()) {
				info.put("status", "2");
				info.put("message", "ProgrammeYear not present");
				return info;
			}

			Optional<ExamAnnouncement> examAnnouncement = super.examAnnouncement
					.findByExIsDeleteAndExIsActiveAndId(false, true, request.getExamAnnouncement());
			if (!examAnnouncement.isPresent()) {
				info.put("status", "2");
				info.put("message", "ExamAnnouncement not present");
				return info;
			}

			Optional<AcademicYear> academicYearid = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academicYearid.isPresent()) {
				info.put("status", "2");
				info.put("message", "AcademicYear id not present");
				return info;
			}

			Optional<Semster> sem = super.semester.findByIdAndExIsActiveAndExIsDelete(request.getSemester(), true,
					false);
			if (!sem.isPresent()) {
				info.put("status", "2");
				info.put("message", "Semster not present");
				return info;
			}

			Optional<Programmes> Prog = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Prog.isPresent()) {
				info.put("status", "2");
				info.put("message", "Programmes not present");
				return info;
			}
			Optional<Courses> course = super.courses.findByIdAndExIsDeleteAndExIsActive(request.getCourses(), false,
					true);
			if (!course.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not  present");
				return info;

			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}

			Optional<Colleges> collage = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!collage.isPresent()) {
				info.put("status", "2");
				info.put("message", "College Id not Present");
				return info;
			}

			Optional<Department> department = super.department.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),
					false, true);
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department Id not Present");
				return info;
			}

			List<Staffpersonal> staff = super.staffpersonal.findByIdAndExIsDelete(request.getStaff(), false);
			if (staff.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Staff id not present");
				return info;
			}

			Date updatedate = new Date();
			Boolean upload = false;
			List<MidTermMarks> internal = super.midtermmarksMarks
					.findByExRollNoAndCoursesIdAndAcademicYearIdAndExIsActiveAndExIsDelete(request.getExRollNo(),
							course.get().getId(), request.getAcademicYear(), true, false);
			logger.info("???????????si??????????" + internal.size());

			Double assigment = 0.0;
			if (super.commonHelper.isNumeric(request.getExAssignmentMarks())) {
				assigment = commonHelper.getMarks(request.getExAssignmentMarks());
			}
			if (internal.size() <= 0) {
				upload = true;
				super.midtermmarksMarks.updateStatusforMid(false, true, request.getColleges(), request.getProgrammes(),
						request.getCourses(), request.getExRollNo(), request.getDegree(), request.getDepartment());
				MidTermMarks InternalMarks = new MidTermMarks();
				InternalMarks.setStaff(staff.get(0));
				InternalMarks.setExRollNo(request.getExRollNo());
				InternalMarks.setExAssignmentMarks(assigment);
				InternalMarks.setExAttendenceMarks(commonHelper.getMarks(request.getExAttendenceMarks()));
				InternalMarks.setExQuizMarks(commonHelper.getMarks(request.getExQuizMarks()));
				InternalMarks.setExMidTermMarks(commonHelper.getMarks(request.getExMidTermMarks()));
				InternalMarks.setExMidTermRemarks(request.getExMidTermRemarks());
				InternalMarks.setExPracticalLearning(request.getExPracticalLearning());
				InternalMarks.setExPracticalRecordMarks(request.getExPracticalRecordMarks());

				InternalMarks.setSection(admision.get(0).getSection());
				InternalMarks.setColleges(collage.get());
				InternalMarks.setAcademicYear(academicYearid.get());
				InternalMarks.setProgrammes(Prog.get());
				InternalMarks.setDegree(degree.get());
				InternalMarks.setCourses(course.get());
				InternalMarks.setExCreateDate(updatedate);
				InternalMarks.setSemester(sem.get());
				InternalMarks.setDepartment(department.get());
				InternalMarks.setProgrammeYear(programyear.get());
				InternalMarks.setExamAnnouncement(examAnnouncement.get());
				InternalMarks.setExIsActive(true);
				InternalMarks.setExIsDelete(false);
				InternalMarks.setExIsSave(true);
				InternalMarks.setStudentadmission(admision.get(0));
				InternalMarks.setStream(admision.get(0).getStream().get(0));
				InternalMarks.setExIsSubmit(false);
				super.midtermmarksMarks.save(InternalMarks);
			} else {
				logger.info("????????????????????" + request);

				int retval = super.midtermmarksMarks.updateIADetailsByStaff(assigment,
						commonHelper.getMarks(request.getExAttendenceMarks()),
						commonHelper.getMarks(request.getExQuizMarks()),
						commonHelper.getMarks(request.getExMidTermMarks()), request.getExMidTermRemarks(),
						request.getExPracticalLearning(), request.getExPracticalRecordMarks(), updatedate,
						request.getAcademicYear(), request.getColleges(), request.getProgrammes(), request.getCourses(),
						request.getExRollNo(), request.getDegree(), request.getProgrammeYear(), staff.get(0).getId(),
						request.getDepartment());
			}

			// Boolean internalReortLoger = internalReortLoger(collage.get() , degree.get(),
			// course.get() ,
			// Prog.get(),staff.get(0),programyear.get(),request.getRemark(),false,"save"
			// ,academicYearid.get(), sem.get (),request.getExStudentId());

			if (upload) {
				info.put("status", "1");
				info.put("message", "InternalMarks saved successfully");
				return info;

			} else {
				info.put("status", "1");
				info.put("message", "InternalMarks updated successfully");
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> studentForInternalMarks(InternalMarksRequest request) {
		List dataList = new LinkedList();
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Optional<Courses> courses = super.courses.findByIdAndExIsDeleteAndExIsActive(request.getCourses(), false,
					true);
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not  present");
				return info;

			}

			Optional<ProgrammeYear> programyear = super.programmeYear
					.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
			if (!programyear.isPresent()) {
				info.put("status", "2");
				info.put("message", "ProgrammeYear not present");
				return info;
			}

			Optional<AcademicYear> academicYearid = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academicYearid.isPresent()) {
				info.put("status", "2");
				info.put("message", "AcademicYear id not present");
				return info;
			}

			Optional<Semster> sem = super.semester.findByIdAndExIsActiveAndExIsDelete(request.getSemester(), true,
					false);
			if (!sem.isPresent()) {
				info.put("status", "2");
				info.put("message", "Semster not present");
				return info;
			}

			Optional<Programmes> Prog = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Prog.isPresent()) {
				info.put("status", "2");
				info.put("message", "Programmes not present");
				return info;
			}
			Optional<Courses> course = super.courses.findByIdAndExIsDeleteAndExIsActive(request.getCourses(), false,
					true);
			if (!course.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not  present");
				return info;

			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}

			Optional<Colleges> collage = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!collage.isPresent()) {
				info.put("status", "2");
				info.put("message", "College Id not Present");
				return info;
			}

			Optional<Department> department = super.department.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),
					false, true);
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department Id not Present");
				return info;
			}

			Section sections = null;
			Long Section = null;
			String Sectionsname = "";
			if (request.getSection() == null || request.getSection().equals("")) {
				Section = null;
				sections = null;
			} else {
				Optional<Section> Sections = super.section.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getSection());
				if (!Sections.isPresent()) {
					info.put("status", "2");
					info.put("message", "Section id not present");
					return info;
				}
				sections = Sections.get();
				Section = Sections.get().getId();
				Sectionsname = Sections.get().getExName();
			}

			// int semester_status = 0;
			List<Object[]> stuid = super.coursesRegistration.getDetails(request.getDegree(), request.getAcademicYear(),
					request.getProgrammes(), request.getCourses(), request.getProgrammeYear(), request.getSemester(),
					request.getColleges(), Section, request.getDepartment());
			if (stuid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "student registration are pending");
				return info;
			}

			for (Object[] e : stuid) {
				Map<Object, Object> studentinfo = new HashMap<Object, Object>();
				// get Student Internal marks if present
				List<MidTermMarks> getresult = super.midtermmarksMarks
						.findByDegreeIdAndCoursesIdAndExRollNoAndAcademicYearIdAndProgrammesIdAndExIsActiveAndExIsDeleteAndSemesterIdAndProgrammeYearIdAndDepartmentId(
								request.getDegree(), request.getCourses(), e[0].toString(), request.getAcademicYear(),
								request.getProgrammes(), true, false, request.getSemester(), request.getProgrammeYear(),
								request.getDepartment());
				if (getresult.size() <= 0) {
					studentinfo.put("exAssignmentMarks", "");
					studentinfo.put("exMidTermRemarks", "");
					studentinfo.put("exAttendenceMarks", "");
					studentinfo.put("exMidTermMarks", "");
					studentinfo.put("exPracticalLearning", "");
					studentinfo.put("exPracticalRecordMarks", "");
					studentinfo.put("exCaseStudy", "");
					studentinfo.put("exQuizMarks", "");
					studentinfo.put("exStudentId", e[0]);
					studentinfo.put("exCoursesName", e[1]);
					studentinfo.put("exFirstName", e[2]);
					studentinfo.put("exCoursesCode", e[5]);
					studentinfo.put("exCreditHourTitle", e[6]);
					studentinfo.put("studentAdmissionId", e[7]);
					studentinfo.put("exIsSave", false);
					studentinfo.put("exIsSubmit", false);
					studentinfo.put("exLabExperiments", "-");
					studentinfo.put("exViva", "-");
					dataList.add(studentinfo);
				} else {
					if (getresult.get(0).getExIsSubmit() != null && getresult.get(0).getExIsSubmit() == false) {
						// studentinfo.put("exAssignmentMarks", getresult.get(0).getExAssignmentMarks()
						// == null ?"0.0":getresult.get(0).getExAssignmentMarks());

						if (getresult.get(0).getExAssignmentMarkRemark() == null
								|| getresult.get(0).getExAssignmentMarkRemark().equals("NA")) {
							studentinfo.put("exAssignmentMarks", getresult.get(0).getExAssignmentMarks() == null ? "-"
									: getresult.get(0).getExAssignmentMarks());
						} else {
							studentinfo.put("exAssignmentMarks",
									getresult.get(0).getExAssignmentMarkRemark() == null ? "-"
											: getresult.get(0).getExAssignmentMarkRemark());

						}

						if (getresult.get(0).getExQuizRemark() == null
								|| getresult.get(0).getExQuizRemark().equals("NA")) {
							studentinfo.put("exQuizMarks", getresult.get(0).getExQuizMarks() == null ? "-"
									: getresult.get(0).getExQuizMarks());
						} else {
							studentinfo.put("exQuizMarks", getresult.get(0).getExQuizRemark() == null ? "-"
									: getresult.get(0).getExQuizRemark());

						}
						if (getresult.get(0).getExAttendenceRemark() == null
								|| getresult.get(0).getExAttendenceRemark().equals("NA")) {
							studentinfo.put("exAttendenceMarks", getresult.get(0).getExAttendenceMarks() == null ? "-"
									: getresult.get(0).getExAttendenceMarks());
						} else {
							studentinfo.put("exAttendenceMarks", getresult.get(0).getExAttendenceRemark() == null ? "-"
									: getresult.get(0).getExAttendenceRemark());

						}
						if (getresult.get(0).getExMidTermRemarks() == null
								|| getresult.get(0).getExMidTermRemarks().equals("NA")) {
							studentinfo.put("exMidTermMarks", getresult.get(0).getExMidTermMarks() == null ? "-"
									: getresult.get(0).getExMidTermMarks());
						} else {
							studentinfo.put("exMidTermMarks", getresult.get(0).getExMidTermRemarks() == null ? "-"
									: getresult.get(0).getExMidTermRemarks());

						}

						if (getresult.get(0).getExCaseStudyRemark() == null
								|| getresult.get(0).getExCaseStudyRemark().equals("NA")) {
							studentinfo.put("exCaseStudy", getresult.get(0).getExCaseStudy() == null ? "-"
									: getresult.get(0).getExCaseStudy());
						} else {
							studentinfo.put("exCaseStudy", getresult.get(0).getExCaseStudyRemark() == null ? "-"
									: getresult.get(0).getExCaseStudyRemark());

						}

						/// studentinfo.put("exAttendenceMarks",
						/// getresult.get(0).getExAttendenceMarks()== null
						/// ?"0.0":getresult.get(0).getExAttendenceMarks());
						studentinfo.put("exMidTermMarks", getresult.get(0).getExMidTermMarks() == null ? "0.0"
								: getresult.get(0).getExMidTermMarks());
						studentinfo.put("exMidTermRemarks", getresult.get(0).getExMidTermRemarks() == null ? "NA"
								: getresult.get(0).getExMidTermRemarks());
						studentinfo.put("exPracticalLearning", getresult.get(0).getExPracticalLearning() == null ? "0.0"
								: getresult.get(0).getExPracticalLearning());
						studentinfo.put("exPracticalRecordMarks",
								getresult.get(0).getExPracticalRecordMarks() == null ? "0.0"
										: getresult.get(0).getExPracticalRecordMarks());
						// studentinfo.put("exQuizMarks", getresult.get(0).getExQuizMarks()== null
						// ?"0.0":getresult.get(0).getExQuizMarks());
						// get the marks

						List<Object[]> external = super.accademicdao.getExternalMarks(request.getCourses(),
								e[0].toString(), request.getAcademicYear());
						if (external.size() <= 0) {
							studentinfo.put("exLabExperiments", "");
							studentinfo.put("exViva", "");
						} else {
							studentinfo.put("exLabExperiments", external.get(0)[0] == null ? "-" : external.get(0)[0]);
							studentinfo.put("exViva", external.get(0)[1] == null ? "-" : external.get(0)[1]);
						}
						studentinfo.put("exStudentId", e[0]);
						studentinfo.put("exCoursesName", e[1]);
						studentinfo.put("exFirstName", e[2]);
						studentinfo.put("exCoursesCode", e[5]);
						studentinfo.put("exCreditHourTitle", e[6]);
						studentinfo.put("exIsSave", getresult.get(0).getExIsSave());
						studentinfo.put("exIsSubmit", getresult.get(0).getExIsSubmit());
						studentinfo.put("studentAdmissionId", e[7]);

						dataList.add(studentinfo);
					}
				}

			}
			if (dataList.size() > 0) {
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			} else {
				info.put("status", "2");
				info.put("message", "Internal component marks already submitted, Please contact  for marks Update!!!");
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> savePracticalLearningMarks(InternalMarksRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {

			Optional<Colleges> Colleges = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),
					false, true);
			if (!Colleges.isPresent() || !Colleges.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<Programmes> Programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Programmes.isPresent() || !Programmes.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department not present");
				return info;
			}

			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent() || !academic.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}

			Optional<Courses> courses = super.courses.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getCourses());
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not present");
				return info;
			}
			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "semester not present");
				return info;
			}
			Optional<Stream> stream = super.stream.findByExIsDeleteAndExIsActiveAndId(false, true, request.getStream());
			if (!stream.isPresent()) {
				info.put("status", "2");
				info.put("message", "stream not present");
				return info;
			}
			if (request.getExPracticalLearning() == null) {
				info.put("status", "2");
				info.put("message", "practical learning marks  is required");
				return info;
			}

			Optional<CoursesType> coursestype = super.coursestype
					.findByIdAndExIsDeleteAndExIsActive(request.getCoursesType(), false, true);
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "coursestype not present");
				return info;
			}
			Optional<ExamAnnouncement> examannouncement = super.examAnnouncement
					.findByExIsDeleteAndExIsActiveAndId(false, true, request.getExamAnnouncement());
			if (!examannouncement.isPresent()) {
				info.put("status", "2");
				info.put("message", "Examannouncement  not present");
				return info;
			}
			Optional<ProgrammeYear> programyear = super.programmeYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammeYear());
			if (!programyear.isPresent()) {
				info.put("status", "2");
				info.put("message", "ProgrammeYear not present");
				return info;
			}

			Optional<Studentadmission> student = super.studentadmission.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getStudentAdmissionId());

			if (!student.isPresent()) {
				info.put("status", "2");
				info.put("message", "Student not present");
				return info;
			}
			List<CoursesRegistration> coursereg = super.coursesRegistration
					.findByExIsDeleteAndExIsActiveAndCoursesIdAndStudentadmissionId(false, true, courses.get().getId(),
							student.get().getId());

			if (coursereg.size() <= 0) {

				info.put("status", "2");
				info.put("message", "student   not present in courseregistration");
				return info;
			}

			List<Staffpersonal> staff = super.staffpersonal.findByIdAndExIsDelete(request.getStaff(), false);
			if (staff.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Staff id not present");
				return info;
			}
			Date date = new Date();
			Boolean upload = false;
			// List<InternalMarks> internal =
			// InternalMarksRepository.findByExStudentIdAndCoursesIdAndAcademicyearIdAndExIsActiveAndExIsDelete(request.getExStudentId(),
			// course.get().getId(), request.getAcademicYear() , true ,false);

			List<MidTermMarks> getresult = super.midtermmarksMarks
					.findByCollegesIdAndDegreeIdAndProgrammesIdAndCoursesIdAndSemesterIdAndExIsActiveAndExIsDeleteAndStudentadmissionId(
							request.getColleges(), request.getDegree(), request.getProgrammes(), request.getCourses(),
							request.getSemester(), true, false, request.getStudentAdmissionId());
			System.out.println("??//" + getresult);

			if (getresult.size() <= 0) {
				upload = true;
				super.midtermmarksMarks.updateStatus(false, true, request.getColleges(), request.getProgrammes(),
						request.getCourses(), request.getStudentAdmissionId(), request.getDegree());
				MidTermMarks mid = new MidTermMarks();
				mid.setAcademicYear(academic.get());
				mid.setCourses(courses.get());
				mid.setExCreateDate(date);
				mid.setColleges(Colleges.get());
				mid.setProgrammes(Programmes.get());
				mid.setSection(student.get().getSection());
				mid.setProgrammeYear(courses.get().getProgrammeYear());
				mid.setStudentadmission(student.get());
				mid.setDegree(degree.get());
				mid.setStream(stream.get());
				mid.setExRollNo(student.get().getExRollNo());
				mid.setExIsActive(true);
				mid.setExIsDelete(false);
				mid.setStaff(staff.get(0));
				mid.setExPracticalLearning(request.getExPracticalLearning());
				mid.setSemester(sem.get());
				mid.setDepartment(courses.get().getDepartment());
				mid.setExamAnnouncement(examannouncement.get());
				super.midtermmarksMarks.save(mid);
			} else {
				int retval = super.midtermmarksMarks.updatePracticalMarksByStaff(request.getExPracticalLearning(), date,
						request.getAcademicYear(), request.getColleges(), request.getProgrammes(), request.getCourses(),
						request.getStudentAdmissionId(), request.getDegree(), courses.get().getProgrammeYear().getId(),
						staff.get(0).getId(), student.get().getSection());
			}
			if (upload) {
				info.put("status", "1");
				info.put("message", "Practical Marks saved successfully");
				return info;

			} else {
				info.put("status", "1");
				info.put("message", "Practical Marks updated successfully");
				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> validateInternalMarks(SemesterRegistrationConfigurationRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Optional<Colleges> Colleges = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),
					false, true);
			if (!Colleges.isPresent() || !Colleges.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}

			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent() || !academic.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}

			Optional<Programmes> Programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Programmes.isPresent() || !Programmes.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}

			Optional<ProgrammeYear> programmeYear = super.programmeYear
					.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
			if (!programmeYear.isPresent() || !programmeYear.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!sem.isPresent() || !sem.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Semster not present");
				return info;
			}

			Optional<ExamAnnouncement> examAnnouncement = super.examAnnouncement
					.findByExIsDeleteAndExIsActiveAndId(false, true, request.getExamAnnouncement());
			if (!examAnnouncement.isPresent() || !examAnnouncement.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "examAnnouncement not present");
				return info;
			}
			Date date = new Date();
			List<InternalMarksConfiguration> task = super.internalMarksConfiguration
					.findByExIsDeleteAndExIsActiveAndProgrammesIdAndCollegesIdAndDegreeIdAndAcademicYearIdAndProgrammeYearIdAndSemesterIdAndExamAnnouncementId(
							false, true, request.getProgrammes(), request.getColleges(), request.getDegree(),
							request.getAcademicYear(), request.getProgrammeYear(), request.getSemester(),
							request.getExamAnnouncement());

			System.out.println("sssssssssssssssssss" + task.size());
			if (task.size() > 0) {
				// if registration start date is grater than or equals current date than
				// registration started
				if (!date.after(task.get(0).getExStartDate())) {
					info.put("status", "2");
					info.put("message", "Internal marks feeding process not started");
					return info;
				}
				if (!date.before(task.get(0).getExEndDate())) {
					info.put("status", "3");
					info.put("message", "Internal marks feeding process closed");
					return info;
				}

				if (date.after(task.get(0).getExStartDate()) && date.before(task.get(0).getExEndDate())) {
					info.put("status", "1");
					info.put("message", "Internal marks feeding process is open");
					return info;
				} else {
					info.put("status", "3");
					info.put("message", "Internal marks feeding process closed");
					return info;
				}
			} else {
				info.put("status", "2");
				info.put("message", "No records found");
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getRegisteredCourse(SemesterRegistrationRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {

			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent() || !academic.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}

			Optional<ProgrammeYear> programmeYear = super.programmeYear
					.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
			if (!programmeYear.isPresent() || !programmeYear.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!sem.isPresent() || !sem.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Semster not present");
				return info;
			}

			Optional<Studentadmission> studentadmission = super.studentadmission
					.findByExIsDeleteAndExIsActiveAndExRollNo(false, true, request.getExRollNo());
			if (!studentadmission.isPresent()) {
				info.put("status", "2");
				info.put("message", "student not present");
				return info;
			}

			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department not present");
				return info;
			}

			List<CoursesRegistration> tasks = super.coursesRegistration
					.findByExIsDeleteAndSemesterIdAndProgrammeYearIdAndAcademicYearIdAndDepartmentIdAndStudentadmissionId(
							false, request.getSemester(), request.getProgrammeYear(), request.getAcademicYear(),
							request.getDepartment(), studentadmission.get().getId());
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Courses not Registerd for particular student");
				return info;
			} else {
				List dataList = new LinkedList();
				for (CoursesRegistration e : tasks) {

					Map<Object, Object> coursesdata = new HashMap<Object, Object>();
					coursesdata.put("id", e.getId());
					coursesdata.put("courseId", e.getCourses().getId());

					coursesdata.put("courseName", e.getCourses().getExName());
					coursesdata.put("exCourseCode", e.getCourses().getExCoursesCode());
					coursesdata.put("studentId", e.getStudentadmission().getId());
					coursesdata.put("studentName", e.getStudentadmission().getExName());
					coursesdata.put("exIsActive", e.getExIsActive());
					coursesdata.put("exIsDelete", e.getExIsDelete());
					coursesdata.put("exCourseType",
							e.getCourses().getExSubjectCode() == null ? "NA" : e.getCourses().getExSubjectCode());
					dataList.add(coursesdata);
				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> deleteCourseRegistration(CoursesRegistrationRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			if (request.getStudentLists().size() <=0) {
				info.put("status", "2");
				info.put("message", "student Id is required");
				return info;
			}
			
			
			for (int j = 0; j < request.getStudentLists().size(); j++) {
				Long number = request.getStudentLists().get(j);
				Long col = new Long(number);
				Optional<Studentadmission> studentadmission = super.studentadmission.findById(col);		
				
				if (!studentadmission.isPresent()) {
					info.put("status", "2");
					info.put("message", "student not present"); 
					return info; 
				}
		
					//List<CoursesRegistration>  task= super.coursesRegistration.findByStudentadmissionIdAndCoursesIdIn(studentadmission.get().getId(), request.getCourses());
				List<CoursesRegistration>  task= super.coursesRegistration.findByStudentadmissionIdAndCoursesId(studentadmission.get().getId(), request.getCourse());
				if (task.size() > 0) {	
					String NA="";
					for(int i=0;i<task.size();i++)
					{
						NA=NA+task.get(i).getCourses().getId()+",";
					}
					
					
					List<Long> list = Arrays.asList(NA.split(",")).stream().map(s -> Long.parseLong(s.trim())).collect(Collectors.toList());
					

					Long privailageid = 50L;
					User userid = super.commonHelper.getuser(request.getUser());
					String Description = coursesRegistration.toString();
					Boolean audit = super.commonHelper.saveauditlogdetails(false, Description, userid, privailageid);
					int result = super.coursesRegistration.deleteCourse(studentadmission.get().getId(), list);
					System.out.println(">>result>"+result);
								
				List<MidTermMarks>  inforamtion= super.midtermmarksMarks.findByStudentadmissionIdAndCoursesIdIn(studentadmission.get().getId(),list);
				if (inforamtion.size() >= 0) {	
				Long privailageidMid = 50L;
				User useridMid = super.commonHelper.getuser(request.getUser());
				String DescriptionMid = midtermmarksMarks.toString();
				Boolean auditMid = super.commonHelper.saveauditlogdetails(false, DescriptionMid, useridMid, privailageidMid);
					int UpdateMidtermTable = super.midtermmarksMarks.deleteCourseFromMidtermTable(studentadmission.get().getId(), list);	
				}
					
				List<ExamBarcodes>  detailsOf= super.ExamBarcodes.findByStudentadmissionIdAndCoursesIdIn(studentadmission.get().getId(),list );
					if (detailsOf.size() >= 0) {	
				Long privailageidExam = 50L;
				User useridExam = super.commonHelper.getuser(request.getUser());
				String DescriptionExam = ExamBarcodes.toString();
				Boolean auditExam = super.commonHelper.saveauditlogdetails(false, DescriptionExam, useridExam, privailageidExam);
				int UpdateExamTable = super.ExamBarcodes.deleteCourseFromExamTable(studentadmission.get().getId(),list);
					}
				
				List<GradeReport>  detailsOfGrades= super.gradeReport.findByStudentadmissionIdAndCoursesIdIn(studentadmission.get().getId(), list);
					if (detailsOfGrades.size() >= 0) {	
				Long privailageidGrade = 50L;
				User useridGrade = super.commonHelper.getuser(request.getUser());
				String DescriptionGrade = gradeReport.toString();
				Boolean auditGrade = super.commonHelper.saveauditlogdetails(false, DescriptionGrade, useridGrade, privailageidGrade);
				int UpdateGradeReport = super.gradeReport.deleteCourseFromGradeTable(studentadmission.get().getId(), list);
					}
				

				List<ExamAttendance>  detailsOfExamAttendance= super.examAttendance.findByStudentadmissionIdAndCoursesIdIn(studentadmission.get().getId(),list);
					if (detailsOfExamAttendance.size() >= 0) {	
				Long privailageidAtt = 50L;
				User useridAtt = super.commonHelper.getuser(request.getUser());
				String DescriptionAtt = examAttendance.toString();
				Boolean auditAtt = super.commonHelper.saveauditlogdetails(false, DescriptionAtt, useridAtt, privailageidAtt);
				int UpdateExamAttendance = super.examAttendance.deleteCourseFromAttendanceTable(studentadmission.get().getId(), list);
					}
					
					
					info.put("status", "1");
					info.put("message", "Registerd Course deleted successfully");
					//return info;
				}
			}
			
		
			info.put("status", "1");
			info.put("message", "Registerd Course deleted successfully");
			return info;
			
			
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> courseRegistrationByAdmin(SemesterRegistrationRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {

			Optional<Courses> course = super.courses.findByIdAndExIsDeleteAndExIsActive(request.getCourse(), false,true);
			if (!course.isPresent()) {
				info.put("status", "2");
				info.put("message", "course not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}

			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent() || !academic.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}

			Optional<ProgrammeYear> programmeYear = super.programmeYear
					.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
			if (!programmeYear.isPresent() || !programmeYear.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!sem.isPresent() || !sem.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Semster not present");
				return info;
			}

			Optional<ExamAnnouncement> examAnnouncement = super.examAnnouncement
					.findByIdAndExIsDeleteAndExIsActive(request.getExamAnnouncement(), false, true);
			if (!examAnnouncement.isPresent()) {
				info.put("status", "2");
				info.put("message", "ExamAnnouncement not present");
				return info;
			}
			

			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department not present");
				return info;
			}
			List<RegistrationType> registration = super.registrationType
					.findByIdAndExIsDeleteAndExIsActive(request.getRegistrationType(), false, true);
			if (registration.size() <= 0) {
				info.put("status", "2");
				info.put("message", "RegistrationType not present");
				return info;
			}

			Optional<Programmes> program = super.programmes.findByIdAndExIsDeleteAndExIsActive(request.getProgrammes(),
					false, true);
			if (!program.isPresent()) {
				info.put("status", "2");
				info.put("message", "programmes not present");
				return info;
			}
			//List<Courses> courses = new ArrayList<Courses>();
			for (int i = 0; i < request.getStudentLists().size(); i++) {
				Long number = request.getStudentLists().get(i);
				Long col = new Long(number);
				Optional<Studentadmission> admision = super.studentadmission.findById(col);				
				if (!admision.isPresent()) {
					info.put("status", "2");
					info.put("message", "Student not present");
					return info;
				}
				List<CoursesRegistration> task = super.coursesRegistration
						.findByExIsDeleteAndExIsActiveAndProgrammesIdAndDegreeIdAndAcademicYearIdAndProgrammeYearIdAndSemesterIdAndRegistrationIdAndCoursesIdAndStudentadmissionIdAndExamAnnouncementId(
								false, true, request.getProgrammes(), request.getDegree(), request.getAcademicYear(),
								request.getProgrammeYear(), request.getSemester(), request.getRegistrationType(),
								request.getCourse(), admision.get().getId(), request.getExamAnnouncement());
				
				if (task.size() > 0) {
					info.put("status", "2");
					info.put("message", "courses already registered");
					return info;
				} else {
					
					Date date = new Date();
					// check semester registration already done
					List<SemesterRegistration> duplicate = super.semesterRegistration
							.findByExIsDeleteAndExIsActiveAndProgrammesIdAndCollegesIdAndDegreeIdAndAcademicYearIdAndProgrammeYearIdAndSemesterIdAndDepartmentIdAndStudentadmissionIdAndExIsRegistration(
									false, true, request.getProgrammes(), admision.get().getColleges().getId(),
									request.getDegree(), request.getAcademicYear(), request.getProgrammeYear(),
									request.getSemester(), request.getDepartment(), admision.get().getId(), true);
					if (duplicate.size() <= 0) {
						SemesterRegistration data = new SemesterRegistration();
						data.setColleges(admision.get().getColleges());
						data.setDegree(degree.get());
						data.setAcademicYear(academic.get());
						data.setProgrammes(program.get());
						data.setDepartment(department.get());
						data.setStream(admision.get().getStream().get(0));
						data.setProgrammeYear(programmeYear.get());
						data.setSemester(sem.get());
						data.setExCreateDate(date);
						data.setExIsActive(true);
						data.setStudentadmission(admision.get());
						data.setExIsRegistration(true);
						data.setExIsDelete(false);
						data.setExIsApproved(false);
						data.setExIsAttendence(false);
						data.setExIsEligible(false);
						data.setExSemesterStatus(false);
						data.setExIsHostelApprove(false);
						data.setExIsLibraryApprove(false);
						data.setExSemesterStatus(false);
						data.setExIsComputerlabApprove(false);
						data.setExIsDeanApprove(false);
						data.setExIsExaminationApprove(false);
						data.setExIsItDepartmentApprove(false);
						data.setExIsMentorApprove(false);
						data.setExIsMentorApprove(false);
						data.setExIsPaid(false);
						data.setRegistrationType(registration.get(0));
						data.setExIsAccountsApprove(false);
						semesterRegistration.save(data);
						// update semester status
						if (request.getSemester() != 1) {
							semesterRegistration.updateStudentStatus(request.getSemester() - 1,
									admision.get().getId());
						}
					}
					CoursesRegistration data = new CoursesRegistration();
					data.setDegree(degree.get());
					data.setAcademicYear(academic.get());
					data.setProgrammes(program.get());
					data.setDepartment(department.get());
					data.setProgrammeYear(programmeYear.get());
					data.setSemester(sem.get());
					data.setExCreateDate(date);
					data.setExIsActive(true);
					data.setStudentadmission(admision.get());
					data.setExIsActive(true);
					data.setStream(course.get().getStream());
					data.setColleges(course.get().getColleges());
					data.setExIsRegistration(true);
					data.setExIsDelete(false);
					data.setExIsApproved(false);
					data.setExIsAttendence(false);
					data.setExIsEligible(false);
					data.setExSemesterStatus(false);
					data.setExSemesterStatus(false);
					data.setRegistration(registration.get(0));
					data.setCourses(course.get());
					data.setExamAnnouncement(examAnnouncement.get());
					super.coursesRegistration.save(data);
					
				}
							
			}
			
			info.put("status", "1");
			info.put("message", "SemesterRegistration completed Succesfully");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> saveCaseStudy(InternalMarksRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {

			Optional<Colleges> Colleges = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),
					false, true);
			if (!Colleges.isPresent() || !Colleges.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<Programmes> Programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Programmes.isPresent() || !Programmes.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department not present");
				return info;
			}

			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent() || !academic.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}

			Optional<Courses> courses = super.courses.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getCourses());
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not present");
				return info;
			}
			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "semester not present");
				return info;
			}
			Optional<Stream> stream = super.stream.findByExIsDeleteAndExIsActiveAndId(false, true, request.getStream());
			if (!stream.isPresent()) {
				info.put("status", "2");
				info.put("message", "stream not present");
				return info;
			}
			Optional<CoursesType> coursestype = super.coursestype
					.findByIdAndExIsDeleteAndExIsActive(request.getCoursesType(), false, true);
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "coursestype not present");
				return info;
			}
			Optional<ExamAnnouncement> examannouncement = super.examAnnouncement
					.findByExIsDeleteAndExIsActiveAndId(false, true, request.getExamAnnouncement());
			if (!examannouncement.isPresent()) {
				info.put("status", "2");
				info.put("message", "Examannouncement  not present");
				return info;
			}
			Optional<ProgrammeYear> programyear = super.programmeYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammeYear());
			if (!programyear.isPresent()) {
				info.put("status", "2");
				info.put("message", "ProgrammeYear not present");
				return info;
			}

			Optional<Studentadmission> student = super.studentadmission.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getStudentAdmissionId());

			if (!student.isPresent()) {
				info.put("status", "2");
				info.put("message", "Student not Present");
				return info;
			}
			List<CoursesRegistration> coursereg = super.coursesRegistration
					.findByExIsDeleteAndExIsActiveAndCoursesIdAndStudentadmissionId(false, true, courses.get().getId(),
							student.get().getId());

			if (coursereg.size() <= 0) {

				info.put("status", "2");
				info.put("message", "student not present in courseregistration");
				return info;
			}

			List<Staffpersonal> staff = super.staffpersonal.findByIdAndExIsDelete(request.getStaff(), false);
			if (staff.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Staff id not present");
				return info;
			}
			Date date = new Date();
			Boolean upload = false;

			List<MidTermMarks> getresult = super.midtermmarksMarks
					.findByCollegesIdAndDegreeIdAndProgrammesIdAndCoursesIdAndSemesterIdAndExIsActiveAndExIsDeleteAndStudentadmissionId(
							request.getColleges(), request.getDegree(), request.getProgrammes(), request.getCourses(),
							request.getSemester(), true, false, request.getStudentAdmissionId());
			System.out.println("??//" + getresult);

			Double marks = 0.0;
			String remarks = "NA";
			if (super.commonHelper.isNumeric(request.getExCaseStudy())) {
				marks = commonHelper.getMarks(request.getExCaseStudy());
			} else {
				if (request.getExCaseStudy() == null || request.getExCaseStudy().trim().equals("")) {
					remarks = "NA";
				} else {
					remarks = request.getExCaseStudy();
				}

			}

			if (getresult.size() <= 0) {
				upload = true;
				// super.midtermmarksMarks.updateStatus(false , true ,
				// request.getColleges(),request.getProgrammes() , request.getCourses()
				// ,request.getStudentAdmissionId() , request.getDegree());
				MidTermMarks mid = new MidTermMarks();
				mid.setAcademicYear(academic.get());
				mid.setSection(student.get().getSection());
				mid.setCourses(courses.get());
				mid.setExCreateDate(date);
				mid.setColleges(Colleges.get());
				mid.setProgrammes(Programmes.get());
				mid.setProgrammeYear(courses.get().getProgrammeYear());
				mid.setStudentadmission(student.get());
				mid.setExRollNo(student.get().getExRollNo());
				mid.setDegree(degree.get());
				mid.setStream(stream.get());
				mid.setStaff(staff.get(0));
				mid.setExIsActive(true);
				mid.setExIsDelete(false);
				mid.setExIsSave(false);
				mid.setExIsSubmit(false);
				mid.setExCaseStudy(marks);
				mid.setSemester(sem.get());
				mid.setDepartment(courses.get().getDepartment());
				mid.setExamAnnouncement(examannouncement.get());
				mid.setExCaseStudyRemark(remarks);
				super.midtermmarksMarks.save(mid);
			} else {
				int retval = super.midtermmarksMarks.updateCaseStudyMarksByStaff(marks, date, request.getAcademicYear(),
						request.getColleges(), request.getProgrammes(), request.getCourses(),
						request.getStudentAdmissionId(), request.getDegree(), courses.get().getProgrammeYear().getId(),
						staff.get(0).getId(), student.get().getSection(), remarks);
			}
			if (upload) {
				info.put("status", "1");
				info.put("message", "CaseStudy saved successfully");
				return info;

			} else {
				info.put("status", "1");
				info.put("message", "CaseStudy updated successfully");
				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> updateStudentLabExperiment(InternalMarksRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Optional<Colleges> Colleges = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),
					false, true);
			if (!Colleges.isPresent() || !Colleges.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<Programmes> Programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Programmes.isPresent() || !Programmes.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department not present");
				return info;
			}

			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent() || !academic.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}

			Optional<Courses> courses = super.courses.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getCourses());
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not present");
				return info;
			}

			Optional<ExamAnnouncement> examAnnouncement = super.examAnnouncement
					.findByExIsDeleteAndExIsActiveAndId(false, true, request.getExamAnnouncement());
			if (!examAnnouncement.isPresent() || !examAnnouncement.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "examAnnouncement not present");
				return info;
			}
			System.out.println("???????????????????" + request);
			Date date = new Date();
			if (request.getExLabExperiment() != null) {
				int retval = super.ExamBarcodes.updateLabExprimentMarks(
						commonHelper.getMarks(request.getExLabExperiment()), request.getAcademicYear(),
						request.getColleges(), request.getProgrammes(), request.getCourses(),
						request.getStudentAdmissionId(), date, request.getDegree(), request.getExamAnnouncement());
				if (retval == 1) {
					info.put("status", "1");
					info.put("message", "LabExperiment updated successfully");
					return info;
				} else {
					info.put("status", "2");
					info.put("message", "EndTerm marks not updated");
					return info;
				}
			}
			info.put("status", "2");
			info.put("message", "EndTerm marks not updated");
			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> updateStudentVivaComponent(InternalMarksRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Optional<Colleges> Colleges = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),
					false, true);
			if (!Colleges.isPresent() || !Colleges.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<Programmes> Programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Programmes.isPresent() || !Programmes.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department not present");
				return info;
			}

			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent() || !academic.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}

			Optional<Courses> courses = super.courses.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getCourses());
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not present");
				return info;
			}

			Optional<ExamAnnouncement> examAnnouncement = super.examAnnouncement
					.findByExIsDeleteAndExIsActiveAndId(false, true, request.getExamAnnouncement());
			if (!examAnnouncement.isPresent() || !examAnnouncement.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "examAnnouncement not present");
				return info;
			}
			System.out.println("???????????????????" + request);

			Date date = new Date();
			if (request.getExViva() != null) {
				int retval = super.ExamBarcodes.updatevaivaMarks(commonHelper.getMarks(request.getExViva()),
						request.getAcademicYear(), request.getColleges(), request.getProgrammes(), request.getCourses(),
						request.getStudentAdmissionId(), date, request.getDegree(), request.getExamAnnouncement());
				if (retval == 1) {
					info.put("status", "1");
					info.put("message", "Viva updated successfully");
					return info;
				} else {
					info.put("status", "2");
					info.put("message", "EndTerm marks not updated");
					return info;
				}
			}
			info.put("status", "2");
			info.put("message", "EndTerm marks not updated");
			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> publishCalender(@Valid AcademicCalenderRequest request) {
		Map<String, String> info = new LinkedHashMap<>();

		try {
			super.academicCalender.publishAcademicCalender(request.getId() ,request.getIsPublish());

			info.put("message", "Academic Calender published successfully");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> refurbishLabExperimentelement(InternalMarksRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Optional<Colleges> Colleges = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),
					false, true);
			if (!Colleges.isPresent() || !Colleges.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<Programmes> Programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Programmes.isPresent() || !Programmes.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department not present");
				return info;
			}

			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent() || !academic.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}

			Optional<Courses> courses = super.courses.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getCourses());
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not present");
				return info;
			}

			Optional<ExamAnnouncement> examAnnouncement = super.examAnnouncement
					.findByExIsDeleteAndExIsActiveAndId(false, true, request.getExamAnnouncement());
			if (!examAnnouncement.isPresent() || !examAnnouncement.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "examAnnouncement not present");
				return info;
			}

			Optional<ExamAttendance> ExamAttendance = super.examAttendance
					.findByExIsDeleteAndExIsActiveAndStudentadmissionIdAndCollegesIdAndDegreeIdAndProgrammesIdAndExamAnnouncementIdAndCoursesId(
							false, true, request.getStudentAdmissionId(), request.getColleges(), request.getDegree(),
							request.getProgrammes(), request.getExamAnnouncement(), request.getCourses());

			if (!ExamAttendance.isPresent()) {
				info.put("status", "2");
				info.put("message", "examattendance   not present");
				return info;
			}

			User users;
			if (request.getUser() == null || request.getUser().equals("")) {
				users = null;
			} else {
				List<User> user = super.user.findByIdAndExIsDeleteAndExIsActive(request.getUser(), false, true);
				if (user.size() <= 0) {
					info.put("status", "2");
					info.put("message", "User id not present");
					return info;
				}
				users = user.get(0);

			}
			if (request.getExLabExperiment() == null) {
				info.put("status", "2");
				info.put("message", "LabExpermient Marks should not be Null");
				return info;
			}

			Double exLabExperiment = 0.0;
			String exLabExperiment_remarks = "NA";
			if (super.commonHelper.isNumeric(request.getExLabExperiment())) {
				exLabExperiment = commonHelper.getMarksValue(request.getExLabExperiment());
			} else {
				if (request.getExLabExperiment().equalsIgnoreCase("ABSENT")) {
					exLabExperiment_remarks = "ABSENT";
				} else {
					info.put("status", "2");
					info.put("message", "Accepts only ABSENT or absent");
					return info;
				}
			}

			Date date = new Date();
			if (request.getExLabExperiment() != null) {
				int fetch = super.ExamBarcodes.refurbishlabexpmarks(exLabExperiment, request.getAcademicYear(),
						request.getColleges(), request.getProgrammes(), request.getCourses(),
						request.getStudentAdmissionId(), date, request.getDegree(), request.getExamAnnouncement(),
						exLabExperiment_remarks);
				if (fetch == 1) {
					info.put("status", "1");
					info.put("message", "LabExperimentMarks updated successfully");
					return info;
				} else {
					info.put("status", "2");
					info.put("message", "EndTerm marks not updated");
					return info;
				}
			}
			info.put("status", "2");
			info.put("message", "EndTerm marks not updated");
			return info;
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> refurbishVivaelement(InternalMarksRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Optional<Colleges> Colleges = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),
					false, true);
			if (!Colleges.isPresent() || !Colleges.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<Programmes> Programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Programmes.isPresent() || !Programmes.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department not present");
				return info;
			}

			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent() || !academic.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}

			Optional<Courses> courses = super.courses.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getCourses());
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not present");
				return info;
			}

			Optional<ExamAnnouncement> examAnnouncement = super.examAnnouncement
					.findByExIsDeleteAndExIsActiveAndId(false, true, request.getExamAnnouncement());
			if (!examAnnouncement.isPresent() || !examAnnouncement.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "examAnnouncement not present");
				return info;
			}

			Optional<ExamAttendance> ExamAttendance = super.examAttendance
					.findByExIsDeleteAndExIsActiveAndStudentadmissionIdAndCollegesIdAndDegreeIdAndProgrammesIdAndExamAnnouncementIdAndCoursesId(
							false, true, request.getStudentAdmissionId(), request.getColleges(), request.getDegree(),
							request.getProgrammes(), request.getExamAnnouncement(), request.getCourses());

			if (!ExamAttendance.isPresent()) {
				info.put("status", "2");
				info.put("message", "examattendance   not present");
				return info;
			}

			User users;
			if (request.getUser() == null || request.getUser().equals("")) {
				users = null;
			} else {
				List<User> user = super.user.findByIdAndExIsDeleteAndExIsActive(request.getUser(), false, true);
				if (user.size() <= 0) {
					info.put("status", "2");
					info.put("message", "User id not present");
					return info;
				}
				users = user.get(0);

			}

			if (request.getExViva() == null) {
				info.put("status", "2");
				info.put("message", "vivamarks should not be Null");
				return info;
			}

			Double exViva = 0.0;
			String exViva_remarks = "NA";
			if (super.commonHelper.isNumeric(request.getExViva())) {
				exViva = commonHelper.getMarksValue(request.getExViva());
			} else {
				if (request.getExViva().equalsIgnoreCase("ABSENT")) {
					exViva_remarks = "ABSENT";
				} else {
					info.put("status", "2");
					info.put("message", "Accepts only ABSENT or absent");
					return info;
				}
			}
			Date date = new Date();
			if (request.getExViva() != null) {
				int fetch = super.ExamBarcodes.refurbishvivamraks(exViva, request.getAcademicYear(),
						request.getColleges(), request.getProgrammes(), request.getCourses(),
						request.getStudentAdmissionId(), date, request.getDegree(), request.getExamAnnouncement(),
						exViva_remarks);
				if (fetch == 1) {
					info.put("status", "1");
					info.put("message", "vivamarks updated successfully");
					return info;
				} else {
					info.put("status", "2");
					info.put("message", "EndTerm marks not updated");
					return info;
				}
			}
			info.put("status", "2");
			info.put("message", "EndTerm marks not updated");
			return info;
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> refurbishEndTermelement(InternalMarksRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Optional<Colleges> Colleges = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),
					false, true);
			if (!Colleges.isPresent() || !Colleges.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<Programmes> Programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Programmes.isPresent() || !Programmes.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department not present");
				return info;
			}

			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent() || !academic.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}

			Optional<Courses> courses = super.courses.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getCourses());
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not present");
				return info;
			}

			Optional<ExamAnnouncement> examAnnouncement = super.examAnnouncement
					.findByExIsDeleteAndExIsActiveAndId(false, true, request.getExamAnnouncement());
			if (!examAnnouncement.isPresent() || !examAnnouncement.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "examAnnouncement not present");
				return info;
			}

			Optional<ExamAttendance> ExamAttendance = super.examAttendance
					.findByExIsDeleteAndExIsActiveAndStudentadmissionIdAndCollegesIdAndDegreeIdAndProgrammesIdAndExamAnnouncementIdAndCoursesId(
							false, true, request.getStudentAdmissionId(), request.getColleges(), request.getDegree(),
							request.getProgrammes(), request.getExamAnnouncement(), request.getCourses());

			if (!ExamAttendance.isPresent()) {
				info.put("status", "2");
				info.put("message", "examattendance   not present");
				return info;
			}

			User users;
			if (request.getUser() == null || request.getUser().equals("")) {
				users = null;
			} else {
				List<User> user = super.user.findByIdAndExIsDeleteAndExIsActive(request.getUser(), false, true);
				if (user.size() <= 0) {
					info.put("status", "2");
					info.put("message", "User id not present");
					return info;
				}
				users = user.get(0);

			}

			if (request.getExEndTermMark() == null) {
				info.put("status", "2");
				info.put("message", "EndTermMarks should not be Null");
				return info;
			}

			Double exEndTermMarks = 0.0;
			String exEndTermMarks_remarks = "NA";

			if (super.commonHelper.isNumeric(request.getExEndTermMark())) {
				exEndTermMarks = commonHelper.getMarksValue(request.getExEndTermMark());
			} else {
				if (request.getExEndTermMark().equalsIgnoreCase("ABSENT")) {
					exEndTermMarks_remarks = "ABSENT";
				} else if (request.getExEndTermMark().equalsIgnoreCase("DEBARRED")) {
					exEndTermMarks_remarks = "DEBARRED";
				} else {
					info.put("status", "2");
					info.put("message", "Accepts only ABSENT/absent OR  DEBARRED/debarred");
					return info;
				}
			}
			Date date = new Date();
			if (request.getExEndTermMark() != null) {
				int fetch = super.ExamBarcodes.refurbishEndtermMarks(exEndTermMarks, request.getAcademicYear(),
						request.getColleges(), request.getProgrammes(), request.getCourses(),
						request.getStudentAdmissionId(), date, request.getDegree(), request.getExamAnnouncement(),
						exEndTermMarks_remarks);
				if (fetch == 1) {
					info.put("status", "1");
					info.put("message", "EndTermMarks updated successfully");
					return info;
				} else {
					info.put("status", "2");
					info.put("message", "EndTerm marks not updated");
					return info;
				}
			}
			info.put("status", "2");
			info.put("message", "EndTerm marks not updated");
			return info;
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> saveVivaMarks(InternalMarksRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Optional<Colleges> Colleges = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),
					false, true);
			if (!Colleges.isPresent() || !Colleges.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<Programmes> Programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Programmes.isPresent() || !Programmes.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department not present");
				return info;
			}

			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent() || !academic.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}

			Optional<Courses> courses = super.courses.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getCourses());
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not present");
				return info;
			}

			Optional<ExamAnnouncement> examAnnouncement = super.examAnnouncement
					.findByExIsDeleteAndExIsActiveAndId(false, true, request.getExamAnnouncement());
			if (!examAnnouncement.isPresent() || !examAnnouncement.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "examAnnouncement not present");
				return info;
			}
			System.out.println("???????????????????" + request);

			Date date = new Date();
			int retval = 0;
			if (super.commonHelper.isNumeric(request.getExViva())) {				
				retval = super.ExamBarcodes.updatevaivaMarks(commonHelper.getMarks(request.getExViva()),
						request.getAcademicYear(), request.getColleges(), request.getProgrammes(), request.getCourses(),
						request.getStudentAdmissionId(), date, request.getDegree(), request.getExamAnnouncement());
				
			} else {
				
				retval = super.ExamBarcodes.updatevaivaRemarksMarks(request.getExViva(),
						request.getAcademicYear(), request.getColleges(), request.getProgrammes(), request.getCourses(),
						request.getStudentAdmissionId(), date, request.getDegree(), request.getExamAnnouncement());
			}
			
			
				if (retval == 1) {
					info.put("status", "1");
					info.put("message", "Viva updated successfully");
					return info;
				} else {
					info.put("status", "2");
					info.put("message", "Attendance not present");
					return info;
				}
			
			

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> saveLabMarks(InternalMarksRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Optional<Colleges> Colleges = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),
					false, true);
			if (!Colleges.isPresent() || !Colleges.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<Programmes> Programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Programmes.isPresent() || !Programmes.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department not present");
				return info;
			}

			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent() || !academic.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}

			Optional<Courses> courses = super.courses.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getCourses());
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not present");
				return info;
			}

			Optional<ExamAnnouncement> examAnnouncement = super.examAnnouncement
					.findByExIsDeleteAndExIsActiveAndId(false, true, request.getExamAnnouncement());
			if (!examAnnouncement.isPresent() || !examAnnouncement.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "examAnnouncement not present");
				return info;
			}
			System.out.println("???????????????????" + request);
			Date date = new Date();
			int retval= 0;
			if (super.commonHelper.isNumeric(request.getExLabExperiment())) {
				
				 retval = super.ExamBarcodes.updateLabExprimentMarks(
						commonHelper.getMarks(request.getExLabExperiment()), request.getAcademicYear(),
						request.getColleges(), request.getProgrammes(), request.getCourses(),
						request.getStudentAdmissionId(), date, request.getDegree(), request.getExamAnnouncement());
			}else {
				 retval = super.ExamBarcodes.updateLabExprimentReMarks(request.getExLabExperiment(), request.getAcademicYear(),
						request.getColleges(), request.getProgrammes(), request.getCourses(),
						request.getStudentAdmissionId(), date, request.getDegree(), request.getExamAnnouncement());
				
			}
		
				if (retval == 1) {
					info.put("status", "1");
					info.put("message", "LabExperiment updated successfully");
					return info;
				} else {
					info.put("status", "2");
					info.put("message", "Attendance not present");
					return info;
				}
			

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> studentListForRegisterCourses(SemesterRegistrationRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			

			List<SemesterRegistration> list = super.semesterRegistration
					.findByExIsDeleteAndExIsActiveAndProgrammesIdAndCollegesIdAndDegreeIdAndAcademicYearIdAndSemesterIdAndDepartmentIdAndProgrammeYearIdOrderByStudentadmissionIdAsc(
							false, true, request.getProgrammes(), request.getColleges(), request.getDegree(),
							request.getAcademicYear(), request.getSemester(), request.getDepartment(),
							request.getProgrammeYear());
			
			if(list.size() <=0) {				
				info.put("status", "2");
				info.put("message", "semester registration pending");
				return info;
			}
			List dataList = new LinkedList();
			for (SemesterRegistration e : list) {
				
				
				Map<Object, Object> Studentadmissiondata = new HashMap<Object, Object>();
				Studentadmissiondata.put("student", e.getStudentadmission().getId());
				Studentadmissiondata.put("exName", e.getStudentadmission().getExName());
				Studentadmissiondata.put("exRollNo", e.getStudentadmission().getExRollNo());	
				List<CoursesRegistration> coursereg = super.coursesRegistration
						.findByExIsDeleteAndExIsActiveAndCoursesIdAndStudentadmissionId(false, true, request.getCourse(),
								e.getStudentadmission().getId());

				if (coursereg.size() <= 0) {
					Studentadmissiondata.put("isRegister", false);						
				}else {
					Studentadmissiondata.put("isRegister", true);	
				}
				
				dataList.add(Studentadmissiondata);
			}
			info.put("status", "1");
			info.put("message", "success");
			info.put("details", dataList);
			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> studentListForUnRegisterCourses(SemesterRegistrationRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {			
			List<CoursesRegistration> student  =super.coursesRegistration.findByExIsDeleteAndExIsActiveAndProgrammesIdAndCollegesIdAndDegreeIdAndAcademicYearIdAndProgrammeYearIdAndSemesterIdAndDepartmentIdAndCoursesIdAndRegistrationId(false, true, request.getProgrammes(), request.getColleges(),request.getDegree(),request.getAcademicYear(),request.getProgrammeYear(),request.getSemester(),request.getDepartment(),request.getCourse() , request.getRegistrationType());
				if(student.size() <=0) {
				info.put("status", "2");
				info.put("message", "No record found");
				return info;				
			}
			List dataList = new LinkedList();
			for (CoursesRegistration e : student) {
				Map<Object, Object> Studentadmissiondata = new HashMap<Object, Object>();
				Studentadmissiondata.put("student", e.getStudentadmission().getId());
				Studentadmissiondata.put("exName", e.getStudentadmission().getExName());
				Studentadmissiondata.put("exRollNo", e.getStudentadmission().getExRollNo());
		
				dataList.add(Studentadmissiondata);
			}
			info.put("status", "1");
			info.put("message", "success");
			info.put("details", dataList);
			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getAcademicClendergetOnID(AcademicCalenderRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<AcademicCalenderLog> tasks = super.academicCalenderLog.findByAcademicCalenderId(request.getId());
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "AcademicCalender not created");
				return info;
			} else {
				List dataList = new LinkedList();
				for (AcademicCalenderLog e : tasks) {
					Map<Object, Object> data = new HashMap<Object, Object>();
					data.put("activityid", e.getId());
					data.put("exActivityName", e.getAcademicCalenderActivity().getExName());
					data.put("exSerialNnumber", e.getExSerialNnumber());	
					data.put("exProposedDates", e.getExProposedDates());	
					dataList.add(data);
				}
				info.put("status", "1");
				info.put("remark", tasks.get(0).getAcademicCalender().getExRemark());
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> updateSerialNo(AcademicCalenderRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		// TODO Auto-generated method stub
		try {
			super.academicCalenderLog.updateSerialNumber(request.getExSerialNnumber(), request.getActivityid());			
			info.put("status", "1");
			info.put("message", "success");
			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}		
		
	}

	@Override
	public Map<String, Object> updateProposedDate(AcademicCalenderRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		// TODO Auto-generated method stub
		try {
			super.academicCalenderLog.updateProposedDate(request.getExProposedDates(), request.getActivityid());			
			info.put("status", "1");
			info.put("message", "success");
			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> submitCalander(AcademicCalenderRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		// TODO Auto-generated method stub
		try {
			super.academicCalender.submitCalender(request.getExRemark(), request.getId());			
			info.put("status", "1");
			info.put("message", "Calander has been submitd successfully");
			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> validateFeedbackConfiguration(SemesterRegistrationConfigurationRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Date date = new Date();
			List<FeedbackConfiguration> task = super.feedbackConfiguration
					.findByExIsDeleteAndExIsActiveAndProgrammesIdAndCollegesIdAndDegreeIdAndAcademicYearIdAndProgrammeYearIdAndSemesterIdAndBatchIdAndFeedbackType(
							false, true, request.getProgrammes(), request.getColleges(), request.getDegree(),
							request.getAcademicYear(), request.getProgrammeYear(), request.getSemester(),request.getBatch() , request.getFeedbackType());
			if (task.size() > 0) {			
				// if registration start date is grater than or equals current date than
				// registration started
				if (!date.after(task.get(0).getExStartDate())) {
					info.put("status", "0");
					info.put("message", "Feedback feeding process not started");
					return info;
				}
				if (!date.before(task.get(0).getExEndDate())) {
					info.put("status", "3");
					info.put("message", "Feedback feeding process closed");
					return info;
				}

				if (date.after(task.get(0).getExStartDate()) && date.before(task.get(0).getExEndDate())) {
					info.put("status", "1");
					info.put("message", "Feedback feeding process is Open");
					return info;
				}
			

				else {
					info.put("status", "3");
					info.put("message", "Feedback feeding process closed");
					return info;
				}
			} else {
				info.put("status", "2");
				info.put("message", "Feedback feeding process not started");
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

}
