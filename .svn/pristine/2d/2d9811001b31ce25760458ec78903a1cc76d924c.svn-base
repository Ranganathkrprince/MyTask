
//package com.niftem.app.util;
//
//import java.util.List;
//
//import org.apache.poi.ss.usermodel.Cell;
//import org.apache.poi.ss.usermodel.CellStyle;
//import org.apache.poi.ss.usermodel.Row;
//
//import com.niftem.app.entity.MidTermMarks;
//
//public class ExcelExportResponse extends ExcelExportUtility<MidTermMarks> {
//
//	@Override
//	void fillData(List<MidTermMarks> dataList) {
//		// TODO Auto-generated method stub
//
//		CellStyle normalStyle = getNormalStyle();
//		int rownum = 1;
//		for (MidTermMarks marks : dataList) {
//			Row row = sh.createRow(rownum);
//			Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
//			cell_0.setCellStyle(normalStyle);
//			cell_0.setCellValue(marks.getColleges().getExName());
//			Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
//			cell_1.setCellStyle(normalStyle);
//			cell_1.setCellValue(marks.getDegree().getExName() + " ");
//			
//			Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
//			cell_2.setCellStyle(normalStyle);
//			cell_2.setCellValue(marks.getProgrammes().getExName()  + " ");
//			Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
//			cell_3.setCellStyle(normalStyle);
//			cell_3.setCellValue(marks.getDepartment().getExName() + " ");
//			Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
//			cell_4.setCellStyle(normalStyle);
//			cell_4.setCellValue(marks.getStream().getExName()+ " ");
//			Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
//			cell_5.setCellStyle(normalStyle);
//			cell_5.setCellValue(marks.getAcademicYear().getExIdentifier()+ " ");
//			Cell cell_6 = row.createCell(6, Cell.CELL_TYPE_STRING);
//			cell_6.setCellStyle(normalStyle);
//			cell_6.setCellValue(marks.getProgrammeYear().getExName() + " ");
//			Cell cell_7 = row.createCell(7, Cell.CELL_TYPE_STRING);
//			cell_7.setCellStyle(normalStyle);
//			cell_7.setCellValue(marks.getSemester().getExName() + " ");
//			Cell cell_8 = row.createCell(8, Cell.CELL_TYPE_STRING);
//			cell_8.setCellStyle(normalStyle);
//			cell_8.setCellValue(marks.getCourses().getExName()  + " ");
//			Cell cell_9 = row.createCell(9, Cell.CELL_TYPE_STRING);
//			cell_9.setCellStyle(normalStyle);
//			cell_9.setCellValue(marks.getCoursesType().getExName() + " ");
//
//			Cell cell_10 = row.createCell(10, Cell.CELL_TYPE_STRING);
//			cell_10.setCellStyle(normalStyle);
//			cell_10.setCellValue(marks.getExRollNo()+ " ");
//			Cell cell_11 = row.createCell(11, Cell.CELL_TYPE_STRING);
//			cell_11.setCellStyle(normalStyle);
//			cell_11.setCellValue(marks.getStudentadmission().getExName()  + " ");
//			Cell cell_12 = row.createCell(12, Cell.CELL_TYPE_STRING);
//			cell_12.setCellStyle(normalStyle);
//			cell_12.setCellValue(marks.getExMaxQuizMarks()+ " ");
//			Cell cell_13 = row.createCell(13, Cell.CELL_TYPE_STRING);
//			cell_13.setCellStyle(normalStyle);
//			cell_13.setCellValue(marks.getExQuizMarks() + " ");
//			Cell cell_14 = row.createCell(14, Cell.CELL_TYPE_STRING);
//			cell_14.setCellStyle(normalStyle);
//			cell_14.setCellValue(marks.getExQuizRemarks() + " ");
//			Cell cell_15 = row.createCell(15, Cell.CELL_TYPE_STRING);
//			cell_15.setCellStyle(normalStyle);
//			cell_15.setCellValue(marks.getExMaxAssignmentMarks() + " ");
//			Cell cell_16 = row.createCell(16, Cell.CELL_TYPE_STRING);
//			cell_16.setCellStyle(normalStyle);
//			cell_16.setCellValue(marks.getExAssignmentMarks() + " ");
//			Cell cell_17 = row.createCell(17, Cell.CELL_TYPE_STRING);
//			cell_17.setCellStyle(normalStyle);
//			cell_17.setCellValue(marks.getExMaxMidTermMarks() + " ");
//			Cell cell_18 = row.createCell(18, Cell.CELL_TYPE_STRING);
//			cell_18.setCellStyle(normalStyle);
//			cell_18.setCellValue(marks.getExMidTermMarks() + " ");
//			Cell cell_19 = row.createCell(19, Cell.CELL_TYPE_STRING);
//			cell_19.setCellStyle(normalStyle);
//			cell_19.setCellValue(marks.getExMidTermRemarks() + " ");
//						rownum++;
//
//		}
//
//	}
//
////	@Override
////	void fillDataTimeTableLog(List<MidTermMarks> datalist) {
////		// TODO Auto-generated method stub
////		
////	}
//}=======
package com.niftem.app.util;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.transaction.Transactional;

import org.apache.poi.hssf.util.CellRangeAddress;
import org.apache.poi.hssf.util.CellRangeAddressList;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.DataValidation;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFDataValidation;
import org.apache.poi.xssf.usermodel.XSSFDataValidationConstraint;
import org.apache.poi.xssf.usermodel.XSSFDataValidationHelper;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFRichTextString;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import com.niftem.app.dao.EligiBilityResponse;
import com.niftem.app.entity.AccessLogs;
import com.niftem.app.entity.Batch;
import com.niftem.app.entity.ClassAttendance;
import com.niftem.app.entity.Courses;
import com.niftem.app.entity.CoursesRegistration;
import com.niftem.app.entity.CreditHours;
import com.niftem.app.entity.EvaluatorList;
import com.niftem.app.entity.InvigilatorDuty;
import com.niftem.app.entity.SemesterRegistration;
import com.niftem.app.entity.Studentpersonal;

@Service
@Transactional
public class ExcelExportResponse extends ExcelExportUtility<Object[]> {


	private static Logger logger = LoggerFactory.getLogger("excel-log");
	@Override
	void fillExamAttendanceReport(List<Object[]> list) {
	
		CellStyle normalStyle = getNormalStyle();
		  SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
	        Date date  =  new Date();
	        
	        Row dataRow1 = sh.createRow(0);	
			sh.createRow(1);
			XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
			dataRow1.createCell(0).setCellValue(ricString);
			
			XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());					
			dataRow1.createCell(1).setCellValue(ric_String);
	        
	        int rownum = 3;
		for (Object[] e : list) {
            Row row = sh.createRow(rownum);
            Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
            cell_0.setCellStyle(normalStyle);
            cell_0.setCellValue(e[0] == null ?"NA" :e[0].toString());
        
            Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
            cell_1.setCellStyle(normalStyle);
            cell_1.setCellValue(e[1] == null ?"NA" :e[1].toString());
            
            Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
            cell_2.setCellStyle(normalStyle);
            cell_2.setCellValue(e[2] == null ?"NA" :e[2].toString());
            
            Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
            cell_3.setCellStyle(normalStyle);
            cell_3.setCellValue(e[3] == null ?"NA" :e[3].toString());
            
            Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
            cell_4.setCellStyle(normalStyle);
            cell_4.setCellValue(e[4] == null ?"NA" :e[4].toString());
            
            Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
            cell_5.setCellStyle(normalStyle);
            cell_5.setCellValue(e[5] == null ?"NA" :e[5].toString());
            
            Cell cell_6 = row.createCell(6, Cell.CELL_TYPE_STRING);
            cell_6.setCellStyle(normalStyle);
            cell_6.setCellValue(e[6] == null ?"NA" :e[6].toString());
            
            Cell cell_7 = row.createCell(7, Cell.CELL_TYPE_STRING);
            cell_7.setCellStyle(normalStyle);
            cell_7.setCellValue(e[7] == null ?"NA" :e[7].toString());
			 
            Cell cell_8 = row.createCell(8, Cell.CELL_TYPE_STRING);
            cell_8.setCellStyle(normalStyle);
            cell_8.setCellValue(e[8] == null ?"NA" :e[8].toString());
           
            
            Cell cell_9 = row.createCell(9, Cell.CELL_TYPE_STRING);
            cell_9.setCellStyle(normalStyle);
            cell_9.setCellValue(e[9] == null ?"NA" :e[9].toString());
            
            
            
            Cell cell_10 = row.createCell(10, Cell.CELL_TYPE_STRING);
			  cell_10.setCellStyle(normalStyle);
			  cell_10.setCellValue(e[10] == null ?"NA" :e[10].toString());
			 
			  Cell cell_12 = row.createCell(11, Cell.CELL_TYPE_STRING);
			  cell_12.setCellStyle(normalStyle);
			  cell_12.setCellValue(e[11] == null ?"NA" :e[11].toString().toUpperCase());
			 
			  
			  Cell cell_11 = row.createCell(12, Cell.CELL_TYPE_STRING);
			  cell_11.setCellStyle(normalStyle); 
			  cell_11.setCellValue(e[12] == null ?"NA" :e[12].toString());
			  
			  
			  Cell cell_13 = row.createCell(13, Cell.CELL_TYPE_STRING);
			  cell_13.setCellStyle(normalStyle); 
			  cell_13.setCellValue(e[13] == null ?"NA" :e[13].toString());
			  
			
			  
			// Cell cell_15 = row.createCell(15, Cell.CELL_TYPE_STRING);
			 // cell_15.setCellStyle(normalStyle); 
			 // cell_15.setCellValue(e[15] == null ?"NA" :e[15].toString());

            rownum++;

		}

	}
	
	
	
	
	@Override
	void fillDataTimeTableLog(List<Object[]> datalist) {
		// TODO Auto-generated method stub
		CellStyle normalStyle = getNormalStyle();
		 SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
	        Date date  =  new Date();
	        Row dataRow1 = sh.createRow(1);	
			sh.createRow(2);
			XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
			dataRow1.createCell(3).setCellValue(ricString);
			
			XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());					
			dataRow1.createCell(4).setCellValue(ric_String);
		int rownum = 2;
		// check now ??
		try {
		for (Object[] logs : datalist) {
			Row row = sh.createRow(rownum);
			Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
			cell_0.setCellStyle(normalStyle);
			cell_0.setCellValue(logs[0]+"");

			Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
			cell_1.setCellStyle(normalStyle);
			cell_1.setCellValue(logs[1] + " ");

			Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
			cell_2.setCellStyle(normalStyle);
			cell_2.setCellValue(logs[2] + " ");
			Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
			cell_3.setCellStyle(normalStyle);
			cell_3.setCellValue(logs[3] + " ");
			Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
			cell_4.setCellStyle(normalStyle);
			cell_4.setCellValue(logs[4] + " ");
			Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
			cell_5.setCellStyle(normalStyle);
			cell_5.setCellValue(logs[5]+ " ");

			Cell cell_6 = row.createCell(6, Cell.CELL_TYPE_STRING);
			cell_6.setCellStyle(normalStyle);
			cell_6.setCellValue(logs[6]+ " ");

		}
		}
		catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
		
		}
		
	}

	@Override
	void fillDataMidTermExam(List<Object[]> list) {
		CellStyle normalStyle = getNormalStyle();
		CellStyle normalStyle1 = getNormalStyle8();
		CellStyle normalStyle2 = getNormalStyle1();
		  SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
	        Date date  =  new Date();
	        
	        Row dataRow1 = sh.createRow(0);	
			sh.createRow(1);
			Font font = wb.createFont();
			XSSFFont font1 = (XSSFFont) font;
			XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
	
			Cell cel  =	dataRow1.createCell(0,Cell.CELL_TYPE_STRING);
			cel.setCellStyle(normalStyle1);
			cel.setCellValue(ricString);
			font1.setBold(true);
			
			XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());
			Cell cel1  =	dataRow1.createCell(1,Cell.CELL_TYPE_STRING);
			cel1.setCellStyle(normalStyle1);
			cel1.setCellValue(ric_String);
			font1.setBold(true);
	        int rownum = 3;
		try {
			for (Object[] e : list) {
			Row row = sh.createRow(rownum);
			 Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
	            cell_0.setCellStyle(normalStyle);
	            cell_0.setCellValue(e[0] == null ?"NA" :e[0].toString());
	        
	            Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
	            cell_1.setCellStyle(normalStyle);
	            cell_1.setCellValue(e[1] == null ?"NA" :e[1].toString());
	            
	            Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
	            cell_2.setCellStyle(normalStyle);
	            cell_2.setCellValue(e[2] == null ?"NA" :e[2].toString());
	            
	            Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
	            cell_3.setCellStyle(normalStyle);
	            cell_3.setCellValue(e[3] == null ?"NA" :e[3].toString());
	            
	            Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
	            cell_4.setCellStyle(normalStyle);
	            cell_4.setCellValue(e[4] == null ?"NA" :e[4].toString());
	            
	            Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
	            cell_5.setCellStyle(normalStyle);
	            cell_5.setCellValue(e[5] == null ?"NA" :e[5].toString());
	            
	            Cell cell_6 = row.createCell(6, Cell.CELL_TYPE_STRING);
	            cell_6.setCellStyle(normalStyle);
	            cell_6.setCellValue(e[6] == null ?"NA" :e[6].toString());
	            
			
			  Cell cell_7 = row.createCell(7, Cell.CELL_TYPE_STRING);
			  cell_7.setCellStyle(normalStyle); 
			  cell_7.setCellValue(e[7] == null ?"NA":e[7].toString());
			  
			  Cell cell_8 = row.createCell(8, Cell.CELL_TYPE_STRING);
			  cell_8.setCellStyle(normalStyle);
			  cell_8.setCellValue(e[8] == null ?"NA":e[8].toString());
			  
			  Cell cell_9 = row.createCell(9, Cell.CELL_TYPE_STRING);
			  cell_9.setCellStyle(normalStyle); 
			  cell_9.setCellValue(e[9] == null ?"NA":e[9].toString());
			  
			  
			  Cell cell_10 = row.createCell(10, Cell.CELL_TYPE_STRING);
			  cell_10.setCellStyle(normalStyle); 
			  cell_10.setCellValue(e[10] == null ?"NA":e[10].toString());
			  
			  
			  Cell cell_11 = row.createCell(11, Cell.CELL_TYPE_STRING);
			  cell_11.setCellStyle(normalStyle); 
			  cell_11.setCellValue(e[11] == null ?"NA":e[11].toString());
			  
			  
			  
			  Cell cell_12 = row.createCell(12, Cell.CELL_TYPE_STRING);
			  cell_12.setCellStyle(normalStyle); 
			  cell_12.setCellValue(e[12] == null ?"NA":e[12].toString());
			  
			  
			  Cell cell_13 = row.createCell(13, Cell.CELL_TYPE_STRING);
			  cell_13.setCellStyle(normalStyle); 
			  cell_13.setCellValue(e[13] == null ?"NA":e[13].toString());
			  
			  
			  Cell cell_14 = row.createCell(14, Cell.CELL_TYPE_STRING);
			  cell_14.setCellStyle(normalStyle); 
			  cell_14.setCellValue(e[14] == null ?"NA":e[14].toString());
			  
			  Cell cell_15 = row.createCell(15, Cell.CELL_TYPE_STRING);
			  cell_15.setCellStyle(normalStyle); 
			  cell_15.setCellValue(e[15] == null ?"NA":e[15].toString());
			  
			  Cell cell_16 = row.createCell(16, Cell.CELL_TYPE_STRING);
			  cell_16.setCellStyle(normalStyle); 
			  cell_16.setCellValue(e[16] == null ?"NA":e[16].toString());
			  
			  Cell cell_17 = row.createCell(17, Cell.CELL_TYPE_STRING);
			  cell_17.setCellStyle(normalStyle); 
			  cell_17.setCellValue(e[17] == null ?"NA":e[17].toString());
			 
			  
			  Cell cell_18 = row.createCell(18, Cell.CELL_TYPE_STRING);
			  cell_18.setCellStyle(normalStyle); 
			  cell_18.setCellValue(e[18] == null ?"NA":e[18].toString());
			 
			  
			  Cell cell_19 = row.createCell(19, Cell.CELL_TYPE_STRING);
			  cell_19.setCellStyle(normalStyle); 
			  cell_19.setCellValue(e[19] == null ?"NA":e[19].toString());
	
			  Cell cell_20 = row.createCell(20, Cell.CELL_TYPE_STRING);
			  cell_20.setCellStyle(normalStyle); 
			  cell_20.setCellValue(e[20] == null ?"NA":e[20].toString());
			  
			  
			  Cell cell_21 = row.createCell(21, Cell.CELL_TYPE_STRING);
			  cell_21.setCellStyle(normalStyle); 
			  cell_21.setCellValue(e[21] == null ?"NA":e[21].toString());
			  
			  Cell cell_22 = row.createCell(22, Cell.CELL_TYPE_STRING);
			  cell_22.setCellStyle(normalStyle); 
			  cell_22.setCellValue(e[22] == null ?"NA":e[22].toString());
			  
			  
			  
			  Cell cell_23 = row.createCell(23, Cell.CELL_TYPE_STRING);
			  cell_23.setCellStyle(normalStyle); 
			  cell_23.setCellValue(e[23] == null ?"NA":e[23].toString());
			 
			  Cell cell_24 = row.createCell(24, Cell.CELL_TYPE_STRING);
			  cell_24.setCellStyle(normalStyle); 
			  cell_24.setCellValue(e[24] == null ?"NA":e[24].toString());
			  
			  
			  Cell cell_25 = row.createCell(25, Cell.CELL_TYPE_STRING);
			  cell_25.setCellStyle(normalStyle); 
			  cell_25.setCellValue(e[25] == null ?"NA":e[25].toString());
			  
			  
			  
			  Cell cell_26 = row.createCell(26, Cell.CELL_TYPE_STRING);
			  cell_26.setCellStyle(normalStyle); 
			  cell_26.setCellValue(e[26] == null ?"NA":e[26].toString());
			  
			  Cell cell_27 = row.createCell(27, Cell.CELL_TYPE_STRING);
			  cell_27.setCellStyle(normalStyle); 
			  cell_27.setCellValue(e[27] == null ?"NA":e[27].toString());
			  
			  Cell cell_28 = row.createCell(28, Cell.CELL_TYPE_STRING);
			  cell_28.setCellStyle(normalStyle); 
			  cell_28.setCellValue(e[28] == null ?"NA":e[28].toString());
			
			  
				 Cell cell_29 = row.createCell(29, Cell.CELL_TYPE_STRING);
				 cell_29.setCellStyle(normalStyle); 
				 cell_29.setCellValue(e[29] == null ?"NA":e[29].toString());
		
			rownum++;
		}
		}
		catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
		
		}
	}




	@Override
	void fillDataClassTimeTableExam(List<ClassAttendance> list) {
		// TODO Auto-generated method stub
		CellStyle normalStyle = getNormalStyle();
		  SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy");
		int rownum = 1;
		try {
		for (ClassAttendance logs : list) {
			Row row = sh.createRow(rownum);
			Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
			cell_0.setCellStyle(normalStyle);
			cell_0.setCellValue(logs.getStudentadmission().getExName());

			Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
			cell_1.setCellStyle(normalStyle);
			cell_1.setCellValue(logs.getStudentadmission().getExRollNo());

			Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
			cell_2.setCellStyle(normalStyle);
			cell_2.setCellValue(dtFormat.format(logs.getExPresentDate()));
			
			Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
			cell_3.setCellStyle(normalStyle);
			cell_3.setCellValue(logs.getExIsPresent() == true ? "1" :"0");
			
			 rownum++;
			}
		}
		catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
		
		}
		
	}




	




	@Override
	void fillDataClassGradeReportLog(List<Object[]> list) {
		 CellStyle normalStyle = getNormalStyle();   
	        SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
	        Date date  =  new Date();
	        
	        Row dataRow1 = sh.createRow(0);	
			sh.createRow(1);
			XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
			//ricString.applyFont((Font) normalStyle);
			dataRow1.createCell(0).setCellValue(ricString);
			
			XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());
			//ric_String.applyFont(font);(font11);					
			dataRow1.createCell(1).setCellValue(ric_String);
	        
	        int rownum = 3;
	      //  SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");    
	        long totamount = 0;
	        for (Object[] e : list) {
	            Row row = sh.createRow(rownum);
	            Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
	            cell_0.setCellStyle(normalStyle);
	            cell_0.setCellValue(e[0] == null ?"NA" :e[0].toString());
	        
	            Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
	            cell_1.setCellStyle(normalStyle);
	            cell_1.setCellValue(e[1] == null ?"NA" :e[1].toString());
	            
	            Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
	            cell_2.setCellStyle(normalStyle);
	            cell_2.setCellValue(e[2] == null ?"NA" :e[2].toString());
	            
	            Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
	            cell_3.setCellStyle(normalStyle);
	            cell_3.setCellValue(e[3] == null ?"NA" :e[3].toString());
	            
	            Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
	            cell_4.setCellStyle(normalStyle);
	            cell_4.setCellValue(e[4] == null ?"NA" :e[4].toString());
	            
	            Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
	            cell_5.setCellStyle(normalStyle);
	            cell_5.setCellValue(e[5] == null ?"NA" :e[5].toString());
	            
	            Cell cell_6 = row.createCell(6, Cell.CELL_TYPE_STRING);
	            cell_6.setCellStyle(normalStyle);
	            cell_6.setCellValue(e[6] == null ?"NA" :e[6].toString());
	            
	            Cell cell_7 = row.createCell(7, Cell.CELL_TYPE_STRING);
	            cell_7.setCellStyle(normalStyle);
	            cell_7.setCellValue(e[7] == null ?"NA" :e[7].toString());
				 
	            Cell cell_8 = row.createCell(8, Cell.CELL_TYPE_STRING);
	            cell_8.setCellStyle(normalStyle);
	            cell_8.setCellValue(e[8] == null ?"NA" :e[8].toString());
	           
	            
	            Cell cell_9 = row.createCell(9, Cell.CELL_TYPE_STRING);
	            cell_9.setCellStyle(normalStyle);
	            cell_9.setCellValue(e[9] == null ?"NA" :e[9].toString());
	            
	            
	            Cell cell_10 = row.createCell(10, Cell.CELL_TYPE_STRING);
				  cell_10.setCellStyle(normalStyle);
				  cell_10.setCellValue(e[10] == null ?"NA" :e[10].toString());
				 
				  Cell cell_11 = row.createCell(11, Cell.CELL_TYPE_STRING);
				  cell_11.setCellStyle(normalStyle); 
				  cell_11.setCellValue(e[11] == null ?"NA" :e[11].toString());
				  
				  
				  
				  Cell cell_12 = row.createCell(12, Cell.CELL_TYPE_STRING);
				  cell_12.setCellStyle(normalStyle); 
				  cell_12.setCellValue(e[12] == null ?"NA" :e[12].toString());
				 
				  Cell cell_13 = row.createCell(13, Cell.CELL_TYPE_STRING);
		          cell_13.setCellStyle(normalStyle);
		          cell_13.setCellValue(e[13] == null ?"NA" :e[13].toString());
		         
					Cell cell_14 = row.createCell(14, Cell.CELL_TYPE_STRING);
					cell_14.setCellStyle(normalStyle);
					cell_14.setCellValue(e[14] == null ?"NA" :e[14].toString());

					Cell cell_15 = row.createCell(15, Cell.CELL_TYPE_STRING);
					cell_15.setCellStyle(normalStyle);
					cell_15.setCellValue(e[15] == null ?"NA" :e[15].toString());
	            
	            rownum++;
	        }
	       // TODO Auto-generated method stub
		
	}




	@Override
	void fillDataClassSemesterReportLog(List<Object[]> list) {
		 CellStyle normalStyle = getNormalStyle();   
	        SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
	        Date date  =  new Date();
	        
	        Row dataRow1 = sh.createRow(0);	
			sh.createRow(1);
			XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
			//ricString.applyFont((Font) normalStyle);
			dataRow1.createCell(0).setCellValue(ricString);
			
			XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());
			//ric_String.applyFont(font);(font11);					
			dataRow1.createCell(1).setCellValue(ric_String);
	        
	        int rownum = 3;
	      //  SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");    
	        long totamount = 0;
	        for (Object[] e : list) {
	            Row row = sh.createRow(rownum);
	            Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
	            cell_0.setCellStyle(normalStyle);
	            cell_0.setCellValue(e[0] == null ?"NA" :e[0].toString());
	        
	            Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
	            cell_1.setCellStyle(normalStyle);
	            cell_1.setCellValue(e[1] == null ?"NA" :e[1].toString());
	            
	            Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
	            cell_2.setCellStyle(normalStyle);
	            cell_2.setCellValue(e[2] == null ?"NA" :e[2].toString());
	            
	            Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
	            cell_3.setCellStyle(normalStyle);
	            cell_3.setCellValue(e[3] == null ?"NA" :e[3].toString());
	            
	            Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
	            cell_4.setCellStyle(normalStyle);
	            cell_4.setCellValue(e[4] == null ?"NA" :e[4].toString());
	            
	            Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
	            cell_5.setCellStyle(normalStyle);
	            cell_5.setCellValue(e[5] == null ?"NA" :e[5].toString());
	            
	            Cell cell_6 = row.createCell(6, Cell.CELL_TYPE_STRING);
	            cell_6.setCellStyle(normalStyle);
	            cell_6.setCellValue(e[6] == null ?"NA" :e[6].toString());
	            
	            Cell cell_7 = row.createCell(7, Cell.CELL_TYPE_STRING);
	            cell_7.setCellStyle(normalStyle);
	            cell_7.setCellValue(e[7] == null ?"NA" :e[7].toString());
				 
	            Cell cell_8 = row.createCell(8, Cell.CELL_TYPE_STRING);
	            cell_8.setCellStyle(normalStyle);
	            cell_8.setCellValue(e[8] == null ?"NA" :e[8].toString());
	           
	            
	            Cell cell_9 = row.createCell(9, Cell.CELL_TYPE_STRING);
	            cell_9.setCellStyle(normalStyle);
	            cell_9.setCellValue(e[9] == null ?"NA" :e[9].toString());
	            
	            
	            Cell cell_10 = row.createCell(10, Cell.CELL_TYPE_STRING);
				  cell_10.setCellStyle(normalStyle);
				  cell_10.setCellValue(e[10] == null ?"NA" :e[10].toString());
				 
				  Cell cell_11 = row.createCell(11, Cell.CELL_TYPE_STRING);
				  cell_11.setCellStyle(normalStyle); 
				  cell_11.setCellValue(e[11] == null ?"NA" :e[11].toString());
				  
				  
				  
				  Cell cell_12 = row.createCell(12, Cell.CELL_TYPE_STRING);
				  cell_12.setCellStyle(normalStyle); 
				  cell_12.setCellValue(e[12] == null ?"NA" :e[12].toString());
				 
				  Cell cell_13 = row.createCell(13, Cell.CELL_TYPE_STRING);
		          cell_13.setCellStyle(normalStyle);
		          cell_13.setCellValue(e[13] == null ?"NA" :e[13].toString());
		         
				
	            
	            rownum++;
	        }
	       // TODO Auto-generated method stub
		
	}




	@Override
	void fillDataStudentAdmision(List<Studentpersonal> student) {
		// TODO Auto-generated method stub		
		CellStyle normalStyle = getNormalStyle();
		  SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
	        Date date  =  new Date();
	        
	        Row dataRow1 = sh.createRow(0);	
			sh.createRow(1);
			XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
			//ricString.applyFont((Font) normalStyle);
			dataRow1.createCell(0).setCellValue(ricString);
			
			XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());
			//ric_String.applyFont(font);(font11);					
			dataRow1.createCell(1).setCellValue(ric_String);
	        
	        int rownum = 3;
		try {
			for (Studentpersonal logs : student) {
			Row row = sh.createRow(rownum);
			Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
			cell_0.setCellStyle(normalStyle);
			cell_0.setCellValue(logs.getStudentadmission().getColleges().getExIdentifier());

			Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
			cell_1.setCellStyle(normalStyle);
			cell_1.setCellValue(logs.getStudentadmission().getDegree().getExName());

			Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
			cell_2.setCellStyle(normalStyle);
			cell_2.setCellValue(logs.getStudentadmission().getBatch().getExIdentifier());
			
			
			Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
			cell_3.setCellStyle(normalStyle);
			cell_3.setCellValue(logs.getStudentadmission().getProgrammes().getExIdentifier());
			
			
			Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
			cell_4.setCellStyle(normalStyle);
			cell_4.setCellValue(logs.getStudentadmission().getDepartment().getExIdentifier());
			
			
			Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
			cell_5.setCellStyle(normalStyle);
			cell_5.setCellValue(logs.getStudentadmission().getStream().get(0).getExIdentifier());
			
			

			Cell cell_6 = row.createCell(6, Cell.CELL_TYPE_STRING);
			cell_6.setCellStyle(normalStyle);
			cell_6.setCellValue(logs.getStudentadmission().getAcademicYear().getExYear());

			Cell cell_7 = row.createCell(7, Cell.CELL_TYPE_STRING); 
			cell_7.setCellStyle(normalStyle);
			cell_7.setCellValue(logs.getStudentadmission().getAllocatedCategory() == null ?"NA" :logs.getStudentadmission().getAllocatedCategory().getExName());

			Cell cell_8 = row.createCell(8, Cell.CELL_TYPE_STRING);
			cell_8.setCellStyle(normalStyle);
			cell_8.setCellValue(logs.getStudentadmission().getCategory() == null ?"NA" :logs.getStudentadmission().getCategory().getExName());

			Cell cell_9 = row.createCell(9, Cell.CELL_TYPE_STRING);
			cell_9.setCellStyle(normalStyle);
			cell_9.setCellValue(logs.getStudentadmission().getExName());

			Cell cell_10 = row.createCell(10, Cell.CELL_TYPE_STRING);
			cell_10.setCellStyle(normalStyle);
			cell_10.setCellValue(logs.getStudentadmission().getExRollNo());
			
			Cell cell_11 = row.createCell(11, Cell.CELL_TYPE_STRING);
			cell_11.setCellStyle(normalStyle);
			cell_11.setCellValue(logs.getStudentadmission().getExEnrollementNo());

			Cell cell_12 = row.createCell(12, Cell.CELL_TYPE_STRING);
			cell_12.setCellStyle(normalStyle);
			cell_12.setCellValue(logs.getStudentadmission().getExStudyStatus() == null ?"NA" :logs.getStudentadmission().getExStudyStatus());

			Cell cell_13 = row.createCell(13, Cell.CELL_TYPE_STRING);
			cell_13.setCellStyle(normalStyle);
			cell_13.setCellValue(logs.getExEmailId().toLowerCase());

			Cell cell_14 = row.createCell(14, Cell.CELL_TYPE_STRING);
			cell_14.setCellStyle(normalStyle);
			cell_14.setCellValue(logs.getExContactDetails());
			
			
			Cell cell_15 = row.createCell(15, Cell.CELL_TYPE_STRING);
			cell_15.setCellStyle(normalStyle);
			cell_15.setCellValue(logs.getExDateOfBirth());
			
			
			
			Cell cell_24 = row.createCell(16, Cell.CELL_TYPE_STRING);
			cell_24.setCellStyle(normalStyle);
			cell_24.setCellValue(logs.getExGender());
			
			  Cell cell_16 = row.createCell(17, Cell.CELL_TYPE_STRING);
			  cell_16.setCellStyle(normalStyle);
			  cell_16.setCellValue(logs.getExFatherName().toUpperCase());
			 

			
			  Cell cell_17 = row.createCell(18, Cell.CELL_TYPE_STRING);
			  cell_17.setCellStyle(normalStyle);
			  cell_17.setCellValue(logs.getExMotherName().toUpperCase());
			 

			
			  Cell cell_18 = row.createCell(19, Cell.CELL_TYPE_STRING);
			  cell_18.setCellStyle(normalStyle); 
			  cell_18.setCellValue(logs.getExNativeState().toUpperCase());
			  
			  Cell cell_19 = row.createCell(20, Cell.CELL_TYPE_STRING);
			  cell_19.setCellStyle(normalStyle); 
			  cell_19.setCellValue(logs.getExReligion().toUpperCase());
			  
			  Cell cell_21 = row.createCell(21, Cell.CELL_TYPE_STRING);
			  cell_21.setCellStyle(normalStyle); 
			  cell_21.setCellValue(logs.getExAdhaarNumber());
			  
			  Cell cell_22 = row.createCell(22, Cell.CELL_TYPE_STRING);
			  cell_22.setCellStyle(normalStyle); 
			  cell_22.setCellValue(logs.getExParentContactDetails());
			  
			  Cell cell_23 = row.createCell(23, Cell.CELL_TYPE_STRING);
			  cell_23.setCellStyle(normalStyle); 
			  cell_23.setCellValue(logs.getExPermanentAddress());
			  
			 
			 
			  			
			 rownum++;
	    	}
		}
		catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
		
		}		
	}




	@Override
	void fillDatasemesterRegistration(List<SemesterRegistration> student) {
		// TODO Auto-generated method stub		
		CellStyle normalStyle = getNormalStyle();
		int rownum = 1;
		try {
			for (SemesterRegistration logs : student) {
			Row row = sh.createRow(rownum);
			Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
			cell_0.setCellStyle(normalStyle);
			cell_0.setCellValue(logs.getAcademicYear().getExYear());

			Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
			cell_1.setCellStyle(normalStyle);
			cell_1.setCellValue(logs.getColleges().getExName());

			Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
			cell_2.setCellStyle(normalStyle);
			cell_2.setCellValue(logs.getDegree().getExName());
			
			
			Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
			cell_3.setCellStyle(normalStyle);
			cell_3.setCellValue(logs.getProgrammes().getExName());
			
			
			Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
			cell_4.setCellStyle(normalStyle);
			cell_4.setCellValue(logs.getDepartment().getExName());
			
			
			Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
			cell_5.setCellStyle(normalStyle);
			cell_5.setCellValue(logs.getProgrammeYear().getExName());

			Cell cell_6 = row.createCell(6, Cell.CELL_TYPE_STRING);
			cell_6.setCellStyle(normalStyle);
			cell_6.setCellValue(logs.getSemester().getExName());

			Cell cell_7 = row.createCell(7, Cell.CELL_TYPE_STRING);
			cell_7.setCellStyle(normalStyle);
			cell_7.setCellValue(logs.getStudentadmission().getExName());

			Cell cell_8 = row.createCell(8, Cell.CELL_TYPE_STRING);
			cell_8.setCellStyle(normalStyle);
			cell_8.setCellValue(logs.getStudentadmission().getExRollNo());

			Cell cell_9 = row.createCell(9, Cell.CELL_TYPE_STRING);
			cell_9.setCellStyle(normalStyle);
			cell_9.setCellValue(logs.getStudentadmission().getExEnrollementNo());

			Cell cell_10 = row.createCell(10, Cell.CELL_TYPE_STRING);
			cell_10.setCellStyle(normalStyle);
			cell_10.setCellValue(logs.getExCreateDate().toString());
			 rownum++;
	    	}
		}
		catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
		
		}	
	}




	/*
	 * @Override void fillDataTeacherCouurseMapping(List<TeacherCourseMapping>
	 * student) { // TODO Auto-generated method stub CellStyle normalStyle =
	 * getNormalStyle();
	 * 
	 * SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss"); Date
	 * date = new Date();
	 * 
	 * Row dataRow1 = sh.createRow(0); sh.createRow(1); XSSFRichTextString ricString
	 * = new XSSFRichTextString("Downloded Time :"); //ricString.applyFont((Font)
	 * normalStyle); dataRow1.createCell(0).setCellValue(ricString);
	 * 
	 * XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());
	 * //ric_String.applyFont(font);(font11);
	 * dataRow1.createCell(1).setCellValue(ric_String);
	 * 
	 * int rownum = 3; try { for (TeacherCourseMapping logs : student) { Row row =
	 * sh.createRow(rownum); Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
	 * cell_0.setCellStyle(normalStyle);
	 * cell_0.setCellValue(logs.getAcademicYear().getExYear());
	 * 
	 * Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
	 * cell_1.setCellStyle(normalStyle);
	 * cell_1.setCellValue(logs.getColleges().getExName());
	 * 
	 * Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
	 * cell_2.setCellStyle(normalStyle);
	 * cell_2.setCellValue(logs.getDegree().getExName());
	 * 
	 * 
	 * Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
	 * cell_3.setCellStyle(normalStyle);
	 * cell_3.setCellValue(logs.getProgrammes().getExName());
	 * 
	 * 
	 * Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
	 * cell_4.setCellStyle(normalStyle);
	 * cell_4.setCellValue(logs.getDepartment().getExName());
	 * 
	 * 
	 * Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
	 * cell_5.setCellStyle(normalStyle);
	 * cell_5.setCellValue(logs.getProgrammeYear().getExName());
	 * 
	 * Cell cell_6 = row.createCell(6, Cell.CELL_TYPE_STRING);
	 * cell_6.setCellStyle(normalStyle);
	 * cell_6.setCellValue(logs.getSemster().getExName());
	 * 
	 * 
	 * 
	 * String str = ""; for(int i = 0 ;i<logs.getCourses().size() ; i++) { str
	 * =str+logs.getCourses().get(i).getExCoursesCode()+",";
	 * 
	 * }
	 * 
	 * Cell cell_7 = row.createCell(7, Cell.CELL_TYPE_STRING);
	 * cell_7.setCellStyle(normalStyle); cell_7.setCellValue(str);
	 * 
	 * Cell cell_8 = row.createCell(8, Cell.CELL_TYPE_STRING);
	 * cell_8.setCellStyle(normalStyle);
	 * cell_8.setCellValue(logs.getStaffpersonal().getExName());
	 * 
	 * Cell cell_9 = row.createCell(9, Cell.CELL_TYPE_STRING);
	 * cell_9.setCellStyle(normalStyle); cell_9.setCellValue(logs.getSection() ==
	 * null ?"NA" :logs.getSection().getExName() );
	 * 
	 * rownum++; } } catch (Exception e) { // TODO: handle exception
	 * e.printStackTrace(); logger.error("Exception occured" + e); StringWriter
	 * errors = new StringWriter(); e.printStackTrace(new PrintWriter(errors));
	 * logger.error(errors.toString());
	 * 
	 * }
	 * 
	 * }
	 */



	/*
	 * @Override void gradeReportExcelData(List<GradeReport>
	 * list,List<Studentpersonal> code) { // TODO Auto-generated method stub // TODO
	 * Auto-generated method stub CellStyle normalStyle = getNormalStyle();
	 * SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss"); Date
	 * date = new Date();
	 * 
	 * Row dataRow1 = sh.createRow(0); sh.createRow(1); XSSFRichTextString ricString
	 * = new XSSFRichTextString("Downloded Time :"); //ricString.applyFont((Font)
	 * normalStyle); dataRow1.createCell(0).setCellValue(ricString);
	 * 
	 * XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());
	 * //ric_String.applyFont(font);(font11);
	 * dataRow1.createCell(1).setCellValue(ric_String);
	 * 
	 * int rownum = 3; try { for (GradeReport logs : list) { Row row =
	 * sh.createRow(rownum); Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
	 * cell_0.setCellStyle(normalStyle);
	 * cell_0.setCellValue(logs.getAcademicYear().getExIdentifier());
	 * 
	 * Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
	 * cell_1.setCellStyle(normalStyle);
	 * cell_1.setCellValue(logs.getColleges().getExIdentifier());
	 * 
	 * Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
	 * cell_2.setCellStyle(normalStyle);
	 * cell_2.setCellValue(logs.getDegree().getExName());
	 * 
	 * 
	 * Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
	 * cell_3.setCellStyle(normalStyle);
	 * cell_3.setCellValue(logs.getProgrammes().getExIdentifier());
	 * 
	 * 
	 * Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
	 * cell_4.setCellStyle(normalStyle);
	 * cell_4.setCellValue(logs.getDepartment().getExIdentifier());
	 * 
	 * 
	 * Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
	 * cell_5.setCellStyle(normalStyle);
	 * cell_5.setCellValue(logs.getProgrammeYear().getExName());
	 * 
	 * Cell cell_6 = row.createCell(6, Cell.CELL_TYPE_STRING);
	 * cell_6.setCellStyle(normalStyle);
	 * cell_6.setCellValue(logs.getSemester().getExName());
	 * 
	 * Cell cell_7 = row.createCell(7, Cell.CELL_TYPE_STRING);
	 * cell_7.setCellStyle(normalStyle);
	 * cell_7.setCellValue(logs.getCourses().getExCoursesCode());
	 * 
	 * Cell cell_8 = row.createCell(8, Cell.CELL_TYPE_STRING);
	 * cell_8.setCellStyle(normalStyle);
	 * cell_8.setCellValue(logs.getStudentadmission().getExRollNo());
	 * 
	 * Cell cell_9 = row.createCell(9, Cell.CELL_TYPE_STRING);
	 * cell_9.setCellStyle(normalStyle);
	 * cell_9.setCellValue(logs.getStudentadmission().getExEnrollementNo());
	 * 
	 * Cell cell_10 = row.createCell(10, Cell.CELL_TYPE_STRING);
	 * cell_10.setCellStyle(normalStyle);
	 * cell_10.setCellValue(logs.getStudentadmission().getExName());
	 * 
	 * Cell cell_11 = row.createCell(11, Cell.CELL_TYPE_STRING);
	 * cell_11.setCellStyle(normalStyle); String s=""; if(code.size()>0) { for(int
	 * i=0;i<code.size();i++) { if(i!=code.size()-1)
	 * s=s+code.get(i).getExContactDetails(); else
	 * s=s+code.get(i).getExContactDetails(); cell_11.setCellValue(s); }
	 * 
	 * }
	 * 
	 * Cell cell_12 = row.createCell(12, Cell.CELL_TYPE_STRING);
	 * cell_12.setCellStyle(normalStyle);
	 * cell_12.setCellValue(logs.getExGradePoint() == null ?"NA"
	 * :logs.getExGradePoint().toString());
	 * 
	 * Cell cell_13 = row.createCell(13, Cell.CELL_TYPE_STRING);
	 * cell_13.setCellStyle(normalStyle);
	 * cell_13.setCellValue(logs.getExLetterGrades());
	 * 
	 * Cell cell_14 = row.createCell(14, Cell.CELL_TYPE_STRING);
	 * cell_14.setCellStyle(normalStyle); cell_14.setCellValue(logs.getExRemark());
	 * 
	 * Cell cell_15 = row.createCell(15, Cell.CELL_TYPE_STRING);
	 * cell_15.setCellStyle(normalStyle);
	 * cell_15.setCellValue(logs.getRegistrationType().getExName());
	 * 
	 * rownum++; }
	 * 
	 * } catch (Exception e) { // TODO: handle exception e.printStackTrace();
	 * logger.error("Exception occured" + e); StringWriter errors = new
	 * StringWriter(); e.printStackTrace(new PrintWriter(errors));
	 * logger.error(errors.toString());
	 * 
	 * } }
	 * 
	 * 
	 */

	@Override
	void coursesReportExcelData(List<Courses> list) {
		CellStyle normalStyle = getNormalStyle();
		CellStyle normalStyle4 = getNormalStyle4();
		SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
        Date date  =  new Date();
        
        Row dataRow1 = sh.createRow(0);	
		sh.createRow(1);
		XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
		dataRow1.createCell(0).setCellValue(ricString);
		
		XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());					
		dataRow1.createCell(1).setCellValue(ric_String);
        
        int rownum = 3;
		try {
			for (Courses logs : list) {
			Row row = sh.createRow(rownum);
			Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
			cell_0.setCellStyle(normalStyle);
			cell_0.setCellValue(logs.getDegree().getExName());

			Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
			cell_1.setCellStyle(normalStyle);
			cell_1.setCellValue(logs.getColleges().getExIdentifier());

			Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
			cell_2.setCellStyle(normalStyle);
			cell_2.setCellValue(logs.getProgrammes().getExIdentifier());
			
			
			Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
			cell_3.setCellStyle(normalStyle);
			cell_3.setCellValue(logs.getDepartment().getExIdentifier());
			
			
			Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
			cell_4.setCellStyle(normalStyle);
			cell_4.setCellValue(logs.getStream().getExIdentifier());
			
			
			Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
			cell_5.setCellStyle(normalStyle);
			cell_5.setCellValue(logs.getAcademicYear().getExIdentifier());

			Cell cell_6 = row.createCell(6, Cell.CELL_TYPE_STRING);
			cell_6.setCellStyle(normalStyle);
			cell_6.setCellValue(logs.getBatch().getExName());

			Cell cell_7 = row.createCell(7, Cell.CELL_TYPE_STRING);
			cell_7.setCellStyle(normalStyle);
			cell_7.setCellValue(logs.getProgrammeYear().getExName());

			Cell cell_8 = row.createCell(8, Cell.CELL_TYPE_STRING);
			cell_8.setCellStyle(normalStyle);
			cell_8.setCellValue(logs.getSemester().getExName());

			Cell cell_9 = row.createCell(9, Cell.CELL_TYPE_STRING);
			cell_9.setCellStyle(normalStyle);
			cell_9.setCellValue(logs.getCreditHours().getExCreditHourTitle());

			Cell cell_10 = row.createCell(10, Cell.CELL_TYPE_STRING);
			cell_10.setCellStyle(normalStyle);
			cell_10.setCellValue(logs.getExName());
			
			
			Cell cell_111 = row.createCell(11, Cell.CELL_TYPE_STRING);
			cell_111.setCellStyle(normalStyle);
			cell_111.setCellValue(logs.getExCoursesCode());
			
			Cell cell_112 = row.createCell(12, Cell.CELL_TYPE_STRING);
			cell_112.setCellStyle(normalStyle);
			cell_112.setCellValue(logs.getExDescription());
			
			String str = "";
			for(int i = 0 ;i<logs.getCoursesType().size() ; i++) {
				str = str+logs.getCoursesType().get(i).getExName()+",";
			}
			StringBuffer sb= new StringBuffer(str); 
			sb.deleteCharAt(sb.length()-1); 
			Cell cell_11 = row.createCell(13, Cell.CELL_TYPE_STRING);
			cell_11.setCellStyle(normalStyle);
			cell_11.setCellValue(sb.toString());


			
			String sat = "NA" ;
			if(logs.getExIsSatisfactory() !=null && logs.getExIsSatisfactory() == false) {
				sat = "NO";
			}else {
				sat = "YES";
			}
			Cell cell_13 = row.createCell(14, Cell.CELL_TYPE_STRING);
			cell_13.setCellStyle(normalStyle);
			cell_13.setCellValue(sat);
			
			
			String project = "NA" ;
			if(logs.getExIsProject() !=null && logs.getExIsProject() == false) {
				project = "NO";
			}else {
				project = "YES";
			}

			Cell cell_14 = row.createCell(15, Cell.CELL_TYPE_STRING);
			cell_14.setCellStyle(normalStyle);
			cell_14.setCellValue(project);
			
			
			String seminar = "NA" ;
			if(logs.getExIsSeminar() !=null && logs.getExIsSeminar() == false) {
				seminar = "NO";
			}else {
				seminar = "YES";
			}
			
			Cell cell_15 = row.createCell(16, Cell.CELL_TYPE_STRING);
			cell_15.setCellStyle(normalStyle);
			cell_15.setCellValue(seminar);
			
			
			String elective = "NA" ;
			if(logs.getExIsElective() !=null && logs.getExIsElective() == false) {
				elective = "NO";
			}else {
				elective = "YES";
			}
			Cell cell_16 = row.createCell(17, Cell.CELL_TYPE_STRING);
			cell_16.setCellStyle(normalStyle);
			cell_16.setCellValue(elective);
			
			
			String Compulsory = "NA" ;
			if(logs.getExIscompulsory() !=null && logs.getExIscompulsory() == false) {
				Compulsory = "NO";
			}else {
				Compulsory = "YES";
			}
			Cell cell_19 = row.createCell(18, Cell.CELL_TYPE_STRING);
			cell_19.setCellStyle(normalStyle);
			cell_19.setCellValue(Compulsory);
			
			
			String Industrial = "NA" ;
			if(logs.getExIsIndustrialVisit() !=null && logs.getExIsIndustrialVisit() == false) {
				Industrial = "NO";
			}else {
				Industrial = "YES";
			}
			Cell cell_191 = row.createCell(19, Cell.CELL_TYPE_STRING);
			cell_191.setCellStyle(normalStyle);
			cell_191.setCellValue(Industrial);
			
			
			String village = "NA" ;
			if(logs.getExIsVillageAdoption() !=null && logs.getExIsVillageAdoption() == false) {
				village = "NO";
			}else {
				village = "YES";
			}
			Cell cell_193 = row.createCell(20, Cell.CELL_TYPE_STRING);
			cell_193.setCellStyle(normalStyle);
			cell_193.setCellValue(village);
			

			String IndustrialTrainig = "NA" ;
			if(logs.getExIsIndustrialTrainingInternship() !=null &&logs.getExIsIndustrialTrainingInternship() == false) {
				IndustrialTrainig = "NO";
			}else {
				IndustrialTrainig = "YES";
			}
			Cell cell_194 = row.createCell(21, Cell.CELL_TYPE_STRING);
			cell_194.setCellStyle(normalStyle);
			cell_194.setCellValue(IndustrialTrainig);
			

			String research = "NA" ;
			if(logs.getExIsResearchProject() !=null && logs.getExIsResearchProject() == false) {
				research = "NO";
			}else {
				research = "YES";
			}
			Cell cell_195 = row.createCell(22, Cell.CELL_TYPE_STRING);
			cell_195.setCellStyle(normalStyle);
			cell_195.setCellValue(research);
			
			
			Cell cell_17 = row.createCell(23, Cell.CELL_TYPE_STRING);
			cell_17.setCellStyle(normalStyle4);
			String SubCode = "NA" ;
			if(logs.getExSubjectCode()!=null && !logs.getExSubjectCode().equalsIgnoreCase("NA")&& !logs.getExSubjectCode().equals(" ")) {
				SubCode=logs.getExSubjectCode();
			}else {
				SubCode = "NA" ;
					
			}
			cell_17.setCellValue(SubCode);
			
			
			Cell cell_18 = row.createCell(24, Cell.CELL_TYPE_STRING);
			cell_18.setCellStyle(normalStyle4);
			String Syllbus = "NA" ;
			if(logs.getExSyllabusUrl()!=null && !logs.getExSyllabusUrl().equalsIgnoreCase("NA")&& !logs.getExSyllabusUrl().equals(" ")) {
				Syllbus="Uploaded";
			}else {
				Syllbus = "Pending" ;
					
			}
			cell_18.setCellValue(Syllbus);
			 rownum++;
			}
		}
		catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
		
		}	
	}




	/*
	 * @Override void staffReportExcelData(List<Staffpersonal> list) { // TODO
	 * Auto-generated method stub CellStyle normalStyle = getNormalStyle();
	 * 
	 * SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss"); Date
	 * date = new Date(); Row dataRow1 = sh.createRow(1); sh.createRow(2);
	 * XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
	 * dataRow1.createCell(3).setCellValue(ricString);
	 * 
	 * XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());
	 * dataRow1.createCell(4).setCellValue(ric_String); int rownum = 2; try { for
	 * (Staffpersonal logs : list) { Row row = sh.createRow(rownum); Cell cell_0 =
	 * row.createCell(0, Cell.CELL_TYPE_STRING); cell_0.setCellStyle(normalStyle);
	 * cell_0.setCellValue(logs.getColleges().getExName());
	 * 
	 * Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
	 * cell_1.setCellStyle(normalStyle);
	 * cell_1.setCellValue(logs.getDegree().getExName());
	 * 
	 * Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
	 * cell_2.setCellStyle(normalStyle);
	 * cell_2.setCellValue(logs.getProgrammes().getExName());
	 * 
	 * 
	 * Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
	 * cell_3.setCellStyle(normalStyle);
	 * cell_3.setCellValue(logs.getDepartment().getExName());
	 * 
	 * 
	 * Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
	 * cell_4.setCellStyle(normalStyle);
	 * cell_4.setCellValue(logs.getStafftype().getExName());
	 * 
	 * 
	 * Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
	 * cell_5.setCellStyle(normalStyle);
	 * cell_5.setCellValue(logs.getDesignation().get(0).getExName());
	 * 
	 * Cell cell_6 = row.createCell(6, Cell.CELL_TYPE_STRING);
	 * cell_6.setCellStyle(normalStyle);
	 * cell_6.setCellValue(logs.getExEmployeeId());
	 * 
	 * Cell cell_9 = row.createCell(7, Cell.CELL_TYPE_STRING);
	 * cell_9.setCellStyle(normalStyle); cell_9.setCellValue(logs.getExName());
	 * 
	 * Cell cell_7 = row.createCell(8, Cell.CELL_TYPE_STRING);
	 * cell_7.setCellStyle(normalStyle); cell_7.setCellValue(logs.getExEmail());
	 * 
	 * Cell cell_8 = row.createCell(9, Cell.CELL_TYPE_STRING);
	 * cell_8.setCellStyle(normalStyle);
	 * cell_8.setCellValue(logs.getExContactDetails());
	 * 
	 * Cell cell_10 = row.createCell(10, Cell.CELL_TYPE_STRING);
	 * cell_10.setCellStyle(normalStyle); cell_10.setCellValue(logs.getExAddress());
	 * 
	 * 
	 * Cell cell_11 = row.createCell(11, Cell.CELL_TYPE_STRING);
	 * cell_11.setCellStyle(normalStyle);
	 * cell_11.setCellValue(logs.getExDateOfBirth());
	 * 
	 * 
	 * Cell cell_12 = row.createCell(12, Cell.CELL_TYPE_STRING);
	 * cell_12.setCellStyle(normalStyle); cell_12.setCellValue(logs.getExGender());
	 * 
	 * 
	 * rownum++; } } catch (Exception e) { // TODO: handle exception
	 * e.printStackTrace(); logger.error("Exception occured" + e); StringWriter
	 * errors = new StringWriter(); e.printStackTrace(new PrintWriter(errors));
	 * logger.error(errors.toString());
	 * 
	 * } }
	 * 
	 */


	@Override
	void batchReportExcelData(List<Batch> list) {
		CellStyle normalStyle = getNormalStyle();
		 SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
	        Date date  =  new Date();
	        Row dataRow1 = sh.createRow(1);	
			sh.createRow(2);
			XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
			dataRow1.createCell(3).setCellValue(ricString);
			
			XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());					
			dataRow1.createCell(4).setCellValue(ric_String);
		
		int rownum = 2;
		try {
			for (Batch logs : list) {
			Row row = sh.createRow(rownum);
			Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
			cell_0.setCellStyle(normalStyle);
			cell_0.setCellValue(logs.getExName());

			Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
			cell_1.setCellStyle(normalStyle);
			cell_1.setCellValue(logs.getDegree().getExName());

			Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
			cell_2.setCellStyle(normalStyle);
			cell_2.setCellValue(logs.getProgrammes().getExName());
			
			Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
			cell_3.setCellStyle(normalStyle);
			cell_3.setCellValue(logs.getExCreateDate().toString());
			
			Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
			cell_4.setCellStyle(normalStyle);
			cell_4.setCellValue(logs.getExUpdateDate() == null ?"NA" :logs.getExUpdateDate().toString());
			
			
			Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
			cell_5.setCellStyle(normalStyle);
			cell_5.setCellValue(logs.getExDescription() == null ?"NA" :logs.getExDescription());

			Cell cell_6 = row.createCell(6, Cell.CELL_TYPE_STRING);
			cell_6.setCellStyle(normalStyle);
			cell_6.setCellValue(logs.getExIdentifier());

			
			
			 rownum++;
	    	}
		}
		catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
		
		}			
	}




	



	@Override
	void fillDataAuditLogReportLog(List<Object[]> dataList) {
		CellStyle normalStyle = getNormalStyle();
		CellStyle normalStyle6 = getNormalStyle6();
		 SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
	        Date date  =  new Date();
	        
	        Row dataRow1 = sh.createRow(0);	
			Font font = wb.createFont();
			XSSFFont font1 = (XSSFFont) font;
			XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
	
			Cell cel  =	dataRow1.createCell(0,Cell.CELL_TYPE_STRING);
			cel.setCellStyle(normalStyle6);
			cel.setCellValue(ricString);
			font1.setBold(true);
			
			XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());
			Cell cel1  =	dataRow1.createCell(1,Cell.CELL_TYPE_STRING);
			cel1.setCellStyle(normalStyle6);
			cel1.setCellValue(ric_String);
			
			font1.setBold(true);
		int rownum = 3;
		for (Object[] e : dataList) {
            Row row = sh.createRow(rownum);
            Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
            cell_0.setCellStyle(normalStyle);
            cell_0.setCellValue(e[0] == null ?"NA" :e[0].toString());
        
            Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
            cell_1.setCellStyle(normalStyle);
            cell_1.setCellValue(e[1] == null ?"NA" :e[1].toString());
            
            Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
            cell_2.setCellStyle(normalStyle);
            cell_2.setCellValue(e[2] == null ?"NA" :e[2].toString());
   
            Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
            cell_3.setCellStyle(normalStyle);
            cell_3.setCellValue(e[3] == null ?"NA" :e[3].toString());
            
            Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
            cell_4.setCellStyle(normalStyle);
            cell_4.setCellValue(e[4] == null ?"NA" :e[4].toString());
            
            Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
            cell_5.setCellStyle(normalStyle);
            cell_5.setCellValue(e[5] == null ?"NA" :e[5].toString());
	            
	            rownum++;
	}

	}
	@Override
	void fillDatatransactionexportReportLog(List<Object[]> list) {
		CellStyle normalStyle = getNormalStyle();
		CellStyle normalStyle6 = getNormalStyle6();
		 SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
	        Date date  =  new Date();
	        
	        Row dataRow1 = sh.createRow(0);	
			Font font = wb.createFont();
			XSSFFont font1 = (XSSFFont) font;
			XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
	
			Cell cel  =	dataRow1.createCell(0,Cell.CELL_TYPE_STRING);
			cel.setCellStyle(normalStyle6);
			cel.setCellValue(ricString);
			font1.setBold(true);
			
			XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());
			Cell cel1  =	dataRow1.createCell(1,Cell.CELL_TYPE_STRING);
			cel1.setCellStyle(normalStyle6);
			cel1.setCellValue(ric_String);
			
			font1.setBold(true);
		int rownum = 3;
		for (Object[] e : list) {
            Row row = sh.createRow(rownum);
            Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
            cell_0.setCellStyle(normalStyle);
            cell_0.setCellValue(e[0] == null ?"NA" :e[0].toString());
        
            Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
            cell_1.setCellStyle(normalStyle);
            cell_1.setCellValue(e[1] == null ?"NA" :e[1].toString());
            
            Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
            cell_2.setCellStyle(normalStyle);
            cell_2.setCellValue(e[2] == null ?"NA" :e[2].toString());
         //  int cod=2;
         //   String trans="";
         //  trans=e[2] == null ?"NA" :e[2].toString();
         //   String str1[]=trans.split(" , ");
         //  for(String s:str1)
		  //   {
        //	   System.out.println("niininnnn  "+s);
		//		 Cell sta14 = row.createCell(cod++);
		   // 	 sta14.setCellStyle(normalStyle);
		   // 	 sta14.setCellValue(s);
		    	 
		  //  }
            Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
            cell_3.setCellStyle(normalStyle);
            cell_3.setCellValue(e[3] == null ?"NA" :e[3].toString());
            
            Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
            cell_4.setCellStyle(normalStyle);
            cell_4.setCellValue(e[4] == null ?"NA" :e[4].toString());
            
            Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
            cell_5.setCellStyle(normalStyle);
            cell_5.setCellValue(e[5] == null ?"NA" :e[5].toString());
           
            Cell cell_6 = row.createCell(6, Cell.CELL_TYPE_STRING);
            cell_6.setCellStyle(normalStyle);
            cell_6.setCellValue(e[6] == null ?"NA" :e[6].toString());

      
            Cell cell_7 = row.createCell(7, Cell.CELL_TYPE_STRING);
            cell_7.setCellStyle(normalStyle);
            cell_7.setCellValue(e[7] == null ?"NA" :e[7].toString());
            
            System.out.println("Name Of Student "+e[7].toString());
            
            Cell cell_8 = row.createCell(8, Cell.CELL_TYPE_STRING);
            cell_8.setCellStyle(normalStyle);
            cell_8.setCellValue(e[8] == null ?"NA" :e[8].toString());
            
            System.out.println("RollNumber Of Student "+e[8].toString());
            
       
            Cell cell_9 = row.createCell(9, Cell.CELL_TYPE_STRING);
            cell_9.setCellStyle(normalStyle);
            cell_9.setCellValue(e[9] == null ?"NA" :e[9].toString());
            

            Cell cell_10 = row.createCell(10, Cell.CELL_TYPE_STRING);
            cell_10.setCellStyle(normalStyle);
            cell_10.setCellValue(e[10] == null ?"NA" :e[10].toString());
            

            Cell cell_11 = row.createCell(11, Cell.CELL_TYPE_STRING);
            cell_11.setCellStyle(normalStyle);
            cell_11.setCellValue(e[11] == null ?"NA" :e[11].toString());
            

            Cell cell_12 = row.createCell(12, Cell.CELL_TYPE_STRING);
            cell_12.setCellStyle(normalStyle);
            cell_12.setCellValue(e[12] == null ?"NA" :e[12].toString());
            

            Cell cell_13 = row.createCell(13, Cell.CELL_TYPE_STRING);
            cell_13.setCellStyle(normalStyle);
            cell_13.setCellValue(e[13] == null ?"NA" :e[13].toString());
            
            System.out.println("Feename  "+e[13].toString());  
          
            Cell cell_14 = row.createCell(14, Cell.CELL_TYPE_STRING);
            cell_14.setCellStyle(normalStyle);
            cell_14.setCellValue(e[14] == null ?"NA" :e[14].toString());
            
            Cell cell_15 = row.createCell(15, Cell.CELL_TYPE_STRING);
            cell_15.setCellStyle(normalStyle);
            cell_15.setCellValue(e[15] == null ?"NA" :e[15].toString());
            
            Cell cell_16 = row.createCell(16, Cell.CELL_TYPE_STRING);
            cell_16.setCellStyle(normalStyle);
            cell_16.setCellValue(e[16] == null ?"NA" :e[16].toString());
            
            
            Cell cell_17 = row.createCell(17, Cell.CELL_TYPE_STRING);
            cell_17.setCellStyle(normalStyle);
            cell_17.setCellValue(e[17] == null ?"NA" :e[17].toString());
            
            
           Cell cell_18 = row.createCell(18, Cell.CELL_TYPE_STRING);
           cell_18.setCellStyle(normalStyle);
           cell_18.setCellValue(e[18] == null ?"NA" :e[18].toString());
      
            
            
           Cell cell_19 = row.createCell(19, Cell.CELL_TYPE_STRING);
           cell_19.setCellStyle(normalStyle);
           cell_19.setCellValue(e[19] == null ?"NA" :e[19].toString());

           
           
           Cell cell_20 = row.createCell(20, Cell.CELL_TYPE_STRING);
           cell_20.setCellStyle(normalStyle);
           cell_20.setCellValue(e[20] == null ?"NA" :e[20].toString());

           
           Cell cell_21 = row.createCell(21, Cell.CELL_TYPE_STRING);
           cell_21.setCellStyle(normalStyle);
           cell_21.setCellValue(e[21] == null ?"NA" :e[21].toString());

           
           int cod=22;
           String trans="";
          trans=e[22] == null ?"NA" :e[22].toString();
           String str1[]=trans.split(" , ");
          for(String s:str1)
		     {
       	   System.out.println("niininnnn  "+s);
				 Cell sta14 = row.createCell(cod++);
		    	 sta14.setCellStyle(normalStyle);
		    	 sta14.setCellValue(s);
		    	 
		    }
           
           
          rownum++;

		}

	}




	@Override
	void fillapprovalReport(List<SemesterRegistration> student) {
		CellStyle normalStyle = getNormalStyle();
		 SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
	        Date date  =  new Date();
	        
	        Row dataRow1 = sh.createRow(0);	
			sh.createRow(1);
			XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
			//ricString.applyFont((Font) normalStyle);
			dataRow1.createCell(0).setCellValue(ricString);
			
			XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());
			//ric_String.applyFont(font);(font11);					
			dataRow1.createCell(1).setCellValue(ric_String);
	        
	        int rownum = 3;
		try {
			for (SemesterRegistration logs : student)
			{
			Row row = sh.createRow(rownum);
			Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
			cell_0.setCellStyle(normalStyle);
			cell_0.setCellValue(logs.getAcademicYear().getExIdentifier());

			Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
			cell_1.setCellStyle(normalStyle);
			cell_1.setCellValue(logs.getColleges().getExIdentifier());

			Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
			cell_2.setCellStyle(normalStyle);
			cell_2.setCellValue(logs.getDegree().getExName());
			
			
			Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
			cell_3.setCellStyle(normalStyle);
			cell_3.setCellValue(logs.getProgrammes().getExIdentifier());
			
			
			Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
			cell_4.setCellStyle(normalStyle);
			cell_4.setCellValue(logs.getDepartment().getExIdentifier());
			
			
			Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
			cell_5.setCellStyle(normalStyle);
			cell_5.setCellValue(logs.getProgrammeYear().getExName());

			Cell cell_6 = row.createCell(6, Cell.CELL_TYPE_STRING);
			cell_6.setCellStyle(normalStyle);
			cell_6.setCellValue(logs.getSemester().getExName());
			
			Cell cell_7 = row.createCell(7, Cell.CELL_TYPE_STRING);
			cell_7.setCellStyle(normalStyle);
			cell_7.setCellValue(logs.getStudentadmission().getExName().toUpperCase());

			Cell cell_8 = row.createCell(8, Cell.CELL_TYPE_STRING);
			cell_8.setCellStyle(normalStyle);
			cell_8.setCellValue(logs.getStudentadmission().getExRollNo());

			Cell cell_9 = row.createCell(9, Cell.CELL_TYPE_STRING);
			cell_9.setCellStyle(normalStyle);
			cell_9.setCellValue(logs.getStudentadmission().getExEnrollementNo());
			
			
			Cell cell_10 = row.createCell(10, Cell.CELL_TYPE_STRING);
			cell_10.setCellStyle(normalStyle);
			cell_10.setCellValue(logs.getExIsAccountsApprove() == null || logs.getExIsAccountsApprove() == false  ?"NO" :"YES");
			
			Cell cell_11 = row.createCell(11, Cell.CELL_TYPE_STRING);
			cell_11.setCellStyle(normalStyle);
			cell_11.setCellValue(logs.getExIsComputerlabApprove() == null || logs.getExIsComputerlabApprove() == false?"NO" :"YES");
			
			Cell cell_12 = row.createCell(12, Cell.CELL_TYPE_STRING);
			cell_12.setCellStyle(normalStyle);
			cell_12.setCellValue(logs.getExIsDeanApprove() == null || logs.getExIsDeanApprove() ==  false?"NO" :"YES");
			
			Cell cell_13 = row.createCell(13, Cell.CELL_TYPE_STRING);
			cell_13.setCellStyle(normalStyle);
			cell_13.setCellValue(logs.getExIsExaminationApprove() == null ||logs.getExIsExaminationApprove() ==  false?"NO" :"YES");
			
			Cell cell_14 = row.createCell(14, Cell.CELL_TYPE_STRING);
			cell_14.setCellStyle(normalStyle);
			cell_14.setCellValue(logs.getExIsItDepartmentApprove() == null || logs.getExIsItDepartmentApprove() == false?"NO" :"YES");
			
			Cell cell_15 = row.createCell(15, Cell.CELL_TYPE_STRING);
			cell_15.setCellStyle(normalStyle);
			cell_15.setCellValue(logs.getExIsMentorApprove() == null ||logs.getExIsMentorApprove() ==  false?"NO" :"YES");
			
			Cell cell_16 = row.createCell(16, Cell.CELL_TYPE_STRING);
			cell_16.setCellStyle(normalStyle);
			cell_16.setCellValue(logs.getExIsLibraryApprove() == null || logs.getExIsLibraryApprove() ==false?"NO" :"YES");
			
			Cell cell_17 = row.createCell(17, Cell.CELL_TYPE_STRING);
			cell_17.setCellStyle(normalStyle);
			cell_17.setCellValue(logs.getExIsHostelApprove() == null || logs.getExIsHostelApprove() ==false?"NO" :"YES");
			
			
			String statement ="NA";
		if((logs.getExIsHostelApprove() != null && logs.getExIsHostelApprove() ==true) && 
					(logs.getExIsAccountsApprove() != null && logs.getExIsAccountsApprove() == true) &&
					(logs.getExIsComputerlabApprove() != null && logs.getExIsComputerlabApprove() == true) &&
					(logs.getExIsDeanApprove() != null && logs.getExIsDeanApprove() ==  true )&&
					(logs.getExIsExaminationApprove() != null && logs.getExIsExaminationApprove() ==  true )&&
					(logs.getExIsLibraryApprove() != null && logs.getExIsLibraryApprove() ==true) &&
					(logs.getExIsMentorApprove() != null && logs.getExIsMentorApprove() ==  true) &&
					(logs.getExIsItDepartmentApprove() != null && logs.getExIsItDepartmentApprove() == true))
			{
				statement="Eligible";
			}else {
				statement="Not Eligible";
			}
			
			
			Cell cell_18 = row.createCell(18, Cell.CELL_TYPE_STRING);
			cell_18.setCellStyle(normalStyle);
			cell_18.setCellValue(statement);
			rownum++;
			
	    	}
		}catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
		
		}	
		
	}




	@Override
	void fillExpertReport(List<EvaluatorList> expert) {
		CellStyle normalStyle = getNormalStyle();
		 SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
	        Date date  =  new Date();
	        
	        Row dataRow1 = sh.createRow(0);	
			sh.createRow(1);
			XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
			//ricString.applyFont((Font) normalStyle);
			dataRow1.createCell(0).setCellValue(ricString);
			
			XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());
			//ric_String.applyFont(font);(font11);					
			dataRow1.createCell(1).setCellValue(ric_String);
	        
	        int rownum = 3;
		try {
			for (EvaluatorList logs : expert) {
			Row row = sh.createRow(rownum);
			Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
			cell_0.setCellStyle(normalStyle);
			cell_0.setCellValue(logs.getExFullName());

			Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
			cell_1.setCellStyle(normalStyle);
			cell_1.setCellValue(logs.getExEmail());

			Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
			cell_2.setCellStyle(normalStyle);
			cell_2.setCellValue(logs.getExContactDetails());
			
			
			Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
			cell_3.setCellStyle(normalStyle);
			cell_3.setCellValue(logs.getExdesignation());
			
			
			Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
			cell_4.setCellStyle(normalStyle);
			cell_4.setCellValue(logs.getExBankAccountNo());
			
			
			Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
			cell_5.setCellStyle(normalStyle);
			cell_5.setCellValue(logs.getExBankName());

			Cell cell_6 = row.createCell(6, Cell.CELL_TYPE_STRING);
			cell_6.setCellStyle(normalStyle);
			cell_6.setCellValue(logs.getExIfscCode());

			Cell cell_7 = row.createCell(7, Cell.CELL_TYPE_STRING);
			cell_7.setCellStyle(normalStyle);
			cell_7.setCellValue(logs.getExAddressLine1());

			Cell cell_8 = row.createCell(8, Cell.CELL_TYPE_STRING);
			cell_8.setCellStyle(normalStyle);
			cell_8.setCellValue(logs.getExAddressLin2());

			Cell cell_9 = row.createCell(9, Cell.CELL_TYPE_STRING);
			cell_9.setCellStyle(normalStyle);
			cell_9.setCellValue(logs.getExAddressLine3());

			Cell cell_10 = row.createCell(10, Cell.CELL_TYPE_STRING);
			cell_10.setCellStyle(normalStyle);
			cell_10.setCellValue(logs.getExState());
			
			Cell cell_11 = row.createCell(11, Cell.CELL_TYPE_STRING);
			cell_11.setCellStyle(normalStyle);
			cell_11.setCellValue(logs.getExPinCode());

		
			
			 rownum++;
	    	}
		}
		catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
		
		}	
	}

//topperlist
	@Override
	void fillDataTopperReportLog(List<Object[]> dataList) {
		CellStyle normalStyle = getNormalStyle();
		 SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
	        Date date  =  new Date();
	        
	        Row dataRow1 = sh.createRow(0);	
			sh.createRow(1);
			XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
			//ricString.applyFont((Font) normalStyle);
			dataRow1.createCell(0).setCellValue(ricString);
			
			XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());
			//ric_String.applyFont(font);(font11);					
			dataRow1.createCell(1).setCellValue(ric_String);
	        
	        int rownum = 3;
		for (Object[] e : dataList) {
            Row row = sh.createRow(rownum);
            Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
            cell_0.setCellStyle(normalStyle);
            cell_0.setCellValue(e[0] == null ?"NA" :e[0].toString());
        
            Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
            cell_1.setCellStyle(normalStyle);
            cell_1.setCellValue(e[1] == null ?"NA" :e[1].toString());
            
            Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
            cell_2.setCellStyle(normalStyle);
            cell_2.setCellValue(e[2] == null ?"NA" :e[2].toString());
            
            Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
            cell_3.setCellStyle(normalStyle);
            cell_3.setCellValue(e[3] == null ?"NA" :e[3].toString());
            
            Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
            cell_4.setCellStyle(normalStyle);
            cell_4.setCellValue(e[4] == null ?"NA" :e[4].toString());
            
            Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
            cell_5.setCellStyle(normalStyle);
            cell_5.setCellValue(e[5] == null ?"NA" :e[5].toString());
           
            Cell cell_6 = row.createCell(6, Cell.CELL_TYPE_STRING);
            cell_6.setCellStyle(normalStyle);
            cell_6.setCellValue(e[6] == null ?"NA" :e[6].toString());
           
            Cell cell_7 = row.createCell(7, Cell.CELL_TYPE_STRING);
            cell_7.setCellStyle(normalStyle);
            cell_7.setCellValue(e[7] == null ?"NA" :e[7].toString());
            
            
            
            
            Cell cell_8 = row.createCell(8, Cell.CELL_TYPE_STRING);
            cell_8.setCellStyle(normalStyle);
            cell_8.setCellValue(e[7] == null ?"NA" :e[8].toString());
           

            
            
            Cell cell_9 = row.createCell(9, Cell.CELL_TYPE_STRING);
            cell_9.setCellStyle(normalStyle);
            cell_9.setCellValue(e[7] == null ?"NA" :e[9].toString());
           
            
            Cell cell_10 = row.createCell(10, Cell.CELL_TYPE_STRING);
            cell_10.setCellStyle(normalStyle);
            cell_10.setCellValue(e[7] == null ?"NA" :e[10].toString());

           

          rownum++;

		}

	}




	@Override
	void fillDatacriteriaReportLog(List<Object[]> dataList) {
		CellStyle normalStyle = getNormalStyle();
		 SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
	        Date date  =  new Date();
	        
	        Row dataRow1 = sh.createRow(0);	
			sh.createRow(1);
			XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
			//ricString.applyFont((Font) normalStyle);
			dataRow1.createCell(0).setCellValue(ricString);
			
			XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());
			//ric_String.applyFont(font);(font11);					
			dataRow1.createCell(1).setCellValue(ric_String);
	        
	        int rownum = 3;
		for (Object[] e : dataList) {
            Row row = sh.createRow(rownum);
            Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
            cell_0.setCellStyle(normalStyle);
            cell_0.setCellValue(e[0] == null ?"NA" :e[0].toString());
        
            Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
            cell_1.setCellStyle(normalStyle);
            cell_1.setCellValue(e[1] == null ?"NA" :e[1].toString());
            
            Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
            cell_2.setCellStyle(normalStyle);
            cell_2.setCellValue(e[2] == null ?"NA" :e[2].toString());
            
            Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
            cell_3.setCellStyle(normalStyle);
            cell_3.setCellValue(e[3] == null ?"NA" :e[3].toString());
            
            Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
            cell_4.setCellStyle(normalStyle);
            cell_4.setCellValue(e[4] == null ?"NA" :e[4].toString());
            
            Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
            cell_5.setCellStyle(normalStyle);
            cell_5.setCellValue(e[5] == null ?"NA" :e[5].toString());
           
            Cell cell_6 = row.createCell(6, Cell.CELL_TYPE_STRING);
            cell_6.setCellStyle(normalStyle);
            cell_6.setCellValue(e[6] == null ?"NA" :e[6].toString());
           
            Cell cell_7 = row.createCell(7, Cell.CELL_TYPE_STRING);
            cell_7.setCellStyle(normalStyle);
            cell_7.setCellValue(e[7] == null ?"NA" :e[7].toString());
           
            
            Cell cell_8 = row.createCell(8, Cell.CELL_TYPE_STRING);
            cell_8.setCellStyle(normalStyle);
            cell_8.setCellValue(e[8] == null ?"NA" :e[8].toString());
            
            Cell cell_9 = row.createCell(9, Cell.CELL_TYPE_STRING);
            cell_9.setCellStyle(normalStyle);
            cell_9.setCellValue(e[9] == null ?"NA" :e[9].toString());

            Cell cell_10 = row.createCell(10, Cell.CELL_TYPE_STRING);
            cell_10.setCellStyle(normalStyle);
            cell_10.setCellValue(e[10] == null ?"NA" :e[10].toString());
            
          rownum++;

		}

	}

	@Override
	void fillDatagoldMeritReportLog(List<Object[]> list) {
		CellStyle normalStyle = getNormalStyle();
		 SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
	        Date date  =  new Date();
	        
	        Row dataRow1 = sh.createRow(0);	
			sh.createRow(1);
			XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
			//ricString.applyFont((Font) normalStyle);
			dataRow1.createCell(0).setCellValue(ricString);
			
			XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());
			//ric_String.applyFont(font);(font11);					
			dataRow1.createCell(1).setCellValue(ric_String);
	        
	        int rownum = 3;
		for (Object[] e : list) {
            Row row = sh.createRow(rownum);
            Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
            cell_0.setCellStyle(normalStyle);
            cell_0.setCellValue(e[0] == null ?"NA" :e[0].toString());
        
            Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
            cell_1.setCellStyle(normalStyle);
            cell_1.setCellValue(e[1] == null ?"NA" :e[1].toString());
            
            Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
            cell_2.setCellStyle(normalStyle);
            cell_2.setCellValue(e[2] == null ?"NA" :e[2].toString());
            
            Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
            cell_3.setCellStyle(normalStyle);
            cell_3.setCellValue(e[3] == null ?"NA" :e[3].toString());
            
            Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
            cell_4.setCellStyle(normalStyle);
            cell_4.setCellValue(e[4] == null ?"NA" :e[4].toString());
            
            Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
            cell_5.setCellStyle(normalStyle);
            cell_5.setCellValue(e[5] == null ?"NA" :e[5].toString());
           
            Cell cell_6 = row.createCell(6, Cell.CELL_TYPE_STRING);
            cell_6.setCellStyle(normalStyle);
            cell_6.setCellValue(e[6] == null ?"NA" :e[6].toString());
            
            Cell cell_7 = row.createCell(7, Cell.CELL_TYPE_STRING);
            cell_7.setCellStyle(normalStyle);
            cell_7.setCellValue(e[7] == null ?"NA" :e[7].toString());
            
            Cell cell_8 = row.createCell(8, Cell.CELL_TYPE_STRING);
            cell_8.setCellStyle(normalStyle);
            cell_8.setCellValue(e[8] == null ?"NA" :e[8].toString());
            
            Cell cell_9 = row.createCell(9, Cell.CELL_TYPE_STRING);
			  cell_9.setCellStyle(normalStyle); 
			  cell_9.setCellValue(e[9] == null ?"NA":e[9].toString());
			  
			  
			  Cell cell_10 = row.createCell(10, Cell.CELL_TYPE_STRING);
			  cell_10.setCellStyle(normalStyle); 
			  cell_10.setCellValue(e[10] == null ?"NA":e[10].toString());
			  
			  
			  Cell cell_11 = row.createCell(11, Cell.CELL_TYPE_STRING);
			  cell_11.setCellStyle(normalStyle); 
			  cell_11.setCellValue(e[11] == null ?"NA":e[11].toString());
			 
			  Cell cell_12 = row.createCell(12, Cell.CELL_TYPE_STRING);
			  cell_12.setCellStyle(normalStyle); 
			  cell_12.setCellValue(e[12] == null ?"NA":e[12].toString());
			 
			  
			  
			  Cell cell_13 = row.createCell(13, Cell.CELL_TYPE_STRING);
			  cell_13.setCellStyle(normalStyle); 
			  cell_13.setCellValue(e[13] == null ?"NA":e[13].toString());
			 
			  Cell cell_14 = row.createCell(14, Cell.CELL_TYPE_STRING);
			  cell_14.setCellStyle(normalStyle); 
			  cell_14.setCellValue(e[14] == null ?"NA":e[14].toString());
			  
			  Cell cell_15 = row.createCell(15, Cell.CELL_TYPE_STRING);
			  cell_15.setCellStyle(normalStyle); 
			  cell_15.setCellValue(e[15] == null ?"NA":e[15].toString());
			  
			  Cell cell_16 = row.createCell(16, Cell.CELL_TYPE_STRING);
			  cell_16.setCellStyle(normalStyle); 
			  cell_16.setCellValue(e[16] == null ?"NA":e[16].toString());
			  
			  
			  Cell cell_17 = row.createCell(17, Cell.CELL_TYPE_STRING);
			  cell_17.setCellStyle(normalStyle); 
			  cell_17.setCellValue(e[17] == null ?"NA":e[17].toString());
			  
          rownum++;

		}

	}




	@Override
	void fillDataTransactionReportLog(List<Object[]> list) {
		CellStyle normalStyle = getNormalStyle();
		int rownum = 1;
		for (Object[] e : list) {
            Row row = sh.createRow(rownum);
            Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
            cell_0.setCellStyle(normalStyle);
            cell_0.setCellValue(e[0] == null ?"NA" :e[0].toString());
        
            Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
            cell_1.setCellStyle(normalStyle);
            cell_1.setCellValue(e[1] == null ?"NA" :e[1].toString());
            
            Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
            cell_2.setCellStyle(normalStyle);
            cell_2.setCellValue(e[2] == null ?"NA" :e[2].toString());
            
            Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
            cell_3.setCellStyle(normalStyle);
            cell_3.setCellValue(e[3] == null ?"NA" :e[3].toString());
            
            Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
            cell_4.setCellStyle(normalStyle);
            cell_4.setCellValue(e[4] == null ?"NA" :e[4].toString());
            
            Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
            cell_5.setCellStyle(normalStyle);
            cell_5.setCellValue(e[5] == null ?"NA" :e[5].toString());
           
            Cell cell_6 = row.createCell(6, Cell.CELL_TYPE_STRING);
            cell_6.setCellStyle(normalStyle);
            cell_6.setCellValue(e[6] == null ?"NA" :e[6].toString());
           
           
        	Cell cell_7 = row.createCell(7, Cell.CELL_TYPE_STRING); 
			cell_7.setCellStyle(normalStyle);
			cell_7.setCellValue(e[7] == null ?"NA" :e[7].toString());

			Cell cell_8 = row.createCell(8, Cell.CELL_TYPE_STRING);
			cell_8.setCellStyle(normalStyle);
			cell_8.setCellValue(e[8] == null ?"NA" :e[8].toString());

			Cell cell_9 = row.createCell(9, Cell.CELL_TYPE_STRING);
			cell_9.setCellStyle(normalStyle);
			cell_9.setCellValue(e[9] == null ?"NA" :e[9].toString());

			Cell cell_10 = row.createCell(10, Cell.CELL_TYPE_STRING);
			cell_10.setCellStyle(normalStyle);
			cell_10.setCellValue(e[10] == null ?"NA" :e[10].toString());
			
			Cell cell_11 = row.createCell(11, Cell.CELL_TYPE_STRING);
			cell_11.setCellStyle(normalStyle);
			cell_11.setCellValue(e[11] == null ?"NA" :e[11].toString());

			Cell cell_12 = row.createCell(12, Cell.CELL_TYPE_STRING);
			cell_12.setCellStyle(normalStyle);
			cell_12.setCellValue(e[12] == null ?"NA" :e[12].toString());

			Cell cell_13 = row.createCell(13, Cell.CELL_TYPE_STRING);
			cell_13.setCellStyle(normalStyle);
			cell_13.setCellValue(e[13] == null ?"NA" :e[13].toString());

			Cell cell_14 = row.createCell(14, Cell.CELL_TYPE_STRING);
			cell_14.setCellStyle(normalStyle);
			cell_14.setCellValue(e[14] == null ?"NA" :e[14].toString());

			Cell cell_15 = row.createCell(15, Cell.CELL_TYPE_STRING);
			cell_15.setCellStyle(normalStyle);
			cell_15.setCellValue(e[15] == null ?"NA" :e[15].toString());
			
			
			  Cell cell_16 = row.createCell(16, Cell.CELL_TYPE_STRING);
			  cell_16.setCellStyle(normalStyle);
			  cell_16.setCellValue(e[16] == null ?"NA" :e[16].toString());
			 

			
			 
			  			
          rownum++;

		}

	}




	@Override
	void fillDataquestionPaperReportLog(List<Object[]> list) {
		CellStyle normalStyle = getNormalStyle();
		int rownum = 1;
		for (Object[] e : list) {
            Row row = sh.createRow(rownum);
            Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
            cell_0.setCellStyle(normalStyle);
            cell_0.setCellValue(e[0] == null ?"NA" :e[0].toString());
        
            Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
            cell_1.setCellStyle(normalStyle);
            cell_1.setCellValue(e[1] == null ?"NA" :e[1].toString());
            
            Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
            cell_2.setCellStyle(normalStyle);
            cell_2.setCellValue(e[2] == null ?"NA" :e[2].toString());
            
            Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
            cell_3.setCellStyle(normalStyle);
            cell_3.setCellValue(e[3] == null ?"NA" :e[3].toString());
            
            Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
            cell_4.setCellStyle(normalStyle);
            cell_4.setCellValue(e[4] == null ?"NA" :e[4].toString());
            
            Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
            cell_5.setCellStyle(normalStyle);
            cell_5.setCellValue(e[5] == null ?"NA" :e[5].toString());
           
            Cell cell_6 = row.createCell(6, Cell.CELL_TYPE_STRING);
            cell_6.setCellStyle(normalStyle);
            cell_6.setCellValue(e[6] == null ?"NA" :e[6].toString());
           
        	Cell cell_7 = row.createCell(7, Cell.CELL_TYPE_STRING); 
			cell_7.setCellStyle(normalStyle);
			cell_7.setCellValue(e[7] == null ?"NA" :e[7].toString());

			Cell cell_8 = row.createCell(8, Cell.CELL_TYPE_STRING);
			cell_8.setCellStyle(normalStyle);
			cell_8.setCellValue(e[8] == null ?"NA" :e[8].toString());

        
			
			 
			  			
          rownum++;

		}

	}




	@Override
	void fillDataInvigilatorAllocationReportLog(List<Object[]> list) {
		CellStyle normalStyle = getNormalStyle();
		int rownum = 1;
		for (Object[] e : list) {
            Row row = sh.createRow(rownum);
            Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
            cell_0.setCellStyle(normalStyle);
            cell_0.setCellValue(e[0] == null ?"NA" :e[0].toString());
        
            Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
            cell_1.setCellStyle(normalStyle);
            cell_1.setCellValue(e[1] == null ?"NA" :e[1].toString());
            
            Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
            cell_2.setCellStyle(normalStyle);
            cell_2.setCellValue(e[2] == null ?"NA" :e[2].toString());
            
            Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
            cell_3.setCellStyle(normalStyle);
            cell_3.setCellValue(e[3] == null ?"NA" :e[3].toString());
            
            Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
            cell_4.setCellStyle(normalStyle);
            cell_4.setCellValue(e[4] == null ?"NA" :e[4].toString());
            
            Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
            cell_5.setCellStyle(normalStyle);
            cell_5.setCellValue(e[5] == null ?"NA" :e[5].toString());
           
            Cell cell_6 = row.createCell(6, Cell.CELL_TYPE_STRING);
            cell_6.setCellStyle(normalStyle);
            cell_6.setCellValue(e[6] == null ?"NA" :e[6].toString());
           
        	Cell cell_7 = row.createCell(7, Cell.CELL_TYPE_STRING); 
			cell_7.setCellStyle(normalStyle);
			cell_7.setCellValue(e[7] == null ?"NA" :e[7].toString());

			Cell cell_8 = row.createCell(8, Cell.CELL_TYPE_STRING);
			cell_8.setCellStyle(normalStyle);
			cell_8.setCellValue(e[8] == null ?"NA" :e[8].toString());

			Cell cell_9 = row.createCell(9, Cell.CELL_TYPE_STRING);
			cell_9.setCellStyle(normalStyle);
			cell_9.setCellValue(e[9] == null ?"NA" :e[9].toString());

			Cell cell_10 = row.createCell(10, Cell.CELL_TYPE_STRING);
			cell_10.setCellStyle(normalStyle);
			cell_10.setCellValue(e[10] == null ?"NA" :e[10].toString());
			
			Cell cell_11 = row.createCell(11, Cell.CELL_TYPE_STRING);
			cell_11.setCellStyle(normalStyle);
			cell_11.setCellValue(e[11] == null ?"NA" :e[11].toString());

			Cell cell_12 = row.createCell(12, Cell.CELL_TYPE_STRING);
			cell_12.setCellStyle(normalStyle);
			cell_12.setCellValue(e[12] == null ?"NA" :e[12].toString());
			
			 
			  			
          rownum++;

		}

	}



	@Override
	void fillDataAccessLogReportLog(List<AccessLogs> dataList) {
		// TODO Auto-generated method stub
		CellStyle normalStyle = getNormalStyle();
		 SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
	        Date date  =  new Date();
	        Row dataRow1 = sh.createRow(1);	
			sh.createRow(2);
			XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
			dataRow1.createCell(3).setCellValue(ricString);
			
			XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());					
			dataRow1.createCell(4).setCellValue(ric_String);
		int rownum = 2;
		// check now ??
		try {
		for (AccessLogs logs : dataList) {
			Row row = sh.createRow(rownum);
			Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
			cell_0.setCellStyle(normalStyle);
			cell_0.setCellValue(logs.getExUserName());
						Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
			cell_1.setCellStyle(normalStyle);
			cell_1.setCellValue(logs.getExName());

			Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
			cell_2.setCellStyle(normalStyle);
			cell_2.setCellValue(logs.getExIPAddress());
			
			Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
			cell_3.setCellStyle(normalStyle);
			cell_3.setCellValue(logs.getExLoginTime().toString());
			
			
            Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
            cell_4.setCellStyle(normalStyle);
            cell_4.setCellValue(logs.getLoginType() == null ?"NA" :logs.getLoginType());
            
            Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
            cell_5.setCellStyle(normalStyle);
            cell_5.setCellValue(logs.getRole() == null ?"NA" :logs.getRole());
            
            
            Cell cell_6 = row.createCell(6, Cell.CELL_TYPE_STRING);
            cell_6.setCellStyle(normalStyle);
            cell_6.setCellValue(logs.getModule() == null ?"NA" :logs.getModule());
           
        	Cell cell_7 = row.createCell(7, Cell.CELL_TYPE_STRING); 
			cell_7.setCellStyle(normalStyle);
			cell_7.setCellValue(logs.getSubModule() == null ?"NA" :logs.getSubModule());
            
			rownum++;
			}
		}
		catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
		
		}

	}

	@Override
	void filloverALLReportData(List<Object[]> dataList) {
	      CellStyle normalStyle = getNormalStyle();   
	      SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
	        Date date  =  new Date();
	        
	        Row dataRow1 = sh.createRow(0);	
			sh.createRow(1);
			XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
			//ricString.applyFont((Font) normalStyle);
			dataRow1.createCell(0).setCellValue(ricString);
			
			XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());
			//ric_String.applyFont(font);(font11);					
			dataRow1.createCell(1).setCellValue(ric_String);
	        
	        int rownum = 3;
	      //  SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");    
	        long totamount = 0;
	        for (Object[] e : dataList) {
	            Row row = sh.createRow(rownum);
	            Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
	            cell_0.setCellStyle(normalStyle);
	            cell_0.setCellValue(e[2] == null ?"NA" :e[2].toString());
	        
	            Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
	            cell_1.setCellStyle(normalStyle);
	            cell_1.setCellValue(e[3] == null ?"NA" :e[3].toString());
	            
	            Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
	            cell_2.setCellStyle(normalStyle);
	            cell_2.setCellValue(e[4] == null ?"NA" :e[4].toString());
	            
	            Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
	            cell_3.setCellStyle(normalStyle);
	            cell_3.setCellValue(e[0] == null ?"NA" :e[0].toString());
	            
	            Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
	            cell_4.setCellStyle(normalStyle);
	            cell_4.setCellValue(e[1] == null ?"NA" :e[1].toString());
	            
	            Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
	            cell_5.setCellStyle(normalStyle);
	            cell_5.setCellValue(e[5] == null ?"NA" :e[5].toString());
	            
	            Cell cell_6 = row.createCell(6, Cell.CELL_TYPE_STRING);
	            cell_6.setCellStyle(normalStyle);
	            cell_6.setCellValue(e[6] == null ?"NA" :e[6].toString());
	            
	            Cell cell_7 = row.createCell(7, Cell.CELL_TYPE_STRING);
	            cell_7.setCellStyle(normalStyle);
	            cell_7.setCellValue(e[7] == null ?"NA" :e[7].toString());
	            
	            Cell cell_8 = row.createCell(8, Cell.CELL_TYPE_STRING);
	            cell_8.setCellStyle(normalStyle);
	            cell_8.setCellValue(e[8] == null ?"NA" :e[8].toString());
	            
	            Cell cell_9 = row.createCell(9, Cell.CELL_TYPE_STRING);
	            cell_9.setCellStyle(normalStyle);
	            cell_9.setCellValue(e[9] == null ?"NA" :e[9].toString());
	            
				
				  Cell cell_10 = row.createCell(10, Cell.CELL_TYPE_STRING);
				  cell_10.setCellStyle(normalStyle);
				  cell_10.setCellValue(e[10] == null ?"NA" :e[10].toString());
				 
	            
				
				  Cell cell_11 = row.createCell(11, Cell.CELL_TYPE_STRING);
				  cell_11.setCellStyle(normalStyle); 
				  cell_11.setCellValue(e[11] == null ?"NA" :e[11].toString());
				  
				  Cell cell_12 = row.createCell(12, Cell.CELL_TYPE_STRING);
				  cell_12.setCellStyle(normalStyle); 
				  cell_12.setCellValue(e[12] == null ?"NA":e[12].toString());
				 
				  
				  
				  Cell cell_13 = row.createCell(13, Cell.CELL_TYPE_STRING);
				  cell_13.setCellStyle(normalStyle); 
				  cell_13.setCellValue(e[13] == null ?"NA":e[13].toString());
				 
				  Cell cell_14 = row.createCell(14, Cell.CELL_TYPE_STRING);
				  cell_14.setCellStyle(normalStyle); 
				  cell_14.setCellValue(e[14] == null ?"NA":e[14].toString());
				  
				  Cell cell_15 = row.createCell(15, Cell.CELL_TYPE_STRING);
				  cell_15.setCellStyle(normalStyle); 
				  cell_15.setCellValue(e[15] == null ?"NA":e[15].toString());
	            
	           
	            rownum++;
	        }
	       
		
	}




	@Override
	void fillDataStudentAdmisionNot(List<Studentpersonal> student) {
		// TODO Auto-generated method stub		
		CellStyle normalStyle = getNormalStyle();
		int rownum = 1;
		try {
			for (Studentpersonal logs : student) {
			Row row = sh.createRow(rownum);
			Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
			cell_0.setCellStyle(normalStyle);
			cell_0.setCellValue(logs.getStudentadmission().getAcademicYear().getExYear());

			Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
			cell_1.setCellStyle(normalStyle);
			cell_1.setCellValue(logs.getStudentadmission().getColleges().getExName());

			Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
			cell_2.setCellStyle(normalStyle);
			cell_2.setCellValue(logs.getStudentadmission().getDegree().getExName());
			
			
			Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
			cell_3.setCellStyle(normalStyle);
			cell_3.setCellValue(logs.getStudentadmission().getBatch().getExName());
			
			
			Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
			cell_4.setCellStyle(normalStyle);
			cell_4.setCellValue(logs.getStudentadmission().getProgrammes().getExName());
			
			
			Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
			cell_5.setCellStyle(normalStyle);
			cell_5.setCellValue(logs.getStudentadmission().getDepartment().getExName());
			
		
			Cell cell_8 = row.createCell(6, Cell.CELL_TYPE_STRING);
			cell_8.setCellStyle(normalStyle);
			cell_8.setCellValue(logs.getStudentadmission().getExName());



			Cell cell_10 = row.createCell(7, Cell.CELL_TYPE_STRING);
			cell_10.setCellStyle(normalStyle);
			cell_10.setCellValue(logs.getStudentadmission().getExRollNo());
			
			Cell cell_11 = row.createCell(8, Cell.CELL_TYPE_STRING);
			cell_11.setCellStyle(normalStyle);
			cell_11.setCellValue(logs.getStudentadmission().getExEnrollementNo());



			Cell cell_13 = row.createCell(9, Cell.CELL_TYPE_STRING);
			cell_13.setCellStyle(normalStyle);
			cell_13.setCellValue(logs.getExEmailId());

			Cell cell_14 = row.createCell(10, Cell.CELL_TYPE_STRING);
			cell_14.setCellStyle(normalStyle);
			cell_14.setCellValue(logs.getExContactDetails());


			
		
			  			
			 rownum++;
	    	}
		}
		catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
		
		}			// TODO Auto-generated method stub
		
	}

	
	
	@Override
	void fillDataMasterOfAll(List<Object[]> list) {
		CellStyle normalStyle = getNormalStyle();
		CellStyle normalStyle1 = getNormalStyle2();
		SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
        Date date  =  new Date();
        
        Row dataRow1 = sh.createRow(0);	
		sh.createRow(1);
		XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
		//ricString.applyFont((Font) normalStyle);
		dataRow1.createCell(0).setCellValue(ricString);
		
		XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());
		//ric_String.applyFont(font);(font11);					
		dataRow1.createCell(1).setCellValue(ric_String);
        
        int rownum = 3;
		try {
			for (Object[] logs : list) {
			Row row = sh.createRow(rownum);
			Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
			cell_0.setCellStyle(normalStyle);
			cell_0.setCellValue(logs[0]+"");

			Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
			cell_1.setCellStyle(normalStyle);
			cell_1.setCellValue(logs[1] + " ");

			Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
			cell_2.setCellStyle(normalStyle);
			cell_2.setCellValue(logs[2] + " ");
			
			
			Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
			cell_3.setCellStyle(normalStyle);
			cell_3.setCellValue(logs[3] + " ");
			
			Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
			cell_4.setCellStyle(normalStyle);
			cell_4.setCellValue(logs[4] + " ");
			
			Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
			cell_5.setCellStyle(normalStyle);
			cell_5.setCellValue(logs[5]+ " ");

			Cell cell_6 = row.createCell(6, Cell.CELL_TYPE_STRING);
			cell_6.setCellStyle(normalStyle);
			cell_6.setCellValue(logs[6]+ " ");

			Cell cell_7 = row.createCell(7, Cell.CELL_TYPE_STRING);
			cell_7.setCellStyle(normalStyle);
			cell_7.setCellValue(logs[7]+ " ");

			Cell cell_8 = row.createCell(8, Cell.CELL_TYPE_STRING);
			cell_8.setCellStyle(normalStyle);
			cell_8.setCellValue(logs[8]+ " ");
			
			
			Cell cell_9 = row.createCell(9, Cell.CELL_TYPE_STRING);
			cell_9.setCellStyle(normalStyle);
			cell_9.setCellValue(logs[9]+ " ");
			
			Cell cell_10 = row.createCell(10, Cell.CELL_TYPE_STRING);
			cell_10.setCellStyle(normalStyle);
			cell_10.setCellValue(logs[10]+ " ");
			
			Cell cell_11 = row.createCell(11, Cell.CELL_TYPE_STRING);
			cell_11.setCellStyle(normalStyle);
			cell_11.setCellValue(logs[11]+ " ");
			
			Cell cell_12 = row.createCell(12, Cell.CELL_TYPE_STRING);
			cell_12.setCellStyle(normalStyle);
			cell_12.setCellValue(logs[12]+ " ");
			

			Cell cell_13 = row.createCell(13, Cell.CELL_TYPE_STRING);
			cell_13.setCellStyle(normalStyle);
			cell_13.setCellValue(logs[13]+ " ");
			
			Cell cell_14 = row.createCell(14, Cell.CELL_TYPE_STRING);
			cell_14.setCellStyle(normalStyle);
			cell_14.setCellValue(logs[14]+ " ");
			
			Cell cell_15 = row.createCell(15, Cell.CELL_TYPE_STRING);
			cell_15.setCellStyle(normalStyle);
			cell_15.setCellValue(logs[15]+ " ");
			
			Cell cell_16 = row.createCell(16, Cell.CELL_TYPE_STRING);
			cell_16.setCellStyle(normalStyle);
			cell_16.setCellValue(logs[16]+ " ");
			
			Cell cell_17 = row.createCell(17, Cell.CELL_TYPE_STRING);
			cell_17.setCellStyle(normalStyle);
			cell_17.setCellValue(logs[17]+ " ");
			
			Cell cell_18 = row.createCell(18, Cell.CELL_TYPE_STRING);
			cell_18.setCellStyle(normalStyle1);
			cell_18.setCellValue(logs[18]+ " ");
			
			Cell cell_19 = row.createCell(19, Cell.CELL_TYPE_STRING);
			cell_19.setCellStyle(normalStyle);
			cell_19.setCellValue(logs[19]+ " ");
			
			Cell cell_20 = row.createCell(20, Cell.CELL_TYPE_STRING);
			cell_20.setCellStyle(normalStyle1);
			cell_20.setCellValue(logs[20]+ " ");
			
		
			Cell cell_22 = row.createCell(21, Cell.CELL_TYPE_STRING);
			cell_22.setCellStyle(normalStyle);
			//cell_12.setCellValue(logs[12]+ " ");
			// quize
			if(logs[25] != null && !logs[25].equals("NA") && !logs[25].equals("")) {
				cell_22.setCellValue(logs[25]+ " ");
			}else {
				cell_22.setCellValue(logs[21]+ " ");
			}
			
			Cell cell_23 = row.createCell(22, Cell.CELL_TYPE_STRING);
			cell_23.setCellStyle(normalStyle);
			//cell_12.setCellValue(logs[12]+ " ");
			// quize
			if(logs[26] != null && !logs[26].equals("NA") && !logs[26].equals("")) {
				cell_23.setCellValue(logs[26]+ " ");
			}else {
				cell_23.setCellValue(logs[22]+ " ");
			}
			
			
			Cell cell_24 = row.createCell(23, Cell.CELL_TYPE_STRING);
			cell_24.setCellStyle(normalStyle);
			//cell_12.setCellValue(logs[12]+ " ");
			// quize
			if(logs[27] != null && !logs[27].equals("NA") && !logs[27].equals("")) {
				cell_24.setCellValue(logs[27]+ " ");
			}else {
				cell_24.setCellValue(logs[23]+ " ");
			}
			
			Cell cell_25 = row.createCell(24, Cell.CELL_TYPE_STRING);
			cell_25.setCellStyle(normalStyle);
			//cell_12.setCellValue(logs[12]+ " ");
			// quize
			if(logs[28] != null && !logs[28].equals("NA") && !logs[28].equals("")) {
				cell_25.setCellValue(logs[28]+ " ");
			}else {
				cell_25.setCellValue(logs[24]+ " ");
			}
			
			Cell cell_26 = row.createCell(25, Cell.CELL_TYPE_STRING);
			cell_26.setCellStyle(normalStyle1);
			cell_26.setCellValue(logs[29]+ " ");
		
			
			Cell cell_27 = row.createCell(26, Cell.CELL_TYPE_STRING);
			cell_27.setCellStyle(normalStyle1);
			cell_27.setCellValue(logs[30]+ " ");
			
			
			Cell cell_28 = row.createCell(27, Cell.CELL_TYPE_STRING);
			cell_28.setCellStyle(normalStyle);
			cell_28.setCellValue(logs[31]+ " ");
		
			
			Cell cell_29 = row.createCell(28, Cell.CELL_TYPE_STRING);
			cell_29.setCellStyle(normalStyle);
			cell_29.setCellValue(logs[32]+ " ");
		
				
				 Cell cell_30 = row.createCell(29, Cell.CELL_TYPE_STRING);
				 cell_30.setCellStyle(normalStyle); 
				 cell_30.setCellValue(logs[33]+ " ");
				 
				  Cell cell_31 = row.createCell(30, Cell.CELL_TYPE_STRING);
				  cell_31.setCellStyle(normalStyle);
				  cell_31.setCellValue(logs[34]+ " ");
				  
				  
				  Cell cell_32 = row.createCell(31, Cell.CELL_TYPE_STRING);
				  cell_32.setCellStyle(normalStyle1); 
				  cell_32.setCellValue(logs[35]+ " ");
				 
				  
				  
				  Cell cell_33 = row.createCell(32, Cell.CELL_TYPE_STRING);
				  cell_33.setCellStyle(normalStyle1); 
				  cell_33.setCellValue(logs[36]+ " ");
				  
				  Cell cell_34 = row.createCell(33, Cell.CELL_TYPE_STRING);
				  cell_34.setCellStyle(normalStyle1); 
				  cell_34.setCellValue(logs[37]+ " ");
				  
				  Cell cell_35 = row.createCell(34, Cell.CELL_TYPE_STRING);
				  cell_35.setCellStyle(normalStyle); 
				  cell_35.setCellValue(logs[38]+ " ");
				  
				  Cell cell_36 = row.createCell(35, Cell.CELL_TYPE_STRING);
				  cell_36.setCellStyle(normalStyle); 
				  cell_36.setCellValue(logs[39]+ " ");
				  
				  Cell cell_37 = row.createCell(36, Cell.CELL_TYPE_STRING);
				  cell_37.setCellStyle(normalStyle); 
				  cell_37.setCellValue(logs[40]+ " ");
				  
				  Cell cell_38 = row.createCell(37, Cell.CELL_TYPE_STRING);
				  cell_38.setCellStyle(normalStyle); 
				  cell_38.setCellValue(logs[41]+ " ");
				  
				  
				  Cell cell_39 = row.createCell(38, Cell.CELL_TYPE_STRING);
				  cell_39.setCellStyle(normalStyle); 
				  cell_39.setCellValue(logs[42]+ " ");
				  
				  
				  Cell cell_40 = row.createCell(39, Cell.CELL_TYPE_STRING);
				  cell_40.setCellStyle(normalStyle); 
				  cell_40.setCellValue(logs[43]+ " ");
				  
				  Cell cell_41 = row.createCell(40, Cell.CELL_TYPE_STRING);
				  cell_41.setCellStyle(normalStyle); 
				  cell_41.setCellValue(logs[44]+ " ");
			
				  
			
			rownum++;
		}
		}
		catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
		
		}
	}




	@Override
	void creditHoursReportExcelData(List<CreditHours> list) {
		// TODO Auto-generated method stub
		
		CellStyle normalStyle = getNormalStyle();
		  SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
	        Date date  =  new Date();
	        
	        Row dataRow1 = sh.createRow(0);	
			sh.createRow(1);
			XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
			//ricString.applyFont((Font) normalStyle);
			dataRow1.createCell(0).setCellValue(ricString);
			
			XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());
			//ric_String.applyFont(font);(font11);					
			dataRow1.createCell(1).setCellValue(ric_String);
	        
	        int rownum = 3;
		try {
			for (CreditHours logs : list) {
			Row row = sh.createRow(rownum);
			Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
			cell_0.setCellStyle(normalStyle);
			cell_0.setCellValue(logs.getExName());

			Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
			cell_1.setCellStyle(normalStyle);
			cell_1.setCellValue(logs.getExCreateDate()==null?"NA":logs.getExCreateDate().toString());

			Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
			cell_2.setCellStyle(normalStyle);
			cell_2.setCellValue(logs.getExUpdateDate() == null ?"NA" :logs.getExUpdateDate().toString());
			
			
			Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
			cell_3.setCellStyle(normalStyle);
			cell_3.setCellValue(logs.getExCreditHourTitle());
			
			
			Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
			cell_4.setCellStyle(normalStyle);
			cell_4.setCellValue(logs.getExCreditHourLecture());
			
			
			Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
			cell_5.setCellStyle(normalStyle);
			cell_5.setCellValue(logs.getExCreditHourPractical());

			Cell cell_6 = row.createCell(6, Cell.CELL_TYPE_STRING);
			cell_6.setCellStyle(normalStyle);
			cell_6.setCellValue(logs.getExTotalMarks());

			Cell cell_7 = row.createCell(7, Cell.CELL_TYPE_STRING);
			cell_7.setCellStyle(normalStyle);
			cell_7.setCellValue(logs.getExPassingGradePoints());

			Cell cell_8 = row.createCell(8, Cell.CELL_TYPE_STRING);
			cell_8.setCellStyle(normalStyle);
			cell_8.setCellValue(logs.getExExternalMarks());

			Cell cell_9 = row.createCell(9, Cell.CELL_TYPE_STRING);
			cell_9.setCellStyle(normalStyle);
			cell_9.setCellValue(logs.getExExternalPassingMarks());

			Cell cell_10 = row.createCell(10, Cell.CELL_TYPE_STRING);
			cell_10.setCellStyle(normalStyle);
			cell_10.setCellValue(logs.getExNoOfTopics());
			
			Cell cell_11 = row.createCell(11, Cell.CELL_TYPE_STRING);
			cell_11.setCellStyle(normalStyle);
			cell_11.setCellValue(logs.getExTotalCreditHour());

			Cell cell_12 = row.createCell(12, Cell.CELL_TYPE_STRING);
			cell_12.setCellStyle(normalStyle);
			cell_12.setCellValue(logs.getExCreditHourTutorials());

			 rownum++;
	    	}

		}
		catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
		
		}			
	}




	@Override
	void fillNewBatchReportData(List<Object[]> dataList) {
		 CellStyle normalStyle = getNormalStyle();
		 CellStyle normalStyle2 = getNormalStyle2();
	        SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
	        Date date  =  new Date();
	        
	        Row dataRow1 = sh.createRow(0);	
			sh.createRow(1);
			XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
			//ricString.applyFont((Font) normalStyle);
			dataRow1.createCell(0).setCellValue(ricString);
			
			XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());
			//ric_String.applyFont(font);(font11);					
			dataRow1.createCell(1).setCellValue(ric_String);
	        
	        int rownum = 3;
	      //  SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");    
	        long totamount = 0;
	        for (Object[] e : dataList) {
	            Row row = sh.createRow(rownum);
	            Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
	            cell_0.setCellStyle(normalStyle);
	            cell_0.setCellValue(e[0] == null ?"NA" :e[0].toString());
	        
	            Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
	            cell_1.setCellStyle(normalStyle);
	            cell_1.setCellValue(e[1] == null ?"NA" :e[1].toString());
	            
	            Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
	            cell_2.setCellStyle(normalStyle);
	            cell_2.setCellValue(e[2] == null ?"NA" :e[2].toString());
	            
	            Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
	            cell_3.setCellStyle(normalStyle);
	            cell_3.setCellValue(e[3] == null ?"NA" :e[3].toString());
	            
	            Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
	            cell_4.setCellStyle(normalStyle);
	            cell_4.setCellValue(e[4] == null ?"NA" :e[4].toString());
	            
	            Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
	            cell_5.setCellStyle(normalStyle);
	            cell_5.setCellValue(e[5] == null ?"NA" :e[5].toString());
	            
	            Cell cell_6 = row.createCell(6, Cell.CELL_TYPE_STRING);
	            cell_6.setCellStyle(normalStyle);
	            cell_6.setCellValue(e[6] == null ?"NA" :e[6].toString());
	            
			
			  Cell cell_7 = row.createCell(7, Cell.CELL_TYPE_STRING);
			  cell_7.setCellStyle(normalStyle); 
			  cell_7.setCellValue(e[7] == null ?"NA":e[7].toString());
			  
			  Cell cell_8 = row.createCell(8, Cell.CELL_TYPE_STRING);
			  cell_8.setCellStyle(normalStyle);
			  cell_8.setCellValue(e[8] == null ?"NA":e[8].toString());
			  
			  Cell cell_9 = row.createCell(9, Cell.CELL_TYPE_STRING);
			  cell_9.setCellStyle(normalStyle2); 
			  cell_9.setCellValue(e[9] == null ?"NA":e[9].toString());
			  
			  
			  Cell cell_10 = row.createCell(10, Cell.CELL_TYPE_STRING);
			  cell_10.setCellStyle(normalStyle); 
			  cell_10.setCellValue(e[10] == null ?"NA":e[10].toString());
			  
			  
			  
			  Cell cell_11 = row.createCell(11, Cell.CELL_TYPE_STRING);
			  cell_11.setCellStyle(normalStyle); 
			  cell_11.setCellValue(e[11] == null ?"NA":e[11].toString());
			 
			  Cell cell_12 = row.createCell(12, Cell.CELL_TYPE_STRING);
			  cell_12.setCellStyle(normalStyle2); 
			  cell_12.setCellValue(e[12] == null ?"NA":e[12].toString());
			  
			  
			  Cell cell_13 = row.createCell(13, Cell.CELL_TYPE_STRING);
			  cell_13.setCellStyle(normalStyle); 
			  cell_13.setCellValue(e[13] == null ?"NA":e[13].toString());
			  
			  
			  
			  Cell cell_14 = row.createCell(14, Cell.CELL_TYPE_STRING);
			  cell_14.setCellStyle(normalStyle); 
			  cell_14.setCellValue(e[14] == null ?"NA":e[14].toString());
			 
			  Cell cell_15 = row.createCell(15, Cell.CELL_TYPE_STRING);
			  cell_15.setCellStyle(normalStyle2); 
			  cell_15.setCellValue(e[15] == null ?"NA":e[15].toString());
			  
			  
			  Cell cell_16 = row.createCell(16, Cell.CELL_TYPE_STRING);
			  cell_16.setCellStyle(normalStyle); 
			  cell_16.setCellValue(e[16] == null ?"NA":e[16].toString());
			  
			  
			  
			  Cell cell_17 = row.createCell(17, Cell.CELL_TYPE_STRING);
			  cell_17.setCellStyle(normalStyle); 
			  cell_17.setCellValue(e[17] == null ?"NA":e[17].toString());
			 
			  Cell cell_18 = row.createCell(18, Cell.CELL_TYPE_STRING);
			  cell_18.setCellStyle(normalStyle2); 
			  cell_18.setCellValue(e[18] == null ?"NA":e[18].toString());
			  
			  Cell cell_19 = row.createCell(19, Cell.CELL_TYPE_STRING);
			  cell_19.setCellStyle(normalStyle); 
			  cell_19.setCellValue(e[19] == null ?"NA":e[19].toString());
			  
			  
			  
			  Cell cell_20 = row.createCell(20, Cell.CELL_TYPE_STRING);
			  cell_20.setCellStyle(normalStyle); 
			  cell_20.setCellValue(e[20] == null ?"NA":e[20].toString());
			 
			  Cell cell_21 = row.createCell(21, Cell.CELL_TYPE_STRING);
			  cell_21.setCellStyle(normalStyle2); 
			  cell_21.setCellValue(e[21] == null ?"NA":e[21].toString());
			  
			  Cell cell_22 = row.createCell(22, Cell.CELL_TYPE_STRING);
			  cell_22.setCellStyle(normalStyle); 
			  cell_22.setCellValue(e[22] == null ?"NA":e[22].toString());
			  
			  
			  
			  Cell cell_23 = row.createCell(23, Cell.CELL_TYPE_STRING);
			  cell_23.setCellStyle(normalStyle); 
			  cell_23.setCellValue(e[23] == null ?"NA":e[23].toString());
			 
			  Cell cell_24 = row.createCell(24, Cell.CELL_TYPE_STRING);
			  cell_24.setCellStyle(normalStyle2); 
			  cell_24.setCellValue(e[24] == null ?"NA":e[24].toString());
			  
			  
			  Cell cell_25 = row.createCell(25, Cell.CELL_TYPE_STRING);
			  cell_25.setCellStyle(normalStyle); 
			  cell_25.setCellValue(e[25] == null ?"NA":e[25].toString());
			  
			  
			  
			  Cell cell_26 = row.createCell(26, Cell.CELL_TYPE_STRING);
			  cell_26.setCellStyle(normalStyle); 
			  cell_26.setCellValue(e[26] == null ?"NA":e[26].toString());
			 
			  Cell cell_27 = row.createCell(27, Cell.CELL_TYPE_STRING);
			  cell_27.setCellStyle(normalStyle2); 
			  cell_27.setCellValue(e[27] == null ?"NA":e[27].toString());
			  
			  
			  
			  Cell cell_28 = row.createCell(28, Cell.CELL_TYPE_STRING);
			  cell_28.setCellStyle(normalStyle); 
			  cell_28.setCellValue(e[28] == null ?"NA":e[28].toString());
			  
			  
			  
			  Cell cell_29 = row.createCell(29, Cell.CELL_TYPE_STRING);
			  cell_29.setCellStyle(normalStyle); 
			  cell_29.setCellValue(e[29] == null ?"NA":e[29].toString());
			 
			  Cell cell_30 = row.createCell(30, Cell.CELL_TYPE_STRING);
			  cell_30.setCellStyle(normalStyle2); 
			  cell_30.setCellValue(e[30] == null ?"NA":e[30].toString());
			  
			  
			  Cell cell_31 = row.createCell(31, Cell.CELL_TYPE_STRING);
			  cell_31.setCellStyle(normalStyle); 
			  cell_31.setCellValue(e[31] == null ?"NA":e[31].toString());
			  
			  
			  
			  Cell cell_32 = row.createCell(32, Cell.CELL_TYPE_STRING);
			  cell_32.setCellStyle(normalStyle); 
			  cell_32.setCellValue(e[32] == null ?"NA":e[32].toString());
			 
			  Cell cell_33 = row.createCell(33, Cell.CELL_TYPE_STRING);
			  cell_33.setCellStyle(normalStyle2); 
			  cell_33.setCellValue(e[33] == null ?"NA":e[33].toString());
			  
			  
			  Cell cell_34 = row.createCell(34, Cell.CELL_TYPE_STRING);
			  cell_34.setCellStyle(normalStyle); 
			  cell_34.setCellValue(e[34] == null ?"NA":e[34].toString());
			  
			  
			  
			  Cell cell_35 = row.createCell(35, Cell.CELL_TYPE_STRING);
			  cell_35.setCellStyle(normalStyle); 
			  cell_35.setCellValue(e[35] == null ?"NA":e[35].toString());
			 
			  Cell cell_36 = row.createCell(36, Cell.CELL_TYPE_STRING);
			  cell_36.setCellStyle(normalStyle2); 
			  cell_36.setCellValue(e[36] == null ?"NA":e[36].toString());
			  
			  
			  Cell cell_37 = row.createCell(37, Cell.CELL_TYPE_STRING);
			  cell_37.setCellStyle(normalStyle); 
			  cell_37.setCellValue(e[37] == null ?"NA":e[37].toString());
			  
			  
			  
			  Cell cell_38 = row.createCell(38, Cell.CELL_TYPE_STRING);
			  cell_38.setCellStyle(normalStyle); 
			  cell_38.setCellValue(e[38] == null ?"NA":e[38].toString());
			 
			  Cell cell_39 = row.createCell(39, Cell.CELL_TYPE_STRING);
			  cell_39.setCellStyle(normalStyle2); 
			  cell_39.setCellValue(e[39] == null ?"NA":e[39].toString());
			  
			  
			  Cell cell_40 = row.createCell(40, Cell.CELL_TYPE_STRING);
			  cell_40.setCellStyle(normalStyle); 
			  cell_40.setCellValue(e[40] == null ?"NA":e[40].toString());
			  
			  
			  
			  Cell cell_41 = row.createCell(41, Cell.CELL_TYPE_STRING);
			  cell_41.setCellStyle(normalStyle); 
			  cell_41.setCellValue(e[41] == null ?"NA":e[41].toString());
			 
			  Cell cell_42 = row.createCell(42, Cell.CELL_TYPE_STRING);
			  cell_42.setCellStyle(normalStyle2); 
			  cell_42.setCellValue(e[42] == null ?"NA":e[42].toString());
			  
			  Cell cell_43 = row.createCell(43, Cell.CELL_TYPE_STRING);
			  cell_43.setCellStyle(normalStyle); 
			  cell_43.setCellValue(e[43] == null ?"NA":e[43].toString());
			  
			  
			  
			  Cell cell_44 = row.createCell(44, Cell.CELL_TYPE_STRING);
			  cell_44.setCellStyle(normalStyle); 
			  cell_44.setCellValue(e[44] == null ?"NA":e[44].toString());
			 
			  Cell cell_45 = row.createCell(45, Cell.CELL_TYPE_STRING);
			  cell_45.setCellStyle(normalStyle2); 
			  cell_45.setCellValue(e[45] == null ?"NA":e[45].toString());
			  
			  
			  Cell cell_46 = row.createCell(46, Cell.CELL_TYPE_STRING);
			  cell_46.setCellStyle(normalStyle); 
			  cell_46.setCellValue(e[46] == null ?"NA":e[46].toString());
			  
			  
			  
			  Cell cell_47 = row.createCell(47, Cell.CELL_TYPE_STRING);
			  cell_47.setCellStyle(normalStyle); 
			  cell_47.setCellValue(e[47] == null ?"NA":e[47].toString());
			 
			  Cell cell_48 = row.createCell(48, Cell.CELL_TYPE_STRING);
			  cell_48.setCellStyle(normalStyle2); 
			  cell_48.setCellValue(e[48] == null ?"NA":e[48].toString());
			  
			  
			  Cell cell_49 = row.createCell(49, Cell.CELL_TYPE_STRING);
			  cell_49.setCellStyle(normalStyle); 
			  cell_49.setCellValue(e[49] == null ?"NA":e[49].toString());
			  
			  
			  
			  Cell cell_50 = row.createCell(50, Cell.CELL_TYPE_STRING);
			  cell_50.setCellStyle(normalStyle); 
			  cell_50.setCellValue(e[50] == null ?"NA":e[50].toString());
			 
			  Cell cell_51 = row.createCell(51, Cell.CELL_TYPE_STRING);
			  cell_51.setCellStyle(normalStyle2); 
			  cell_51.setCellValue(e[51] == null ?"NA":e[51].toString());
			  
			  
			  Cell cell_52 = row.createCell(52, Cell.CELL_TYPE_STRING);
			  cell_52.setCellStyle(normalStyle); 
			  cell_52.setCellValue(e[52] == null ?"NA":e[52].toString());
			  
			  
			  
			  Cell cell_53 = row.createCell(53, Cell.CELL_TYPE_STRING);
			  cell_53.setCellStyle(normalStyle); 
			  cell_53.setCellValue(e[53] == null ?"NA":e[53].toString());
			 
			  Cell cell_54 = row.createCell(54, Cell.CELL_TYPE_STRING);
			  cell_54.setCellStyle(normalStyle2); 
			  cell_54.setCellValue(e[54] == null ?"NA":e[54].toString());
			  
			  Cell cell_55 = row.createCell(55, Cell.CELL_TYPE_STRING);
			  cell_55.setCellStyle(normalStyle); 
			  cell_55.setCellValue(e[55] == null ?"NA":e[55].toString());
			  
			  
			  
			  Cell cell_56 = row.createCell(56, Cell.CELL_TYPE_STRING);
			  cell_56.setCellStyle(normalStyle); 
			  cell_56.setCellValue(e[56] == null ?"NA":e[56].toString());
			 
			  Cell cell_57 = row.createCell(57, Cell.CELL_TYPE_STRING);
			  cell_57.setCellStyle(normalStyle2); 
			  cell_57.setCellValue(e[57] == null ?"NA":e[57].toString());
			  
			  Cell cell_58 = row.createCell(58, Cell.CELL_TYPE_STRING);
			  cell_58.setCellStyle(normalStyle); 
			  cell_58.setCellValue(e[58] == null ?"NA":e[58].toString());
			  
			  
			  
			  Cell cell_59 = row.createCell(59, Cell.CELL_TYPE_STRING);
			  cell_59.setCellStyle(normalStyle); 
			  cell_59.setCellValue(e[59] == null ?"NA":e[59].toString());
			 
			  Cell cell_60 = row.createCell(60, Cell.CELL_TYPE_STRING);
			  cell_60.setCellStyle(normalStyle2); 
			  cell_60.setCellValue(e[60] == null ?"NA":e[60].toString());
			  
			  Cell cell_61 = row.createCell(61, Cell.CELL_TYPE_STRING);
			  cell_61.setCellStyle(normalStyle2); 
			  cell_61.setCellValue(e[61] == null ?"NA":e[61].toString());
			  
			  Cell cell_62 = row.createCell(62, Cell.CELL_TYPE_STRING);
			  cell_62.setCellStyle(normalStyle2); 
			  cell_62.setCellValue(e[62] == null ?"NA":e[62].toString());
			 
			  Cell cell_63 = row.createCell(63, Cell.CELL_TYPE_STRING);
			  cell_63.setCellStyle(normalStyle2); 
			  cell_63.setCellValue(e[63] == null ?"NA":e[63].toString());
			  
			  Cell cell_64 = row.createCell(64, Cell.CELL_TYPE_STRING);
			  cell_64.setCellStyle(normalStyle2); 
			  cell_64.setCellValue(e[64] == null ?"NA":e[64].toString().concat("%"));
			  
			  Cell cell_65 = row.createCell(65, Cell.CELL_TYPE_STRING);
			  cell_65.setCellStyle(normalStyle2); 
			  cell_65.setCellValue(e[65] == null ?"NA":e[65].toString().concat("%"));
			  
			  Cell cell_66 = row.createCell(66, Cell.CELL_TYPE_STRING);
			  cell_66.setCellStyle(normalStyle); 
			  cell_66.setCellValue(e[66] == null ?"NA":e[66].toString());
			  
			  Cell cell_67 = row.createCell(67, Cell.CELL_TYPE_STRING);
			  cell_67.setCellStyle(normalStyle); 
			  cell_67.setCellValue(e[67] == null ?"NA":e[67].toString());
			  
			  Cell cell_68 = row.createCell(68, Cell.CELL_TYPE_STRING);
			  cell_68.setCellStyle(normalStyle2); 
			  cell_68.setCellValue(e[68] == null ?"NA":e[68].toString());
			  
	            rownum++;
	        }
	       
		
	}




	@Override
	void fillSubmittedReportData(List<Object[]> dataList) {
		 CellStyle normalStyle = getNormalStyle();   
	        SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
	        Date date  =  new Date();
	        
	        Row dataRow1 = sh.createRow(0);	
			sh.createRow(1);
			XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
			//ricString.applyFont((Font) normalStyle);
			dataRow1.createCell(0).setCellValue(ricString);
			
			XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());
			//ric_String.applyFont(font);(font11);					
			dataRow1.createCell(1).setCellValue(ric_String);
	        
	        int rownum = 3;
	      //  SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");    
	        long totamount = 0;
	        for (Object[] e : dataList) {
	            Row row = sh.createRow(rownum);
	            Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
	            cell_0.setCellStyle(normalStyle);
	            cell_0.setCellValue(e[0] == null ?"NA" :e[0].toString());
	        
	            Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
	            cell_1.setCellStyle(normalStyle);
	            cell_1.setCellValue(e[1] == null ?"NA" :e[1].toString());
	            
	            Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
	            cell_2.setCellStyle(normalStyle);
	            cell_2.setCellValue(e[2] == null ?"NA" :e[2].toString());
	            
	            Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
	            cell_3.setCellStyle(normalStyle);
	            cell_3.setCellValue(e[3] == null ?"NA" :e[3].toString());
	            
	            Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
	            cell_4.setCellStyle(normalStyle);
	            cell_4.setCellValue(e[4] == null ?"NA" :e[4].toString());
	            
	            Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
	            cell_5.setCellStyle(normalStyle);
	            cell_5.setCellValue(e[5] == null ?"NA" :e[5].toString());
	            
	            Cell cell_6 = row.createCell(6, Cell.CELL_TYPE_STRING);
	            cell_6.setCellStyle(normalStyle);
	            cell_6.setCellValue(e[6] == null ?"NA" :e[6].toString());
	            
			
			  Cell cell_7 = row.createCell(7, Cell.CELL_TYPE_STRING);
			  cell_7.setCellStyle(normalStyle); 
			  cell_7.setCellValue(e[7] == null ?"NA":e[7].toString());
			  
			  Cell cell_8 = row.createCell(8, Cell.CELL_TYPE_STRING);
			  cell_8.setCellStyle(normalStyle);
			  cell_8.setCellValue(e[8] == null ?"NA":e[8].toString());
			  
			  Cell cell_9 = row.createCell(9, Cell.CELL_TYPE_STRING);
			  cell_9.setCellStyle(normalStyle); 
			  cell_9.setCellValue(e[9] == null ?"NA":e[9].toString());
			  
			  
			  Cell cell_10 = row.createCell(10, Cell.CELL_TYPE_STRING);
			  cell_10.setCellStyle(normalStyle); 
			  cell_10.setCellValue(e[10] == null ?"NA":e[10].toString());
			  
			  
			  Cell cell_11 = row.createCell(11, Cell.CELL_TYPE_STRING);
			  cell_11.setCellStyle(normalStyle); 
			  cell_11.setCellValue(e[11] == null ?"NA":e[11].toString());
			 
			  Cell cell_12 = row.createCell(12, Cell.CELL_TYPE_STRING);
			  cell_12.setCellStyle(normalStyle); 
			  cell_12.setCellValue(e[12] == null ?"NA":e[12].toString());
			 
			  
			  
			  Cell cell_13 = row.createCell(13, Cell.CELL_TYPE_STRING);
			  cell_13.setCellStyle(normalStyle); 
			  cell_13.setCellValue(e[13] == null ?"NA":e[13].toString());
			 
			  Cell cell_14 = row.createCell(14, Cell.CELL_TYPE_STRING);
			  cell_14.setCellStyle(normalStyle); 
			  cell_14.setCellValue(e[14] == null ?"NA":e[14].toString());
			  
			  Cell cell_15 = row.createCell(15, Cell.CELL_TYPE_STRING);
			  cell_15.setCellStyle(normalStyle); 
			  cell_15.setCellValue(e[15] == null ?"NA":e[15].toString());
			  
			  Cell cell_16 = row.createCell(16, Cell.CELL_TYPE_STRING);
			  cell_16.setCellStyle(normalStyle); 
			  cell_16.setCellValue(e[16] == null ?"NA":e[16].toString());
			  
			  Cell cell_17 = row.createCell(17, Cell.CELL_TYPE_STRING);
			  cell_17.setCellStyle(normalStyle); 
			  cell_17.setCellValue(e[17] == null ?"NA":e[17].toString());
			 
			  
			  Cell cell_18 = row.createCell(18, Cell.CELL_TYPE_STRING);
			  cell_18.setCellStyle(normalStyle); 
			  cell_18.setCellValue(e[18] == null ?"NA":e[18].toString());
			 
			  
			  Cell cell_19 = row.createCell(19, Cell.CELL_TYPE_STRING);
			  cell_19.setCellStyle(normalStyle); 
			  cell_19.setCellValue(e[19] == null ?"NA":e[19].toString());
	
			  Cell cell_20 = row.createCell(20, Cell.CELL_TYPE_STRING);
			  cell_20.setCellStyle(normalStyle); 
			  cell_20.setCellValue(e[20] == null ?"NA":e[20].toString());
	            rownum++;
	        }
		
	}



	@Override
	void SupplyExcelReport(List<Object[]> list) {
		 CellStyle normalStyle = getNormalStyle();   
	        SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
	        Date date  =  new Date();
	        
	        Row dataRow1 = sh.createRow(0);	
			sh.createRow(1);
			XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
			//ricString.applyFont((Font) normalStyle);
			dataRow1.createCell(0).setCellValue(ricString);
			
			XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());
			//ric_String.applyFont(font);(font11);					
			dataRow1.createCell(1).setCellValue(ric_String);
	        
	        int rownum = 3;
	      //  SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");    
	        for (Object[] e : list) {
	            Row row = sh.createRow(rownum);
	            Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
	            cell_0.setCellStyle(normalStyle);
	            cell_0.setCellValue(e[0] == null ?"NA" :e[0].toString());
	        
	            Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
	            cell_1.setCellStyle(normalStyle);
	            cell_1.setCellValue(e[1] == null ?"NA" :e[1].toString());
	            
	            Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
	            cell_2.setCellStyle(normalStyle);
	            cell_2.setCellValue(e[2] == null ?"NA" :e[2].toString());
	            
	            Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
	            cell_3.setCellStyle(normalStyle);
	            cell_3.setCellValue(e[3] == null ?"NA" :e[3].toString());
	            
	            Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
	            cell_4.setCellStyle(normalStyle);
	            cell_4.setCellValue(e[4] == null ?"NA" :e[4].toString());
	            
	            Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
	            cell_5.setCellStyle(normalStyle);
	            cell_5.setCellValue(e[5] == null ?"NA" :e[5].toString());
	            
	            Cell cell_6 = row.createCell(6, Cell.CELL_TYPE_STRING);
	            cell_6.setCellStyle(normalStyle);
	            cell_6.setCellValue(e[6] == null ?"NA" :e[6].toString());
	            
			
			  Cell cell_7 = row.createCell(7, Cell.CELL_TYPE_STRING);
			  cell_7.setCellStyle(normalStyle); 
			  cell_7.setCellValue(e[7] == null ?"NA":e[7].toString());
			  
			  Cell cell_8 = row.createCell(8, Cell.CELL_TYPE_STRING);
			  cell_8.setCellStyle(normalStyle);
			  cell_8.setCellValue(e[8] == null ?"NA":e[8].toString());
			  
			  Cell cell_9 = row.createCell(9, Cell.CELL_TYPE_STRING);
			  cell_9.setCellStyle(normalStyle); 
			  cell_9.setCellValue(e[9] == null ?"NA":e[9].toString());
			  
			  
			  Cell cell_10 = row.createCell(10, Cell.CELL_TYPE_STRING);
			  cell_10.setCellStyle(normalStyle); 
			  cell_10.setCellValue(e[10] == null ?"NA":e[10].toString());
			  
			  
			  Cell cell_11 = row.createCell(11, Cell.CELL_TYPE_STRING);
			  cell_11.setCellStyle(normalStyle); 
			  cell_11.setCellValue(e[11] == null ?"NA":e[11].toString());
			  
			  
			  
			  Cell cell_12 = row.createCell(12, Cell.CELL_TYPE_STRING);
			  cell_12.setCellStyle(normalStyle); 
			  cell_12.setCellValue(e[12] == null ?"NA":e[12].toString());
			  
			  
			  Cell cell_13 = row.createCell(13, Cell.CELL_TYPE_STRING);
			  cell_13.setCellStyle(normalStyle); 
			  cell_13.setCellValue(e[13] == null ?"NA":e[13].toString());
			  
			  
			  Cell cell_14 = row.createCell(14, Cell.CELL_TYPE_STRING);
			  cell_14.setCellStyle(normalStyle); 
			  cell_14.setCellValue(e[14] == null ?"NA":e[14].toString());
			  
			  Cell cell_15 = row.createCell(15, Cell.CELL_TYPE_STRING);
			  cell_15.setCellStyle(normalStyle); 
			  cell_15.setCellValue(e[15] == null ?"NA":e[15].toString());
			  
			  Cell cell_16 = row.createCell(16, Cell.CELL_TYPE_STRING);
			  cell_16.setCellStyle(normalStyle); 
			  cell_16.setCellValue(e[16] == null ?"NA":e[16].toString());
			  
			  Cell cell_17 = row.createCell(17, Cell.CELL_TYPE_STRING);
			  cell_17.setCellStyle(normalStyle); 
			  cell_17.setCellValue(e[17] == null ?"NA":e[17].toString());
			 
			  
			  Cell cell_18 = row.createCell(18, Cell.CELL_TYPE_STRING);
			  cell_18.setCellStyle(normalStyle); 
			  cell_18.setCellValue(e[18] == null ?"NA":e[18].toString());
			 
			  
			  Cell cell_19 = row.createCell(19, Cell.CELL_TYPE_STRING);
			  cell_19.setCellStyle(normalStyle); 
			  cell_19.setCellValue(e[19] == null ?"NA":e[19].toString());
	
			  Cell cell_20 = row.createCell(20, Cell.CELL_TYPE_STRING);
			  cell_20.setCellStyle(normalStyle); 
			  cell_20.setCellValue(e[20] == null ?"NA":e[20].toString());
			  
			  
			  Cell cell_21 = row.createCell(21, Cell.CELL_TYPE_STRING);
			  cell_21.setCellStyle(normalStyle); 
			  cell_21.setCellValue(e[21] == null ?"NA":e[21].toString());
			  
			  Cell cell_22 = row.createCell(22, Cell.CELL_TYPE_STRING);
			  cell_22.setCellStyle(normalStyle); 
			  cell_22.setCellValue(e[22] == null ?"NA":e[22].toString());
			  
			  
			  
			  Cell cell_23 = row.createCell(23, Cell.CELL_TYPE_STRING);
			  cell_23.setCellStyle(normalStyle); 
			  cell_23.setCellValue(e[23] == null ?"NA":e[23].toString());
			 
			  Cell cell_24 = row.createCell(24, Cell.CELL_TYPE_STRING);
			  cell_24.setCellStyle(normalStyle); 
			  cell_24.setCellValue(e[24] == null ?"NA":e[24].toString());
			  
			  
			  Cell cell_25 = row.createCell(25, Cell.CELL_TYPE_STRING);
			  cell_25.setCellStyle(normalStyle); 
			  cell_25.setCellValue(e[25] == null ?"NA":e[25].toString());
			  
			  
			  
			  Cell cell_26 = row.createCell(26, Cell.CELL_TYPE_STRING);
			  cell_26.setCellStyle(normalStyle); 
			  cell_26.setCellValue(e[26] == null ?"NA":e[26].toString());
			 
			  Cell cell_27 = row.createCell(27, Cell.CELL_TYPE_STRING);
			  cell_27.setCellStyle(normalStyle); 
			  cell_27.setCellValue(e[27] == null ?"NA":e[27].toString());
			  
			  
			  
			  Cell cell_28 = row.createCell(28, Cell.CELL_TYPE_STRING);
			  cell_28.setCellStyle(normalStyle); 
			  cell_28.setCellValue(e[28] == null ?"NA":e[28].toString());
			  rownum++;
	}
	}




	@Override
	void teachemappedcourseslistReport(List<Object[]> list) {
		// TODO Auto-generated method stub
		 CellStyle normalStyle = getNormalStyle(); 
		 CellStyle normalStyle1 = getNormalStyle2();
			CellStyle normalStyle2 = getNormalStyle1();
		 SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
	        Date date  =  new Date();
	        
	        Row dataRow1 = sh.createRow(0);	
			sh.createRow(1);
			Font font = wb.createFont();
			XSSFFont font1 = (XSSFFont) font;
			XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
	
			Cell cel  =	dataRow1.createCell(0,Cell.CELL_TYPE_STRING);
			cel.setCellStyle(normalStyle2);
			cel.setCellValue(ricString);
			font1.setBold(true);
			
			XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());
			Cell cel1  =	dataRow1.createCell(1,Cell.CELL_TYPE_STRING);
			cel1.setCellStyle(normalStyle2);
			cel1.setCellValue(ric_String);
			font1.setBold(true);
		/*
		 * SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss"); Date
		 * date = new Date();
		 * 
		 * Row dataRow1 = sh.createRow(0); sh.createRow(1); XSSFRichTextString ricString
		 * = new XSSFRichTextString("Downloded Time :"); //ricString.applyFont((Font)
		 * normalStyle); dataRow1.createCell(0).setCellValue(ricString);
		 * 
		 * XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());
		 * //ric_String.applyFont(font);(font11);
		 * dataRow1.createCell(1).setCellValue(ric_String);
		 */
	        int rownum = 3;
	      //  SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");    
	        for (Object[] e : list) {
	            Row row = sh.createRow(rownum);
	            Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
	            cell_0.setCellStyle(normalStyle);
	            cell_0.setCellValue(e[0] == null ?"NA" :e[0].toString());
	        
	            Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
	            cell_1.setCellStyle(normalStyle);
	            cell_1.setCellValue(e[1] == null ?"NA" :e[1].toString());
	            
	            Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
	            cell_2.setCellStyle(normalStyle);
	            cell_2.setCellValue(e[2] == null ?"NA" :e[2].toString());
	            
	            Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
	            cell_3.setCellStyle(normalStyle);
	            cell_3.setCellValue(e[3] == null ?"NA" :e[3].toString());
	            
	            Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
	            cell_4.setCellStyle(normalStyle);
	            cell_4.setCellValue(e[4] == null ?"NA" :e[4].toString());
	            
	            Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
	            cell_5.setCellStyle(normalStyle);
	            cell_5.setCellValue(e[5] == null ?"NA" :e[5].toString());
	            
	            Cell cell_6 = row.createCell(6, Cell.CELL_TYPE_STRING);
	            cell_6.setCellStyle(normalStyle);
	            cell_6.setCellValue(e[6] == null ?"NA" :e[6].toString());
	            
			
			  Cell cell_7 = row.createCell(7, Cell.CELL_TYPE_STRING);
			  cell_7.setCellStyle(normalStyle); 
			  cell_7.setCellValue(e[7] == null ?"NA":e[7].toString());
			  
			  Cell cell_8 = row.createCell(8, Cell.CELL_TYPE_STRING);
			  cell_8.setCellStyle(normalStyle);
			  cell_8.setCellValue(e[8] == null ?"NA":e[8].toString());
			  
			  Cell cell_9 = row.createCell(9, Cell.CELL_TYPE_STRING);
			  cell_9.setCellStyle(normalStyle); 
			  cell_9.setCellValue(e[9] == null ?"NA":e[9].toString());
			  
			  
			  Cell cell_10 = row.createCell(10, Cell.CELL_TYPE_STRING);
			  cell_10.setCellStyle(normalStyle); 
			  cell_10.setCellValue(e[10] == null ?"NA":e[10].toString());
			  
			  
			  Cell cell_11 = row.createCell(11, Cell.CELL_TYPE_STRING);
			  cell_11.setCellStyle(normalStyle); 
			  cell_11.setCellValue(e[11] == null ?"NA":e[11].toString());
			  
			  
			  
			  Cell cell_12 = row.createCell(12, Cell.CELL_TYPE_STRING);
			  cell_12.setCellStyle(normalStyle); 
			  cell_12.setCellValue(e[12] == null ?"NA":e[12].toString());
			  
			  
			  Cell cell_13 = row.createCell(13, Cell.CELL_TYPE_STRING);
			  cell_13.setCellStyle(normalStyle); 
			  cell_13.setCellValue(e[13] == null ?"NA":e[13].toString());
			  
			  
			  Cell cell_14 = row.createCell(14, Cell.CELL_TYPE_STRING);
			  cell_14.setCellStyle(normalStyle); 
			  cell_14.setCellValue(e[14] == null ?"NA":e[14].toString());
			  
			  Cell cell_15 = row.createCell(15, Cell.CELL_TYPE_STRING);
			  cell_15.setCellStyle(normalStyle); 
			  cell_15.setCellValue(e[15] == null ?"NA":e[15].toString());
			  
			  Cell cell_16 = row.createCell(16, Cell.CELL_TYPE_STRING);
			  cell_16.setCellStyle(normalStyle); 
			  cell_16.setCellValue(e[16] == null ?"NA":e[16].toString());
			  
			  Cell cell_17 = row.createCell(17, Cell.CELL_TYPE_STRING);
			  cell_17.setCellStyle(normalStyle); 
			  cell_17.setCellValue(e[17] == null ?"NA":e[17].toString());
			 
			  
			  Cell cell_18 = row.createCell(18, Cell.CELL_TYPE_STRING);
			  cell_18.setCellStyle(normalStyle); 
			  cell_18.setCellValue(e[18] == null ?"NA":e[18].toString());
			 
			  
			  Cell cell_19 = row.createCell(19, Cell.CELL_TYPE_STRING);
			  cell_19.setCellStyle(normalStyle); 
			  cell_19.setCellValue(e[19] == null ?"NA":e[19].toString());
	
			  Cell cell_20 = row.createCell(20, Cell.CELL_TYPE_STRING);
			  cell_20.setCellStyle(normalStyle); 
			  cell_20.setCellValue(e[20] == null ?"NA":e[20].toString());
			  
			  
			  Cell cell_21 = row.createCell(21, Cell.CELL_TYPE_STRING);
			  cell_21.setCellStyle(normalStyle); 
			  cell_21.setCellValue(e[21] == null ?"NA":e[21].toString());
			  rownum++;
			  
	        }
	}




	@Override
	void fillexportsemRegistration(List<SemesterRegistration> dataList, List<CoursesRegistration> st1,
			List<Courses> st2) {
		
		CellStyle normalStyle = getNormalStyle();
		 SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
	        Date date  =  new Date();
	        
	        Row dataRow1 = sh.createRow(0);	
			sh.createRow(1);
			XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
			dataRow1.createCell(0).setCellValue(ricString);
			
			XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());				
			dataRow1.createCell(1).setCellValue(ric_String);
	        
	        int rownum = 3;
		try {
			for (SemesterRegistration logs : dataList)
		{
			Row row = sh.createRow(rownum);
			Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
			cell_0.setCellStyle(normalStyle);
			cell_0.setCellValue(logs.getAcademicYear().getExIdentifier());

			Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
			cell_1.setCellStyle(normalStyle);
			cell_1.setCellValue(logs.getColleges().getExIdentifier());

			Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
			cell_2.setCellStyle(normalStyle);
			cell_2.setCellValue(logs.getStudentadmission().getExRollNo());
	
			Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
			cell_3.setCellStyle(normalStyle);
			cell_3.setCellValue("");
			
	
			
			
			rownum++;
		
		}
			
			
		/*	
			Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
			cell_4.setCellStyle(normalStyle);
			cell_4.setCellValue(logs.getDepartment().getExIdentifier());
			
			
			Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
			cell_5.setCellStyle(normalStyle);
			cell_5.setCellValue(logs.getProgrammeYear().getExName());

			Cell cell_6 = row.createCell(6, Cell.CELL_TYPE_STRING);
			cell_6.setCellStyle(normalStyle);
			cell_6.setCellValue(logs.getSemester().getExName());

			Cell cell_7 = row.createCell(7, Cell.CELL_TYPE_STRING);
			cell_7.setCellStyle(normalStyle);
			cell_7.setCellValue(logs.getStudentadmission().getExName().toUpperCase());

			Cell cell_8 = row.createCell(8, Cell.CELL_TYPE_STRING);
			cell_8.setCellStyle(normalStyle);
			cell_8.setCellValue(logs.getStudentadmission().getExRollNo());*/
	
	
			}
		catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
		
		}	

	}


	@Override
	void GradeReport(List<Object[]> list) {
		// TODO Auto-generated method stub
		 CellStyle normalStyle = getNormalStyle();   
	        SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
	        Date date  =  new Date();
	        
	        Row dataRow1 = sh.createRow(0);	
			sh.createRow(1);
			XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
			//ricString.applyFont((Font) normalStyle);
			dataRow1.createCell(0).setCellValue(ricString);
			
			XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());
			//ric_String.applyFont(font);(font11);					
			dataRow1.createCell(1).setCellValue(ric_String);
	        
	        int rownum = 3;
	      //  SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");    
	        for (Object[] e : list) {
	            Row row = sh.createRow(rownum);
	            Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
	            cell_0.setCellStyle(normalStyle);
	            cell_0.setCellValue(e[0] == null ?"NA" :e[0].toString());
	        
	            Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
	            cell_1.setCellStyle(normalStyle);
	            cell_1.setCellValue(e[1] == null ?"NA" :e[1].toString());
	            
	            Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
	            cell_2.setCellStyle(normalStyle);
	            cell_2.setCellValue(e[2] == null ?"NA" :e[2].toString());
	            
	            Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
	            cell_3.setCellStyle(normalStyle);
	            cell_3.setCellValue(e[3] == null ?"NA" :e[3].toString());
	            
	            Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
	            cell_4.setCellStyle(normalStyle);
	            cell_4.setCellValue(e[4] == null ?"NA" :e[4].toString());
	            
	            Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
	            cell_5.setCellStyle(normalStyle);
	            cell_5.setCellValue(e[5] == null ?"NA" :e[5].toString());
	            
	            Cell cell_6 = row.createCell(6, Cell.CELL_TYPE_STRING);
	            cell_6.setCellStyle(normalStyle);
	            cell_6.setCellValue(e[6] == null ?"NA" :e[6].toString());
	            
			
			  Cell cell_7 = row.createCell(7, Cell.CELL_TYPE_STRING);
			  cell_7.setCellStyle(normalStyle); 
			  cell_7.setCellValue(e[7] == null ?"NA":e[7].toString());
			  
			  Cell cell_8 = row.createCell(8, Cell.CELL_TYPE_STRING);
			  cell_8.setCellStyle(normalStyle);
			  cell_8.setCellValue(e[8] == null ?"NA":e[8].toString());
			  
			  Cell cell_9 = row.createCell(9, Cell.CELL_TYPE_STRING);
			  cell_9.setCellStyle(normalStyle); 
			  cell_9.setCellValue(e[9] == null ?"NA":e[9].toString());
			  
			  
			  Cell cell_10 = row.createCell(10, Cell.CELL_TYPE_STRING);
			  cell_10.setCellStyle(normalStyle); 
			  cell_10.setCellValue(e[10] == null ?"NA":e[10].toString());
			  
			  
			  Cell cell_11 = row.createCell(11, Cell.CELL_TYPE_STRING);
			  cell_11.setCellStyle(normalStyle); 
			  cell_11.setCellValue(e[11] == null ?"NA":e[11].toString());
			  
			  
			  
			  Cell cell_12 = row.createCell(12, Cell.CELL_TYPE_STRING);
			  cell_12.setCellStyle(normalStyle); 
			  cell_12.setCellValue(e[12] == null ?"NA":e[12].toString());
			  
			  
			  Cell cell_13 = row.createCell(13, Cell.CELL_TYPE_STRING);
			  cell_13.setCellStyle(normalStyle); 
			  cell_13.setCellValue(e[13] == null ?"NA":e[13].toString());
			  
			  
			  Cell cell_14 = row.createCell(14, Cell.CELL_TYPE_STRING);
			  cell_14.setCellStyle(normalStyle); 
			  cell_14.setCellValue(e[14] == null ?"NA":e[14].toString());
			  
			  Cell cell_15 = row.createCell(15, Cell.CELL_TYPE_STRING);
			  cell_15.setCellStyle(normalStyle); 
			  cell_15.setCellValue(e[15] == null ?"NA":e[15].toString());
			  
			  Cell cell_16 = row.createCell(16, Cell.CELL_TYPE_STRING);
			  cell_16.setCellStyle(normalStyle); 
			  cell_16.setCellValue(e[16] == null ?"NA":e[16].toString());
			  
			  Cell cell_17 = row.createCell(17, Cell.CELL_TYPE_STRING);
			  cell_17.setCellStyle(normalStyle); 
			  cell_17.setCellValue(e[17] == null ?"NA":e[17].toString());
			 
			  
			  rownum++;
			  
	        }
	}




	@Override
	void StaffReport(List<Object[]> list) {
		// TODO Auto-generated method stub
		 CellStyle normalStyle = getNormalStyle();   
	        SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
	        Date date  =  new Date();
	        
	        Row dataRow1 = sh.createRow(0);	
			sh.createRow(1);
			XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
			//ricString.applyFont((Font) normalStyle);
			dataRow1.createCell(0).setCellValue(ricString);
			
			XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());
			//ric_String.applyFont(font);(font11);					
			dataRow1.createCell(1).setCellValue(ric_String);
	        
	        int rownum = 3;
	      //  SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");    
	        for (Object[] e : list) {
	            Row row = sh.createRow(rownum);
	            Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
	            cell_0.setCellStyle(normalStyle);
	            cell_0.setCellValue(e[0] == null ?"NA" :e[0].toString());
	        
	            Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
	            cell_1.setCellStyle(normalStyle);
	            cell_1.setCellValue(e[1] == null ?"NA" :e[1].toString());
	            
	            Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
	            cell_2.setCellStyle(normalStyle);
	            cell_2.setCellValue(e[2] == null ?"NA" :e[2].toString());
	            
	            Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
	            cell_3.setCellStyle(normalStyle);
	            cell_3.setCellValue(e[3] == null ?"NA" :e[3].toString());
	            
	            Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
	            cell_4.setCellStyle(normalStyle);
	            cell_4.setCellValue(e[4] == null ?"NA" :e[4].toString());
	            
	            Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
	            cell_5.setCellStyle(normalStyle);
	            cell_5.setCellValue(e[5] == null ?"NA" :e[5].toString());
	            
	            Cell cell_6 = row.createCell(6, Cell.CELL_TYPE_STRING);
	            cell_6.setCellStyle(normalStyle);
	            cell_6.setCellValue(e[6] == null ?"NA" :e[6].toString());
	            
			
			  Cell cell_7 = row.createCell(7, Cell.CELL_TYPE_STRING);
			  cell_7.setCellStyle(normalStyle); 
			  cell_7.setCellValue(e[7] == null ?"NA":e[7].toString());
			  
			  Cell cell_8 = row.createCell(8, Cell.CELL_TYPE_STRING);
			  cell_8.setCellStyle(normalStyle);
			  cell_8.setCellValue(e[8] == null ?"NA":e[8].toString());
			  
			  Cell cell_9 = row.createCell(9, Cell.CELL_TYPE_STRING);
			  cell_9.setCellStyle(normalStyle); 
			  cell_9.setCellValue(e[9] == null ?"NA":e[9].toString());
			  
			  
			  Cell cell_10 = row.createCell(10, Cell.CELL_TYPE_STRING);
			  cell_10.setCellStyle(normalStyle); 
			  cell_10.setCellValue(e[10] == null ?"NA":e[10].toString());
			  
			  
			  Cell cell_11 = row.createCell(11, Cell.CELL_TYPE_STRING);
			  cell_11.setCellStyle(normalStyle); 
			  cell_11.setCellValue(e[11] == null ?"NA":e[11].toString());
			  
			  
			  
			  Cell cell_12 = row.createCell(12, Cell.CELL_TYPE_STRING);
			  cell_12.setCellStyle(normalStyle); 
			  cell_12.setCellValue(e[12] == null ?"NA":e[12].toString());
			  
			  
			  Cell cell_13 = row.createCell(13, Cell.CELL_TYPE_STRING);
			  cell_13.setCellStyle(normalStyle); 
			  cell_13.setCellValue(e[13] == null ?"NA":e[13].toString());
			  
			  
			  Cell cell_14 = row.createCell(14, Cell.CELL_TYPE_STRING);
			  cell_14.setCellStyle(normalStyle); 
			  cell_14.setCellValue(e[14] == null ?"NA":e[14].toString());
			  
			  Cell cell_15 = row.createCell(15, Cell.CELL_TYPE_STRING);
			  cell_15.setCellStyle(normalStyle); 
			  cell_15.setCellValue(e[15] == null ?"NA":e[15].toString());
			  
			  Cell cell_16 = row.createCell(16, Cell.CELL_TYPE_STRING);
			  cell_16.setCellStyle(normalStyle); 
			  cell_16.setCellValue(e[16] == null ?"NA":e[16].toString());
			  
			  Cell cell_17 = row.createCell(17, Cell.CELL_TYPE_STRING);
			  cell_17.setCellStyle(normalStyle); 
			  cell_17.setCellValue(e[17] == null ?"NA":e[17].toString());
			 
			  
			  Cell cell_18 = row.createCell(18, Cell.CELL_TYPE_STRING);
			  cell_18.setCellStyle(normalStyle); 
			  cell_18.setCellValue(e[18] == null ?"NA":e[18].toString());
			 
			  
			  Cell cell_19 = row.createCell(19, Cell.CELL_TYPE_STRING);
			  cell_19.setCellStyle(normalStyle); 
			  cell_19.setCellValue(e[19] == null ?"NA":e[19].toString());
			  
			  Cell cell_20 = row.createCell(20, Cell.CELL_TYPE_STRING);
			  cell_20.setCellStyle(normalStyle); 
			  cell_20.setCellValue(e[20] == null ?"NA":(e[20].toString().equals("0") ?"YES" :"NO"));
			  
			  rownum++;
	}
	}



	@SuppressWarnings("deprecation")
	@Override
	void TheoryMarks(List<CoursesRegistration> list) {
		// TODO Auto-generated method stub
		/*CellStyle normalStyle = getNormalStyle();
		SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
        Date date  =  new Date();
        
        Row dataRow1 = sh.createRow(0);	
		sh.createRow(1);
		XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
		//ricString.applyFont((Font) normalStyle);
		dataRow1.createCell(0).setCellValue(ricString);
		
		XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());
		//ric_String.applyFont(font);(font11);					
		dataRow1.createCell(1).setCellValue(ric_String);
		*/
		
		
		CellStyle normalStyle = getNormalStyle();
		CellStyle normalStyle2 = getNormalStyle1();
		CellStyle normalStyle6 = getNormalStyle6();
		CellStyle normalStyle5 = getNormalStyle5();
		  SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
	        Date date  =  new Date();
	        
	        Row dataRow1 = sh.createRow(0);	
			//sh.createRow(1);
			Font font = wb.createFont();
			XSSFFont font1 = (XSSFFont) font;
			XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
	
			Cell cel  =	dataRow1.createCell(0,Cell.CELL_TYPE_STRING);
			cel.setCellStyle(normalStyle2);
			cel.setCellValue(ricString);
			font1.setBold(true);
			
			XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());
			Cell cel1  =	dataRow1.createCell(1,Cell.CELL_TYPE_STRING);
			cel1.setCellStyle(normalStyle2);
			cel1.setCellValue(ric_String);
			font1.setBold(true);
			
				Row notice = sh.createRow(1);	
				XSSFRichTextString ricString1 = new XSSFRichTextString("Note:");
				Cell cell  =	notice.createCell(0,Cell.CELL_TYPE_STRING);
				cell.setCellStyle(normalStyle6);
				cell.setCellValue(ricString1);
			
				XSSFRichTextString ric_String23 = new XSSFRichTextString("Please award [ A ] if the student is ABSENT or Not Submitted Quiz/Assignment etc..!");
				Cell cell1  =	notice.createCell(1,Cell.CELL_TYPE_STRING);
				cell1.setCellStyle(normalStyle6);
				cell1.setCellValue(ric_String23);
				sh.addMergedRegion(CellRangeAddress.valueOf("B2:G2"));
        
        int rownum = 3;
		try {
			for (CoursesRegistration logs : list) {
			Row row = sh.createRow(rownum);
			Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
			cell_0.setCellStyle(normalStyle);
			cell_0.setCellValue(logs.getStudentadmission().getExRollNo());
			
			Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
			cell_1.setCellStyle(normalStyle);
			cell_1.setCellValue(logs.getCourses().getExCoursesCode());
			
			Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
			cell_2.setCellStyle(normalStyle);
			cell_2.setCellValue(1);
			
			

			XSSFDataValidationHelper dvHelper2 = new XSSFDataValidationHelper(sheet);
			XSSFDataValidationConstraint dvConstraint2 = (XSSFDataValidationConstraint) dvHelper2.createCustomConstraint(
            "=OR(D4=\"A\",D4<=5)");
			CellRangeAddressList addressList2 = new CellRangeAddressList(3, sh.getLastRowNum(), 3,3);
			XSSFDataValidation validation2 = (XSSFDataValidation) dvHelper2.createValidation(dvConstraint2, addressList2);
			validation2.setSuppressDropDownArrow(false);
			validation2.setShowErrorBox(true);
			validation2.setErrorStyle(DataValidation.ErrorStyle.STOP);
			validation2.createErrorBox("Error Committed !!", "Award 'A' - If 'ABSENT/Not Submitted' Maximum Marks 5 for Assignment !");
			sh.addValidationData(validation2);
			
		    
		    XSSFDataValidationHelper dvHelper = new XSSFDataValidationHelper(sheet);
		    XSSFDataValidationConstraint dvConstraint = (XSSFDataValidationConstraint) dvHelper.createCustomConstraint(
		            "=OR(E4=\"A\",E4<=5)");
		    CellRangeAddressList addressList = new CellRangeAddressList(3, sh.getLastRowNum(), 4,4);
		    XSSFDataValidation validation = (XSSFDataValidation) dvHelper.createValidation(dvConstraint, addressList);
		    validation.setSuppressDropDownArrow(false);
		    validation.setShowErrorBox(true);
		    validation.setErrorStyle(DataValidation.ErrorStyle.STOP);
		    validation.createErrorBox("Error Committed !!", "Award 'A' - If 'ABSENT/Not Submitted' Maximum Marks 5 for Quiz !");
		    sh.addValidationData(validation);
	
		    
		    
		    XSSFDataValidationHelper dvHelper1 = new XSSFDataValidationHelper(sheet);
		    XSSFDataValidationConstraint dvConstraint1 = (XSSFDataValidationConstraint) dvHelper1.createCustomConstraint(
		            "=OR(F4=\"A\",F4<=5)");
		    CellRangeAddressList addressList1 = new CellRangeAddressList(3, sh.getLastRowNum(), 5,5);
		    XSSFDataValidation validation1 = (XSSFDataValidation) dvHelper1.createValidation(dvConstraint1, addressList1);
		    validation1.setSuppressDropDownArrow(false);
		    validation1.setShowErrorBox(true);
		    validation1.setErrorStyle(DataValidation.ErrorStyle.STOP);
		    validation1.createErrorBox("Error Committed !!", "Award 'A' - If 'ABSENT/Not Submitted' Maximum Marks 5 for Attendance!");
		    sh.addValidationData(validation1);
	 
			
		    XSSFDataValidationHelper dvHelper3 = new XSSFDataValidationHelper(sheet);
		    XSSFDataValidationConstraint dvConstraint3 = (XSSFDataValidationConstraint) dvHelper3.createCustomConstraint(
		            "=OR(G4=\"A\",G4<=5)");
		    CellRangeAddressList addressList3 = new CellRangeAddressList(3, sh.getLastRowNum(), 6,6);
		    XSSFDataValidation validation3 = (XSSFDataValidation) dvHelper3.createValidation(dvConstraint3, addressList3);
		    validation3.setSuppressDropDownArrow(false);
		    validation3.setShowErrorBox(true);
		    validation3.setErrorStyle(DataValidation.ErrorStyle.STOP);
		    validation3.createErrorBox("Error Committed !!", "Award 'A' - If 'ABSENT/Not Submitted' Maximum Marks 5 for CaseStudy !");
		    sh.addValidationData(validation3);
	 
		    
			
			
			Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
			cell_3.setCellStyle(normalStyle5);
			cell_3.setCellValue("");
			
			Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
			cell_4.setCellStyle(normalStyle5);
			cell_4.setCellValue("");
			
			Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
			cell_5.setCellStyle(normalStyle5);
			cell_5.setCellValue("");
			
			Cell cell_6 = row.createCell(6, Cell.CELL_TYPE_STRING);
			cell_6.setCellStyle(normalStyle5);
			cell_6.setCellValue("");
			
			rownum++;
	}	
	
		}catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
		
		}	
	}




	@SuppressWarnings("deprecation")
	@Override
	void PracticalMarks(List<CoursesRegistration> list) {
		/*
		 * // TODO Auto-generated method stub CellStyle normalStyle = getNormalStyle();
		 * SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss"); Date
		 * date = new Date();
		 * 
		 * Row dataRow1 = sh.createRow(0); sh.createRow(1); XSSFRichTextString ricString
		 * = new XSSFRichTextString("Downloded Time :"); //ricString.applyFont((Font)
		 * normalStyle); dataRow1.createCell(0).setCellValue(ricString);
		 * 
		 * XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());
		 * //ric_String.applyFont(font);(font11);
		 * dataRow1.createCell(1).setCellValue(ric_String);
		 */
		
		
		CellStyle normalStyle = getNormalStyle();
		CellStyle normalStyle2 = getNormalStyle1();
		CellStyle normalStyle6 = getNormalStyle6();
		CellStyle normalStyle5 = getNormalStyle5();
		  SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
	        Date date  =  new Date();
	        
	        Row dataRow1 = sh.createRow(0);	
			//sh.createRow(1);
			Font font = wb.createFont();
			XSSFFont font1 = (XSSFFont) font;
			XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
	
			Cell cel  =	dataRow1.createCell(0,Cell.CELL_TYPE_STRING);
			cel.setCellStyle(normalStyle2);
			cel.setCellValue(ricString);
			font1.setBold(true);
			
			XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());
			Cell cel1  =	dataRow1.createCell(1,Cell.CELL_TYPE_STRING);
			cel1.setCellStyle(normalStyle2);
			cel1.setCellValue(ric_String);
			font1.setBold(true);
			
				Row notice = sh.createRow(1);	
				XSSFRichTextString ricString1 = new XSSFRichTextString("Note:");
				Cell cell  =	notice.createCell(0,Cell.CELL_TYPE_STRING);
				cell.setCellStyle(normalStyle6);
				cell.setCellValue(ricString1);
			
				XSSFRichTextString ric_String23 = new XSSFRichTextString("Please award [ A ] if the student is ABSENT or Not Submitted Practical (Record/Learning) etc...!");
				Cell cell1  =	notice.createCell(1,Cell.CELL_TYPE_STRING);
				cell1.setCellStyle(normalStyle6);
				cell1.setCellValue(ric_String23);
				sh.addMergedRegion(CellRangeAddress.valueOf("B2:H2"));
        
        int rownum = 3;
		try {
			for (CoursesRegistration logs : list) {
				Row row = sh.createRow(rownum);
				Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
				cell_0.setCellStyle(normalStyle);
				cell_0.setCellValue(logs.getStudentadmission().getExRollNo());
				
				Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
				cell_1.setCellStyle(normalStyle);
				cell_1.setCellValue(logs.getCourses().getExCoursesCode());
				
				Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
				cell_2.setCellStyle(normalStyle);
				cell_2.setCellValue(1);
				
				Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
				cell_3.setCellStyle(normalStyle);
				cell_3.setCellValue(1);
				
				
				
				  XSSFDataValidationHelper dvHelper123 = new XSSFDataValidationHelper(sheet);
				    XSSFDataValidationConstraint dvConstraint123 = (XSSFDataValidationConstraint) dvHelper123.createCustomConstraint(
				            "=OR(E4=\"A\",E4<=20)");
				    CellRangeAddressList addressList123 = new CellRangeAddressList(3, sh.getLastRowNum(), 4,4);
				    XSSFDataValidation validation123 = (XSSFDataValidation) dvHelper123.createValidation(dvConstraint123, addressList123);
				    validation123.setSuppressDropDownArrow(false);
				    validation123.setShowErrorBox(true);
				    validation123.setErrorStyle(DataValidation.ErrorStyle.STOP);
				    validation123.createErrorBox("Error Committed !!", "Award 'A' - If 'ABSENT/Not Submitted' Maximum Marks 20 for PracticaRecord!");
				    sh.addValidationData(validation123);
			
				    
				    
				    XSSFDataValidationHelper dvHelper1 = new XSSFDataValidationHelper(sheet);
				    XSSFDataValidationConstraint dvConstraint1 = (XSSFDataValidationConstraint) dvHelper1.createCustomConstraint(
				            "=OR(F4=\"A\",F4<=20)");
				    CellRangeAddressList addressList1 = new CellRangeAddressList(3, sh.getLastRowNum(), 5,5);
				    XSSFDataValidation validation1 = (XSSFDataValidation) dvHelper1.createValidation(dvConstraint1, addressList1);
				    validation1.setSuppressDropDownArrow(false);
				    validation1.setShowErrorBox(true);
				    validation1.setErrorStyle(DataValidation.ErrorStyle.STOP);
				    validation1.createErrorBox("Error Committed !!", "Award 'A' - If 'ABSENT/Not Submitted' Maximum Marks 20 for PracticalLearning !");
				    sh.addValidationData(validation1);
					
					
				    
				    XSSFDataValidationHelper dvHelper2 = new XSSFDataValidationHelper(sheet);
				    XSSFDataValidationConstraint dvConstraint2 = (XSSFDataValidationConstraint) dvHelper2.createCustomConstraint(
				            "=OR(G4=\"A\",G4<=40)");
				    CellRangeAddressList addressList2 = new CellRangeAddressList(3, sh.getLastRowNum(), 6,6);
				    XSSFDataValidation validation2 = (XSSFDataValidation) dvHelper2.createValidation(dvConstraint2, addressList2);
				    validation2.setSuppressDropDownArrow(false);
				    validation2.setShowErrorBox(true);
				    validation2.setErrorStyle(DataValidation.ErrorStyle.STOP);
				    validation2.createErrorBox("Error Committed !!", "Award 'A' - If 'ABSENT/Not Submitted' Maximum Marks 40 for Labexperiment !");
				    sh.addValidationData(validation2);
				    
				    
					
				    XSSFDataValidationHelper dvHelper3 = new XSSFDataValidationHelper(sheet);
				    XSSFDataValidationConstraint dvConstraint3 = (XSSFDataValidationConstraint) dvHelper3.createCustomConstraint(
				            "=OR(H4=\"A\",H4<=20)");
				    CellRangeAddressList addressList3 = new CellRangeAddressList(3, sh.getLastRowNum(), 7,7);
				    XSSFDataValidation validation3 = (XSSFDataValidation) dvHelper3.createValidation(dvConstraint3, addressList3);
				    validation3.setSuppressDropDownArrow(false);
				    validation3.setShowErrorBox(true);
				    validation3.setErrorStyle(DataValidation.ErrorStyle.STOP);
				    validation3.createErrorBox("Error Committed !!", "Award 'A' - If 'ABSENT/Not Submitted' Maximum Marks 20 for Viva !");
				    sh.addValidationData(validation3);
				
				Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
				cell_4.setCellStyle(normalStyle5);
				cell_4.setCellValue("");
				
				Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
				cell_5.setCellStyle(normalStyle5);
				cell_5.setCellValue("");
				
				Cell cell_6 = row.createCell(6, Cell.CELL_TYPE_STRING);
				cell_6.setCellStyle(normalStyle5);
				cell_6.setCellValue("");
				
				Cell cell_7 = row.createCell(7, Cell.CELL_TYPE_STRING);
				cell_7.setCellStyle(normalStyle5);
				cell_7.setCellValue("");
			
			
			
			rownum++;
	}	
	
		}catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
		
		}	
		
	}




	@SuppressWarnings("deprecation")
	@Override
	void BtechTheoryMarks(List<CoursesRegistration> list) {

		CellStyle normalStyle = getNormalStyle();
		CellStyle normalStyle2 = getNormalStyle1();
		CellStyle normalStyle6 = getNormalStyle6();
		CellStyle normalStyle5 = getNormalStyle5();
		  SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
	        Date date  =  new Date();
	        
	        Row dataRow1 = sh.createRow(0);	
			Font font = wb.createFont();
			XSSFFont font1 = (XSSFFont) font;
			XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
	
			Cell cel  =	dataRow1.createCell(0,Cell.CELL_TYPE_STRING);
			cel.setCellStyle(normalStyle2);
			cel.setCellValue(ricString);
			font1.setBold(true);
			
			XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());
			Cell cel1  =	dataRow1.createCell(1,Cell.CELL_TYPE_STRING);
			cel1.setCellStyle(normalStyle2);
			cel1.setCellValue(ric_String);
			font1.setBold(true);
			
				Row notice = sh.createRow(1);	
				XSSFRichTextString ricString1 = new XSSFRichTextString("Note:");
				Cell cell  =	notice.createCell(0,Cell.CELL_TYPE_STRING);
				cell.setCellStyle(normalStyle6);
				cell.setCellValue(ricString1);
			
				XSSFRichTextString ric_String23 = new XSSFRichTextString("Please award [ A ] if the student is ABSENT or Not Submitted Quiz/Assignment etc..!");
				Cell cell1  =	notice.createCell(1,Cell.CELL_TYPE_STRING);
				cell1.setCellStyle(normalStyle6);
				cell1.setCellValue(ric_String23);
				sh.addMergedRegion(CellRangeAddress.valueOf("B2:F2"));
        
        int rownum = 3;
		try {
			for (CoursesRegistration logs : list) {
			Row row = sh.createRow(rownum);
			Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
			cell_0.setCellStyle(normalStyle);
			cell_0.setCellValue(logs.getStudentadmission().getExRollNo());
			
			
			Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
			cell_1.setCellStyle(normalStyle);
			cell_1.setCellValue(logs.getCourses().getExCoursesCode());
			
			
			Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
			cell_2.setCellStyle(normalStyle);
			cell_2.setCellValue(1);
			
			//XSSFDataValidationHelper dvHelpers = new SSFDataValidationHelper(sheet);
			
			//DataValidationConstraint constraint;
			
			//XSSFDataValidationHelper dvHelper = new XSSFDataValidationHelper(sheet);
			//XSSFDataValidationConstraint dvConstraint = (XSSFDataValidationConstraint)dvHelper.createExplicitListConstraint(new String[]{"A","a"});
			//System.out.println("ppppppppppppppppppppppp"+dvConstraint.getFormula1());
			//System.out.println("niftemmmmmmmmmmmmmmmmmmmm"+dvConstraint.getExplicitListValues().toString());
			//XSSFDataValidationConstraint dvConstraint1= (XSSFDataValidationConstraint)dvHelper.createNumericConstraint( XSSFDataValidationConstraint.ValidationType.DECIMAL,
				//	XSSFDataValidationConstraint.OperatorType.BETWEEN,String.valueOf(0),String.valueOf(10));
			//System.out.println("uuuuuuuuuuuuuuu"+dvConstraint1.getFormula1());
			//CellRangeAddressList addressList = new CellRangeAddressList(3, sh.getLastRowNum(), 4,4 );
				//XSSFDataValidation validation = (XSSFDataValidation)dvHelper.createValidation(dvConstraint1, addressList);
				//XSSFDataValidation val=(XSSFDataValidation)dvHelper.createValidation(dvConstraint, addressList);
				//XSSFDataValidation validation =new XSSFDataValidation(dvConstraint, addressList,(CTDataValidation)(XSSFDataValidationConstraint) dvConstraint1);
				//validation.setSuppressDropDownArrow(false);
			//validation.setShowErrorBox(true);
			//validation.setErrorStyle(DataValidation.ErrorStyle.STOP);
			//	validation.createErrorBox("Error_Message", "please Award the marks between 0 and 10 or A");
				//sh.addValidationData(validation);
			
		 //  DataValidationHelper dataValidationHelper = sheet.getDataValidationHelper();
			 //   DataValidationConstraint constraint = dataValidationHelper.createCustomConstraint("true");
			 //   final XSSFDataValidation validation = (XSSFDataValidation) dataValidationHelper.createValidation(constraint, new CellRangeAddressList(0, 0, 0, 0));
			  //  return validation;
		///	}
			
			
			//important start...!!!!!!!!
			
				// XSSFDataValidationHelper dvHelper = new XSSFDataValidationHelper(sheet);
				  //  XSSFDataValidationConstraint dvConstraint111 = (XSSFDataValidationConstraint) dvHelper.createCustomConstraint(
				    //        "=COUNTA($C$2:C2)>ROW()-2");
				   // CellRangeAddressList addressList111 = new CellRangeAddressList(3, sh.getLastRowNum(), 4,4);
				   // XSSFDataValidation validation111 = (XSSFDataValidation) dvHelper.createValidation(dvConstraint111, addressList111);
				   // validation111.setShowErrorBox(true);
				   /// validation111.createErrorBox("Warning!!!", "Empty cells not allowed for Email column");
				   // sh.addValidationData(validation111);

				  //  XSSFDataValidationConstraint dvConstraint = (XSSFDataValidationConstraint) dvHelper.createCustomConstraint(
				     //       "=AND(NOT(ISERROR(FIND(\"@\",C1))),NOT(ISERROR(FIND(\".\",C1))),ISERROR(FIND(\" \",C1)))");
				    //CellRangeAddressList addressList = new CellRangeAddressList(3, sh.getLastRowNum(), 4,4);
				   // XSSFDataValidation validation = (XSSFDataValidation) dvHelper.createValidation(dvConstraint, addressList);
				   // validation.setShowErrorBox(true);
				   // validation.createErrorBox("Warning!!!", "Please enter valid email id");
				  //  sh.addValidationData(validation);
			 
			  
					XSSFDataValidationHelper dvHelper2 = new XSSFDataValidationHelper(sheet);
					XSSFDataValidationConstraint dvConstraint2 = (XSSFDataValidationConstraint) dvHelper2.createCustomConstraint(
		            "=OR(D4=\"A\",D4<=5)");
					CellRangeAddressList addressList2 = new CellRangeAddressList(3, sh.getLastRowNum(), 3,3);
					XSSFDataValidation validation2 = (XSSFDataValidation) dvHelper2.createValidation(dvConstraint2, addressList2);
					validation2.setSuppressDropDownArrow(false);
					validation2.setShowErrorBox(true);
					validation2.setErrorStyle(DataValidation.ErrorStyle.STOP);
					validation2.createErrorBox("Error Committed !!", "Award 'A' - If 'ABSENT/Not Submitted' Maximum Marks 5 for Assignment !");
					sh.addValidationData(validation2);
	 
				    
				    
				    
				    XSSFDataValidationHelper dvHelper = new XSSFDataValidationHelper(sheet);
				    XSSFDataValidationConstraint dvConstraint = (XSSFDataValidationConstraint) dvHelper.createCustomConstraint(
				            "=OR(E4=\"A\",E4<=10)");
				    CellRangeAddressList addressList = new CellRangeAddressList(3, sh.getLastRowNum(), 4,4);
				    XSSFDataValidation validation = (XSSFDataValidation) dvHelper.createValidation(dvConstraint, addressList);
				    validation.setSuppressDropDownArrow(false);
				    validation.setShowErrorBox(true);
				    validation.setErrorStyle(DataValidation.ErrorStyle.STOP);
				    validation.createErrorBox("Error Committed !!", "Award 'A' - If 'ABSENT/Not Submitted' Maximum Marks 10 for Quiz !");
				    sh.addValidationData(validation);
			
				    
				    
				    XSSFDataValidationHelper dvHelper1 = new XSSFDataValidationHelper(sheet);
				    XSSFDataValidationConstraint dvConstraint1 = (XSSFDataValidationConstraint) dvHelper1.createCustomConstraint(
				            "=OR(F4=\"A\",F4<=5)");
				    CellRangeAddressList addressList1 = new CellRangeAddressList(3, sh.getLastRowNum(), 5,5);
				    XSSFDataValidation validation1 = (XSSFDataValidation) dvHelper1.createValidation(dvConstraint1, addressList1);
				    validation1.setSuppressDropDownArrow(false);
				    validation1.setShowErrorBox(true);
				    validation1.setErrorStyle(DataValidation.ErrorStyle.STOP);
				    validation1.createErrorBox("Error Committed !!", "Award 'A' - If 'ABSENT/Not Submitted' Maximum Marks 5 for Attendance !");
				    sh.addValidationData(validation1);
			 
				    
				    
//important end...!!!!!!!!!!
			//DataValidationConstraint VAA=createNumericConstraint(XSSFDataValidationConstraint.ValidationType.DECIMAL,
					//XSSFDataValidationConstraint.OperatorType.BETWEEN,String.valueOf(0),String.valueOf(10));
			
			//DataValidationConstraint VAAA=createNumericConstraint(XSSFDataValidationConstraint.ValidationType.FORMULA,
					//XSSFDataValidationConstraint.OperatorType.BETWEEN,"A","a");
			
			
			Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
			cell_3.setCellStyle(normalStyle5);
			cell_3.setCellValue("");
			
			
			
			
			Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
			cell_4.setCellStyle(normalStyle5);
			cell_4.setCellValue("");
			
			
			Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
			cell_5.setCellStyle(normalStyle5);
			cell_5.setCellValue("");
		

			
			rownum++;
	}	
	
		}catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
		
		}	
			}




/*	public DataValidationConstraint createNumericConstraint(int validationType, int operatorType, String formula1, String formula2) {
	       if ( validationType==ValidationType.DECIMAL) {
	            return createDecimalConstraint(operatorType, formula1, formula2);
	        } else if ( validationType==ValidationType.FORMULA) {
	            return createExplicitListConstraint(operatorType, formula1, formula2);
	        }
	        return null;
	    }
	   
	
	
	  private DataValidationConstraint createExplicitListConstraint(int operatorType, String formula1, String formula2) {
			XSSFDataValidationHelper dvHelper = new XSSFDataValidationHelper(sheet);
			formula1="A";
			formula2="a";
			XSSFDataValidationConstraint dvConstraint = (XSSFDataValidationConstraint)dvHelper.createExplicitListConstraint(new String[] {formula1,formula2});
			CellRangeAddressList addressList = new CellRangeAddressList(3, sh.getLastRowNum(), 4,4 );
			XSSFDataValidation validation= (XSSFDataValidation)dvHelper.createValidation(dvConstraint, addressList);
			validation.setSuppressDropDownArrow(false);
			validation.setShowErrorBox(true);
			validation.setErrorStyle(DataValidation.ErrorStyle.INFO);
			validation.createErrorBox("Error_Message", "if Student is ABSENT please award A");
			System.out.println("MYINDIAKarnataka"+validation.prettyPrint().toString());
			sh.addValidationData(validation);	
			return null;
	}




	private DataValidationConstraint createDecimalConstraint(int operatorType, String formula1, String formula2) {
		XSSFDataValidationHelper dvHelper1 = new XSSFDataValidationHelper(sheet);
		XSSFDataValidationConstraint dvConstraint1 = (XSSFDataValidationConstraint)dvHelper1.createDecimalConstraint(operatorType,formula1,formula2);
		CellRangeAddressList addressList1 = new CellRangeAddressList(3, sh.getLastRowNum(), 4,4 );
		XSSFDataValidation validation1 = (XSSFDataValidation)dvHelper1.createValidation(dvConstraint1, addressList1);
		double d =Double.parseDouble(validation1.getValidationConstraint().getFormula2());
		System.out.println("dddddddddddddddd"+d);
		validation1.setSuppressDropDownArrow(false);
		validation1.setShowErrorBox(true);
		validation1.setErrorStyle(DataValidation.ErrorStyle.STOP);
		validation1.createErrorBox("Error_Message", "please Award the marks between 0 and 10 or A");
		System.out.println("MYINDIA"+validation1.prettyPrint().toString());
		System.out.println("MYINDIAaaaaaaaaaaaa"+validation1.getValidationConstraint().getFormula2());
		sh.addValidationData(validation1);
		return createExplicitListConstraint(operatorType, formula1, formula2); 
		//sh.addValidationData(validation1);	
		//return null;
	}

*/


	@Override
	void filloverALLReportDataMtechMba(List<Object[]> dataList) {
		// TODO Auto-generated method stub
		 CellStyle normalStyle = getNormalStyle();   
	      SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
	        Date date  =  new Date();
	        
	        Row dataRow1 = sh.createRow(0);	
			sh.createRow(1);
			XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
			//ricString.applyFont((Font) normalStyle);
			dataRow1.createCell(0).setCellValue(ricString);
			
			XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());
			//ric_String.applyFont(font);(font11);					
			dataRow1.createCell(1).setCellValue(ric_String);
	        
	        int rownum = 3;
	      //  SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");    
	        long totamount = 0;
	        for (Object[] e : dataList) {
	            Row row = sh.createRow(rownum);
	            Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
	            cell_0.setCellStyle(normalStyle);
	            cell_0.setCellValue(e[2] == null ?"NA" :e[2].toString());
	        
	            Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
	            cell_1.setCellStyle(normalStyle);
	            cell_1.setCellValue(e[3] == null ?"NA" :e[3].toString());
	            
	            Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
	            cell_2.setCellStyle(normalStyle);
	            cell_2.setCellValue(e[4] == null ?"NA" :e[4].toString());
	            
	            Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
	            cell_3.setCellStyle(normalStyle);
	            cell_3.setCellValue(e[0] == null ?"NA" :e[0].toString());
	            
	            Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
	            cell_4.setCellStyle(normalStyle);
	            cell_4.setCellValue(e[1] == null ?"NA" :e[1].toString());
	            
	            Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
	            cell_5.setCellStyle(normalStyle);
	            cell_5.setCellValue(e[5] == null ?"NA" :e[5].toString());
	            
	            Cell cell_6 = row.createCell(6, Cell.CELL_TYPE_STRING);
	            cell_6.setCellStyle(normalStyle);
	            cell_6.setCellValue(e[6] == null ?"NA" :e[6].toString());
	            
	            Cell cell_7 = row.createCell(7, Cell.CELL_TYPE_STRING);
	            cell_7.setCellStyle(normalStyle);
	            cell_7.setCellValue(e[7] == null ?"NA" :e[7].toString());
	            
	            Cell cell_8 = row.createCell(8, Cell.CELL_TYPE_STRING);
	            cell_8.setCellStyle(normalStyle);
	            cell_8.setCellValue(e[8] == null ?"NA" :e[8].toString());
	            
	            Cell cell_9 = row.createCell(9, Cell.CELL_TYPE_STRING);
	            cell_9.setCellStyle(normalStyle);
	            cell_9.setCellValue(e[9] == null ?"NA" :e[9].toString());
	            
				
				  Cell cell_10 = row.createCell(10, Cell.CELL_TYPE_STRING);
				  cell_10.setCellStyle(normalStyle);
				  cell_10.setCellValue(e[10] == null ?"NA" :e[10].toString());
				 
	            
				
				  Cell cell_11 = row.createCell(11, Cell.CELL_TYPE_STRING);
				  cell_11.setCellStyle(normalStyle); 
				  cell_11.setCellValue(e[11] == null ?"NA" :e[11].toString());
				  rownum++; 
			    
	}
	}




	@Override
	void fillMarksheetUploadStatus(List<Object[]> dataList) {
		CellStyle normalStyle = getNormalStyle();
		CellStyle normalStyle2 = getNormalStyle1();
		  SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
	        Date date  =  new Date();
	        
	        Row dataRow1 = sh.createRow(0);	
			sh.createRow(1);
			Font font = wb.createFont();
			XSSFFont font1 = (XSSFFont) font;
			XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
	
			Cell cel  =	dataRow1.createCell(0,Cell.CELL_TYPE_STRING);
			cel.setCellStyle(normalStyle2);
			cel.setCellValue(ricString);
			font1.setBold(true);
			
			XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());
			Cell cel1  =	dataRow1.createCell(1,Cell.CELL_TYPE_STRING);
			cel1.setCellStyle(normalStyle2);
			cel1.setCellValue(ric_String);
			font1.setBold(true);
		        int rownum = 3;    
		        for (Object[] e : dataList) {
		            Row row = sh.createRow(rownum);
		            Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
		            cell_0.setCellStyle(normalStyle);
		            cell_0.setCellValue(e[0] == null ?"NA" :e[0].toString());
		        
		            Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
		            cell_1.setCellStyle(normalStyle);
		            cell_1.setCellValue(e[1] == null ?"NA" :e[1].toString());
		            
		            Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
		            cell_2.setCellStyle(normalStyle);
		            cell_2.setCellValue(e[2] == null ?"NA" :e[2].toString());
		            
		            Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
		            cell_3.setCellStyle(normalStyle);
		            cell_3.setCellValue(e[3] == null ?"NA" :e[3].toString());
		            
		            Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
		            cell_4.setCellStyle(normalStyle);
		            cell_4.setCellValue(e[4] == null ?"NA" :e[4].toString());
		            
		            Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
		            cell_5.setCellStyle(normalStyle);
		            cell_5.setCellValue(e[5] == null ?"NA" :e[5].toString());
		            
		            Cell cell_6 = row.createCell(6, Cell.CELL_TYPE_STRING);
		            cell_6.setCellStyle(normalStyle);
		            cell_6.setCellValue(e[6] == null ?"NA" :e[6].toString());
		            
		            Cell cell_7 = row.createCell(7, Cell.CELL_TYPE_STRING);
		            cell_7.setCellStyle(normalStyle);
		            cell_7.setCellValue(e[7] == null ?"NA" :e[7].toString());
		            
		            Cell cell_8 = row.createCell(8, Cell.CELL_TYPE_STRING);
		            cell_8.setCellStyle(normalStyle);
		            cell_8.setCellValue(e[8] == null ?"NA" :e[8].toString());
		            
		            Cell cell_9 = row.createCell(9, Cell.CELL_TYPE_STRING);
		            cell_9.setCellStyle(normalStyle);
		            cell_9.setCellValue(e[9] == null ?"NA" :e[9].toString());
		            
					
					  Cell cell_10 = row.createCell(10, Cell.CELL_TYPE_STRING);
					  cell_10.setCellStyle(normalStyle);
					  cell_10.setCellValue(e[10] == null ?"NA" :e[10].toString());
					 
		            
					
					  Cell cell_11 = row.createCell(11, Cell.CELL_TYPE_STRING);
					  cell_11.setCellStyle(normalStyle); 
					  cell_11.setCellValue(e[11] == null ?"NA" :e[11].toString());
					  
					  Cell cell_12 = row.createCell(12, Cell.CELL_TYPE_STRING);
					  cell_12.setCellStyle(normalStyle); 
					  cell_12.setCellValue(e[12] == null ?"NA":e[12].toString());
					 
					  
					  
					  Cell cell_13 = row.createCell(13, Cell.CELL_TYPE_STRING);
					  cell_13.setCellStyle(normalStyle); 
					  cell_13.setCellValue(e[13] == null ?"NA":e[13].toString());
					 
					  Cell cell_14 = row.createCell(14, Cell.CELL_TYPE_STRING);
					  cell_14.setCellStyle(normalStyle); 
					  cell_14.setCellValue(e[14] == null ?"NA":e[14].toString());
					  
					  Cell cell_15 = row.createCell(15, Cell.CELL_TYPE_STRING);
					  cell_15.setCellStyle(normalStyle); 
					  cell_15.setCellValue(e[15] == null ?"NA":e[15].toString());
					  
					  Cell cell_16 = row.createCell(16, Cell.CELL_TYPE_STRING);
					  cell_16.setCellStyle(normalStyle); 
					  cell_16.setCellValue(e[16] == null ?"NA":e[16].toString());
					  
					  Cell cell_17 = row.createCell(17, Cell.CELL_TYPE_STRING);
					  cell_17.setCellStyle(normalStyle); 
					  cell_17.setCellValue(e[17] == null ?"NA":e[17].toString());
					  
					  
					  Cell cell_18 = row.createCell(18, Cell.CELL_TYPE_STRING);
					  cell_18.setCellStyle(normalStyle); 
					  cell_18.setCellValue(e[18] == null ?"NA":e[18].toString());
		            
		           
		            rownum++;
		        }
		       
	}




	@Override
	void fillfillMarksheetUploadStatusMtechMba(List<Object[]> dataList) {
		CellStyle normalStyle = getNormalStyle();
		CellStyle normalStyle2 = getNormalStyle1();
		  SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
	        Date date  =  new Date();
	        
	        Row dataRow1 = sh.createRow(0);	
			sh.createRow(1);
			Font font = wb.createFont();
			XSSFFont font1 = (XSSFFont) font;
			XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
	
			Cell cel  =	dataRow1.createCell(0,Cell.CELL_TYPE_STRING);
			cel.setCellStyle(normalStyle2);
			cel.setCellValue(ricString);
			font1.setBold(true);
			
			XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());
			Cell cel1  =	dataRow1.createCell(1,Cell.CELL_TYPE_STRING);
			cel1.setCellStyle(normalStyle2);
			cel1.setCellValue(ric_String);
			font1.setBold(true);
		        int rownum = 3;    
		        for (Object[] e : dataList) {
		            Row row = sh.createRow(rownum);
		            Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
		            cell_0.setCellStyle(normalStyle);
		            cell_0.setCellValue(e[0] == null ?"NA" :e[0].toString());
		        
		            Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
		            cell_1.setCellStyle(normalStyle);
		            cell_1.setCellValue(e[1] == null ?"NA" :e[1].toString());
		            
		            Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
		            cell_2.setCellStyle(normalStyle);
		            cell_2.setCellValue(e[2] == null ?"NA" :e[2].toString());
		            
		            Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
		            cell_3.setCellStyle(normalStyle);
		            cell_3.setCellValue(e[3] == null ?"NA" :e[3].toString());
		            
		            Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
		            cell_4.setCellStyle(normalStyle);
		            cell_4.setCellValue(e[4] == null ?"NA" :e[4].toString());
		            
		            Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
		            cell_5.setCellStyle(normalStyle);
		            cell_5.setCellValue(e[5] == null ?"NA" :e[5].toString());
		            
		            Cell cell_6 = row.createCell(6, Cell.CELL_TYPE_STRING);
		            cell_6.setCellStyle(normalStyle);
		            cell_6.setCellValue(e[6] == null ?"NA" :e[6].toString());
		            
		            Cell cell_7 = row.createCell(7, Cell.CELL_TYPE_STRING);
		            cell_7.setCellStyle(normalStyle);
		            cell_7.setCellValue(e[7] == null ?"NA" :e[7].toString());
		            
		            Cell cell_8 = row.createCell(8, Cell.CELL_TYPE_STRING);
		            cell_8.setCellStyle(normalStyle);
		            cell_8.setCellValue(e[8] == null ?"NA" :e[8].toString());
		            
		            Cell cell_9 = row.createCell(9, Cell.CELL_TYPE_STRING);
		            cell_9.setCellStyle(normalStyle);
		            cell_9.setCellValue(e[9] == null ?"NA" :e[9].toString());
		            
					
					  Cell cell_10 = row.createCell(10, Cell.CELL_TYPE_STRING);
					  cell_10.setCellStyle(normalStyle);
					  cell_10.setCellValue(e[10] == null ?"NA" :e[10].toString());
					 
		            
					
					  Cell cell_11 = row.createCell(11, Cell.CELL_TYPE_STRING);
					  cell_11.setCellStyle(normalStyle); 
					  cell_11.setCellValue(e[11] == null ?"NA" :e[11].toString());	
					  
					  
					  
					  Cell cell_12 = row.createCell(12, Cell.CELL_TYPE_STRING);
					  cell_12.setCellStyle(normalStyle); 
					  cell_12.setCellValue(e[12] == null ?"NA":e[12].toString());
					 
					  
					  
					  Cell cell_13 = row.createCell(13, Cell.CELL_TYPE_STRING);
					  cell_13.setCellStyle(normalStyle); 
					  cell_13.setCellValue(e[13] == null ?"NA":e[13].toString());
					 
					  Cell cell_14 = row.createCell(14, Cell.CELL_TYPE_STRING);
					  cell_14.setCellStyle(normalStyle); 
					  cell_14.setCellValue(e[14] == null ?"NA":e[14].toString());
					    
			            rownum++;
	}
	}




	@Override
	void DocumentUploadStatus(List<Object[]> dataList) {
		// TODO Auto-generated method stub
		CellStyle normalStyle = getNormalStyle();
		CellStyle normalStyle2 = getNormalStyle1();
		  SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
	        Date date  =  new Date();
	        
	        Row dataRow1 = sh.createRow(0);	
			sh.createRow(1);
			Font font = wb.createFont();
			XSSFFont font1 = (XSSFFont) font;
			XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
	
			Cell cel  =	dataRow1.createCell(0,Cell.CELL_TYPE_STRING);
			cel.setCellStyle(normalStyle2);
			cel.setCellValue(ricString);
			font1.setBold(true);
			
			XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());
			Cell cel1  =	dataRow1.createCell(1,Cell.CELL_TYPE_STRING);
			cel1.setCellStyle(normalStyle2);
			cel1.setCellValue(ric_String);
			font1.setBold(true);
		        int rownum = 3;    
		        for (Object[] e : dataList) {
		            Row row = sh.createRow(rownum);
		            Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
		            cell_0.setCellStyle(normalStyle);
		            cell_0.setCellValue(e[0] == null ?"NA" :e[0].toString());
		        
		            Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
		            cell_1.setCellStyle(normalStyle);
		            cell_1.setCellValue(e[1] == null ?"NA" :e[1].toString());
		            
		            Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
		            cell_2.setCellStyle(normalStyle);
		            cell_2.setCellValue(e[2] == null ?"NA" :e[2].toString());
		            
		            Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
		            cell_3.setCellStyle(normalStyle);
		            cell_3.setCellValue(e[3] == null ?"NA" :e[3].toString());
		            
		            Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
		            cell_4.setCellStyle(normalStyle);
		            cell_4.setCellValue(e[4] == null ?"NA" :e[4].toString());
		            
		            Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
		            cell_5.setCellStyle(normalStyle);
		            cell_5.setCellValue(e[5] == null ?"NA" :e[5].toString());
		            
		            Cell cell_6 = row.createCell(6, Cell.CELL_TYPE_STRING);
		            cell_6.setCellStyle(normalStyle);
		            cell_6.setCellValue(e[6] == null ?"NA" :e[6].toString());
		            
		            Cell cell_7 = row.createCell(7, Cell.CELL_TYPE_STRING);
		            cell_7.setCellStyle(normalStyle);
		            cell_7.setCellValue(e[7] == null ?"NA" :e[7].toString());
		            
		            Cell cell_8 = row.createCell(8, Cell.CELL_TYPE_STRING);
		            cell_8.setCellStyle(normalStyle);
		            cell_8.setCellValue(e[8] == null ?"NA" :e[8].toString());
		            
		            Cell cell_9 = row.createCell(9, Cell.CELL_TYPE_STRING);
		            cell_9.setCellStyle(normalStyle);
		            cell_9.setCellValue(e[9] == null ?"NA" :e[9].toString());
		            
		            
		            Cell cell_10 = row.createCell(10, Cell.CELL_TYPE_STRING);
					  cell_10.setCellStyle(normalStyle); 
					  cell_10.setCellValue(e[10] == null ?"NA":e[10].toString());
					  
					  Cell cell_11 = row.createCell(11, Cell.CELL_TYPE_STRING);
					  cell_11.setCellStyle(normalStyle); 
					  cell_11.setCellValue(e[11] == null ?"NA" :e[11].toString());	
					  
					  Cell cell_12 = row.createCell(12, Cell.CELL_TYPE_STRING);
					  cell_12.setCellStyle(normalStyle); 
					  cell_12.setCellValue(e[12] == null ?"NA" :e[12].toString());	
					  
					  Cell cell_13 = row.createCell(13, Cell.CELL_TYPE_STRING);
					  cell_13.setCellStyle(normalStyle); 
					  cell_13.setCellValue(e[13] == null ?"NA":e[13].toString());
					  
					  
					  Cell cell_14 = row.createCell(14, Cell.CELL_TYPE_STRING);
					  cell_14.setCellStyle(normalStyle); 
					  cell_14.setCellValue(e[14] == null ?"NA":e[14].toString());
					  
					  Cell cell_15 = row.createCell(15, Cell.CELL_TYPE_STRING);
					  cell_15.setCellStyle(normalStyle); 
					  cell_15.setCellValue(e[15] == null ?"NA":e[15].toString());
					  
					  Cell cell_16 = row.createCell(16, Cell.CELL_TYPE_STRING);
					  cell_16.setCellStyle(normalStyle); 
					  cell_16.setCellValue(e[16] == null ?"NA":e[16].toString());
					  
					  Cell cell_17 = row.createCell(17, Cell.CELL_TYPE_STRING);
					  cell_17.setCellStyle(normalStyle); 
					  cell_17.setCellValue(e[17] == null ?"NA":e[17].toString());
					 
					  
					  Cell cell_18 = row.createCell(18, Cell.CELL_TYPE_STRING);
					  cell_18.setCellStyle(normalStyle); 
					  cell_18.setCellValue(e[18] == null ?"NA":e[18].toString());
					 
					  
					  Cell cell_19 = row.createCell(19, Cell.CELL_TYPE_STRING);
					  cell_19.setCellStyle(normalStyle); 
					  cell_19.setCellValue(e[19] == null ?"NA":e[19].toString());
		            
					  
					  Cell cell_20 = row.createCell(20, Cell.CELL_TYPE_STRING);
					  cell_20.setCellStyle(normalStyle); 
					  cell_20.setCellValue(e[20] == null ?"NA":e[20].toString());
					 
					  Cell cell_21 = row.createCell(21, Cell.CELL_TYPE_STRING);
					  cell_21.setCellStyle(normalStyle2); 
					  cell_21.setCellValue(e[21] == null ?"NA":e[21].toString());
					  
					  Cell cell_22 = row.createCell(22, Cell.CELL_TYPE_STRING);
					  cell_22.setCellStyle(normalStyle); 
					  cell_22.setCellValue(e[22] == null ?"NA":e[22].toString());
					  
					  
					  Cell cell_23 = row.createCell(23, Cell.CELL_TYPE_STRING);
					  cell_23.setCellStyle(normalStyle); 
					  cell_23.setCellValue(e[23] == null ?"NA":e[23].toString());
					  
			           rownum++;
		        }
					 
	}




	@Override
	void teacher(List<Object[]> list) {
		 CellStyle normalStyle = getNormalStyle(); 
		 CellStyle normalStyle1 = getNormalStyle2();
			CellStyle normalStyle2 = getNormalStyle1();
		 SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
	        Date date  =  new Date();
	        
	        Row dataRow1 = sh.createRow(0);	
			sh.createRow(1);
			Font font = wb.createFont();
			XSSFFont font1 = (XSSFFont) font;
			XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
	
			Cell cel  =	dataRow1.createCell(0,Cell.CELL_TYPE_STRING);
			cel.setCellStyle(normalStyle2);
			cel.setCellValue(ricString);
			font1.setBold(true);
			
			XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());
			Cell cel1  =	dataRow1.createCell(1,Cell.CELL_TYPE_STRING);
			cel1.setCellStyle(normalStyle2);
			cel1.setCellValue(ric_String);
			font1.setBold(true);
		 
	        int rownum = 3;  
	        for (Object[] e : list) {
	            Row row = sh.createRow(rownum);
	            Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
	            cell_0.setCellStyle(normalStyle);
	            cell_0.setCellValue(e[0] == null ?"NA" :e[0].toString());
	        
	            Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
	            cell_1.setCellStyle(normalStyle);
	            cell_1.setCellValue(e[1] == null ?"NA" :e[1].toString());
	            
	            Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
	            cell_2.setCellStyle(normalStyle);
	            cell_2.setCellValue(e[2] == null ?"NA" :e[2].toString());
	            
	            Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
	            cell_3.setCellStyle(normalStyle);
	            cell_3.setCellValue(e[3] == null ?"NA" :e[3].toString());
	            
	            Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
	            cell_4.setCellStyle(normalStyle);
	            cell_4.setCellValue(e[4] == null ?"NA" :e[4].toString());
	            
	            Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
	            cell_5.setCellStyle(normalStyle);
	            cell_5.setCellValue(e[5] == null ?"NA" :e[5].toString());
	            
	            Cell cell_6 = row.createCell(6, Cell.CELL_TYPE_STRING);
	            cell_6.setCellStyle(normalStyle);
	            cell_6.setCellValue(e[6] == null ?"NA" :e[6].toString());
	            
			
			  Cell cell_7 = row.createCell(7, Cell.CELL_TYPE_STRING);
			  cell_7.setCellStyle(normalStyle); 
			  cell_7.setCellValue(e[7] == null ?"NA":e[7].toString());
			  
			  Cell cell_8 = row.createCell(8, Cell.CELL_TYPE_STRING);
			  cell_8.setCellStyle(normalStyle);
			  cell_8.setCellValue(e[8] == null ?"NA":e[8].toString());
			  
			  Cell cell_9 = row.createCell(9, Cell.CELL_TYPE_STRING);
			  cell_9.setCellStyle(normalStyle); 
			  cell_9.setCellValue(e[9] == null ?"NA":e[9].toString());
			  
			  
			  Cell cell_10 = row.createCell(10, Cell.CELL_TYPE_STRING);
			  cell_10.setCellStyle(normalStyle); 
			  cell_10.setCellValue(e[10] == null ?"NA":e[10].toString());
			  
			  Cell cell_11 = row.createCell(11, Cell.CELL_TYPE_STRING);
			  cell_11.setCellStyle(normalStyle); 
			  cell_11.setCellValue(e[11] == null ?"NA" :e[11].toString());	
			  
			  Cell cell_12 = row.createCell(12, Cell.CELL_TYPE_STRING);
			  cell_12.setCellStyle(normalStyle); 
			  cell_12.setCellValue(e[12] == null ?"NA" :e[12].toString());	
			  
			  Cell cell_13 = row.createCell(13, Cell.CELL_TYPE_STRING);
			  cell_13.setCellStyle(normalStyle); 
			  cell_13.setCellValue(e[13] == null ?"NA":e[13].toString());
			  
			  
			  Cell cell_14 = row.createCell(14, Cell.CELL_TYPE_STRING);
			  cell_14.setCellStyle(normalStyle); 
			  cell_14.setCellValue(e[14] == null ?"NA":e[14].toString());
			  
			  Cell cell_15 = row.createCell(15, Cell.CELL_TYPE_STRING);
			  cell_15.setCellStyle(normalStyle); 
			  cell_15.setCellValue(e[15] == null ?"NA":e[15].toString());
			  
			  Cell cell_16 = row.createCell(16, Cell.CELL_TYPE_STRING);
			  cell_16.setCellStyle(normalStyle); 
			  cell_16.setCellValue(e[16] == null ?"NA":e[16].toString());
			  
			  Cell cell_17 = row.createCell(17, Cell.CELL_TYPE_STRING);
			  cell_17.setCellStyle(normalStyle); 
			  cell_17.setCellValue(e[17] == null ?"NA":e[17].toString());
			 
			  
			  Cell cell_18 = row.createCell(18, Cell.CELL_TYPE_STRING);
			  cell_18.setCellStyle(normalStyle); 
			  cell_18.setCellValue(e[18] == null ?"NA":e[18].toString());
			 
			  
			  Cell cell_19 = row.createCell(19, Cell.CELL_TYPE_STRING);
			  cell_19.setCellStyle(normalStyle); 
			  cell_19.setCellValue(e[19] == null ?"NA":e[19].toString());
			  
			  rownum++;
	        }
	}




	@Override
	void teachers(List<Object[]> list) {
		// TODO Auto-generated method stub
		 CellStyle normalStyle = getNormalStyle(); 
		 CellStyle normalStyle1 = getNormalStyle2();
			CellStyle normalStyle2 = getNormalStyle1();
		 SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
	        Date date  =  new Date();
	        
	        Row dataRow1 = sh.createRow(0);	
			sh.createRow(1);
			Font font = wb.createFont();
			XSSFFont font1 = (XSSFFont) font;
			XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
	
			Cell cel  =	dataRow1.createCell(0,Cell.CELL_TYPE_STRING);
			cel.setCellStyle(normalStyle2);
			cel.setCellValue(ricString);
			font1.setBold(true);
			
			XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());
			Cell cel1  =	dataRow1.createCell(1,Cell.CELL_TYPE_STRING);
			cel1.setCellStyle(normalStyle2);
			cel1.setCellValue(ric_String);
			font1.setBold(true);
		 
	        int rownum = 3;  
	        for (Object[] e : list) {
	            Row row = sh.createRow(rownum);
	            Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
	            cell_0.setCellStyle(normalStyle);
	            cell_0.setCellValue(e[0] == null ?"NA" :e[0].toString());
	        
	            Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
	            cell_1.setCellStyle(normalStyle);
	            cell_1.setCellValue(e[1] == null ?"NA" :e[1].toString());
	            
	            Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
	            cell_2.setCellStyle(normalStyle);
	            cell_2.setCellValue(e[2] == null ?"NA" :e[2].toString());
	            
	            Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
	            cell_3.setCellStyle(normalStyle);
	            cell_3.setCellValue(e[3] == null ?"NA" :e[3].toString());
	            
	            Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
	            cell_4.setCellStyle(normalStyle);
	            cell_4.setCellValue(e[4] == null ?"NA" :e[4].toString());
	            
	            Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
	            cell_5.setCellStyle(normalStyle);
	            cell_5.setCellValue(e[5] == null ?"NA" :e[5].toString());
	            
	            Cell cell_6 = row.createCell(6, Cell.CELL_TYPE_STRING);
	            cell_6.setCellStyle(normalStyle);
	            cell_6.setCellValue(e[6] == null ?"NA" :e[6].toString());
	            
			
			  Cell cell_7 = row.createCell(7, Cell.CELL_TYPE_STRING);
			  cell_7.setCellStyle(normalStyle); 
			  cell_7.setCellValue(e[7] == null ?"NA":e[7].toString());
			  
			  Cell cell_8 = row.createCell(8, Cell.CELL_TYPE_STRING);
			  cell_8.setCellStyle(normalStyle);
			  cell_8.setCellValue(e[8] == null ?"NA":e[8].toString());
			  
			  Cell cell_9 = row.createCell(9, Cell.CELL_TYPE_STRING);
			  cell_9.setCellStyle(normalStyle); 
			  cell_9.setCellValue(e[9] == null ?"NA":e[9].toString());
			  
			  
			  Cell cell_10 = row.createCell(10, Cell.CELL_TYPE_STRING);
			  cell_10.setCellStyle(normalStyle); 
			  cell_10.setCellValue(e[10] == null ?"NA":e[10].toString());
			  
			  Cell cell_11 = row.createCell(11, Cell.CELL_TYPE_STRING);
			  cell_11.setCellStyle(normalStyle); 
			  cell_11.setCellValue(e[11] == null ?"NA" :e[11].toString());	
			  
			  Cell cell_12 = row.createCell(12, Cell.CELL_TYPE_STRING);
			  cell_12.setCellStyle(normalStyle); 
			  cell_12.setCellValue(e[12] == null ?"NA" :e[12].toString());	
			  
			  Cell cell_13 = row.createCell(13, Cell.CELL_TYPE_STRING);
			  cell_13.setCellStyle(normalStyle); 
			  cell_13.setCellValue(e[13] == null ?"NA":e[13].toString());
			  
			  
			  Cell cell_14 = row.createCell(14, Cell.CELL_TYPE_STRING);
			  cell_14.setCellStyle(normalStyle); 
			  cell_14.setCellValue(e[14] == null ?"NA":e[14].toString());
			  
			  Cell cell_15 = row.createCell(15, Cell.CELL_TYPE_STRING);
			  cell_15.setCellStyle(normalStyle); 
			  cell_15.setCellValue(e[15] == null ?"NA":e[15].toString());
			  
			  Cell cell_16 = row.createCell(16, Cell.CELL_TYPE_STRING);
			  cell_16.setCellStyle(normalStyle); 
			  cell_16.setCellValue(e[16] == null ?"NA":e[16].toString());
			  
			  Cell cell_17 = row.createCell(17, Cell.CELL_TYPE_STRING);
			  cell_17.setCellStyle(normalStyle); 
			  cell_17.setCellValue(e[17] == null ?"NA":e[17].toString());
			 
			  
			  Cell cell_18 = row.createCell(18, Cell.CELL_TYPE_STRING);
			  cell_18.setCellStyle(normalStyle); 
			  cell_18.setCellValue(e[18] == null ?"NA":e[18].toString());
			 
			  
			  Cell cell_19 = row.createCell(19, Cell.CELL_TYPE_STRING);
			  cell_19.setCellStyle(normalStyle); 
			  cell_19.setCellValue(e[19] == null ?"NA":e[19].toString());
			  
			  rownum++;
	}
	}




	@Override
	void IndustrialVisitPracticalMarks(List<CoursesRegistration> list) {
	
		CellStyle normalStyle = getNormalStyle();
		CellStyle normalStyle2 = getNormalStyle1();
		CellStyle normalStyle6 = getNormalStyle6();
		CellStyle normalStyle5 = getNormalStyle5();
		  SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
	        Date date  =  new Date();
	        
	        Row dataRow1 = sh.createRow(0);	
			//sh.createRow(1);
			Font font = wb.createFont();
			XSSFFont font1 = (XSSFFont) font;
			XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
	
			Cell cel  =	dataRow1.createCell(0,Cell.CELL_TYPE_STRING);
			cel.setCellStyle(normalStyle2);
			cel.setCellValue(ricString);
			font1.setBold(true);
			
			XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());
			Cell cel1  =	dataRow1.createCell(1,Cell.CELL_TYPE_STRING);
			cel1.setCellStyle(normalStyle2);
			cel1.setCellValue(ric_String);
			font1.setBold(true);
			
				Row notice = sh.createRow(1);	
				XSSFRichTextString ricString1 = new XSSFRichTextString("Note:");
				Cell cell  =	notice.createCell(0,Cell.CELL_TYPE_STRING);
				cell.setCellStyle(normalStyle6);
				cell.setCellValue(ricString1);
			
				XSSFRichTextString ric_String23 = new XSSFRichTextString("Please award [ A ] if the student is ABSENT or Not Submitted Practical (Record/Learning) etc...!");
				Cell cell1  =	notice.createCell(1,Cell.CELL_TYPE_STRING);
				cell1.setCellStyle(normalStyle6);
				cell1.setCellValue(ric_String23);
				sh.addMergedRegion(CellRangeAddress.valueOf("B2:F2"));
        
        int rownum = 3;
		try {
			for (CoursesRegistration logs : list) {
				Row row = sh.createRow(rownum);
				Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
				cell_0.setCellStyle(normalStyle);
				cell_0.setCellValue(logs.getStudentadmission().getExRollNo());
				
				Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
				cell_1.setCellStyle(normalStyle);
				cell_1.setCellValue(logs.getCourses().getExCoursesCode());
				
				Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
				cell_2.setCellStyle(normalStyle);
				cell_2.setCellValue(1);
				
				Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
				cell_3.setCellStyle(normalStyle);
				cell_3.setCellValue(1);
				
				
				
				  XSSFDataValidationHelper dvHelper123 = new XSSFDataValidationHelper(sheet);
				    XSSFDataValidationConstraint dvConstraint123 = (XSSFDataValidationConstraint) dvHelper123.createCustomConstraint(
				            "=OR(E4=\"A\",E4<=50)");
				    CellRangeAddressList addressList123 = new CellRangeAddressList(3, sh.getLastRowNum(), 4,4);
				    XSSFDataValidation validation123 = (XSSFDataValidation) dvHelper123.createValidation(dvConstraint123, addressList123);
				    validation123.setSuppressDropDownArrow(false);
				    validation123.setShowErrorBox(true);
				    validation123.setErrorStyle(DataValidation.ErrorStyle.STOP);
				    validation123.createErrorBox("Error Committed !!", "Award 'A' - If 'ABSENT/Not Submitted' Maximum Marks 50 for Write-Up/Report!");
				    sh.addValidationData(validation123);
			
				    
				    
				    XSSFDataValidationHelper dvHelper1 = new XSSFDataValidationHelper(sheet);
				    XSSFDataValidationConstraint dvConstraint1 = (XSSFDataValidationConstraint) dvHelper1.createCustomConstraint(
				            "=OR(F4=\"A\",F4<=50)");
				    CellRangeAddressList addressList1 = new CellRangeAddressList(3, sh.getLastRowNum(), 5,5);
				    XSSFDataValidation validation1 = (XSSFDataValidation) dvHelper1.createValidation(dvConstraint1, addressList1);
				    validation1.setSuppressDropDownArrow(false);
				    validation1.setShowErrorBox(true);
				    validation1.setErrorStyle(DataValidation.ErrorStyle.STOP);
				    validation1.createErrorBox("Error Committed !!", "Award 'A' - If 'ABSENT/Not Submitted' Maximum Marks 50 for PresentationAndVivavoce!");
				    sh.addValidationData(validation1);
					
					
				    
				/*    XSSFDataValidationHelper dvHelper2 = new XSSFDataValidationHelper(sheet);
				    XSSFDataValidationConstraint dvConstraint2 = (XSSFDataValidationConstraint) dvHelper2.createCustomConstraint(
				            "=OR(G4=\"A\",G4<=40)");
				    CellRangeAddressList addressList2 = new CellRangeAddressList(3, sh.getLastRowNum(), 6,6);
				    XSSFDataValidation validation2 = (XSSFDataValidation) dvHelper2.createValidation(dvConstraint2, addressList2);
				    validation2.setSuppressDropDownArrow(false);
				    validation2.setShowErrorBox(true);
				    validation2.setErrorStyle(DataValidation.ErrorStyle.STOP);
				    validation2.createErrorBox("Error Committed !!", "Award 'A' - If 'ABSENT/Not Submitted' Maximum Marks 40 for Labexperiment !");
				    sh.addValidationData(validation2);
				    
				    
					
				    XSSFDataValidationHelper dvHelper3 = new XSSFDataValidationHelper(sheet);
				    XSSFDataValidationConstraint dvConstraint3 = (XSSFDataValidationConstraint) dvHelper3.createCustomConstraint(
				            "=OR(H4=\"A\",H4<=20)");
				    CellRangeAddressList addressList3 = new CellRangeAddressList(3, sh.getLastRowNum(), 7,7);
				    XSSFDataValidation validation3 = (XSSFDataValidation) dvHelper3.createValidation(dvConstraint3, addressList3);
				    validation3.setSuppressDropDownArrow(false);
				    validation3.setShowErrorBox(true);
				    validation3.setErrorStyle(DataValidation.ErrorStyle.STOP);
				    validation3.createErrorBox("Error Committed !!", "Award 'A' - If 'ABSENT/Not Submitted' Maximum Marks 20 for Viva !");
				    sh.addValidationData(validation3);*/
				
				Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
				cell_4.setCellStyle(normalStyle5);
				cell_4.setCellValue("");
				
				Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
				cell_5.setCellStyle(normalStyle5);
				cell_5.setCellValue("");
				
			
			rownum++;
	}	
	
		}catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
		
		}	
		
	}




	@Override
	void IndustrialTrainingOrInternshipPracticalMarks(List<CoursesRegistration> list) {
		CellStyle normalStyle = getNormalStyle();
		CellStyle normalStyle2 = getNormalStyle1();
		CellStyle normalStyle6 = getNormalStyle6();
		CellStyle normalStyle5 = getNormalStyle5();
		  SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
	        Date date  =  new Date();
	        
	        Row dataRow1 = sh.createRow(0);	
			//sh.createRow(1);
			Font font = wb.createFont();
			XSSFFont font1 = (XSSFFont) font;
			XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
	
			Cell cel  =	dataRow1.createCell(0,Cell.CELL_TYPE_STRING);
			cel.setCellStyle(normalStyle2);
			cel.setCellValue(ricString);
			font1.setBold(true);
			
			XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());
			Cell cel1  =	dataRow1.createCell(1,Cell.CELL_TYPE_STRING);
			cel1.setCellStyle(normalStyle2);
			cel1.setCellValue(ric_String);
			font1.setBold(true);
			
				Row notice = sh.createRow(1);	
				XSSFRichTextString ricString1 = new XSSFRichTextString("Note:");
				Cell cell  =	notice.createCell(0,Cell.CELL_TYPE_STRING);
				cell.setCellStyle(normalStyle6);
				cell.setCellValue(ricString1);
			
				XSSFRichTextString ric_String23 = new XSSFRichTextString("Please award [ A ] if the student is ABSENT or Not Submitted Practical (Record/Learning) etc...!");
				Cell cell1  =	notice.createCell(1,Cell.CELL_TYPE_STRING);
				cell1.setCellStyle(normalStyle6);
				cell1.setCellValue(ric_String23);
				sh.addMergedRegion(CellRangeAddress.valueOf("B2:F2"));
        
        int rownum = 3;
		try {
			for (CoursesRegistration logs : list) {
				Row row = sh.createRow(rownum);
				Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
				cell_0.setCellStyle(normalStyle);
				cell_0.setCellValue(logs.getStudentadmission().getExRollNo());
				
				Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
				cell_1.setCellStyle(normalStyle);
				cell_1.setCellValue(logs.getCourses().getExCoursesCode());
				
				Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
				cell_2.setCellStyle(normalStyle);
				cell_2.setCellValue(1);
				
				Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
				cell_3.setCellStyle(normalStyle);
				cell_3.setCellValue(1);
				
				
				
				  XSSFDataValidationHelper dvHelper123 = new XSSFDataValidationHelper(sheet);
				    XSSFDataValidationConstraint dvConstraint123 = (XSSFDataValidationConstraint) dvHelper123.createCustomConstraint(
				            "=OR(E4=\"A\",E4<=40)");
				    CellRangeAddressList addressList123 = new CellRangeAddressList(3, sh.getLastRowNum(), 4,4);
				    XSSFDataValidation validation123 = (XSSFDataValidation) dvHelper123.createValidation(dvConstraint123, addressList123);
				    validation123.setSuppressDropDownArrow(false);
				    validation123.setShowErrorBox(true);
				    validation123.setErrorStyle(DataValidation.ErrorStyle.STOP);
				    validation123.createErrorBox("Error Committed !!", "Award 'A' - If 'ABSENT/Not Submitted' Maximum Marks 40 for Write-Up/Report!");
				    sh.addValidationData(validation123);
			
				    
				    
				    XSSFDataValidationHelper dvHelper1 = new XSSFDataValidationHelper(sheet);
				    XSSFDataValidationConstraint dvConstraint1 = (XSSFDataValidationConstraint) dvHelper1.createCustomConstraint(
				            "=OR(F4=\"A\",F4<=30)");
				    CellRangeAddressList addressList1 = new CellRangeAddressList(3, sh.getLastRowNum(), 5,5);
				    XSSFDataValidation validation1 = (XSSFDataValidation) dvHelper1.createValidation(dvConstraint1, addressList1);
				    validation1.setSuppressDropDownArrow(false);
				    validation1.setShowErrorBox(true);
				    validation1.setErrorStyle(DataValidation.ErrorStyle.STOP);
				    validation1.createErrorBox("Error Committed !!", "Award 'A' - If 'ABSENT/Not Submitted' Maximum Marks 30 for Presentation!");
				    sh.addValidationData(validation1);
					
					
				    
				    XSSFDataValidationHelper dvHelper2 = new XSSFDataValidationHelper(sheet);
				    XSSFDataValidationConstraint dvConstraint2 = (XSSFDataValidationConstraint) dvHelper2.createCustomConstraint(
				            "=OR(G4=\"A\",G4<=30)");
				    CellRangeAddressList addressList2 = new CellRangeAddressList(3, sh.getLastRowNum(), 6,6);
				    XSSFDataValidation validation2 = (XSSFDataValidation) dvHelper2.createValidation(dvConstraint2, addressList2);
				    validation2.setSuppressDropDownArrow(false);
				    validation2.setShowErrorBox(true);
				    validation2.setErrorStyle(DataValidation.ErrorStyle.STOP);
				    validation2.createErrorBox("Error Committed !!", "Award 'A' - If 'ABSENT/Not Submitted' Maximum Marks 30 for VivaVoce !");
				    sh.addValidationData(validation2);
				    
				    
					
				    /*   XSSFDataValidationHelper dvHelper3 = new XSSFDataValidationHelper(sheet);
				    XSSFDataValidationConstraint dvConstraint3 = (XSSFDataValidationConstraint) dvHelper3.createCustomConstraint(
				            "=OR(H4=\"A\",H4<=20)");
				    CellRangeAddressList addressList3 = new CellRangeAddressList(3, sh.getLastRowNum(), 7,7);
				    XSSFDataValidation validation3 = (XSSFDataValidation) dvHelper3.createValidation(dvConstraint3, addressList3);
				    validation3.setSuppressDropDownArrow(false);
				    validation3.setShowErrorBox(true);
				    validation3.setErrorStyle(DataValidation.ErrorStyle.STOP);
				    validation3.createErrorBox("Error Committed !!", "Award 'A' - If 'ABSENT/Not Submitted' Maximum Marks 20 for Viva !");
				    sh.addValidationData(validation3);*/
				
				Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
				cell_4.setCellStyle(normalStyle5);
				cell_4.setCellValue("");
				
				Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
				cell_5.setCellStyle(normalStyle5);
				cell_5.setCellValue("");
				
				Cell cell_6 = row.createCell(6, Cell.CELL_TYPE_STRING);
				cell_6.setCellStyle(normalStyle5);
				cell_6.setCellValue("");
				
			
			rownum++;
	}	
	
		}catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
		
		}		
	}




	@Override
	void VillageAdoptionPracticalMarks(List<CoursesRegistration> list) {

		CellStyle normalStyle = getNormalStyle();
		CellStyle normalStyle2 = getNormalStyle1();
		CellStyle normalStyle6 = getNormalStyle6();
		CellStyle normalStyle5 = getNormalStyle5();
		  SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
	        Date date  =  new Date();
	        
	        Row dataRow1 = sh.createRow(0);	
			//sh.createRow(1);
			Font font = wb.createFont();
			XSSFFont font1 = (XSSFFont) font;
			XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
	
			Cell cel  =	dataRow1.createCell(0,Cell.CELL_TYPE_STRING);
			cel.setCellStyle(normalStyle2);
			cel.setCellValue(ricString);
			font1.setBold(true);
			
			XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());
			Cell cel1  =	dataRow1.createCell(1,Cell.CELL_TYPE_STRING);
			cel1.setCellStyle(normalStyle2);
			cel1.setCellValue(ric_String);
			font1.setBold(true);
			
				Row notice = sh.createRow(1);	
				XSSFRichTextString ricString1 = new XSSFRichTextString("Note:");
				Cell cell  =	notice.createCell(0,Cell.CELL_TYPE_STRING);
				cell.setCellStyle(normalStyle6);
				cell.setCellValue(ricString1);
			
				XSSFRichTextString ric_String23 = new XSSFRichTextString("Please award [ A ] if the student is ABSENT or Not Submitted Practical (Record/Learning) etc...!");
				Cell cell1  =	notice.createCell(1,Cell.CELL_TYPE_STRING);
				cell1.setCellStyle(normalStyle6);
				cell1.setCellValue(ric_String23);
				sh.addMergedRegion(CellRangeAddress.valueOf("B2:F2"));
        
        int rownum = 3;
		try {
			for (CoursesRegistration logs : list) {
				Row row = sh.createRow(rownum);
				Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
				cell_0.setCellStyle(normalStyle);
				cell_0.setCellValue(logs.getStudentadmission().getExRollNo());
				
				Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
				cell_1.setCellStyle(normalStyle);
				cell_1.setCellValue(logs.getCourses().getExCoursesCode());
				
				Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
				cell_2.setCellStyle(normalStyle);
				cell_2.setCellValue(1);
				
				Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
				cell_3.setCellStyle(normalStyle);
				cell_3.setCellValue(1);
				
				
				
				  XSSFDataValidationHelper dvHelper123 = new XSSFDataValidationHelper(sheet);
				    XSSFDataValidationConstraint dvConstraint123 = (XSSFDataValidationConstraint) dvHelper123.createCustomConstraint(
				            "=OR(E4=\"A\",E4<=60)");
				    CellRangeAddressList addressList123 = new CellRangeAddressList(3, sh.getLastRowNum(), 4,4);
				    XSSFDataValidation validation123 = (XSSFDataValidation) dvHelper123.createValidation(dvConstraint123, addressList123);
				    validation123.setSuppressDropDownArrow(false);
				    validation123.setShowErrorBox(true);
				    validation123.setErrorStyle(DataValidation.ErrorStyle.STOP);
				    validation123.createErrorBox("Error Committed !!", "Award 'A' - If 'ABSENT/Not Submitted' Maximum Marks 60 for MentorMarks!");
				    sh.addValidationData(validation123);
			
				    
				    
				    XSSFDataValidationHelper dvHelper1 = new XSSFDataValidationHelper(sheet);
				    XSSFDataValidationConstraint dvConstraint1 = (XSSFDataValidationConstraint) dvHelper1.createCustomConstraint(
				            "=OR(F4=\"A\",F4<=40)");
				    CellRangeAddressList addressList1 = new CellRangeAddressList(3, sh.getLastRowNum(), 5,5);
				    XSSFDataValidation validation1 = (XSSFDataValidation) dvHelper1.createValidation(dvConstraint1, addressList1);
				    validation1.setSuppressDropDownArrow(false);
				    validation1.setShowErrorBox(true);
				    validation1.setErrorStyle(DataValidation.ErrorStyle.STOP);
				    validation1.createErrorBox("Error Committed !!", "Award 'A' - If 'ABSENT/Not Submitted' Maximum Marks 40 for JuryMarks!");
				    sh.addValidationData(validation1);
					
					
				    
				/*    XSSFDataValidationHelper dvHelper2 = new XSSFDataValidationHelper(sheet);
				    XSSFDataValidationConstraint dvConstraint2 = (XSSFDataValidationConstraint) dvHelper2.createCustomConstraint(
				            "=OR(G4=\"A\",G4<=40)");
				    CellRangeAddressList addressList2 = new CellRangeAddressList(3, sh.getLastRowNum(), 6,6);
				    XSSFDataValidation validation2 = (XSSFDataValidation) dvHelper2.createValidation(dvConstraint2, addressList2);
				    validation2.setSuppressDropDownArrow(false);
				    validation2.setShowErrorBox(true);
				    validation2.setErrorStyle(DataValidation.ErrorStyle.STOP);
				    validation2.createErrorBox("Error Committed !!", "Award 'A' - If 'ABSENT/Not Submitted' Maximum Marks 40 for Labexperiment !");
				    sh.addValidationData(validation2);
				    
				    
					
				    XSSFDataValidationHelper dvHelper3 = new XSSFDataValidationHelper(sheet);
				    XSSFDataValidationConstraint dvConstraint3 = (XSSFDataValidationConstraint) dvHelper3.createCustomConstraint(
				            "=OR(H4=\"A\",H4<=20)");
				    CellRangeAddressList addressList3 = new CellRangeAddressList(3, sh.getLastRowNum(), 7,7);
				    XSSFDataValidation validation3 = (XSSFDataValidation) dvHelper3.createValidation(dvConstraint3, addressList3);
				    validation3.setSuppressDropDownArrow(false);
				    validation3.setShowErrorBox(true);
				    validation3.setErrorStyle(DataValidation.ErrorStyle.STOP);
				    validation3.createErrorBox("Error Committed !!", "Award 'A' - If 'ABSENT/Not Submitted' Maximum Marks 20 for Viva !");
				    sh.addValidationData(validation3);*/
				
				Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
				cell_4.setCellStyle(normalStyle5);
				cell_4.setCellValue("");
				
				Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
				cell_5.setCellStyle(normalStyle5);
				cell_5.setCellValue("");
				
			
			rownum++;
	}	
	
		}catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
		
		}	
	}




	@Override
	void ResearchProjectPracticalMarks(List<CoursesRegistration> list) {
		CellStyle normalStyle = getNormalStyle();
		CellStyle normalStyle2 = getNormalStyle1();
		CellStyle normalStyle6 = getNormalStyle6();
		CellStyle normalStyle5 = getNormalStyle5();
		  SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
	        Date date  =  new Date();
	        
	        Row dataRow1 = sh.createRow(0);	
			//sh.createRow(1);
			Font font = wb.createFont();
			XSSFFont font1 = (XSSFFont) font;
			XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
	
			Cell cel  =	dataRow1.createCell(0,Cell.CELL_TYPE_STRING);
			cel.setCellStyle(normalStyle2);
			cel.setCellValue(ricString);
			font1.setBold(true);
			
			XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());
			Cell cel1  =	dataRow1.createCell(1,Cell.CELL_TYPE_STRING);
			cel1.setCellStyle(normalStyle2);
			cel1.setCellValue(ric_String);
			font1.setBold(true);
			
				Row notice = sh.createRow(1);	
				XSSFRichTextString ricString1 = new XSSFRichTextString("Note:");
				Cell cell  =	notice.createCell(0,Cell.CELL_TYPE_STRING);
				cell.setCellStyle(normalStyle6);
				cell.setCellValue(ricString1);
			
				XSSFRichTextString ric_String23 = new XSSFRichTextString("Please award [ A ] if the student is ABSENT or Not Submitted Practical (Record/Learning) etc...!");
				Cell cell1  =	notice.createCell(1,Cell.CELL_TYPE_STRING);
				cell1.setCellStyle(normalStyle6);
				cell1.setCellValue(ric_String23);
				sh.addMergedRegion(CellRangeAddress.valueOf("B2:F2"));
        
        int rownum = 3;
		try {
			for (CoursesRegistration logs : list) {
				Row row = sh.createRow(rownum);
				Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
				cell_0.setCellStyle(normalStyle);
				cell_0.setCellValue(logs.getStudentadmission().getExRollNo());
				
				Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
				cell_1.setCellStyle(normalStyle);
				cell_1.setCellValue(logs.getCourses().getExCoursesCode());
				
				Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
				cell_2.setCellStyle(normalStyle);
				cell_2.setCellValue(1);
				
				Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
				cell_3.setCellStyle(normalStyle);
				cell_3.setCellValue(1);
				
				
				
				  XSSFDataValidationHelper dvHelper123 = new XSSFDataValidationHelper(sheet);
				    XSSFDataValidationConstraint dvConstraint123 = (XSSFDataValidationConstraint) dvHelper123.createCustomConstraint(
				            "=OR(E4=\"A\",E4<=40)");
				    CellRangeAddressList addressList123 = new CellRangeAddressList(3, sh.getLastRowNum(), 4,4);
				    XSSFDataValidation validation123 = (XSSFDataValidation) dvHelper123.createValidation(dvConstraint123, addressList123);
				    validation123.setSuppressDropDownArrow(false);
				    validation123.setShowErrorBox(true);
				    validation123.setErrorStyle(DataValidation.ErrorStyle.STOP);
				    validation123.createErrorBox("Error Committed !!", "Award 'A' - If 'ABSENT/Not Submitted' Maximum Marks 40 for Internal Assessment!");
				    sh.addValidationData(validation123);
			
				    
				    
				    XSSFDataValidationHelper dvHelper1 = new XSSFDataValidationHelper(sheet);
				    XSSFDataValidationConstraint dvConstraint1 = (XSSFDataValidationConstraint) dvHelper1.createCustomConstraint(
				            "=OR(F4=\"A\",F4<=60)");
				    CellRangeAddressList addressList1 = new CellRangeAddressList(3, sh.getLastRowNum(), 5,5);
				    XSSFDataValidation validation1 = (XSSFDataValidation) dvHelper1.createValidation(dvConstraint1, addressList1);
				    validation1.setSuppressDropDownArrow(false);
				    validation1.setShowErrorBox(true);
				    validation1.setErrorStyle(DataValidation.ErrorStyle.STOP);
				    validation1.createErrorBox("Error Committed !!", "Award 'A' - If 'ABSENT/Not Submitted' Maximum Marks 60 for External Assessment!");
				    sh.addValidationData(validation1);
					
					
				    
				/*    XSSFDataValidationHelper dvHelper2 = new XSSFDataValidationHelper(sheet);
				    XSSFDataValidationConstraint dvConstraint2 = (XSSFDataValidationConstraint) dvHelper2.createCustomConstraint(
				            "=OR(G4=\"A\",G4<=40)");
				    CellRangeAddressList addressList2 = new CellRangeAddressList(3, sh.getLastRowNum(), 6,6);
				    XSSFDataValidation validation2 = (XSSFDataValidation) dvHelper2.createValidation(dvConstraint2, addressList2);
				    validation2.setSuppressDropDownArrow(false);
				    validation2.setShowErrorBox(true);
				    validation2.setErrorStyle(DataValidation.ErrorStyle.STOP);
				    validation2.createErrorBox("Error Committed !!", "Award 'A' - If 'ABSENT/Not Submitted' Maximum Marks 40 for Labexperiment !");
				    sh.addValidationData(validation2);
				    
				    
					
				    XSSFDataValidationHelper dvHelper3 = new XSSFDataValidationHelper(sheet);
				    XSSFDataValidationConstraint dvConstraint3 = (XSSFDataValidationConstraint) dvHelper3.createCustomConstraint(
				            "=OR(H4=\"A\",H4<=20)");
				    CellRangeAddressList addressList3 = new CellRangeAddressList(3, sh.getLastRowNum(), 7,7);
				    XSSFDataValidation validation3 = (XSSFDataValidation) dvHelper3.createValidation(dvConstraint3, addressList3);
				    validation3.setSuppressDropDownArrow(false);
				    validation3.setShowErrorBox(true);
				    validation3.setErrorStyle(DataValidation.ErrorStyle.STOP);
				    validation3.createErrorBox("Error Committed !!", "Award 'A' - If 'ABSENT/Not Submitted' Maximum Marks 20 for Viva !");
				    sh.addValidationData(validation3);*/
				
				Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
				cell_4.setCellStyle(normalStyle5);
				cell_4.setCellValue("");
				
				Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
				cell_5.setCellStyle(normalStyle5);
				cell_5.setCellValue("");
				
			
			rownum++;
	}	
	
		}catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
		
		}	
		
	}




	@Override
	void ProjectPracticalMarks(List<CoursesRegistration> list) {
		CellStyle normalStyle = getNormalStyle();
		CellStyle normalStyle2 = getNormalStyle1();
		CellStyle normalStyle6 = getNormalStyle6();
		CellStyle normalStyle5 = getNormalStyle5();
		  SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
	        Date date  =  new Date();
	        
	        Row dataRow1 = sh.createRow(0);	
			//sh.createRow(1);
			Font font = wb.createFont();
			XSSFFont font1 = (XSSFFont) font;
			XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
	
			Cell cel  =	dataRow1.createCell(0,Cell.CELL_TYPE_STRING);
			cel.setCellStyle(normalStyle2);
			cel.setCellValue(ricString);
			font1.setBold(true);
			
			XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());
			Cell cel1  =	dataRow1.createCell(1,Cell.CELL_TYPE_STRING);
			cel1.setCellStyle(normalStyle2);
			cel1.setCellValue(ric_String);
			font1.setBold(true);
			
				Row notice = sh.createRow(1);	
				XSSFRichTextString ricString1 = new XSSFRichTextString("Note:");
				Cell cell  =	notice.createCell(0,Cell.CELL_TYPE_STRING);
				cell.setCellStyle(normalStyle6);
				cell.setCellValue(ricString1);
			
				XSSFRichTextString ric_String23 = new XSSFRichTextString("Please award [ A ] if the student is ABSENT or Not Submitted Practical (Record/Learning) etc...!");
				Cell cell1  =	notice.createCell(1,Cell.CELL_TYPE_STRING);
				cell1.setCellStyle(normalStyle6);
				cell1.setCellValue(ric_String23);
				sh.addMergedRegion(CellRangeAddress.valueOf("B2:F2"));
        
        int rownum = 3;
		try {
			for (CoursesRegistration logs : list) {
				Row row = sh.createRow(rownum);
				Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
				cell_0.setCellStyle(normalStyle);
				cell_0.setCellValue(logs.getStudentadmission().getExRollNo());
				
				Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
				cell_1.setCellStyle(normalStyle);
				cell_1.setCellValue(logs.getCourses().getExCoursesCode());
				
				Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
				cell_2.setCellStyle(normalStyle);
				cell_2.setCellValue(1);
				
				Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
				cell_3.setCellStyle(normalStyle);
				cell_3.setCellValue(1);
				
				
				
				  XSSFDataValidationHelper dvHelper123 = new XSSFDataValidationHelper(sheet);
				    XSSFDataValidationConstraint dvConstraint123 = (XSSFDataValidationConstraint) dvHelper123.createCustomConstraint(
				            "=OR(E4=\"A\",E4<=40)");
				    CellRangeAddressList addressList123 = new CellRangeAddressList(3, sh.getLastRowNum(), 4,4);
				    XSSFDataValidation validation123 = (XSSFDataValidation) dvHelper123.createValidation(dvConstraint123, addressList123);
				    validation123.setSuppressDropDownArrow(false);
				    validation123.setShowErrorBox(true);
				    validation123.setErrorStyle(DataValidation.ErrorStyle.STOP);
				    validation123.createErrorBox("Error Committed !!", "Award 'A' - If 'ABSENT/Not Submitted' Maximum Marks 40 for Write-Up/Report!");
				    sh.addValidationData(validation123);
			
				    
				    
				    XSSFDataValidationHelper dvHelper1 = new XSSFDataValidationHelper(sheet);
				    XSSFDataValidationConstraint dvConstraint1 = (XSSFDataValidationConstraint) dvHelper1.createCustomConstraint(
				            "=OR(F4=\"A\",F4<=30)");
				    CellRangeAddressList addressList1 = new CellRangeAddressList(3, sh.getLastRowNum(), 5,5);
				    XSSFDataValidation validation1 = (XSSFDataValidation) dvHelper1.createValidation(dvConstraint1, addressList1);
				    validation1.setSuppressDropDownArrow(false);
				    validation1.setShowErrorBox(true);
				    validation1.setErrorStyle(DataValidation.ErrorStyle.STOP);
				    validation1.createErrorBox("Error Committed !!", "Award 'A' - If 'ABSENT/Not Submitted' Maximum Marks 30 for Presentation!");
				    sh.addValidationData(validation1);
					
					
				    
				    XSSFDataValidationHelper dvHelper2 = new XSSFDataValidationHelper(sheet);
				    XSSFDataValidationConstraint dvConstraint2 = (XSSFDataValidationConstraint) dvHelper2.createCustomConstraint(
				            "=OR(G4=\"A\",G4<=30)");
				    CellRangeAddressList addressList2 = new CellRangeAddressList(3, sh.getLastRowNum(), 6,6);
				    XSSFDataValidation validation2 = (XSSFDataValidation) dvHelper2.createValidation(dvConstraint2, addressList2);
				    validation2.setSuppressDropDownArrow(false);
				    validation2.setShowErrorBox(true);
				    validation2.setErrorStyle(DataValidation.ErrorStyle.STOP);
				    validation2.createErrorBox("Error Committed !!", "Award 'A' - If 'ABSENT/Not Submitted' Maximum Marks 30 for VivaVoce !");
				    sh.addValidationData(validation2);
				    
				    
					
				    /*   XSSFDataValidationHelper dvHelper3 = new XSSFDataValidationHelper(sheet);
				    XSSFDataValidationConstraint dvConstraint3 = (XSSFDataValidationConstraint) dvHelper3.createCustomConstraint(
				            "=OR(H4=\"A\",H4<=20)");
				    CellRangeAddressList addressList3 = new CellRangeAddressList(3, sh.getLastRowNum(), 7,7);
				    XSSFDataValidation validation3 = (XSSFDataValidation) dvHelper3.createValidation(dvConstraint3, addressList3);
				    validation3.setSuppressDropDownArrow(false);
				    validation3.setShowErrorBox(true);
				    validation3.setErrorStyle(DataValidation.ErrorStyle.STOP);
				    validation3.createErrorBox("Error Committed !!", "Award 'A' - If 'ABSENT/Not Submitted' Maximum Marks 20 for Viva !");
				    sh.addValidationData(validation3);*/
				
				Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
				cell_4.setCellStyle(normalStyle5);
				cell_4.setCellValue("");
				
				Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
				cell_5.setCellStyle(normalStyle5);
				cell_5.setCellValue("");
				
				Cell cell_6 = row.createCell(6, Cell.CELL_TYPE_STRING);
				cell_6.setCellStyle(normalStyle5);
				cell_6.setCellValue("");
				
			
			rownum++;
	}	
	
		}catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
		
		}		
	}




	@Override
	void SeminarPracticalMarks(List<CoursesRegistration> list) {
		CellStyle normalStyle = getNormalStyle();
		CellStyle normalStyle2 = getNormalStyle1();
		CellStyle normalStyle6 = getNormalStyle6();
		CellStyle normalStyle5 = getNormalStyle5();
		  SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
	        Date date  =  new Date();
	        
	        Row dataRow1 = sh.createRow(0);	
			//sh.createRow(1);
			Font font = wb.createFont();
			XSSFFont font1 = (XSSFFont) font;
			XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
	
			Cell cel  =	dataRow1.createCell(0,Cell.CELL_TYPE_STRING);
			cel.setCellStyle(normalStyle2);
			cel.setCellValue(ricString);
			font1.setBold(true);
			
			XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());
			Cell cel1  =	dataRow1.createCell(1,Cell.CELL_TYPE_STRING);
			cel1.setCellStyle(normalStyle2);
			cel1.setCellValue(ric_String);
			font1.setBold(true);
			
				Row notice = sh.createRow(1);	
				XSSFRichTextString ricString1 = new XSSFRichTextString("Note:");
				Cell cell  =	notice.createCell(0,Cell.CELL_TYPE_STRING);
				cell.setCellStyle(normalStyle6);
				cell.setCellValue(ricString1);
			
				XSSFRichTextString ric_String23 = new XSSFRichTextString("Please award [ A ] if the student is ABSENT or Not Submitted Practical (Record/Learning) etc...!");
				Cell cell1  =	notice.createCell(1,Cell.CELL_TYPE_STRING);
				cell1.setCellStyle(normalStyle6);
				cell1.setCellValue(ric_String23);
				sh.addMergedRegion(CellRangeAddress.valueOf("B2:F2"));
        
        int rownum = 3;
		try {
			for (CoursesRegistration logs : list) {
				Row row = sh.createRow(rownum);
				Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
				cell_0.setCellStyle(normalStyle);
				cell_0.setCellValue(logs.getStudentadmission().getExRollNo());
				
				Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
				cell_1.setCellStyle(normalStyle);
				cell_1.setCellValue(logs.getCourses().getExCoursesCode());
				
				Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
				cell_2.setCellStyle(normalStyle);
				cell_2.setCellValue(1);
				
				Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
				cell_3.setCellStyle(normalStyle);
				cell_3.setCellValue(1);
				
				
				
				  XSSFDataValidationHelper dvHelper123 = new XSSFDataValidationHelper(sheet);
				    XSSFDataValidationConstraint dvConstraint123 = (XSSFDataValidationConstraint) dvHelper123.createCustomConstraint(
				            "=OR(E4=\"A\",E4<=30)");
				    CellRangeAddressList addressList123 = new CellRangeAddressList(3, sh.getLastRowNum(), 4,4);
				    XSSFDataValidation validation123 = (XSSFDataValidation) dvHelper123.createValidation(dvConstraint123, addressList123);
				    validation123.setSuppressDropDownArrow(false);
				    validation123.setShowErrorBox(true);
				    validation123.setErrorStyle(DataValidation.ErrorStyle.STOP);
				    validation123.createErrorBox("Error Committed !!", "Award 'A' - If 'ABSENT/Not Submitted' Maximum Marks 40 for Write-Up/Report!");
				    sh.addValidationData(validation123);
			
				    
				    
				    XSSFDataValidationHelper dvHelper1 = new XSSFDataValidationHelper(sheet);
				    XSSFDataValidationConstraint dvConstraint1 = (XSSFDataValidationConstraint) dvHelper1.createCustomConstraint(
				            "=OR(F4=\"A\",F4<=50)");
				    CellRangeAddressList addressList1 = new CellRangeAddressList(3, sh.getLastRowNum(), 5,5);
				    XSSFDataValidation validation1 = (XSSFDataValidation) dvHelper1.createValidation(dvConstraint1, addressList1);
				    validation1.setSuppressDropDownArrow(false);
				    validation1.setShowErrorBox(true);
				    validation1.setErrorStyle(DataValidation.ErrorStyle.STOP);
				    validation1.createErrorBox("Error Committed !!", "Award 'A' - If 'ABSENT/Not Submitted' Maximum Marks 30 for Presentation!");
				    sh.addValidationData(validation1);
					
					
				    
				    XSSFDataValidationHelper dvHelper2 = new XSSFDataValidationHelper(sheet);
				    XSSFDataValidationConstraint dvConstraint2 = (XSSFDataValidationConstraint) dvHelper2.createCustomConstraint(
				            "=OR(G4=\"A\",G4<=20)");
				    CellRangeAddressList addressList2 = new CellRangeAddressList(3, sh.getLastRowNum(), 6,6);
				    XSSFDataValidation validation2 = (XSSFDataValidation) dvHelper2.createValidation(dvConstraint2, addressList2);
				    validation2.setSuppressDropDownArrow(false);
				    validation2.setShowErrorBox(true);
				    validation2.setErrorStyle(DataValidation.ErrorStyle.STOP);
				    validation2.createErrorBox("Error Committed !!", "Award 'A' - If 'ABSENT/Not Submitted' Maximum Marks 30 for VivaVoce !");
				    sh.addValidationData(validation2);
				    
				    
				    /*   XSSFDataValidationHelper dvHelper3 = new XSSFDataValidationHelper(sheet);
				    XSSFDataValidationConstraint dvConstraint3 = (XSSFDataValidationConstraint) dvHelper3.createCustomConstraint(
				            "=OR(H4=\"A\",H4<=20)");
				    CellRangeAddressList addressList3 = new CellRangeAddressList(3, sh.getLastRowNum(), 7,7);
				    XSSFDataValidation validation3 = (XSSFDataValidation) dvHelper3.createValidation(dvConstraint3, addressList3);
				    validation3.setSuppressDropDownArrow(false);
				    validation3.setShowErrorBox(true);
				    validation3.setErrorStyle(DataValidation.ErrorStyle.STOP);
				    validation3.createErrorBox("Error Committed !!", "Award 'A' - If 'ABSENT/Not Submitted' Maximum Marks 20 for Viva !");
				    sh.addValidationData(validation3);*/
				
				Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
				cell_4.setCellStyle(normalStyle5);
				cell_4.setCellValue("");
				
				Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
				cell_5.setCellStyle(normalStyle5);
				cell_5.setCellValue("");
				
				Cell cell_6 = row.createCell(6, Cell.CELL_TYPE_STRING);
				cell_6.setCellStyle(normalStyle5);
				cell_6.setCellValue("");
				
			
			rownum++;
	}	
	
		}catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
		
		}	
	}




	@Override
	void Bankdetails(List<Object[]> dataList) {
		CellStyle normalStyle = getNormalStyle(); 
	      SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
	        Date date  =  new Date();
	        
	        Row dataRow1 = sh.createRow(0);	
			sh.createRow(1);
			XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
			//ricString.applyFont((Font) normalStyle);
			dataRow1.createCell(0).setCellValue(ricString);
			
			XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());
			//ric_String.applyFont(font);(font11);					
			dataRow1.createCell(1).setCellValue(ric_String);
	        
	        int rownum = 3;
	      //  SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");    
	        long totamount = 0;
	        for (Object[] e : dataList) {
	            Row row = sh.createRow(rownum);
	            Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
	            cell_0.setCellStyle(normalStyle);
	            cell_0.setCellValue(e[0] == null ?"NA" :e[0].toString());
	        
	            Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
	            cell_1.setCellStyle(normalStyle);
	            cell_1.setCellValue(e[1] == null ?"NA" :e[1].toString());
	            
	            Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
	            cell_2.setCellStyle(normalStyle);
	            cell_2.setCellValue(e[2] == null ?"NA" :e[2].toString());
	            
	            Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
	            cell_3.setCellStyle(normalStyle);
	            cell_3.setCellValue(e[3] == null ?"NA" :e[3].toString());
	            
	            Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
	            cell_4.setCellStyle(normalStyle);
	            cell_4.setCellValue(e[4] == null ?"NA" :e[4].toString());
	            
	            Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
	            cell_5.setCellStyle(normalStyle);
	            cell_5.setCellValue(e[5] == null ?"NA" :e[5].toString());
	            
	            Cell cell_6 = row.createCell(6, Cell.CELL_TYPE_STRING);
	            cell_6.setCellStyle(normalStyle);
	            cell_6.setCellValue(e[6] == null ?"NA" :e[6].toString());
	            
	            Cell cell_7 = row.createCell(7, Cell.CELL_TYPE_STRING);
	            cell_7.setCellStyle(normalStyle);
	            cell_7.setCellValue(e[7] == null ?"NA" :e[7].toString());
	            
	            Cell cell_8 = row.createCell(8, Cell.CELL_TYPE_STRING);
	            cell_8.setCellStyle(normalStyle);
	            cell_8.setCellValue(e[8] == null ?"NA" :e[8].toString());
	            
	            Cell cell_9 = row.createCell(9, Cell.CELL_TYPE_STRING);
	            cell_9.setCellStyle(normalStyle);
	            cell_9.setCellValue(e[9] == null ?"NA" :e[9].toString());
	            
				
				  Cell cell_10 = row.createCell(10, Cell.CELL_TYPE_STRING);
				  cell_10.setCellStyle(normalStyle);
				  cell_10.setCellValue(e[10] == null ?"NA" :e[10].toString());
				 
	            
				
				  Cell cell_11 = row.createCell(11, Cell.CELL_TYPE_STRING);
				  cell_11.setCellStyle(normalStyle); 
				  cell_11.setCellValue(e[11] == null ?"NA" :e[11].toString());
				  
				  Cell cell_12 = row.createCell(12, Cell.CELL_TYPE_STRING);
				  cell_12.setCellStyle(normalStyle); 
				  cell_12.setCellValue(e[12] == null ?"NA":e[12].toString());
				 
				  
				  
				  Cell cell_13 = row.createCell(13, Cell.CELL_TYPE_STRING);
				  cell_13.setCellStyle(normalStyle); 
				  cell_13.setCellValue(e[13] == null ?"NA":e[13].toString());
				 
				  Cell cell_14 = row.createCell(14, Cell.CELL_TYPE_STRING);
				  cell_14.setCellStyle(normalStyle); 
				  cell_14.setCellValue(e[14] == null ?"NA":e[14].toString());
				  
				  Cell cell_15 = row.createCell(15, Cell.CELL_TYPE_STRING);
				  cell_15.setCellStyle(normalStyle); 
				  cell_15.setCellValue(e[15] == null ?"NA":e[15].toString());
	            
				  
				  Cell cell_16 = row.createCell(16, Cell.CELL_TYPE_STRING);
				  cell_16.setCellStyle(normalStyle); 
				  cell_16.setCellValue(e[16] == null ?"NA":e[16].toString());
				  
				  
				  
				  Cell cell_17 = row.createCell(17, Cell.CELL_TYPE_STRING);
				  cell_17.setCellStyle(normalStyle); 
				  cell_17.setCellValue(e[17] == null ?"NA":e[17].toString());
				 
				  Cell cell_18 = row.createCell(18, Cell.CELL_TYPE_STRING);
				  cell_18.setCellStyle(normalStyle); 
				  cell_18.setCellValue(e[18] == null ?"NA":e[18].toString());
				  
				  Cell cell_19 = row.createCell(19, Cell.CELL_TYPE_STRING);
				  cell_19.setCellStyle(normalStyle); 
				  cell_19.setCellValue(e[19] == null ?"NA":e[19].toString());
				  
				  
				  
				  Cell cell_20 = row.createCell(20, Cell.CELL_TYPE_STRING);
				  cell_20.setCellStyle(normalStyle); 
				  cell_20.setCellValue(e[20] == null ?"NA":e[20].toString());
	           
				  
				  Cell cell_21 = row.createCell(21, Cell.CELL_TYPE_STRING);
				  cell_21.setCellStyle(normalStyle); 
				  cell_21.setCellValue(e[21] == null ?"NA":e[21].toString());
				  
				  Cell cell_22 = row.createCell(22, Cell.CELL_TYPE_STRING);
				  cell_22.setCellStyle(normalStyle); 
				  cell_22.setCellValue(e[22] == null ?"NA":e[22].toString());
				  
				  
				  
				  Cell cell_23 = row.createCell(23, Cell.CELL_TYPE_STRING);
				  cell_23.setCellStyle(normalStyle); 
				  cell_23.setCellValue(e[23] == null ?"NA":e[23].toString());
				 
				  Cell cell_24 = row.createCell(24, Cell.CELL_TYPE_STRING);
				  cell_24.setCellStyle(normalStyle); 
				  cell_24.setCellValue(e[24] == null ?"NA":e[24].toString());
				  
				  
				  Cell cell_25 = row.createCell(25, Cell.CELL_TYPE_STRING);
				  cell_25.setCellStyle(normalStyle); 
				  cell_25.setCellValue(e[25] == null ?"NA":e[25].toString());
				  
				  
				  
				  Cell cell_26 = row.createCell(26, Cell.CELL_TYPE_STRING);
				  cell_26.setCellStyle(normalStyle); 
				  cell_26.setCellValue(e[26] == null ?"NA":e[26].toString());
				 
				  Cell cell_27 = row.createCell(27, Cell.CELL_TYPE_STRING);
				  cell_27.setCellStyle(normalStyle); 
				  cell_27.setCellValue(e[27] == null ?"NA":e[27].toString());
				  
				  
				  
				  
	            rownum++;
	        }
	}




	@Override
	void InvigilatorDutydetails(List<InvigilatorDuty> dataList) {
	
		
		CellStyle normalStyle = getNormalStyle();
		CellStyle normalStyle2 = getNormalStyle1();
		CellStyle normalStyle6 = getNormalStyle6();
		CellStyle normalStyle5 = getNormalStyle5();
		  SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
	        Date date  =  new Date();
	        
	        Row dataRow1 = sh.createRow(0);	
			//sh.createRow(1);
			Font font = wb.createFont();
			XSSFFont font1 = (XSSFFont) font;
			XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
	
			Cell cel  =	dataRow1.createCell(0,Cell.CELL_TYPE_STRING);
			cel.setCellStyle(normalStyle2);
			cel.setCellValue(ricString);
			font1.setBold(true);
			
			XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());
			Cell cel1  =	dataRow1.createCell(1,Cell.CELL_TYPE_STRING);
			cel1.setCellStyle(normalStyle2);
			cel1.setCellValue(ric_String);
			font1.setBold(true);
			
		
        
        int rownum = 3;
		try {
			for (InvigilatorDuty logs : dataList) {
			Row row = sh.createRow(rownum);
			Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
			cell_0.setCellStyle(normalStyle);
			cell_0.setCellValue(logs.getRoom().getExName());
			
			Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
			cell_1.setCellStyle(normalStyle);
			cell_1.setCellValue(logs.getExStartDate().toString());
			
			Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
			cell_2.setCellStyle(normalStyle);
			cell_2.setCellValue(logs.getNoOfStudent());
			
			
			Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
			cell_3.setCellStyle(normalStyle5);
			cell_3.setCellValue(logs.getInvigilator1().getExName());
			
			Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
			cell_4.setCellStyle(normalStyle5);
			cell_4.setCellValue(logs.getInvigilator2().getExName());
			
			Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
			cell_5.setCellStyle(normalStyle5);
			cell_5.setCellValue(logs.getReserved().getExName());
			
			
			
			rownum++;
	}	
	
		}catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
		
		}	
		
	}
	
	@Override
	void fillCompletestudentAdmissionReport(List<Studentpersonal> student) {
		// TODO Auto-generated method stub		
		CellStyle normalStyle = getNormalStyle();
		  SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
	        Date date  =  new Date();
	        
	        Row dataRow1 = sh.createRow(0);	
			sh.createRow(1);
			XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
			//ricString.applyFont((Font) normalStyle);
			dataRow1.createCell(0).setCellValue(ricString);
			
			XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());
			//ric_String.applyFont(font);(font11);					
			dataRow1.createCell(1).setCellValue(ric_String);
	        
	        int rownum = 3;
		try {
			for (Studentpersonal logs : student) {
			Row row = sh.createRow(rownum);
			Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
			cell_0.setCellStyle(normalStyle);
			cell_0.setCellValue(logs.getStudentadmission().getColleges().getExIdentifier());

			Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
			cell_1.setCellStyle(normalStyle);
			cell_1.setCellValue(logs.getStudentadmission().getDegree().getExName());

			Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
			cell_2.setCellStyle(normalStyle);
			cell_2.setCellValue(logs.getStudentadmission().getBatch().getExIdentifier());
			
			
			Cell cell_3 = row.createCell(3, Cell.CELL_TYPE_STRING);
			cell_3.setCellStyle(normalStyle);
			cell_3.setCellValue(logs.getStudentadmission().getProgrammes().getExIdentifier());
			
			
			Cell cell_4 = row.createCell(4, Cell.CELL_TYPE_STRING);
			cell_4.setCellStyle(normalStyle);
			cell_4.setCellValue(logs.getStudentadmission().getDepartment().getExIdentifier());
			
			
			Cell cell_5 = row.createCell(5, Cell.CELL_TYPE_STRING);
			cell_5.setCellStyle(normalStyle);
			cell_5.setCellValue(logs.getStudentadmission().getStream().get(0).getExIdentifier());
			
			

			Cell cell_6 = row.createCell(6, Cell.CELL_TYPE_STRING);
			cell_6.setCellStyle(normalStyle);
			cell_6.setCellValue(logs.getStudentadmission().getAcademicYear().getExYear());

			Cell cell_7 = row.createCell(7, Cell.CELL_TYPE_STRING); 
			cell_7.setCellStyle(normalStyle);
			cell_7.setCellValue(logs.getStudentadmission().getAllocatedCategory() == null ?"NA" :logs.getStudentadmission().getAllocatedCategory().getExName());

			Cell cell_8 = row.createCell(8, Cell.CELL_TYPE_STRING);
			cell_8.setCellStyle(normalStyle);
			cell_8.setCellValue(logs.getStudentadmission().getCategory() == null ?"NA" :logs.getStudentadmission().getCategory().getExName());

			Cell cell_9 = row.createCell(9, Cell.CELL_TYPE_STRING);
			cell_9.setCellStyle(normalStyle);
			cell_9.setCellValue(logs.getStudentadmission().getExName());

			Cell cell_10 = row.createCell(10, Cell.CELL_TYPE_STRING);
			cell_10.setCellStyle(normalStyle);
			cell_10.setCellValue(logs.getStudentadmission().getExRollNo());
			
			Cell cell_11 = row.createCell(11, Cell.CELL_TYPE_STRING);
			cell_11.setCellStyle(normalStyle);
			cell_11.setCellValue(logs.getStudentadmission().getExEnrollementNo());

			Cell cell_12 = row.createCell(12, Cell.CELL_TYPE_STRING);
			cell_12.setCellStyle(normalStyle);
			cell_12.setCellValue(logs.getStudentadmission().getExStudyStatus() == null ?"NA" :logs.getStudentadmission().getExStudyStatus());

			Cell cell_13 = row.createCell(13, Cell.CELL_TYPE_STRING);
			cell_13.setCellStyle(normalStyle);
			cell_13.setCellValue(logs.getExEmailId().toLowerCase());

			Cell cell_14 = row.createCell(14, Cell.CELL_TYPE_STRING);
			cell_14.setCellStyle(normalStyle);
			cell_14.setCellValue(logs.getExContactDetails());
			
			
			Cell cell_15 = row.createCell(15, Cell.CELL_TYPE_STRING);
			cell_15.setCellStyle(normalStyle);
			cell_15.setCellValue(logs.getExDateOfBirth());
			
			
			
			Cell cell_24 = row.createCell(16, Cell.CELL_TYPE_STRING);
			cell_24.setCellStyle(normalStyle);
			cell_24.setCellValue(logs.getExGender());
			
			  Cell cell_16 = row.createCell(17, Cell.CELL_TYPE_STRING);
			  cell_16.setCellStyle(normalStyle);
			  cell_16.setCellValue(logs.getExFatherName().toUpperCase());
			 

			
			  Cell cell_17 = row.createCell(18, Cell.CELL_TYPE_STRING);
			  cell_17.setCellStyle(normalStyle);
			  cell_17.setCellValue(logs.getExMotherName().toUpperCase());
			 

			
			  Cell cell_18 = row.createCell(19, Cell.CELL_TYPE_STRING);
			  cell_18.setCellStyle(normalStyle); 
			  cell_18.setCellValue(logs.getExNativeState().toUpperCase());
			  
			  Cell cell_19 = row.createCell(20, Cell.CELL_TYPE_STRING);
			  cell_19.setCellStyle(normalStyle); 
			  cell_19.setCellValue(logs.getExReligion().toUpperCase());
			  
			  Cell cell_21 = row.createCell(21, Cell.CELL_TYPE_STRING);
			  cell_21.setCellStyle(normalStyle); 
			  cell_21.setCellValue(logs.getExAdhaarNumber());
			  
			  Cell cell_22 = row.createCell(22, Cell.CELL_TYPE_STRING);
			  cell_22.setCellStyle(normalStyle); 
			  cell_22.setCellValue(logs.getExParentContactDetails());
			  
			  Cell cell_23 = row.createCell(23, Cell.CELL_TYPE_STRING);
			  cell_23.setCellStyle(normalStyle); 
			  cell_23.setCellValue(logs.getExPermanentAddress());
			  
			 
			 
			  			
			 rownum++;
	    	}
		}
		catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
		
		}		
	}




	@Override
	void StudentDynamicdetails(List<Object[]> dataList , int length , String reportname) {
		CellStyle normalStyle = getNormalStyle(); 
	      SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
	        Date date  =  new Date();
	        
	        Row dataRow1 = sh.createRow(0);	
			sh.createRow(1);
			XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
			//ricString.applyFont((Font) normalStyle);
			dataRow1.createCell(0).setCellValue(ricString);
			
			XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());
			//ric_String.applyFont(font);(font11);					
			dataRow1.createCell(1).setCellValue(ric_String);
			
			
			XSSFRichTextString ric_String1 = new XSSFRichTextString(reportname);
			//ric_String.applyFont(font);(font11);					
			dataRow1.createCell(2).setCellValue(ric_String1);
	        
	        int rownum = 3;
	      //  SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");    
	        long totamount = 0;
	        for (Object[] e : dataList) {
	            Row row = sh.createRow(rownum);
//	            Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
//	            cell_0.setCellStyle(normalStyle);
//	            cell_0.setCellValue(e[0] == null ?"NA" :e[0].toString());
//	        
//	            Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
//	            cell_1.setCellStyle(normalStyle);
//	            cell_1.setCellValue(e[1] == null ?"NA" :e[1].toString());
//	            
//	            Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
//	            cell_2.setCellStyle(normalStyle);
//	            cell_2.setCellValue(e[2] == null ?"NA" :e[2].toString());
	           
	            	for(int i =0; i<length ; i++) {
	            		Cell cell = row.createCell(i, Cell.CELL_TYPE_STRING);
	    	            cell.setCellStyle(normalStyle);
	    	            cell.setCellValue(e[i] == null ?"NA" :e[i].toString());
	            		
	            	}
	            
				  
	            rownum++;
	        }
	}




	@Override
	void fillDataEligibleList(List<EligiBilityResponse> list  , List<String> approve) {
		// TODO Auto-generated method stub
		CellStyle normalStyle = getNormalStyle(); 
	      SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
	        Date date  =  new Date();
	        
	        Row dataRow1 = sh.createRow(0);	
			sh.createRow(1);
			XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
			//ricString.applyFont((Font) normalStyle);
			dataRow1.createCell(0).setCellValue(ricString);
			
			XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());
			//ric_String.applyFont(font);(font11);					
			dataRow1.createCell(1).setCellValue(ric_String);
			
			
			XSSFRichTextString ric_String1 = new XSSFRichTextString("Eligible List ");
			//ric_String.applyFont(font);(font11);					
			dataRow1.createCell(2).setCellValue(ric_String1);
	        
	        int rownum = 3;
	      //  SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");    
	        long totamount = 0;
	        
	       // System.out.println(list.eligibleclass.size());
	        
	        for(int i = 0 ; i<list.size() ; i++) {
	        	 Row row = sh.createRow(rownum);
		            Cell cell_0 = row.createCell(0, Cell.CELL_TYPE_STRING);
		            cell_0.setCellStyle(normalStyle);
		            cell_0.setCellValue(list.get(i).getRollnumber());
		        
		            Cell cell_1 = row.createCell(1, Cell.CELL_TYPE_STRING);
		            cell_1.setCellStyle(normalStyle);
		            cell_1.setCellValue(list.get(i).getEnrollment());
		            
		            Cell cell_2 = row.createCell(2, Cell.CELL_TYPE_STRING);
		            cell_2.setCellStyle(normalStyle);
		            cell_2.setCellValue(list.get(i).getStudentname());
		           
		            	for(int k =0; k<list.get(i).getApprovetye().size() ; k++) {
		            		Cell cell = row.createCell(3+k, Cell.CELL_TYPE_STRING);
		    	            cell.setCellStyle(normalStyle);
		    	            cell.setCellValue(list.get(i).getApprovetye().get(k));	            		
		            	}
		            
					  
		            rownum++;
	        	
	        }
	        
	      
	}



}