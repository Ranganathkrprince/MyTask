package com.niftem.app.implementation;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.Transactional;

import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.util.CellRangeAddress;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.CreationHelper;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFColor;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFRichTextString;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.json.JSONArray;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.niftem.app.dao.AcademicDao;
import com.niftem.app.dao.EligiBilityResponse;
import com.niftem.app.entity.AcademicYear;
import com.niftem.app.entity.AccessLogs;
import com.niftem.app.entity.AuditLog;
import com.niftem.app.entity.Batch;
import com.niftem.app.entity.ClassAttendance;
import com.niftem.app.entity.Colleges;
import com.niftem.app.entity.Courses;
import com.niftem.app.entity.CoursesRegistration;
import com.niftem.app.entity.CreditHours;
import com.niftem.app.entity.Degree;
import com.niftem.app.entity.Department;
import com.niftem.app.entity.Designation;
import com.niftem.app.entity.EvaluationDetails;
import com.niftem.app.entity.EvaluatorList;
import com.niftem.app.entity.ExamAnnouncement;
import com.niftem.app.entity.ExamBarcodes;
import com.niftem.app.entity.Hostel;
import com.niftem.app.entity.InvigilatorDuty;
import com.niftem.app.entity.MidTermMarks;
import com.niftem.app.entity.ProgrammeYear;
import com.niftem.app.entity.Programmes;
import com.niftem.app.entity.RegistrationType;
import com.niftem.app.entity.ReportRequestEntity;
import com.niftem.app.entity.Section;
import com.niftem.app.entity.SemesterRegistration;
import com.niftem.app.entity.Semster;
import com.niftem.app.entity.StaffEmpDetails;
import com.niftem.app.entity.Studentadmission;
import com.niftem.app.entity.Studentpersonal;
import com.niftem.app.model.BatchRequest;
import com.niftem.app.model.BookletStaffRequest;
import com.niftem.app.model.BookletUploadRequest;
import com.niftem.app.model.ClassTimeTableRequest;
import com.niftem.app.model.CommonRequest;
import com.niftem.app.model.CoursesRequest;
import com.niftem.app.model.CreateStaffRequest;
import com.niftem.app.model.CreditHoursRquest;
import com.niftem.app.model.CriteriaRequest;
import com.niftem.app.model.DesignationRequest;
import com.niftem.app.model.EvaluatorSelectionRequest;
import com.niftem.app.model.ExamAnnouncementRequest;
import com.niftem.app.model.ExportListRequest;
import com.niftem.app.model.HostelRequest;
import com.niftem.app.model.InternalMarksRequest;
import com.niftem.app.model.LogReportRequest;
import com.niftem.app.model.OrderTransactionReport;
import com.niftem.app.model.ReportRequest;
import com.niftem.app.model.SeatArrangementRequest;
import com.niftem.app.model.SemesterEligibility;
import com.niftem.app.model.StudentDynamicRequest;
import com.niftem.app.repository.InvigilatorDutyRepository;
import com.niftem.app.repository.ReportRequestEntityRepository;
import com.niftem.app.repository.StudentBankDetailsRepository;
import com.niftem.app.service.ExcellService;
import com.niftem.app.util.AutoManager;
import com.niftem.app.validation.ReportsValidation;

@Service
@Transactional

public class ExcelImpl extends AutoManager implements ExcellService {

	private static Logger logger = LoggerFactory.getLogger("excel-log");
	@PersistenceContext
	private EntityManager entityManager;
	 protected SXSSFWorkbook wb;
	@Autowired
	private ReportsValidation validation;

	@Autowired
	AcademicDao acdemicDao;

	@Autowired
	private InvigilatorDutyRepository invigilatorduty;
	
	@Autowired
	private ReportRequestEntityRepository reportrequest;
	
	
	@Autowired
	private StudentBankDetailsRepository studentBankDetailsRepository;
	/*
	 * @Override public List<TeacherCourseMapping>
	 * validateTeacherCourseMappingReport(ReportRequest request) { // TODO
	 * Auto-generated method stub List<TeacherCourseMapping> list = new
	 * ArrayList<>(); try {
	 * 
	 * list = super.teacherCourseMapping
	 * .findByExIsDeleteAndExIsActiveAndProgrammesIdInAndSemsterIdInAndDegreeIdInAndCollegesIdInAndAcademicYearIdInAndProgrammeYearIdIn
	 * (false, true, request.getProgrammes(), request.getSemester(),
	 * request.getDegree(), request.getColleges(), request.getAcademicYear(),
	 * request.getProgrammeYear());
	 * 
	 * //
	 * list=super.teacherCourseMapping.getteachermappeddeatils(request.getProgrammes
	 * (), request.getSemester(), // request.getDegree(), request.getColleges(),
	 * request.getAcademicYear(),request.getProgrammeYear());
	 * 
	 * } catch (Exception e) { // TODO: handle exception e.printStackTrace();
	 * logger.error("Exception occured" + e); StringWriter errors = new
	 * StringWriter(); e.printStackTrace(new PrintWriter(errors));
	 * logger.error(errors.toString()); return list; } return list;
	 * 
	 * }
	 */

	@Override
	public List<SemesterRegistration> validationapprovalReport(ReportRequest request) {
		// TODO Auto-generated method stub
		List<SemesterRegistration> list = new ArrayList<>();
		try {
			list = super.semesterRegistration
					.findByExIsDeleteAndExIsActiveAndProgrammesIdInAndCollegesIdInAndDegreeIdInAndAcademicYearIdInAndSemesterIdInAndDepartmentIdInAndProgrammeYearIdInOrderByStudentadmissionIdAsc(
							false, true, request.getProgrammes(), request.getColleges(), request.getDegree(),
							request.getAcademicYear(), request.getSemester(), request.getDepartment(),
							request.getProgrammeYear());
			System.out.println("size of the list     "+ list.size());
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			return list;
		}

		return list;
	}

	@Override
	public List<Courses> validateCoursesReport(CoursesRequest request) {
		// TODO Auto-generated method stub
		List<Courses> list = new ArrayList<>();
		try {

			list = super.courses
					.findByCollegesIdAndDegreeIdAndProgrammesIdAndAcademicYearIdAndSemesterIdAndProgrammeYearIdAndExIsActiveAndExIsDelete(
							request.getColleges(), request.getDegree(), request.getProgrammes(),
							request.getAcademicYear(), request.getSemester(), request.getProgrammeYear(),true,false);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			return list;
		}
		return list;
	}

	@Override
	public List<AuditLog> validateAuditLogReport(LogReportRequest request) {
		// TODO Auto-generated method stub

		List<AuditLog> list = new ArrayList<>();
		try {
			DateFormat sdf = new SimpleDateFormat("dd/MM/yyy hh:mm:ss");

			if ((request.getStartDate() != null && !request.getStartDate().trim().equals(""))
					&& (request.getEndDate() != null && !request.getEndDate().trim().equals(""))) {
				Calendar c = Calendar.getInstance();

				Date Sdate = sdf.parse(request.getStartDate() + " 00:00:00");
				Date edate = sdf.parse(request.getEndDate() + " 00:00:00");
				c.setTime(Sdate);
				c.setTime(edate);
System.out.println(">>>>>>."+Sdate);
				list = (List<AuditLog>) super.auditLogRepository.findByCreatedate(Sdate, edate);
				System.out.println(">"+list);
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			return list;
		}
		return null;
	}

	public static ByteArrayInputStream auditLogReport(List<AuditLog> request) {

		/*
		 * System.out.println(
		 * "*****ByteArrayInputStream teacherReportToExcel(List<Object[]> request)*****"
		 * + request.size());
		 */
		System.out.println("Welcome To Excel*****************");
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		try {
			Workbook workbook = new XSSFWorkbook();
			int rowIndex = 0;
			int index = 0;
			Sheet sheet = workbook.createSheet("AuditLogReport");
			rowIndex = 0;

			CellStyle style = workbook.createCellStyle();
			style.setFillBackgroundColor(XSSFFont.COLOR_NORMAL);
			System.out.println("sheet*****************" + sheet);
			Font font = workbook.createFont();
			XSSFFont font1 = (XSSFFont) font;
			font1.setFontName(font1.DEFAULT_FONT_NAME.toString());
			font1.setFontHeightInPoints((short) 14);
			font1.setBold(true);

			XSSFColor color = new XSSFColor(new java.awt.Color(66, 97, 80));
			font1.setColor(color);

			CellStyle style1 = workbook.createCellStyle();
			style1.setFont(font);

			XSSFRichTextString richString14 = new XSSFRichTextString("AuditLog Reports");
			richString14.applyFont(font1);

			Row titleRow1 = sheet.createRow(rowIndex++);
			Cell hssfCell14 = titleRow1.createCell(1);
			hssfCell14.setCellStyle(style1);
			hssfCell14.setCellValue(richString14);
			rowIndex++;

			sheet.setColumnWidth(1, 10000);

			Row titleRow = sheet.createRow(rowIndex++);

			Cell hssfCell = titleRow.createCell(0);
			hssfCell.setCellStyle(style1);
			XSSFRichTextString richString = new XSSFRichTextString("Staff Name");
			richString.applyFont(font);
			hssfCell.setCellValue(richString);
			sheet.setColumnWidth((short) (0), (short) 5000);

			Cell hssfCell1 = titleRow.createCell(1);
			hssfCell1.setCellStyle(style1);
			XSSFRichTextString richString1 = new XSSFRichTextString("Privilages Modules");
			richString1.applyFont(font);
			hssfCell1.setCellValue(richString1);
			sheet.setColumnWidth((short) (1), (short) 3000);

			Cell hssfCell2 = titleRow.createCell(2);
			hssfCell2.setCellStyle(style1);
			XSSFRichTextString richString2 = new XSSFRichTextString("Privilages Features");
			richString2.applyFont(font);
			hssfCell2.setCellValue(richString2);
			sheet.setColumnWidth((short) (2), (short) 6000);

			Cell hssfCell3 = titleRow.createCell(3);
			hssfCell3.setCellStyle(style1);
			XSSFRichTextString richString3 = new XSSFRichTextString("Created Date");
			richString3.applyFont(font);
			hssfCell3.setCellValue(richString3);
			sheet.setColumnWidth((short) (3), (short) 6000);

			Cell hssfCell4 = titleRow.createCell(4);
			hssfCell4.setCellStyle(style1);
			XSSFRichTextString richString4 = new XSSFRichTextString("Record Type");
			richString4.applyFont(font);
			hssfCell4.setCellValue(richString4);
			sheet.setColumnWidth((short) (4), (short) 5000);

			Cell hssfCell5 = titleRow.createCell(5);
			hssfCell5.setCellStyle(style1);
			XSSFRichTextString richString5 = new XSSFRichTextString(" Description");
			richString5.applyFont(font);
			hssfCell5.setCellValue(richString5);
			sheet.setColumnWidth((short) (5), (short) 5000);

			CreationHelper createHelper = workbook.getCreationHelper();

			Font headerFont = workbook.createFont();
			headerFont.setBold(true);
			headerFont.setColor(IndexedColors.BLACK.getIndex());

			CellStyle headerCellStyle = workbook.createCellStyle();
			headerCellStyle.setFont(headerFont);

			int rowIdx = 3;
			System.out.println(">>rowIdx>>>>>>" + rowIdx);
			for (AuditLog req : request) {
				System.out.println(">>req>>>>>>" + req);
				System.out.println(">>>>>request>>>>" + request);
				Row row = sheet.createRow(rowIdx++);
				row.createCell(0).setCellValue(req.getStaff().getExName() + "");
				row.createCell(1).setCellValue(req.getPrivilegesModules().getExPrivilegeModule() + "");
				row.createCell(2).setCellValue(req.getPrivilegesFeatures().getExFeaturename() + "");
				row.createCell(3).setCellValue(req.getExCreateDate() + "");
				row.createCell(4).setCellValue(req.getExRecordType() + "");
				row.createCell(5).setCellValue(req.getExDescription() + "");

			}

			// Write the output to a file
			workbook.write(out);
			System.out.println("***Excel out**" + out);
		} catch (Exception e) {
			e.printStackTrace();
		}

		return new ByteArrayInputStream(out.toByteArray());
	}

	@Override
	public List<StaffEmpDetails> validateStaffReport(CreateStaffRequest request) {
		// TODO Auto-generated method stub
		List<StaffEmpDetails> list = new ArrayList<>();
		System.out.println(">>>>>>>>>StaffEmpDetails" + list);
		try {
			list = super.staffEmpDetails.findByStaffpersonalExIsDelete(false);
			System.out.println(">>>>>>>>>list" + list);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			return list;
		}
		return list;
	}

	public static ByteArrayInputStream staffReport(List<StaffEmpDetails> request) {

		System.out.println(
				"*****ByteArrayInputStream teacherReportToExcel(List<Object[]> request)*****" + request.size());
		System.out.println("Welcome To Excel*****************");
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		try {
			Workbook workbook = new XSSFWorkbook();
			int rowIndex = 0;
			int index = 0;
			Sheet sheet = workbook.createSheet("Staff Details Report");
			rowIndex = 0;

			CellStyle style = workbook.createCellStyle();
			style.setFillBackgroundColor(XSSFFont.COLOR_NORMAL);

			Font font = workbook.createFont();
			XSSFFont font1 = (XSSFFont) font;
			font1.setFontName(font1.DEFAULT_FONT_NAME.toString());
			font1.setFontHeightInPoints((short) 14);
			font1.setBold(true);

			XSSFColor color = new XSSFColor(new java.awt.Color(66, 97, 80));
			font1.setColor(color);

			CellStyle style1 = workbook.createCellStyle();
			style1.setFont(font);
			
			CellStyle style11 = workbook.createCellStyle();
			style11.setFont(font);
			style11.setAlignment(CellStyle.ALIGN_CENTER);
			style11.setBorderBottom(CellStyle.BORDER_THIN);
			style11.setBottomBorderColor(IndexedColors.BLACK.getIndex());
			style11.setBorderLeft(CellStyle.BORDER_THIN);
			style11.setLeftBorderColor(IndexedColors.BLACK.getIndex());
			style11.setBorderRight(CellStyle.BORDER_THIN);
			style11.setRightBorderColor(IndexedColors.BLACK.getIndex());
			style11.setBorderTop(CellStyle.BORDER_THIN);
			style11.setTopBorderColor(IndexedColors.BLACK.getIndex());
			style11.setFillBackgroundColor(IndexedColors.DARK_YELLOW.getIndex());
			style11.setFillForegroundColor(IndexedColors.YELLOW.getIndex());
			style11.setFillPattern(CellStyle.SOLID_FOREGROUND);
			
			
			CellStyle style2 = workbook.createCellStyle();
			style2.setAlignment(CellStyle.ALIGN_CENTER);
			style2.setBorderBottom(CellStyle.BORDER_THIN);
			style2.setBottomBorderColor(IndexedColors.BLACK.getIndex());
			style2.setBorderLeft(CellStyle.BORDER_THIN);
			style2.setLeftBorderColor(IndexedColors.BLACK.getIndex());
			style2.setBorderRight(CellStyle.BORDER_THIN);
			style2.setRightBorderColor(IndexedColors.BLACK.getIndex());
			style2.setBorderTop(CellStyle.BORDER_THIN);
			style2.setTopBorderColor(IndexedColors.BLACK.getIndex());

			XSSFRichTextString richString14 = new XSSFRichTextString("Staff Reports");
			richString14.applyFont(font1);

			Row titleRow1 = sheet.createRow(rowIndex++);
			Cell hssfCell14 = titleRow1.createCell(1);
			hssfCell14.setCellStyle(style11);
			hssfCell14.setCellValue(richString14);
			rowIndex++;

			sheet.setColumnWidth(1, 10000);

			Row titleRow = sheet.createRow(rowIndex++);

			Cell hssfCell = titleRow.createCell(0);
			hssfCell.setCellStyle(style11);
			XSSFRichTextString richString = new XSSFRichTextString("College Name");
			richString.applyFont(font);
			hssfCell.setCellValue(richString);
			sheet.setColumnWidth((short) (0), (short) 5000);

			Cell hssfCell1 = titleRow.createCell(1);
			hssfCell1.setCellStyle(style11);
			XSSFRichTextString richString1 = new XSSFRichTextString("Degree Name");
			richString1.applyFont(font);
			hssfCell1.setCellValue(richString1);
			sheet.setColumnWidth((short) (1), (short) 3000);

			Cell hssfCell2 = titleRow.createCell(2);
			hssfCell2.setCellStyle(style11);
			XSSFRichTextString richString2 = new XSSFRichTextString(" Programmes Name");
			richString2.applyFont(font);
			hssfCell2.setCellValue(richString2);
			sheet.setColumnWidth((short) (2), (short) 6000);

			Cell hssfCell3 = titleRow.createCell(3);
			hssfCell3.setCellStyle(style11);
			XSSFRichTextString richString3 = new XSSFRichTextString("Department Name");
			richString3.applyFont(font);
			hssfCell3.setCellValue(richString3);
			sheet.setColumnWidth((short) (3), (short) 6000);

			Cell hssfCell4 = titleRow.createCell(4);
			hssfCell4.setCellStyle(style11);
			XSSFRichTextString richString4 = new XSSFRichTextString("StaffType Name");
			richString4.applyFont(font);
			hssfCell4.setCellValue(richString4);
			sheet.setColumnWidth((short) (4), (short) 5000);

			Cell hssfCell5 = titleRow.createCell(5);
			hssfCell5.setCellStyle(style11);
			XSSFRichTextString richString5 = new XSSFRichTextString("Designation Name");
			richString5.applyFont(font);
			hssfCell5.setCellValue(richString5);
			sheet.setColumnWidth((short) (5), (short) 5000);

			Cell hssfCell6 = titleRow.createCell(6);
			hssfCell6.setCellStyle(style11);
			XSSFRichTextString richString6 = new XSSFRichTextString("Employee Id");
			richString6.applyFont(font);
			hssfCell6.setCellValue(richString6);
			sheet.setColumnWidth((short) (6), (short) 5000);

			Cell hssfCell7 = titleRow.createCell(7);
			hssfCell7.setCellStyle(style11);
			XSSFRichTextString richString7 = new XSSFRichTextString("Email Id");
			richString7.applyFont(font);
			hssfCell7.setCellValue(richString7);
			sheet.setColumnWidth((short) (7), (short) 5000);

			Cell hssfCell8 = titleRow.createCell(8);
			hssfCell8.setCellStyle(style11);
			XSSFRichTextString richString8 = new XSSFRichTextString("Contact Details");
			richString8.applyFont(font);
			hssfCell8.setCellValue(richString8);
			sheet.setColumnWidth((short) (8), (short) 5000);
			
			Cell hssfCell9 = titleRow.createCell(9);
			hssfCell9.setCellStyle(style11);
			XSSFRichTextString richString9 = new XSSFRichTextString("Name");
			richString9.applyFont(font);
			hssfCell9.setCellValue(richString9);
			sheet.setColumnWidth((short) (9), (short) 5000);
			
			Cell hssfCell10 = titleRow.createCell(10);
			hssfCell10.setCellStyle(style11);
			XSSFRichTextString richString10 = new XSSFRichTextString("Login Id");
			richString10.applyFont(font);
			hssfCell10.setCellValue(richString10);
			sheet.setColumnWidth((short) (10), (short) 5000);

			CreationHelper createHelper = workbook.getCreationHelper();

			Font headerFont = workbook.createFont();
			headerFont.setBold(true);
			headerFont.setColor(IndexedColors.BLACK.getIndex());

			CellStyle headerCellStyle = workbook.createCellStyle();
			headerCellStyle.setFont(headerFont);

			int rowIdx = 3;
			Set<Long> staffIds = new HashSet<>();

			for (StaffEmpDetails req : request) {
				if (staffIds.contains(req.getId())) {
					continue;
				}
				for (Designation objDesignation : req.getStaffpersonal().getDesignation()) {

					Row row = sheet.createRow(rowIdx++);
					Cell sta111 = row.createCell(0);
					sta111.setCellStyle(style2);
					sta111.setCellValue(req.getStaffpersonal().getColleges().getExName() + "");
					Cell sta112 = row.createCell(1);
					sta112.setCellStyle(style2);
					sta112.setCellValue(req.getStaffpersonal().getProgrammes().getExName() + "");
					Cell sta113 = row.createCell(2);
					sta113.setCellStyle(style2);
					sta113.setCellValue(req.getStaffpersonal().getDegree().getExName() + "");
					Cell sta114 = row.createCell(3);
					sta114.setCellStyle(style2);
					sta114.setCellValue(req.getStaffpersonal().getDepartment().getExIdentifier() + "");
					Cell sta115 = row.createCell(4);
					sta115.setCellStyle(style2);
					sta115.setCellValue(req.getStaffpersonal().getStafftype().getExName() + "");
					Cell sta116 = row.createCell(5);
					sta116.setCellStyle(style2);
					sta116.setCellValue(objDesignation.getExName() + "");
					Cell sta117 = row.createCell(6);
					sta117.setCellStyle(style2);
					sta117.setCellValue(req.getStaffpersonal().getExEmployeeId() + "");
					Cell sta118 = row.createCell(7);
					sta118.setCellStyle(style2);
					sta118.setCellValue(req.getStaffpersonal().getExEmail() + "");
					Cell sta119 = row.createCell(8);
					sta119.setCellStyle(style2);
					sta119.setCellValue(req.getStaffpersonal().getExContactDetails() + "");
					Cell sta120 = row.createCell(9);
					sta120.setCellStyle(style2);
					sta120.setCellValue(req.getStaffpersonal().getExName() + "");
					Cell sta121 = row.createCell(10);
					sta121.setCellStyle(style2);
					sta121.setCellValue(req.getStaffpersonal().getExLoginName() + "");
					staffIds.add(req.getId());
				}
			}
			// Write the output to a file
			workbook.write(out);
			System.out.println("***Excel out**" + out);
		} catch (Exception e) {
			e.printStackTrace();
		}

		return new ByteArrayInputStream(out.toByteArray());
	}

	@Override
	public List<Batch> validateBatchReport(BatchRequest request) {
		// TODO Auto-generated method stub
		List<Batch> list = new ArrayList<>();
		try {
			DateFormat sdf = new SimpleDateFormat("dd/MM/yyy hh:mm:ss");
			list = super.batch.findByExIsDelete(false);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			return list;
		}

		return list;
	}

	public static ByteArrayInputStream batchReport(List<Batch> request) {

		System.out.println(
				"*****ByteArrayInputStream teacherReportToExcel(List<Object[]> request)*****" + request.size());
		System.out.println("Welcome To Excel*****************");
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		try {
			Workbook workbook = new XSSFWorkbook();
			int rowIndex = 0;
			int index = 0;
			Sheet sheet = workbook.createSheet("Batch Details Report");
			rowIndex = 0;

			CellStyle style = workbook.createCellStyle();
			style.setFillBackgroundColor(XSSFFont.COLOR_NORMAL);

			Font font = workbook.createFont();
			XSSFFont font1 = (XSSFFont) font;
			font1.setFontName(font1.DEFAULT_FONT_NAME.toString());
			font1.setFontHeightInPoints((short) 14);
			font1.setBold(true);

			XSSFColor color = new XSSFColor(new java.awt.Color(66, 97, 80));
			font1.setColor(color);

			CellStyle style1 = workbook.createCellStyle();
			style1.setFont(font);

			XSSFRichTextString richString14 = new XSSFRichTextString("Batch Reports");
			richString14.applyFont(font1);

			Row titleRow1 = sheet.createRow(rowIndex++);
			Cell hssfCell14 = titleRow1.createCell(1);
			hssfCell14.setCellStyle(style1);
			hssfCell14.setCellValue(richString14);
			rowIndex++;

			sheet.setColumnWidth(1, 10000);

			Row titleRow = sheet.createRow(rowIndex++);

			Cell hssfCell = titleRow.createCell(0);
			hssfCell.setCellStyle(style1);
			XSSFRichTextString richString = new XSSFRichTextString("Batch Name");
			richString.applyFont(font);
			hssfCell.setCellValue(richString);
			sheet.setColumnWidth((short) (0), (short) 5000);

			Cell hssfCell1 = titleRow.createCell(1);
			hssfCell1.setCellStyle(style1);
			XSSFRichTextString richString1 = new XSSFRichTextString("Created Date");
			richString1.applyFont(font);
			hssfCell1.setCellValue(richString1);
			sheet.setColumnWidth((short) (1), (short) 3000);

			Cell hssfCell2 = titleRow.createCell(2);
			hssfCell2.setCellStyle(style1);
			XSSFRichTextString richString2 = new XSSFRichTextString("Updated Date");
			richString2.applyFont(font);
			hssfCell2.setCellValue(richString2);
			sheet.setColumnWidth((short) (2), (short) 6000);

			Cell hssfCell3 = titleRow.createCell(3);
			hssfCell3.setCellStyle(style1);
			XSSFRichTextString richString3 = new XSSFRichTextString("Description");
			richString3.applyFont(font);
			hssfCell3.setCellValue(richString3);
			sheet.setColumnWidth((short) (3), (short) 6000);

			Cell hssfCell4 = titleRow.createCell(4);
			hssfCell4.setCellStyle(style1);
			XSSFRichTextString richString4 = new XSSFRichTextString("Identifier");
			richString4.applyFont(font);
			hssfCell4.setCellValue(richString4);
			sheet.setColumnWidth((short) (4), (short) 5000);

			CreationHelper createHelper = workbook.getCreationHelper();

			Font headerFont = workbook.createFont();
			headerFont.setBold(true);
			headerFont.setColor(IndexedColors.BLACK.getIndex());

			CellStyle headerCellStyle = workbook.createCellStyle();
			headerCellStyle.setFont(headerFont);

			int rowIdx = 3;
			for (Batch req : request) {

				Row row = sheet.createRow(rowIdx++);
				row.createCell(0).setCellValue(req.getExName() + "");
				row.createCell(1).setCellValue(req.getExCreateDate() + "");
				row.createCell(2).setCellValue(req.getExUpdateDate() + "");
				row.createCell(3).setCellValue(req.getExDescription() + "");
				row.createCell(4).setCellValue(req.getExIdentifier() + "");

			}

			// Write the output to a file
			workbook.write(out);
			System.out.println("***Excel out**" + out);
		} catch (Exception e) {
			e.printStackTrace();
		}

		return new ByteArrayInputStream(out.toByteArray());
	}

	/*
	 * @Override public List<CreditHours>
	 * validateCreditHoursReport(CreditHoursRquest request) { // TODO Auto-generated
	 * method stub List<CreditHours> list = new ArrayList<>(); try { list =
	 * super.creditHours.findByExIsDelete(false); } catch (Exception e) { // TODO:
	 * handle exception e.printStackTrace(); logger.error("Exception occured" + e);
	 * StringWriter errors = new StringWriter(); e.printStackTrace(new
	 * PrintWriter(errors)); logger.error(errors.toString()); return list; } return
	 * list; }
	 * 
	 * public static ByteArrayInputStream creditHoursReport(List<CreditHours>
	 * request) {
	 * 
	 * System.out.println(
	 * "*****ByteArrayInputStream teacherReportToExcel(List<Object[]> request)*****"
	 * + request.size()); System.out.println("Welcome To Excel*****************");
	 * ByteArrayOutputStream out = new ByteArrayOutputStream(); try { Workbook
	 * workbook = new XSSFWorkbook(); int rowIndex = 0; int index = 0; Sheet sheet =
	 * workbook.createSheet("credit Hours Report"); rowIndex = 0;
	 * 
	 * 
	 * 
	 * CellStyle style = workbook.createCellStyle();
	 * style.setFillBackgroundColor(XSSFFont.COLOR_NORMAL);
	 * 
	 * Font font = workbook.createFont(); XSSFFont font1 = (XSSFFont) font;
	 * font1.setFontName(font1.DEFAULT_FONT_NAME.toString());
	 * font1.setFontHeightInPoints((short) 14); font1.setBold(true);
	 * 
	 * XSSFColor color = new XSSFColor(new java.awt.Color(66, 97, 80));
	 * font1.setColor(color);
	 * 
	 * CellStyle style1 = workbook.createCellStyle(); style1.setFont(font);
	 * 
	 * XSSFRichTextString richString14 = new
	 * XSSFRichTextString("Credit Hours Reports"); richString14.applyFont(font1);
	 * 
	 * Row titleRow1 = sheet.createRow(rowIndex++); Cell hssfCell14 =
	 * titleRow1.createCell(1); hssfCell14.setCellStyle(style1);
	 * hssfCell14.setCellValue(richString14); rowIndex++;
	 * 
	 * sheet.setColumnWidth(1, 10000);
	 * 
	 * Row titleRow = sheet.createRow(rowIndex++);
	 * 
	 * Cell hssfCell = titleRow.createCell(0); hssfCell.setCellStyle(style1);
	 * XSSFRichTextString richString = new XSSFRichTextString("Credit Name");
	 * richString.applyFont(font); hssfCell.setCellValue(richString);
	 * sheet.setColumnWidth((short) (0), (short) 5000);
	 * 
	 * Cell hssfCell1 = titleRow.createCell(1); hssfCell1.setCellStyle(style1);
	 * XSSFRichTextString richString1 = new XSSFRichTextString("Created Date");
	 * richString1.applyFont(font); hssfCell1.setCellValue(richString1);
	 * sheet.setColumnWidth((short) (1), (short) 3000);
	 * 
	 * Cell hssfCell2 = titleRow.createCell(2); hssfCell2.setCellStyle(style1);
	 * XSSFRichTextString richString2 = new XSSFRichTextString("Updated Date");
	 * richString2.applyFont(font); hssfCell2.setCellValue(richString2);
	 * sheet.setColumnWidth((short) (2), (short) 6000);
	 * 
	 * Cell hssfCell3 = titleRow.createCell(3); hssfCell3.setCellStyle(style1);
	 * XSSFRichTextString richString3 = new XSSFRichTextString("CreditHour Title");
	 * richString3.applyFont(font); hssfCell3.setCellValue(richString3);
	 * sheet.setColumnWidth((short) (3), (short) 6000);
	 * 
	 * Cell hssfCell4 = titleRow.createCell(4); hssfCell4.setCellStyle(style1);
	 * XSSFRichTextString richString4 = new
	 * XSSFRichTextString("CreditHour Lecture"); richString4.applyFont(font);
	 * hssfCell4.setCellValue(richString4); sheet.setColumnWidth((short) (4),
	 * (short) 5000);
	 * 
	 * Cell hssfCell5 = titleRow.createCell(5); hssfCell5.setCellStyle(style1);
	 * XSSFRichTextString richString5 = new
	 * XSSFRichTextString("CreditHour Practical"); richString5.applyFont(font);
	 * hssfCell5.setCellValue(richString5); sheet.setColumnWidth((short) (5),
	 * (short) 5000);
	 * 
	 * Cell hssfCell6 = titleRow.createCell(6); hssfCell6.setCellStyle(style1);
	 * XSSFRichTextString richString6 = new XSSFRichTextString("Total Marks ");
	 * richString6.applyFont(font); hssfCell6.setCellValue(richString5);
	 * sheet.setColumnWidth((short) (6), (short) 5000);
	 * 
	 * Cell hssfCell7 = titleRow.createCell(7); hssfCell7.setCellStyle(style1);
	 * XSSFRichTextString richString7 = new
	 * XSSFRichTextString("Passing GradePoints"); richString7.applyFont(font);
	 * hssfCell7.setCellValue(richString7); sheet.setColumnWidth((short) (7),
	 * (short) 5000);
	 * 
	 * Cell hssfCell8 = titleRow.createCell(8); hssfCell8.setCellStyle(style1);
	 * XSSFRichTextString richString8 = new XSSFRichTextString("External Marks");
	 * richString8.applyFont(font); hssfCell8.setCellValue(richString8);
	 * sheet.setColumnWidth((short) (8), (short) 5000);
	 * 
	 * Cell hssfCell9 = titleRow.createCell(9); hssfCell6.setCellStyle(style1);
	 * XSSFRichTextString richString9 = new
	 * XSSFRichTextString("External PassingMarks"); richString9.applyFont(font);
	 * hssfCell9.setCellValue(richString9); sheet.setColumnWidth((short) (9),
	 * (short) 5000);
	 * 
	 * Cell hssfCell10 = titleRow.createCell(10); hssfCell10.setCellStyle(style1);
	 * XSSFRichTextString richString10 = new XSSFRichTextString("NoOfTopics");
	 * richString10.applyFont(font); hssfCell10.setCellValue(richString10);
	 * sheet.setColumnWidth((short) (10), (short) 5000);
	 * 
	 * Cell hssfCell11 = titleRow.createCell(11); hssfCell11.setCellStyle(style1);
	 * XSSFRichTextString richString11 = new
	 * XSSFRichTextString("Total CreditHour "); richString11.applyFont(font);
	 * hssfCell11.setCellValue(richString11); sheet.setColumnWidth((short) (11),
	 * (short) 5000);
	 * 
	 * Cell hssfCell12 = titleRow.createCell(12); hssfCell12.setCellStyle(style1);
	 * XSSFRichTextString richString12 = new
	 * XSSFRichTextString("CreditHour Tutorials "); richString12.applyFont(font);
	 * hssfCell12.setCellValue(richString12); sheet.setColumnWidth((short) (12),
	 * (short) 5000);
	 * 
	 * CreationHelper createHelper = workbook.getCreationHelper();
	 * 
	 * Font headerFont = workbook.createFont(); headerFont.setBold(true);
	 * headerFont.setColor(IndexedColors.BLACK.getIndex());
	 * 
	 * CellStyle headerCellStyle = workbook.createCellStyle();
	 * headerCellStyle.setFont(headerFont);
	 * 
	 * int rowIdx = 3; for (CreditHours req : request) {
	 * 
	 * Row row = sheet.createRow(rowIdx++);
	 * row.createCell(0).setCellValue(req.getExName() + "");
	 * row.createCell(1).setCellValue(req.getExCreateDate() + "");
	 * row.createCell(2).setCellValue(req.getExUpdateDate() + "");
	 * row.createCell(3).setCellValue(req.getExCreditHourTitle() + "");
	 * row.createCell(4).setCellValue(req.getExCreditHourLecture() + "");
	 * row.createCell(5).setCellValue(req.getExCreditHourPractical() + "");
	 * row.createCell(6).setCellValue(req.getExTotalMarks() + "");
	 * row.createCell(7).setCellValue(req.getExPassingGradePoints() + "");
	 * row.createCell(8).setCellValue(req.getExExternalMarks() + "");
	 * row.createCell(9).setCellValue(req.getExExternalPassingMarks() + "");
	 * row.createCell(10).setCellValue(req.getExNoOfTopics() + "");
	 * row.createCell(11).setCellValue(req.getExTotalCreditHour() + "");
	 * row.createCell(12).setCellValue(req.getExCreditHourTutorials() + "");
	 * 
	 * }
	 * 
	 * // Write the output to a file workbook.write(out);
	 * System.out.println("***Excel out**" + out); } catch (Exception e) {
	 * e.printStackTrace(); }
	 * 
	 * return new ByteArrayInputStream(out.toByteArray()); }
	 */

	@Override
	public List<Hostel> validateHostelReport(HostelRequest request) {
		// TODO Auto-generated method stub
		List<Hostel> list = new ArrayList<>();
		try {
			list = super.hostel.findByExIsDelete(false);

		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			return list;
		}

		return list;
	}

	public static ByteArrayInputStream hostelReport(List<Hostel> request) {

		System.out.println(
				"*****ByteArrayInputStream teacherReportToExcel(List<Object[]> request)*****" + request.size());
		System.out.println("Welcome To Excel*****************");
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		try {
			Workbook workbook = new XSSFWorkbook();
			int rowIndex = 0;
			int index = 0;
			Sheet sheet = workbook.createSheet("Hostel Report");
			rowIndex = 0;

			CellStyle style = workbook.createCellStyle();
			style.setFillBackgroundColor(XSSFFont.COLOR_NORMAL);

			Font font = workbook.createFont();
			XSSFFont font1 = (XSSFFont) font;
			font1.setFontName(font1.DEFAULT_FONT_NAME.toString());
			font1.setFontHeightInPoints((short) 14);
			font1.setBold(true);

			XSSFColor color = new XSSFColor(new java.awt.Color(66, 97, 80));
			font1.setColor(color);

			CellStyle style1 = workbook.createCellStyle();
			style1.setFont(font);

			XSSFRichTextString richString14 = new XSSFRichTextString("Hostel Reports");
			richString14.applyFont(font1);

			Row titleRow1 = sheet.createRow(rowIndex++);
			Cell hssfCell14 = titleRow1.createCell(1);
			hssfCell14.setCellStyle(style1);
			hssfCell14.setCellValue(richString14);
			rowIndex++;

			sheet.setColumnWidth(1, 10000);

			Row titleRow = sheet.createRow(rowIndex++);

			Cell hssfCell = titleRow.createCell(0);
			hssfCell.setCellStyle(style1);
			XSSFRichTextString richString = new XSSFRichTextString("College Name");
			richString.applyFont(font);
			hssfCell.setCellValue(richString);
			sheet.setColumnWidth((short) (0), (short) 5000);

			Cell hssfCell1 = titleRow.createCell(1);
			hssfCell1.setCellStyle(style1);
			XSSFRichTextString richString1 = new XSSFRichTextString("Hostel Type");
			richString1.applyFont(font);
			hssfCell1.setCellValue(richString1);
			sheet.setColumnWidth((short) (1), (short) 3000);

			Cell hssfCell2 = titleRow.createCell(2);
			hssfCell2.setCellStyle(style1);
			XSSFRichTextString richString2 = new XSSFRichTextString("Hostel Code ");
			richString2.applyFont(font);
			hssfCell2.setCellValue(richString2);
			sheet.setColumnWidth((short) (2), (short) 6000);

			Cell hssfCell3 = titleRow.createCell(3);
			hssfCell3.setCellStyle(style1);
			XSSFRichTextString richString3 = new XSSFRichTextString("Hostel Capacity ");
			richString3.applyFont(font);
			hssfCell3.setCellValue(richString3);
			sheet.setColumnWidth((short) (3), (short) 6000);

			Cell hssfCell4 = titleRow.createCell(4);
			hssfCell4.setCellStyle(style1);
			XSSFRichTextString richString4 = new XSSFRichTextString("Hostel Incharge ");
			richString4.applyFont(font);
			hssfCell4.setCellValue(richString4);
			sheet.setColumnWidth((short) (4), (short) 5000);

			Cell hssfCell5 = titleRow.createCell(5);
			hssfCell5.setCellStyle(style1);
			XSSFRichTextString richString5 = new XSSFRichTextString("Hostel Address ");
			richString5.applyFont(font);
			hssfCell5.setCellValue(richString5);
			sheet.setColumnWidth((short) (5), (short) 5000);

			Cell hssfCell6 = titleRow.createCell(6);
			hssfCell6.setCellStyle(style1);
			XSSFRichTextString richString6 = new XSSFRichTextString("Telephone No ");
			richString6.applyFont(font);
			hssfCell6.setCellValue(richString6);
			sheet.setColumnWidth((short) (6), (short) 5000);

			Cell hssfCell7 = titleRow.createCell(7);
			hssfCell7.setCellStyle(style1);
			XSSFRichTextString richString7 = new XSSFRichTextString("Hostel Name");
			richString7.applyFont(font);
			hssfCell7.setCellValue(richString7);
			sheet.setColumnWidth((short) (7), (short) 5000);

			CreationHelper createHelper = workbook.getCreationHelper();

			Font headerFont = workbook.createFont();
			headerFont.setBold(true);
			headerFont.setColor(IndexedColors.BLACK.getIndex());

			CellStyle headerCellStyle = workbook.createCellStyle();
			headerCellStyle.setFont(headerFont);

			int rowIdx = 3;
			for (Hostel req : request) {

				Row row = sheet.createRow(rowIdx++);
				row.createCell(7).setCellValue(req.getExName() + "");
				row.createCell(1).setCellValue(req.getExHostelType() + "");
				row.createCell(2).setCellValue(req.getExHostelCode() + "");
				row.createCell(3).setCellValue(req.getExHostelCapacity() + "");
				row.createCell(4).setCellValue(req.getExHostelIncharge() + "");
				row.createCell(5).setCellValue(req.getExHostelAddress() + "");
				row.createCell(6).setCellValue(req.getExTelephone() + "");
				row.createCell(0).setCellValue(req.getColleges().getExName() + "");

			}

			// Write the output to a file
			workbook.write(out);
			System.out.println("***Excel out**" + out);
		} catch (Exception e) {
			e.printStackTrace();
		}

		return new ByteArrayInputStream(out.toByteArray());
	}

	@Override
	public List<Designation> validateDesignationReport(DesignationRequest request) {
		// TODO Auto-generated method stub
		List<Designation> list = new ArrayList<>();
		try {
			list = super.designation.findByExIsDelete(false);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			return list;
		}
		return list;
	}

	public static ByteArrayInputStream designationReport(List<Designation> request) {

		System.out.println(
				"*****ByteArrayInputStream teacherReportToExcel(List<Object[]> request)*****" + request.size());
		System.out.println("Welcome To Excel*****************");
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		try {
			Workbook workbook = new XSSFWorkbook();
			int rowIndex = 0;
			int index = 0;
			Sheet sheet = workbook.createSheet("Designation Report");
			rowIndex = 0;

			CellStyle style = workbook.createCellStyle();
			style.setFillBackgroundColor(XSSFFont.COLOR_NORMAL);

			Font font = workbook.createFont();
			XSSFFont font1 = (XSSFFont) font;
			font1.setFontName(font1.DEFAULT_FONT_NAME.toString());
			font1.setFontHeightInPoints((short) 14);
			font1.setBold(true);

			XSSFColor color = new XSSFColor(new java.awt.Color(66, 97, 80));
			font1.setColor(color);

			CellStyle style1 = workbook.createCellStyle();
			style1.setFont(font);

			XSSFRichTextString richString14 = new XSSFRichTextString("Designation Reports");
			richString14.applyFont(font1);

			Row titleRow1 = sheet.createRow(rowIndex++);
			Cell hssfCell14 = titleRow1.createCell(1);
			hssfCell14.setCellStyle(style1);
			hssfCell14.setCellValue(richString14);
			rowIndex++;

			sheet.setColumnWidth(1, 10000);

			Row titleRow = sheet.createRow(rowIndex++);

			Cell hssfCell = titleRow.createCell(0);
			hssfCell.setCellStyle(style1);
			XSSFRichTextString richString = new XSSFRichTextString("Designation Name");
			richString.applyFont(font);
			hssfCell.setCellValue(richString);
			sheet.setColumnWidth((short) (0), (short) 5000);

			Cell hssfCell1 = titleRow.createCell(1);
			hssfCell1.setCellStyle(style1);
			XSSFRichTextString richString1 = new XSSFRichTextString("Description");
			richString1.applyFont(font);
			hssfCell1.setCellValue(richString1);
			sheet.setColumnWidth((short) (1), (short) 3000);

			Cell hssfCell2 = titleRow.createCell(2);
			hssfCell2.setCellStyle(style1);
			XSSFRichTextString richString2 = new XSSFRichTextString("Department Name");
			richString2.applyFont(font);
			hssfCell2.setCellValue(richString2);
			sheet.setColumnWidth((short) (2), (short) 6000);

			CreationHelper createHelper = workbook.getCreationHelper();

			Font headerFont = workbook.createFont();
			headerFont.setBold(true);
			headerFont.setColor(IndexedColors.BLACK.getIndex());

			CellStyle headerCellStyle = workbook.createCellStyle();
			headerCellStyle.setFont(headerFont);

			int rowIdx = 3;
			for (Designation req : request) {

				Row row = sheet.createRow(rowIdx++);
				row.createCell(0).setCellValue(req.getExName() + "");
				row.createCell(1).setCellValue(req.getExDescription() + "");
				String value = "";
				for(int i = 0 ;i< req.getDepartment().size() ; i++) {
					value = value+req.getDepartment().get(i).getExName()+" , ";
				}				
				 row.createCell(2).setCellValue(value);

			}

			// Write the output to a file
			workbook.write(out);
			System.out.println("***Excel out**" + out);
		} catch (Exception e) {
			e.printStackTrace();
		}

		return new ByteArrayInputStream(out.toByteArray());
	}

	@Override
	public List<ExamAnnouncement> validateExamAnnouncementReport(ExamAnnouncementRequest request) {
		// TODO Auto-generated method stub
		List<ExamAnnouncement> list = new ArrayList<>();
		try {
			DateFormat sdf = new SimpleDateFormat("dd/MM/yyy hh:mm:ss");
			list = super.examAnnouncement.findByExIsDelete(false);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			return list;
		}

		return list;
	}

	public static ByteArrayInputStream examAnnouncementReport(List<ExamAnnouncement> request) {

		System.out.println(
				"*****ByteArrayInputStream teacherReportToExcel(List<Object[]> request)*****" + request.size());
		System.out.println("Welcome To Excel*****************");
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		try {
			Workbook workbook = new XSSFWorkbook();
			int rowIndex = 0;
			int index = 0;
			Sheet sheet = workbook.createSheet("ExamAnnouncement Report");
			rowIndex = 0;

			CellStyle style = workbook.createCellStyle();
			style.setFillBackgroundColor(XSSFFont.COLOR_NORMAL);

			Font font = workbook.createFont();
			XSSFFont font1 = (XSSFFont) font;
			font1.setFontName(font1.DEFAULT_FONT_NAME.toString());
			font1.setFontHeightInPoints((short) 14);
			font1.setBold(true);

			XSSFColor color = new XSSFColor(new java.awt.Color(66, 97, 80));
			font1.setColor(color);

			CellStyle style1 = workbook.createCellStyle();
			style1.setFont(font);

			XSSFRichTextString richString20 = new XSSFRichTextString("Exam Announcement Reports");
			richString20.applyFont(font1);

			Row titleRow1 = sheet.createRow(rowIndex++);
			Cell hssfCell20 = titleRow1.createCell(1);
			hssfCell20.setCellStyle(style1);
			hssfCell20.setCellValue(richString20);
			rowIndex++;

			sheet.setColumnWidth(1, 10000);
			Row titleRow = sheet.createRow(rowIndex++);

			Cell hssfCell = titleRow.createCell(0);
			hssfCell.setCellStyle(style1);
			XSSFRichTextString richString = new XSSFRichTextString("Degree Name");
			richString.applyFont(font);
			hssfCell.setCellValue(richString);
			sheet.setColumnWidth((short) (0), (short) 5000);

			Cell hssfCell1 = titleRow.createCell(1);
			hssfCell1.setCellStyle(style1);
			XSSFRichTextString richString1 = new XSSFRichTextString("Programmes Name");
			richString1.applyFont(font);
			hssfCell1.setCellValue(richString1);
			sheet.setColumnWidth((short) (1), (short) 3000);

			Cell hssfCell2 = titleRow.createCell(2);
			hssfCell2.setCellStyle(style1);
			XSSFRichTextString richString2 = new XSSFRichTextString("Academic Year[Identifier] ");
			richString2.applyFont(font);
			hssfCell2.setCellValue(richString2);
			sheet.setColumnWidth((short) (2), (short) 6000);

			Cell hssfCell3 = titleRow.createCell(3);
			hssfCell3.setCellStyle(style1);
			XSSFRichTextString richString3 = new XSSFRichTextString("Programme Year[Identifier] ");
			richString3.applyFont(font);
			hssfCell3.setCellValue(richString3);
			sheet.setColumnWidth((short) (3), (short) 6000);

			Cell hssfCell4 = titleRow.createCell(4);
			hssfCell4.setCellStyle(style1);
			XSSFRichTextString richString4 = new XSSFRichTextString("Semester Name");
			richString4.applyFont(font);
			hssfCell4.setCellValue(richString4);
			sheet.setColumnWidth((short) (4), (short) 5000);

			Cell hssfCell5 = titleRow.createCell(5);
			hssfCell5.setCellStyle(style1);
			XSSFRichTextString richString5 = new XSSFRichTextString("Exam Name ");
			richString5.applyFont(font);
			hssfCell5.setCellValue(richString5);
			sheet.setColumnWidth((short) (5), (short) 5000);

			Cell hssfCell6 = titleRow.createCell(6);
			hssfCell6.setCellStyle(style1);
			XSSFRichTextString richString6 = new XSSFRichTextString(" Local Lang Name");
			richString6.applyFont(font);
			hssfCell6.setCellValue(richString5);
			sheet.setColumnWidth((short) (6), (short) 5000);

			Cell hssfCell7 = titleRow.createCell(7);
			hssfCell7.setCellStyle(style1);
			XSSFRichTextString richString7 = new XSSFRichTextString("Description");
			richString7.applyFont(font);
			hssfCell7.setCellValue(richString7);
			sheet.setColumnWidth((short) (7), (short) 5000);

			Cell hssfCell8 = titleRow.createCell(8);
			hssfCell8.setCellStyle(style1);
			XSSFRichTextString richString8 = new XSSFRichTextString("Examination Period ");
			richString8.applyFont(font);
			hssfCell8.setCellValue(richString8);
			sheet.setColumnWidth((short) (8), (short) 5000);

			Cell hssfCell9 = titleRow.createCell(9);
			hssfCell6.setCellStyle(style1);
			XSSFRichTextString richString9 = new XSSFRichTextString(" Start Time ");
			richString9.applyFont(font);
			hssfCell9.setCellValue(richString9);
			sheet.setColumnWidth((short) (9), (short) 5000);

			Cell hssfCell10 = titleRow.createCell(10);
			hssfCell10.setCellStyle(style1);
			XSSFRichTextString richString10 = new XSSFRichTextString(" End Time");
			richString10.applyFont(font);
			hssfCell10.setCellValue(richString10);
			sheet.setColumnWidth((short) (10), (short) 5000);

			Cell hssfCell11 = titleRow.createCell(11);
			hssfCell11.setCellStyle(style1);
			XSSFRichTextString richString11 = new XSSFRichTextString("Instructional Period");
			richString11.applyFont(font);
			hssfCell11.setCellValue(richString11);
			sheet.setColumnWidth((short) (11), (short) 5000);

			Cell hssfCell12 = titleRow.createCell(12);
			hssfCell12.setCellStyle(style1);
			XSSFRichTextString richString12 = new XSSFRichTextString("SemesterDetails StartDate ");
			richString12.applyFont(font);
			hssfCell12.setCellValue(richString12);
			sheet.setColumnWidth((short) (12), (short) 5000);

			Cell hssfCell13 = titleRow.createCell(13);
			hssfCell13.setCellStyle(style1);
			XSSFRichTextString richString13 = new XSSFRichTextString("SemesterDetails EndDate ");
			richString13.applyFont(font);
			hssfCell13.setCellValue(richString13);
			sheet.setColumnWidth((short) (13), (short) 5000);

			Cell hssfCell14 = titleRow.createCell(14);
			hssfCell14.setCellStyle(style1);
			XSSFRichTextString richString14 = new XSSFRichTextString(" PracticalExam StartDate ");
			richString14.applyFont(font);
			hssfCell14.setCellValue(richString14);
			sheet.setColumnWidth((short) (14), (short) 5000);

			Cell hssfCell15 = titleRow.createCell(15);
			hssfCell15.setCellStyle(style1);
			XSSFRichTextString richString15 = new XSSFRichTextString("PracticalExam EndDate ");
			richString15.applyFont(font);
			hssfCell15.setCellValue(richString15);
			sheet.setColumnWidth((short) (15), (short) 5000);

			Cell hssfCell16 = titleRow.createCell(16);
			hssfCell16.setCellStyle(style1);
			XSSFRichTextString richString16 = new XSSFRichTextString("SemesterBreak StartDate ");
			richString16.applyFont(font);
			hssfCell16.setCellValue(richString16);
			sheet.setColumnWidth((short) (16), (short) 5000);

			Cell hssfCell17 = titleRow.createCell(17);
			hssfCell17.setCellStyle(style1);
			XSSFRichTextString richString17 = new XSSFRichTextString("SemesterBreak EndDate ");
			richString17.applyFont(font);
			hssfCell17.setCellValue(richString17);
			sheet.setColumnWidth((short) (17), (short) 5000);

			Cell hssfCell18 = titleRow.createCell(18);
			hssfCell18.setCellStyle(style1);
			XSSFRichTextString richString18 = new XSSFRichTextString("Exam Details Start Date");
			richString18.applyFont(font);
			hssfCell18.setCellValue(richString18);
			sheet.setColumnWidth((short) (18), (short) 5000);

			Cell hssfCell19 = titleRow.createCell(19);
			hssfCell19.setCellStyle(style1);
			XSSFRichTextString richString19 = new XSSFRichTextString("Exam Details End Date");
			richString19.applyFont(font);
			hssfCell19.setCellValue(richString19);
			sheet.setColumnWidth((short) (19), (short) 5000);

			CreationHelper createHelper = workbook.getCreationHelper();

			Font headerFont = workbook.createFont();
			headerFont.setBold(true);
			headerFont.setColor(IndexedColors.BLACK.getIndex());

			CellStyle headerCellStyle = workbook.createCellStyle();
			headerCellStyle.setFont(headerFont);

			int rowIdx = 3;
			for (ExamAnnouncement req : request) {

				Row row = sheet.createRow(rowIdx++);
				row.createCell(1).setCellValue(req.getProgrammes().getExName() + "");
				row.createCell(0).setCellValue(req.getDegree().getExName() + "");
				row.createCell(4).setCellValue(req.getSemester().getExName() + "");
				row.createCell(2).setCellValue(req.getAcademicYear().getExIdentifier() + "");
				row.createCell(3).setCellValue(req.getProgrammeYear().getExIdentifier() + "");
				row.createCell(5).setCellValue(req.getExName() + "");
				row.createCell(6).setCellValue(req.getExLocalLangName() + "");
				row.createCell(7).setCellValue(req.getExDescription() + "");
				// row.createCell(8).setCellValue(req.getExExaminationPeriod() + "");
				// row.createCell(9).setCellValue(req.getExStartTime() + "");
				// row.createCell(10).setCellValue(req.getExEndTime() + "");
				// row.createCell(11).setCellValue(req.getExInstructionalPeriod() + "");
				// row.createCell(12).setCellValue(req.getExSemesterDetailsStartDate() + "");
				// row.createCell(13).setCellValue(req.getExSemesterDetailsEndDate() + "");
				// row.createCell(14).setCellValue(req.getExPracticalExamStartDate() + "");
				// row.createCell(15).setCellValue(req.getExPracticalExamEndDate() + "");
				// row.createCell(16).setCellValue(req.getExSemesterBreakStartDate() + "");
				// row.createCell(17).setCellValue(req.getExSemesterBreakEndDate() + "");
				// row.createCell(12).setCellValue(req.getExExamDetailsStartDate() + "");
				// row.createCell(13).setCellValue(req.getExExamDetailsEndDate() + "");

			}

			// Write the output to a file
			workbook.write(out);
			System.out.println("***Excel out**" + out);
		} catch (Exception e) {
			e.printStackTrace();
		}

		return new ByteArrayInputStream(out.toByteArray());
	}

	@Override
	public List<Object[]> validateMidtermMarksReport(ReportRequest request) {
		// TODO Auto-generated method stub
		List<Object[]> list = new ArrayList<>();
		try {
			/*
			 * list = acdemicDao.midtermReport(request.getColleges(),
			 * request.getProgrammes(), request.getDepartment(), request.getProgrammeYear(),
			 * request.getAcademicYear(), true, false, request.getDegree(),
			 * request.getSemester());
			 */
			list=super.midtermmarksMarks.Iamarksdetails(request.getColleges(),request.getProgrammes(), request.getDepartment(),
					request.getProgrammeYear(), request.getAcademicYear(), request.getDegree(),
			  request.getSemester());
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			return list;
		}
		return list;

	}

	@Override
	public List<Object[]> validateExamAttendanceReport(ReportRequest request) {
		List<Object[]> list = new ArrayList<>();
		try {
			list = super.accademicdao.examAttendanceReport(request);
		} catch (Exception e) {
			// TODO: handle exception

			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			return list;
		}
		return list;
	}

	@Override
	public List<Object[]> validateExamTimeTableLog(LogReportRequest request) {
		// TODO Auto-generated method stub
		List<Object[]> list = new ArrayList<Object[]>();
		try {

			list = acdemicDao.findById(request.getProgrammes(), request.getAcademicYear(), request.getDegree(),
					request.getProgrammeYear(), request.getSemester());

			return list;
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			return list;
		}
	}

	@Override
	public List<ClassAttendance> studentForAttendance(ClassTimeTableRequest request) {
		List<ClassAttendance> list = new ArrayList<ClassAttendance>();
		Optional<Studentadmission> getExStudentIdTo = super.studentadmission
				.findByExIsDeleteAndExIsActiveAndExRollNo(false, true, request.getExStudentId());
		if (!getExStudentIdTo.isPresent()) {
			return list;
		}
		return super.classattend
				.findByAcademicYearIdAndProgrammeYearIdAndSemesterIdAndStudentadmissionIdAndCoursesTypeIdAndCoursesId(
						request.getAcademicYear(), request.getProgrammeYear(), request.getSemester(),
						getExStudentIdTo.get().getId(), request.getCoursesType(), request.getCourses());
	}

	@Override
	public List<Object[]> validateGradeReportLog(ReportRequest request) {
		List<Object[]> list = new ArrayList<Object[]>();
		try {
			list = super.accademicdao.gradereportLogReport(request);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return list;
	}

	@Override
	public List<Object[]> semesterReportLogReport(ReportRequest request) {
		List<Object[]> list = new ArrayList<Object[]>();
		try {
			list = super.accademicdao.semesterreportLogReport(request, "SemesterReport");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return list;
	}
// New Report Start From Here 

	@Override
	public List<Studentpersonal> validateStudentReport(ReportRequest request) {
		// TODO Auto-generated method stub
		List<Studentpersonal> list = new ArrayList<>();
		try {
			System.out.println("ddddddddddd" + request.toString());
			list = super.studentpersonal.getAdmisionRecord(request.getColleges(), request.getDegree(),
					request.getProgrammes(), request.getAcademicYear());
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			return list;
		}
		return list;
	}

	/*
	 * @Override public List<GradeReport> gradeReport(ReportRequest request) { //
	 * TODO Auto-generated method stub List<GradeReport> list = new ArrayList<>();
	 * try { list = super.gradeReport
	 * .findByCollegesIdInAndProgrammesIdInAndSemesterIdInAndProgrammeYearIdInAndDepartmentIdInAndDegreeIdInAndAcademicYearIdIn(
	 * request.getColleges(), request.getProgrammes(), request.getSemester(),
	 * request.getProgrammeYear(), request.getDepartment(), request.getDegree(),
	 * request.getAcademicYear());
	 * 
	 * } catch (Exception e) { // TODO: handle exception e.printStackTrace();
	 * logger.error("Exception occured" + e); StringWriter errors = new
	 * StringWriter(); e.printStackTrace(new PrintWriter(errors));
	 * logger.error(errors.toString()); return list; } return list; }
	 */

	/*
	 * @Override public List<Staffpersonal> validationStaffReport(ReportRequest
	 * request) { // TODO Auto-generated method stub // TODO Auto-generated method
	 * stub List<Staffpersonal> list = new ArrayList<>(); try { list =
	 * super.staffpersonal.
	 * findByCollegesIdInAndProgrammesIdInAndDepartmentIdInAndDegreeIdIn(
	 * request.getColleges(), request.getProgrammes(), request.getDepartment(),
	 * request.getDegree()); } catch (Exception e) { // TODO: handle exception
	 * e.printStackTrace(); logger.error("Exception occured" + e); StringWriter
	 * errors = new StringWriter(); e.printStackTrace(new PrintWriter(errors));
	 * logger.error(errors.toString()); return list; } return list; }
	 */

	@Override
	public List<Batch> validationBatchReport(ReportRequest request) {
		List<Batch> list = new ArrayList<>();
		try {
			list = super.batch.findByProgrammesIdInAndDegreeIdIn(request.getProgrammes(), request.getDegree());
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			return list;
		}
		return list;
	}

	@Override
	public List<Object[]> auditLogReport(ReportRequest request) {
		List<Object[]> list = new ArrayList<Object[]>();
		try {

			SimpleDateFormat date = new SimpleDateFormat("dd/mm/yyyy");
			DateFormat dateFormat = new SimpleDateFormat("yyyy-mm-dd hh:MM:ss");

			String sDate = dateFormat.format(date.parse(request.getStartDate() ));
			System.out.println(">>>>>>>..start date" + sDate);
			String eDate = dateFormat.format(date.parse(request.getEndDate()));
			System.out.println(">>>>>>>..eDate date" + eDate);
				
			//list = accademicdao.auditLogReport(request.getStartDate(), request.getEndDate(),
			//		request.getPrivilegesModulesId());
			
			list = super.auditLogRepository.auditLogReport(sDate,eDate,
						request.getPrivilegesModulesId());

		} catch (Exception e) {
			e.printStackTrace();
		}
		return list;
	}

	@Override
	public JSONObject answerBookletUploadStatus(BookletUploadRequest request) {
		JSONObject info = new JSONObject();
		try {
			logger.info("answerBookletUploadStatus >" + request.toString());
			Optional<Degree> Degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!Degree.isPresent()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}

			Optional<AcademicYear> academicYearid = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getAcademicYear());
			if (!academicYearid.isPresent()) {
				info.put("status", "2");
				info.put("message", "AcademicYear id not present");
				return info;
			}
			Optional<ProgrammeYear> programmeYearid = super.programmeYear.findByExIsDeleteAndExIsActiveAndId(false,
					true, request.getProgrammeYear());
			if (!programmeYearid.isPresent()) {
				info.put("status", "2");
				info.put("message", "programmeYearid  not present");
				return info;
			}
			Optional<Programmes> program = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!program.isPresent()) {
				info.put("status", "2");
				info.put("message", "Programmes not present");
				return info;
			}

			Optional<Semster> semster = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemster());
			if (!semster.isPresent()) {
				info.put("status", "2");
				info.put("message", "semester not present");
				return info;
			}

			Optional<ExamAnnouncement> ExamAnnouncement = super.examAnnouncement
					.findByExIsDeleteAndExIsActiveAndId(false, true, request.getExamAnnouncement());
			if (!ExamAnnouncement.isPresent()) {
				info.put("status", "2");
				info.put("message", "ExamAnnouncement not present");
				return info;
			}

			Optional<RegistrationType> RegistrationType = super.registrationType
					.findByExIsDeleteAndExIsActiveAndId(false, true, request.getRegistrationType());
			if (!RegistrationType.isPresent()) {
				info.put("status", "2");
				info.put("message", "RegistrationType not present");
				return info;
			}

			List<Courses> course = super.courses.findByIdAndExIsActiveAndExIsDelete(request.getCourse(), true, false);
			if (course.size() <= 0) {
				info.put("status", "2");
				info.put("message", "courses not present");
				return info;
			}

			// for (int i = 0; i < request.getColleges().size(); i++) {
			Optional<Colleges> colleges = super.colleges.findById(request.getColleges());
			if (!colleges.isPresent()) {
				info.put("status", "2");
				info.put("message", "Colleges id not present");
				return info;
			}
			// }

			List dataList = new LinkedList();

			System.out.println("bookletpresentvvvvvvvvssssssssssssssssvvvvvv");

			List<Object[]> bookletpresent = accademicdao.getanswerbookletstatus(request.getAcademicYear(),
					request.getDegree(), request.getColleges(), request.getCourse(), request.getExamAnnouncement(),
					request.getProgrammes(), request.getRegistrationType(), request.getSemster(),
					request.getProgrammeYear());
			List<Object[]> userbookletpresent = accademicdao.getUseranswerbookletstatus(request.getAcademicYear(),
					request.getDegree(), request.getColleges(), request.getCourse(), request.getExamAnnouncement(),
					request.getProgrammes(), request.getRegistrationType(), request.getSemster(),
					request.getProgrammeYear());

			System.out.println("bookletpresent" + bookletpresent.size());
			System.out.println("bookletpresent" + userbookletpresent.size());
			for (Object[] inter : userbookletpresent) {
				JSONObject result = new JSONObject();
				result.put("rollno", (String) inter[2]);
				System.out.println("studentId[2]vvvvvvvvvvvvvv" + inter[2]);
				result.put("barcode", (String) inter[0]);
				result.put("bookletuploadedby", (String) inter[3]);
				if (inter[1] == null) {
					result.put("bookletstatus", "NO");
				} else {
					result.put("bookletstatus", "Yes");
				}

				result.put("regtype", RegistrationType.get().getExName());
				result.put("courses", course.get(0).getExName());
				result.put("semester", semster.get().getExName());
				result.put("college", colleges.get().getExName());
				result.put("academicyear", academicYearid.get().getExYear());
				result.put("degree", Degree.get().getExName());
				result.put("program", program.get().getExName());
				result.put("programmeyear", programmeYearid.get().getExName());
		//		result.put("examAnnouncement", ExamAnnouncement.get().getExName());
				result.put("coursesCode", course.get(0).getExCoursesCode());
				dataList.add(result);

			}
			for (Object[] inter : bookletpresent) {
				JSONObject result = new JSONObject();
				result.put("rollno", (String) inter[2]);
				System.out.println("rollno[2]vvvvvvvvvvvvvv" + inter[2]);
				result.put("barcode", (String) inter[0]);
				result.put("bookletuploadedby", "NA");
				if (inter[1] == null) {
					result.put("bookletstatus", "NO");
				} else {
					result.put("bookletstatus", "Yes");
				}

				
				result.put("regtype", RegistrationType.get().getExName());
				result.put("courses", course.get(0).getExName());
				result.put("semester", semster.get().getExName());
				result.put("college", colleges.get().getExName());
				result.put("academicyear", academicYearid.get().getExYear());
				result.put("degree", Degree.get().getExName());
				result.put("program", program.get().getExName());
				result.put("programmeyear", programmeYearid.get().getExName());
			//	result.put("examAnnouncement", ExamAnnouncement.get().getExName());
				result.put("coursesCode", course.get(0).getExCoursesCode());
				dataList.add(result);

			}

			// Collections.sort(dataList);
			info.put("status", "1");
			info.put("details", dataList);
			return info;
		} catch (Exception e) {
e.printStackTrace();
			return info;
		}
	}

	@Override
	public ByteArrayInputStream answerBookletUploadStatus(JSONObject value) {
		// TODO Auto-generated method stub
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		System.out.println("****ByteArrayOutputStream**" + out);
		try {
			// HSSFWorkbook workbook = new HSSFWorkbook();
			Workbook workbook = new XSSFWorkbook();
			int rowIndex = 0;
			int index = 0;

			// Create the spreadsheet
			// HSSFSheet sheet = workbook.createSheet("accesslogs");

			Sheet sheet = workbook.createSheet("status");
			rowIndex = 0;

			CellStyle style = workbook.createCellStyle();
			style.setFillBackgroundColor(XSSFFont.COLOR_NORMAL);

			Font font = workbook.createFont();
			XSSFFont font1 = (XSSFFont) font;
			font1.setFontName(font1.DEFAULT_FONT_NAME.toString());
			font1.setFontHeightInPoints((short) 14);
			font1.setBold(true);

			XSSFColor color = new XSSFColor(new java.awt.Color(66, 97, 80));
			font1.setColor(color);

			XSSFRichTextString richString11 = new XSSFRichTextString("Booklet Upload Status Reports");
			richString11.applyFont(font1);

			CellStyle style1 = workbook.createCellStyle();
			style1.setFont(font);

			Row titleRow1 = sheet.createRow(rowIndex++);
			Cell hssfCell11 = titleRow1.createCell(1);
			hssfCell11.setCellStyle(style1);
			hssfCell11.setCellValue(richString11);
			rowIndex++;

			sheet.setColumnWidth(1, 10000);

			Row titleRow = sheet.createRow(rowIndex++);

			Cell hssfCell = titleRow.createCell(0);
			hssfCell.setCellStyle(style1);
			XSSFRichTextString richString = new XSSFRichTextString("Academic year");
			richString.applyFont(font);
			hssfCell.setCellValue(richString);
			sheet.setColumnWidth((short) (0), (short) 5000);

			Cell hssfCell1 = titleRow.createCell(1);
			hssfCell1.setCellStyle(style1);
			XSSFRichTextString richString1 = new XSSFRichTextString("College");
			richString1.applyFont(font);
			hssfCell1.setCellValue(richString1);
			sheet.setColumnWidth((short) (1), (short) 3000);

			Cell hssfCell2 = titleRow.createCell(2);
			hssfCell2.setCellStyle(style1);
			XSSFRichTextString richString2 = new XSSFRichTextString("Degree");
			richString2.applyFont(font);
			hssfCell2.setCellValue(richString2);
			sheet.setColumnWidth((short) (2), (short) 6000);

			Cell hssfCell3 = titleRow.createCell(3);
			hssfCell3.setCellStyle(style1);
			XSSFRichTextString richString3 = new XSSFRichTextString("Exam Announcement");
			richString3.applyFont(font);
			hssfCell3.setCellValue(richString3);
			sheet.setColumnWidth((short) (3), (short) 6000);

			Cell hssfCell4 = titleRow.createCell(4);
			hssfCell4.setCellStyle(style1);
			XSSFRichTextString richString4 = new XSSFRichTextString("Program");
			richString4.applyFont(font);
			hssfCell4.setCellValue(richString4);
			sheet.setColumnWidth((short) (4), (short) 5000);

			Cell hssfCell5 = titleRow.createCell(5);
			hssfCell5.setCellStyle(style1);
			XSSFRichTextString richString5 = new XSSFRichTextString("Programmeyear");
			richString5.applyFont(font);
			hssfCell5.setCellValue(richString5);
			sheet.setColumnWidth((short) (5), (short) 5000);

			Cell hssfCell6 = titleRow.createCell(6);
			hssfCell6.setCellStyle(style1);
			XSSFRichTextString richString6 = new XSSFRichTextString("Courses ");
			richString6.applyFont(font);
			hssfCell6.setCellValue(richString6);
			sheet.setColumnWidth((short) (6), (short) 4000);

			Cell hssfCell7 = titleRow.createCell(7);
			hssfCell7.setCellStyle(style1);
			XSSFRichTextString richString7 = new XSSFRichTextString("Course Code");
			richString7.applyFont(font);
			hssfCell7.setCellValue(richString7);
			sheet.setColumnWidth((short) (7), (short) 4000);

			Cell hssfCell8 = titleRow.createCell(8);
			hssfCell8.setCellStyle(style1);
			XSSFRichTextString richString8 = new XSSFRichTextString("RegistrationType");
			richString8.applyFont(font);
			hssfCell8.setCellValue(richString8);
			sheet.setColumnWidth((short) (8), (short) 4000);

			Cell hssfCell9 = titleRow.createCell(9);
			hssfCell9.setCellStyle(style1);
			XSSFRichTextString richString9 = new XSSFRichTextString("Semester");
			richString9.applyFont(font);
			hssfCell9.setCellValue(richString9);
			sheet.setColumnWidth((short) (9), (short) 4000);

			Cell hssfCell10 = titleRow.createCell(10);
			hssfCell10.setCellStyle(style1);
			XSSFRichTextString richString10 = new XSSFRichTextString("RollNo");
			richString10.applyFont(font);
			hssfCell10.setCellValue(richString10);
			sheet.setColumnWidth((short) (10), (short) 4000);

			Cell hssfCell14 = titleRow.createCell(11);
			hssfCell14.setCellStyle(style1);
			XSSFRichTextString richString14 = new XSSFRichTextString("Barcode");
			richString14.applyFont(font);
			hssfCell14.setCellValue(richString14);
			sheet.setColumnWidth((short) (11), (short) 4000);

			Cell hssfCell12 = titleRow.createCell(12);
			hssfCell12.setCellStyle(style1);
			XSSFRichTextString richString12 = new XSSFRichTextString("Uploaded By");
			richString12.applyFont(font);
			hssfCell12.setCellValue(richString12);
			sheet.setColumnWidth((short) (12), (short) 4000);

			Cell hssfCell13 = titleRow.createCell(13);
			hssfCell13.setCellStyle(style1);
			XSSFRichTextString richString13 = new XSSFRichTextString("Booklet status");
			richString13.applyFont(font);
			hssfCell13.setCellValue(richString13);
			sheet.setColumnWidth((short) (13), (short) 4000);
			CreationHelper createHelper = workbook.getCreationHelper();

			Font headerFont = workbook.createFont();
			headerFont.setBold(true);
			headerFont.setColor(IndexedColors.BLACK.getIndex());

			CellStyle headerCellStyle = workbook.createCellStyle();
			headerCellStyle.setFont(headerFont);

			// Create Cell Style for formatting Date
			CellStyle datetime = workbook.createCellStyle();
			datetime.setDataFormat(createHelper.createDataFormat().getFormat("dd/MM/yyyy hh:mm:ss"));
			if (value.get("status").toString().equals("1")) {
				JSONArray array = new JSONArray(value.get("details").toString());
				int rowIdx = 3;
				for (int i = 0; i < array.length(); i++) {
					JSONObject jsonObj = array.getJSONObject(i);
					Row row = sheet.createRow(rowIdx++);
					row.createCell(0).setCellValue(jsonObj.getString("academicyear") + "");
					row.createCell(1).setCellValue(jsonObj.getString("college") + "");
					row.createCell(2).setCellValue(jsonObj.getString("degree"));
		//			row.createCell(3).setCellValue(jsonObj.getString("examAnnouncement") + "");
					row.createCell(4).setCellValue(jsonObj.getString("program") + "");
					row.createCell(5).setCellValue(jsonObj.getString("programmeyear") + "");
					row.createCell(6).setCellValue(jsonObj.getString("courses") + "");
					row.createCell(7).setCellValue(jsonObj.getString("coursesCode") + "");
					row.createCell(8).setCellValue(jsonObj.getString("regtype") + "");
					row.createCell(9).setCellValue(jsonObj.getString("semester") + "");
					row.createCell(10).setCellValue(jsonObj.getString("rollno") + "");
					row.createCell(11).setCellValue(jsonObj.getString("barcode") + "");
					row.createCell(12).setCellValue(jsonObj.getString("bookletuploadedby") + "");
					row.createCell(13).setCellValue(jsonObj.getString("bookletstatus") + "");
				}
			}
			workbook.write(out);
			// System.out.println("****completed********"+workbook);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ByteArrayInputStream(out.toByteArray());
	}

	@Override
	public JSONObject evaluatorSelectionStatus(EvaluatorSelectionRequest request) {
		JSONObject info = new JSONObject();
		try {
			logger.info("evaluatorSelectionStatus >" + request.toString());

			Optional<AcademicYear> academicYearid = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getAcademicYear());
			if (!academicYearid.isPresent()) {
				info.put("status", "2");
				info.put("message", "AcademicYear id not present");
				return info;
			}

			Optional<ExamAnnouncement> ExamAnnouncement = super.examAnnouncement
					.findByExIsDeleteAndExIsActiveAndId(false, true, request.getExamAnnouncement());
			if (!ExamAnnouncement.isPresent()) {
				info.put("status", "2");
				info.put("message", "ExamAnnouncement not present");
				return info;
			}

			List<Courses> course = super.courses.findByExIsDeleteAndIdAndExIsActive(false, request.getCourses(), true);
			if (course.size() <= 0) {
				info.put("status", "2");
				info.put("message", "courses not present");
				return info;
			}

			Optional<Colleges> colleges = super.colleges.findById(request.getColleges());
			if (!colleges.isPresent()) {
				info.put("status", "2");
				info.put("message", "Colleges id not present");
				return info;
			}

			List dataList = new LinkedList();

			List<Object[]> evaluator = accademicdao.getevaluatorstatus(true, request.getAcademicYear(),
					request.getColleges(), request.getCourses(), request.getExamAnnouncement());
			System.out.println("evaluator" + evaluator.size());
			if (evaluator.size() > 0) {
				for (Object[] inter : evaluator) {
					System.out.println("?????????????????????fggg???????????????????" + evaluator);

					JSONObject result = new JSONObject();

					result.put("exEmail", (String) inter[1]);
					result.put("selectedby", "NA");
					result.put("staffname", (String) inter[0]);
					result.put("exMobile", (String) inter[2]);
					result.put("exEvaluationTime", (Date) inter[3]);
					result.put("exEvaluationFrom", (Date) inter[4]);
					result.put("exEvaluationTo", (Date) inter[5]);
					result.put("exEvaluationVenue", (String) inter[6]);
					result.put("evaluationtype", (String) inter[7]);
					result.put("courses", course.get(0).getExName());
					result.put("college", colleges.get().getExName());
					result.put("academicyear", academicYearid.get().getExYear());
					result.put("examannoncement", ExamAnnouncement.get().getExName());
					result.put("coursesCode", course.get(0).getExCoursesCode());
					dataList.add(result);
					System.out.println("?????????????????????dataList???????????????????" + dataList);

				}
			}
			// check external / omr marks updated or not
			System.out.println("?????????????????????dataList???????????????????" + dataList);
			info.put("status", "1");
			info.put("details", dataList);
			return info;
		} catch (Exception e) {
			e.printStackTrace();
			return info;
		}
	}

	@Override
	public ByteArrayInputStream evaluatorSelectionStatus(JSONObject value) {
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		System.out.println("****ByteArrayOutputStream**" + out);
		try {
			// HSSFWorkbook workbook = new HSSFWorkbook();
			Workbook workbook = new XSSFWorkbook();
			int rowIndex = 0;
			int index = 0;

			// Create the spreadsheet
			// HSSFSheet sheet = workbook.createSheet("accesslogs");

			Sheet sheet = workbook.createSheet("status");
			rowIndex = 0;

			CellStyle style = workbook.createCellStyle();
			style.setFillBackgroundColor(XSSFFont.COLOR_NORMAL);

			Font font = workbook.createFont();
			XSSFFont font1 = (XSSFFont) font;
			font1.setFontName(font1.DEFAULT_FONT_NAME.toString());
			font1.setFontHeightInPoints((short) 14);
			font1.setBold(true);

			XSSFColor color = new XSSFColor(new java.awt.Color(66, 97, 80));
			font1.setColor(color);

			XSSFRichTextString richString11 = new XSSFRichTextString("Evaluater Status Reports");
			richString11.applyFont(font1);

			CellStyle style1 = workbook.createCellStyle();
			style1.setFont(font);

			Row titleRow1 = sheet.createRow(rowIndex++);
			Cell hssfCell11 = titleRow1.createCell(1);
			hssfCell11.setCellStyle(style1);
			hssfCell11.setCellValue(richString11);
			rowIndex++;

			sheet.setColumnWidth(1, 10000);

			Row titleRow = sheet.createRow(rowIndex++);

			Cell hssfCell = titleRow.createCell(0);
			hssfCell.setCellStyle(style1);
			XSSFRichTextString richString = new XSSFRichTextString("College");
			richString.applyFont(font);
			hssfCell.setCellValue(richString);
			sheet.setColumnWidth((short) (0), (short) 5000);

			Cell hssfCell1 = titleRow.createCell(1);
			hssfCell1.setCellStyle(style1);
			XSSFRichTextString richString1 = new XSSFRichTextString("Academic Year");
			richString1.applyFont(font);
			hssfCell1.setCellValue(richString1);
			sheet.setColumnWidth((short) (1), (short) 3000);

			Cell hssfCell2 = titleRow.createCell(2);
			hssfCell2.setCellStyle(style1);
			XSSFRichTextString richString2 = new XSSFRichTextString("Exam Announcement");
			richString2.applyFont(font);
			hssfCell2.setCellValue(richString2);
			sheet.setColumnWidth((short) (2), (short) 6000);

			Cell hssfCell3 = titleRow.createCell(3);
			hssfCell3.setCellStyle(style1);
			XSSFRichTextString richString3 = new XSSFRichTextString("Courses");
			richString3.applyFont(font);
			hssfCell3.setCellValue(richString3);
			sheet.setColumnWidth((short) (3), (short) 6000);

			Cell hssfCell4 = titleRow.createCell(4);
			hssfCell4.setCellStyle(style1);
			XSSFRichTextString richString4 = new XSSFRichTextString("Courses Code ");
			richString4.applyFont(font);
			hssfCell4.setCellValue(richString4);
			sheet.setColumnWidth((short) (4), (short) 5000);

			Cell hssfCell5 = titleRow.createCell(5);
			hssfCell5.setCellStyle(style1);
			XSSFRichTextString richString5 = new XSSFRichTextString("Evaluation Type");
			richString5.applyFont(font);
			hssfCell5.setCellValue(richString5);
			sheet.setColumnWidth((short) (5), (short) 5000);

			Cell hssfCell6 = titleRow.createCell(6);
			hssfCell6.setCellStyle(style1);
			XSSFRichTextString richString6 = new XSSFRichTextString("Expert Name");
			richString6.applyFont(font);
			hssfCell6.setCellValue(richString6);
			sheet.setColumnWidth((short) (6), (short) 4000);

			Cell hssfCell7 = titleRow.createCell(7);
			hssfCell7.setCellStyle(style1);
			XSSFRichTextString richString7 = new XSSFRichTextString("mobile");
			richString7.applyFont(font);
			hssfCell7.setCellValue(richString7);
			sheet.setColumnWidth((short) (7), (short) 4000);

			Cell hssfCell8 = titleRow.createCell(8);
			hssfCell8.setCellStyle(style1);
			XSSFRichTextString richString8 = new XSSFRichTextString("email ");
			richString8.applyFont(font);
			hssfCell8.setCellValue(richString8);
			sheet.setColumnWidth((short) (8), (short) 4000);

			Cell hssfCell9 = titleRow.createCell(9);
			hssfCell9.setCellStyle(style1);
			XSSFRichTextString richString9 = new XSSFRichTextString("From Date");
			richString9.applyFont(font);
			hssfCell9.setCellValue(richString9);
			sheet.setColumnWidth((short) (9), (short) 4000);

			Cell hssfCell10 = titleRow.createCell(10);
			hssfCell10.setCellStyle(style1);
			XSSFRichTextString richString10 = new XSSFRichTextString("To Date");
			richString10.applyFont(font);
			hssfCell10.setCellValue(richString10);
			sheet.setColumnWidth((short) (10), (short) 4000);

			Cell hssfCell14 = titleRow.createCell(11);
			hssfCell14.setCellStyle(style1);
			XSSFRichTextString richString14 = new XSSFRichTextString("Time");
			richString14.applyFont(font);
			hssfCell14.setCellValue(richString14);
			sheet.setColumnWidth((short) (11), (short) 4000);

			Cell hssfCell146 = titleRow.createCell(12);
			hssfCell146.setCellStyle(style1);
			XSSFRichTextString richString145 = new XSSFRichTextString("selected By");
			richString145.applyFont(font);
			hssfCell146.setCellValue(richString145);
			sheet.setColumnWidth((short) (12), (short) 4000);

			CreationHelper createHelper = workbook.getCreationHelper();

			Font headerFont = workbook.createFont();
			headerFont.setBold(true);
			headerFont.setColor(IndexedColors.BLACK.getIndex());

			CellStyle headerCellStyle = workbook.createCellStyle();
			headerCellStyle.setFont(headerFont);

			// Create Cell Style for formatting Date
			CellStyle datetime = workbook.createCellStyle();
			datetime.setDataFormat(createHelper.createDataFormat().getFormat("dd/MM/yyyy hh:mm:ss"));
			if (value.get("status").toString().equals("1")) {
				JSONArray array = new JSONArray(value.get("details").toString());
				int rowIdx = 3;
				for (int i = 0; i < array.length(); i++) {
					JSONObject jsonObj = array.getJSONObject(i);
					Row row = sheet.createRow(rowIdx++);
					row.createCell(0).setCellValue(jsonObj.getString("college") + "");
					row.createCell(1).setCellValue(jsonObj.getString("academicyear") + "");
					row.createCell(2).setCellValue(jsonObj.getString("examannoncement"));
					row.createCell(3).setCellValue(jsonObj.getString("courses"));
					row.createCell(4).setCellValue(jsonObj.getString("coursesCode") + "");
					row.createCell(5).setCellValue(jsonObj.getString("evaluationtype") + "");
					row.createCell(6).setCellValue(jsonObj.getString("staffname") + "");
					row.createCell(7).setCellValue(jsonObj.getString("exMobile") + "");
					row.createCell(8).setCellValue(jsonObj.getString("exEmail") + "");
					row.createCell(9).setCellValue(jsonObj.getString("exEvaluationFrom") + "");
					row.createCell(10).setCellValue(jsonObj.getString("exEvaluationTo") + "");
					row.createCell(11).setCellValue(jsonObj.getString("exEvaluationTime") + "");
					row.createCell(12).setCellValue(jsonObj.getString("selectedby") + "");

					
				}
			}

			workbook.write(out);
			// System.out.println("****completed********"+workbook);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ByteArrayInputStream(out.toByteArray());
	}

	@Override
	public JSONObject bookletAllocationStatus(BookletStaffRequest request) {
		JSONObject info = new JSONObject();
		try {
			logger.info("bookletallocationStatus >" + request.toString());

			Optional<AcademicYear> academicYearid = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getAcademicYear());
			if (!academicYearid.isPresent()) {
				info.put("status", "2");
				info.put("message", "AcademicYear id not present");
				return info;
			}

			Optional<ExamAnnouncement> ExamAnnouncement = super.examAnnouncement
					.findByExIsDeleteAndExIsActiveAndId(false, true, request.getExamAnnouncement());
			if (!ExamAnnouncement.isPresent()) {
				info.put("status", "2");
				info.put("message", "ExamAnnouncement not present");
				return info;
			}

			Optional<Programmes> program = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!program.isPresent()) {
				info.put("status", "2");
				info.put("message", "Programmes not present");
				return info;
			}
			Optional<RegistrationType> RegistrationType = super.registrationType
					.findByExIsDeleteAndIdAndExIsActive(false, request.getRegistrationType(), true);
			if (!RegistrationType.isPresent()) {
				info.put("status", "2");
				info.put("message", "RegistrationType not present");
				return info;
			}

			Optional<Colleges> colleges = super.colleges.findById(request.getColleges());
			if (!colleges.isPresent()) {
				info.put("status", "2");
				info.put("message", "Colleges id not present");
				return info;
			}

			List dataList = new LinkedList();

			List<Object[]> evaluator = accademicdao.getbookletallocationstatus(true, false, request.getAcademicYear(),
					request.getColleges(), request.getExamAnnouncement(), request.getProgrammes(),
					request.getRegistrationType());
			System.out.println("evaluator" + evaluator.size());
			if (evaluator.size() > 0) {
				for (Object[] inter : evaluator) {
					System.out.println("?????????????????????fggg???????????????????" + evaluator);

					JSONObject result = new JSONObject();

					result.put("email", (String) inter[1]);
					result.put("staffname", (String) inter[2]);
					result.put("selectedby", (String) inter[3]);
					result.put("barcode", (String) inter[0]);
					result.put("mobile", (String) inter[4]);
					result.put("courses", (String) inter[5]);
					result.put("coursesCode", (String) inter[6]);

					result.put("college", colleges.get().getExName());
					result.put("academicyear", academicYearid.get().getExYear());
					result.put("examannoncement", ExamAnnouncement.get().getExName());
					result.put("program", program.get().getExName());
					result.put("regtype", RegistrationType.get().getExName());

					dataList.add(result);
					System.out.println("?????????????????????dataList???????????????????" + dataList);

				}
			}
			// check external / omr marks updated or not
			System.out.println("?????????????????????dataList???????????????????" + dataList);
			info.put("status", "1");
			info.put("details", dataList);
			return info;
		} catch (Exception e) {
			e.printStackTrace();
			return info;
		}
	}

	@Override
	public ByteArrayInputStream bookletAllocationStatus(JSONObject value) {
		// TODO Auto-generated method stub
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		System.out.println("****ByteArrayOutputStream**" + out);
		try {
			// HSSFWorkbook workbook = new HSSFWorkbook();
			Workbook workbook = new XSSFWorkbook();
			int rowIndex = 0;
			int index = 0;

			// Create the spreadsheet
			// HSSFSheet sheet = workbook.createSheet("accesslogs");

			Sheet sheet = workbook.createSheet("status");
			rowIndex = 0;

			CellStyle style = workbook.createCellStyle();
			style.setFillBackgroundColor(XSSFFont.COLOR_NORMAL);

			Font font = workbook.createFont();
			XSSFFont font1 = (XSSFFont) font;
			font1.setFontName(font1.DEFAULT_FONT_NAME.toString());
			font1.setFontHeightInPoints((short) 14);
			font1.setBold(true);

			XSSFColor color = new XSSFColor(new java.awt.Color(66, 97, 80));
			font1.setColor(color);

			XSSFRichTextString richString11 = new XSSFRichTextString("BookletAllocated Status Reports");
			richString11.applyFont(font1);

			CellStyle style1 = workbook.createCellStyle();
			style1.setFont(font);

			Row titleRow1 = sheet.createRow(rowIndex++);
			Cell hssfCell11 = titleRow1.createCell(1);
			hssfCell11.setCellStyle(style1);
			hssfCell11.setCellValue(richString11);
			rowIndex++;

			sheet.setColumnWidth(1, 10000);

			Row titleRow = sheet.createRow(rowIndex++);

			Cell hssfCell = titleRow.createCell(0);
			hssfCell.setCellStyle(style1);
			XSSFRichTextString richString = new XSSFRichTextString("College");
			richString.applyFont(font);
			hssfCell.setCellValue(richString);
			sheet.setColumnWidth((short) (0), (short) 5000);

			Cell hssfCell1 = titleRow.createCell(1);
			hssfCell1.setCellStyle(style1);
			XSSFRichTextString richString1 = new XSSFRichTextString("Academic year");
			richString1.applyFont(font);
			hssfCell1.setCellValue(richString1);
			sheet.setColumnWidth((short) (1), (short) 3000);

			Cell hssfCell2 = titleRow.createCell(2);
			hssfCell2.setCellStyle(style1);
			XSSFRichTextString richString2 = new XSSFRichTextString("Exam Announcement");
			richString2.applyFont(font);
			hssfCell2.setCellValue(richString2);
			sheet.setColumnWidth((short) (2), (short) 6000);

			Cell hssfCell3 = titleRow.createCell(3);
			hssfCell3.setCellStyle(style1);
			XSSFRichTextString richString3 = new XSSFRichTextString("Program");
			richString3.applyFont(font);
			hssfCell3.setCellValue(richString3);
			sheet.setColumnWidth((short) (3), (short) 6000);

			Cell hssfCell4 = titleRow.createCell(4);
			hssfCell4.setCellStyle(style1);
			XSSFRichTextString richString4 = new XSSFRichTextString("Courses  ");
			richString4.applyFont(font);
			hssfCell4.setCellValue(richString4);
			sheet.setColumnWidth((short) (4), (short) 5000);

			Cell hssfCell5 = titleRow.createCell(5);
			hssfCell5.setCellStyle(style1);
			XSSFRichTextString richString5 = new XSSFRichTextString("Courses Code");
			richString5.applyFont(font);
			hssfCell5.setCellValue(richString5);
			sheet.setColumnWidth((short) (5), (short) 5000);

			Cell hssfCell6 = titleRow.createCell(6);
			hssfCell6.setCellStyle(style1);
			XSSFRichTextString richString6 = new XSSFRichTextString("Registration Type");
			richString6.applyFont(font);
			hssfCell6.setCellValue(richString6);
			sheet.setColumnWidth((short) (6), (short) 4000);

			Cell hssfCell7 = titleRow.createCell(7);
			hssfCell7.setCellStyle(style1);
			XSSFRichTextString richString7 = new XSSFRichTextString("Barcode");
			richString7.applyFont(font);
			hssfCell7.setCellValue(richString7);
			sheet.setColumnWidth((short) (7), (short) 4000);

			Cell hssfCell8 = titleRow.createCell(8);
			hssfCell8.setCellStyle(style1);
			XSSFRichTextString richString8 = new XSSFRichTextString("Expert Name ");
			richString8.applyFont(font);
			hssfCell8.setCellValue(richString8);
			sheet.setColumnWidth((short) (8), (short) 4000);

			Cell hssfCell9 = titleRow.createCell(9);
			hssfCell9.setCellStyle(style1);
			XSSFRichTextString richString9 = new XSSFRichTextString("Email Id");
			richString9.applyFont(font);
			hssfCell9.setCellValue(richString9);
			sheet.setColumnWidth((short) (9), (short) 4000);

			Cell hssfCell10 = titleRow.createCell(10);
			hssfCell10.setCellStyle(style1);
			XSSFRichTextString richString10 = new XSSFRichTextString("Mobile");
			richString10.applyFont(font);
			hssfCell10.setCellValue(richString10);
			sheet.setColumnWidth((short) (10), (short) 4000);

			Cell hssfCell14 = titleRow.createCell(11);
			hssfCell14.setCellStyle(style1);
			XSSFRichTextString richString14 = new XSSFRichTextString("Allocated By");
			richString14.applyFont(font);
			hssfCell14.setCellValue(richString14);
			sheet.setColumnWidth((short) (11), (short) 4000);

			CreationHelper createHelper = workbook.getCreationHelper();

			Font headerFont = workbook.createFont();
			headerFont.setBold(true);
			headerFont.setColor(IndexedColors.BLACK.getIndex());

			CellStyle headerCellStyle = workbook.createCellStyle();
			headerCellStyle.setFont(headerFont);

			// Create Cell Style for formatting Date
			CellStyle datetime = workbook.createCellStyle();
			datetime.setDataFormat(createHelper.createDataFormat().getFormat("dd/MM/yyyy hh:mm:ss"));
			if (value.get("status").toString().equals("1")) {
				JSONArray array = new JSONArray(value.get("details").toString());
				int rowIdx = 3;
				for (int i = 0; i < array.length(); i++) {
					JSONObject jsonObj = array.getJSONObject(i);
					Row row = sheet.createRow(rowIdx++);
					row.createCell(0).setCellValue(jsonObj.getString("college") + "");
					row.createCell(1).setCellValue(jsonObj.getString("academicyear") + "");
					row.createCell(2).setCellValue(jsonObj.getString("examannoncement"));
					row.createCell(3).setCellValue(jsonObj.getString("program"));
					row.createCell(4).setCellValue(jsonObj.getString("courses") + "");
					row.createCell(5).setCellValue(jsonObj.getString("coursesCode") + "");
					row.createCell(6).setCellValue(jsonObj.getString("regtype") + "");
					row.createCell(7).setCellValue(jsonObj.getString("barcode") + "");
					row.createCell(8).setCellValue(jsonObj.getString("staffname") + "");
					row.createCell(9).setCellValue(jsonObj.getString("email") + "");
					row.createCell(10).setCellValue(jsonObj.getString("mobile") + "");
					row.createCell(11).setCellValue(jsonObj.getString("selectedby") + "");

				}
			}

			workbook.write(out);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ByteArrayInputStream(out.toByteArray());
	}

	@Override
	public JSONObject bookletReAllocationStatus(BookletStaffRequest request) {
		JSONObject info = new JSONObject();
		try {
			logger.info("bookletallocationStatus >" + request.toString());

			Optional<AcademicYear> academicYearid = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getAcademicYear());
			if (!academicYearid.isPresent()) {
				info.put("status", "2");
				info.put("message", "AcademicYear id not present");
				return info;
			}

			Optional<ExamAnnouncement> ExamAnnouncement = super.examAnnouncement
					.findByExIsDeleteAndExIsActiveAndId(false, true, request.getExamAnnouncement());
			if (!ExamAnnouncement.isPresent()) {
				info.put("status", "2");
				info.put("message", "ExamAnnouncement not present");
				return info;
			}

			Optional<Programmes> program = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!program.isPresent()) {
				info.put("status", "2");
				info.put("message", "Programmes not present");
				return info;
			}
			Optional<RegistrationType> RegistrationType = super.registrationType
					.findByExIsDeleteAndExIsActiveAndId(false, true, request.getRegistrationType());
			if (!RegistrationType.isPresent()) {
				info.put("status", "2");
				info.put("message", "RegistrationType not present");
				return info;
			}

			Optional<Colleges> colleges = super.colleges.findById(request.getColleges());
			if (!colleges.isPresent()) {
				info.put("status", "2");
				info.put("message", "Colleges id not present");
				return info;
			}

			List dataList = new LinkedList();

			List<Object[]> evaluator = accademicdao.getbookletreallocationstatus(true, true, request.getAcademicYear(),
					request.getColleges(), request.getExamAnnouncement(), request.getProgrammes(),
					request.getRegistrationType());
			System.out.println("evaluator" + evaluator.size());
			if (evaluator.size() > 0) {
				for (Object[] inter : evaluator) {
					System.out.println("?????????????????????fggg???????????????????" + evaluator);

					JSONObject result = new JSONObject();

					result.put("exEmail", (String) inter[1]);
					result.put("staffname", (String) inter[2]);
					result.put("selectedby", (String) inter[3]);
					result.put("barcode", (String) inter[0]);
					result.put("mobile", (String) inter[4]);
					result.put("courses", (String) inter[5]);
					result.put("coursesCode", (String) inter[6]);

					result.put("college", colleges.get().getExName());
					result.put("academicyear", academicYearid.get().getExYear());
					result.put("examannoncement", ExamAnnouncement.get().getExName());
					result.put("program", program.get().getExName());
					result.put("regtype", RegistrationType.get().getExName());

					dataList.add(result);
					System.out.println("?????????????????????dataList???????????????????" + dataList);

				}
			}
			// check external / omr marks updated or not
			System.out.println("?????????????????????dataList???????????????????" + dataList);
			info.put("status", "1");
			info.put("details", dataList);
			return info;
		} catch (Exception e) {
			e.printStackTrace();
			return info;
		}
	}

	@Override
	public ByteArrayInputStream bookletReAllocationStatus(JSONObject value) {
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		System.out.println("****ByteArrayOutputStream**" + out);
		try {
			// HSSFWorkbook workbook = new HSSFWorkbook();
			Workbook workbook = new XSSFWorkbook();
			int rowIndex = 0;
			int index = 0;

			// Create the spreadsheet
			// HSSFSheet sheet = workbook.createSheet("accesslogs");

			Sheet sheet = workbook.createSheet("status");
			rowIndex = 0;

			CellStyle style = workbook.createCellStyle();
			style.setFillBackgroundColor(XSSFFont.COLOR_NORMAL);

			Font font = workbook.createFont();
			XSSFFont font1 = (XSSFFont) font;
			font1.setFontName(font1.DEFAULT_FONT_NAME.toString());
			font1.setFontHeightInPoints((short) 14);
			font1.setBold(true);

			XSSFColor color = new XSSFColor(new java.awt.Color(66, 97, 80));
			font1.setColor(color);

			XSSFRichTextString richString11 = new XSSFRichTextString("BookletReAllocated Status Reports");
			richString11.applyFont(font1);

			CellStyle style1 = workbook.createCellStyle();
			style1.setFont(font);

			Row titleRow1 = sheet.createRow(rowIndex++);
			Cell hssfCell11 = titleRow1.createCell(1);
			hssfCell11.setCellStyle(style1);
			hssfCell11.setCellValue(richString11);
			rowIndex++;

			sheet.setColumnWidth(1, 10000);

			Row titleRow = sheet.createRow(rowIndex++);

			Cell hssfCell = titleRow.createCell(0);
			hssfCell.setCellStyle(style1);
			XSSFRichTextString richString = new XSSFRichTextString("College");
			richString.applyFont(font);
			hssfCell.setCellValue(richString);
			sheet.setColumnWidth((short) (0), (short) 5000);

			Cell hssfCell1 = titleRow.createCell(1);
			hssfCell1.setCellStyle(style1);
			XSSFRichTextString richString1 = new XSSFRichTextString("Academic year");
			richString1.applyFont(font);
			hssfCell1.setCellValue(richString1);
			sheet.setColumnWidth((short) (1), (short) 3000);

			Cell hssfCell2 = titleRow.createCell(2);
			hssfCell2.setCellStyle(style1);
			XSSFRichTextString richString2 = new XSSFRichTextString("Exam Announcement");
			richString2.applyFont(font);
			hssfCell2.setCellValue(richString2);
			sheet.setColumnWidth((short) (2), (short) 6000);

			Cell hssfCell3 = titleRow.createCell(3);
			hssfCell3.setCellStyle(style1);
			XSSFRichTextString richString3 = new XSSFRichTextString("Program");
			richString3.applyFont(font);
			hssfCell3.setCellValue(richString3);
			sheet.setColumnWidth((short) (3), (short) 6000);

			Cell hssfCell4 = titleRow.createCell(4);
			hssfCell4.setCellStyle(style1);
			XSSFRichTextString richString4 = new XSSFRichTextString("Courses  ");
			richString4.applyFont(font);
			hssfCell4.setCellValue(richString4);
			sheet.setColumnWidth((short) (4), (short) 5000);

			Cell hssfCell5 = titleRow.createCell(5);
			hssfCell5.setCellStyle(style1);
			XSSFRichTextString richString5 = new XSSFRichTextString("Courses Code");
			richString5.applyFont(font);
			hssfCell5.setCellValue(richString5);
			sheet.setColumnWidth((short) (5), (short) 5000);

			Cell hssfCell6 = titleRow.createCell(6);
			hssfCell6.setCellStyle(style1);
			XSSFRichTextString richString6 = new XSSFRichTextString("Registration Type");
			richString6.applyFont(font);
			hssfCell6.setCellValue(richString6);
			sheet.setColumnWidth((short) (6), (short) 4000);

			Cell hssfCell7 = titleRow.createCell(7);
			hssfCell7.setCellStyle(style1);
			XSSFRichTextString richString7 = new XSSFRichTextString("Barcode");
			richString7.applyFont(font);
			hssfCell7.setCellValue(richString7);
			sheet.setColumnWidth((short) (7), (short) 4000);

			Cell hssfCell8 = titleRow.createCell(8);
			hssfCell8.setCellStyle(style1);
			XSSFRichTextString richString8 = new XSSFRichTextString("Expert Name ");
			richString8.applyFont(font);
			hssfCell8.setCellValue(richString8);
			sheet.setColumnWidth((short) (8), (short) 4000);

			Cell hssfCell9 = titleRow.createCell(9);
			hssfCell9.setCellStyle(style1);
			XSSFRichTextString richString9 = new XSSFRichTextString("Email");
			richString9.applyFont(font);
			hssfCell9.setCellValue(richString9);
			sheet.setColumnWidth((short) (9), (short) 4000);

			Cell hssfCell10 = titleRow.createCell(10);
			hssfCell10.setCellStyle(style1);
			XSSFRichTextString richString10 = new XSSFRichTextString("Mobile");
			richString10.applyFont(font);
			hssfCell10.setCellValue(richString10);
			sheet.setColumnWidth((short) (10), (short) 4000);

			Cell hssfCell14 = titleRow.createCell(11);
			hssfCell14.setCellStyle(style1);
			XSSFRichTextString richString14 = new XSSFRichTextString("ReAllocated By");
			richString14.applyFont(font);
			hssfCell14.setCellValue(richString14);
			sheet.setColumnWidth((short) (11), (short) 4000);

			CreationHelper createHelper = workbook.getCreationHelper();

			Font headerFont = workbook.createFont();
			headerFont.setBold(true);
			headerFont.setColor(IndexedColors.BLACK.getIndex());

			CellStyle headerCellStyle = workbook.createCellStyle();
			headerCellStyle.setFont(headerFont);

			// Create Cell Style for formatting Date
			CellStyle datetime = workbook.createCellStyle();
			datetime.setDataFormat(createHelper.createDataFormat().getFormat("dd/MM/yyyy hh:mm:ss"));
			if (value.get("status").toString().equals("1")) {
				JSONArray array = new JSONArray(value.get("details").toString());
				int rowIdx = 3;
				for (int i = 0; i < array.length(); i++) {
					JSONObject jsonObj = array.getJSONObject(i);
					Row row = sheet.createRow(rowIdx++);
					row.createCell(0).setCellValue(jsonObj.getString("college") + "");
					row.createCell(1).setCellValue(jsonObj.getString("academicyear") + "");
					row.createCell(2).setCellValue(jsonObj.getString("examannoncement"));
					row.createCell(3).setCellValue(jsonObj.getString("program"));
					row.createCell(4).setCellValue(jsonObj.getString("courses") + "");
					row.createCell(5).setCellValue(jsonObj.getString("coursesCode") + "");
					row.createCell(6).setCellValue(jsonObj.getString("regtype") + "");
					row.createCell(7).setCellValue(jsonObj.getString("barcode") + "");
					row.createCell(8).setCellValue(jsonObj.getString("staffname") + "");
					row.createCell(9).setCellValue(jsonObj.getString("exEmail") + "");
					row.createCell(10).setCellValue(jsonObj.getString("mobile") + "");
					row.createCell(11).setCellValue(jsonObj.getString("selectedby") + "");

				}
			}

			workbook.write(out);
			// System.out.println("****completed********"+workbook);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ByteArrayInputStream(out.toByteArray());
	}

	@Override
	public JSONObject evaluationStatus(BookletStaffRequest request) {
		JSONObject info = new JSONObject();
		try {
			logger.info("answerBookletUploadStatus >" + request.toString());

			Optional<AcademicYear> academicYearid = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getAcademicYear());
			if (!academicYearid.isPresent()) {
				info.put("status", "2");
				info.put("message", "AcademicYear id not present");
				return info;
			}

			Optional<Programmes> program = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!program.isPresent()) {
				info.put("status", "2");
				info.put("message", "Programmes not present");
				return info;
			}
			Optional<Colleges> colleges = super.colleges.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getColleges());
			if (!colleges.isPresent()) {
				info.put("status", "2");
				info.put("message", "colleges not present");
				return info;
			}
			Optional<ProgrammeYear> programmeyear = super.programmeYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammeYear());
			if (!programmeyear.isPresent()) {
				info.put("status", "2");
				info.put("message", "programmeyear not present");
				return info;
			}
			Optional<Semster> semester = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemster());
			if (!semester.isPresent()) {
				info.put("status", "2");
				info.put("message", "semester not present");
				return info;
			}

			Optional<ExamAnnouncement> ExamAnnouncement = super.examAnnouncement
					.findByExIsDeleteAndExIsActiveAndId(false, true, request.getExamAnnouncement());
			if (!ExamAnnouncement.isPresent()) {
				info.put("status", "2");
				info.put("message", "ExamAnnouncement not present");
				return info;
			}

			Optional<RegistrationType> RegistrationType = super.registrationType
					.findByExIsDeleteAndExIsActiveAndId(false, true, request.getRegistrationType());
			if (!RegistrationType.isPresent()) {
				info.put("status", "2");
				info.put("message", "RegistrationType not present");
				return info;
			}

			List<Courses> course = super.courses.findByExIsDeleteAndIdAndExIsActive(false, request.getCourse(), true);
			if (course.size() <= 0) {
				info.put("status", "2");
				info.put("message", "courses not present");
				return info;
			}

			List dataList = new LinkedList();

			List<EvaluationDetails> eval = super.evaluationDetails
					.findByAcademicYearIdAndExamAnnouncementIdAndCoursesIdAndProgrammesIdAndProgrammeYearIdAndSemesterId(
							request.getAcademicYear(), request.getExamAnnouncement(), request.getCourse(),
							request.getProgrammes(), request.getProgrammeYear(), request.getSemster());
			for (EvaluationDetails r : eval) {
				List<ExamBarcodes> recordlist = super.exambarcode
						.findByAcademicYearIdAndExamAnnouncementIdAndCoursesIdAndProgrammesIdAndExpertIdAndCollegesIdAndProgrammeYearIdAndSemesterId(
								request.getAcademicYear(), request.getExamAnnouncement(), request.getCourse(),
								request.getProgrammes(), r.getExpert().getId(), 
								request.getColleges(),request.getProgrammeYear(), request.getSemster());
				System.out.println("recordlist" + recordlist.size());
				JSONObject result = new JSONObject();

				int pendingcount = 0;
				int evauated = 0;
				for (ExamBarcodes e : recordlist) {
					if (e.getExIsEvaluated() == 0 || e.getExIsEvaluated() == 2)
						++pendingcount;

					if (e.getExIsEvaluated() == 1)
						++evauated;

					System.out.println("evaluationStatus" + eval.size());

					// dataList.add(result);

				}
				result.put("pendingbooklet", pendingcount);
				result.put("evaluatedbooklet", evauated);
				result.put("staffname", recordlist.get(0).getExpert().getExName());
				result.put("mobile", recordlist.get(0).getExpert().getExContactDetails());
				result.put("email", recordlist.get(0).getExpert().getExEmail());

				result.put("allocatedbooklet", recordlist.size());

				result.put("regtype", RegistrationType.get().getExName());
				result.put("courses", course.get(0).getExName());
				result.put("academicyear", academicYearid.get().getExYear());
				result.put("colleges", colleges.get().getExName());
				result.put("programmeyear", programmeyear.get().getExName());
				result.put("semester", semester.get().getExName());
				result.put("program", program.get().getExName());
				result.put("examannoncement", ExamAnnouncement.get().getExName());
				result.put("coursesCode", course.get(0).getExCoursesCode());
				dataList.add(result);

			}

			info.put("status", "1");
			info.put("details", dataList);
			return info;
		} catch (Exception e) {
			e.printStackTrace();
			return info;
		}
	}

	@Override
	public ByteArrayInputStream evaluationStatus(JSONObject value) {
		// TODO Auto-generated method stub
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		System.out.println("****ByteArrayOutputStream**" + out);
		try {
			// HSSFWorkbook workbook = new HSSFWorkbook();
			Workbook workbook = new XSSFWorkbook();
			int rowIndex = 0;
			int index = 0;

			// Create the spreadsheet
			// HSSFSheet sheet = workbook.createSheet("accesslogs");

			Sheet sheet = workbook.createSheet("status");
			rowIndex = 0;

			CellStyle style = workbook.createCellStyle();
			style.setFillBackgroundColor(XSSFFont.COLOR_NORMAL);

			Font font = workbook.createFont();
			XSSFFont font1 = (XSSFFont) font;
			font1.setFontName(font1.DEFAULT_FONT_NAME.toString());
			font1.setFontHeightInPoints((short) 14);
			font1.setBold(true);

			XSSFColor color = new XSSFColor(new java.awt.Color(66, 97, 80));
			font1.setColor(color);

			XSSFRichTextString richString15 = new XSSFRichTextString("Evaluation Status Reports");
			richString15.applyFont(font1);

			CellStyle style1 = workbook.createCellStyle();
			style1.setFont(font);

			Row titleRow1 = sheet.createRow(rowIndex++);
			Cell hssfCell15 = titleRow1.createCell(1);
			hssfCell15.setCellStyle(style1);
			hssfCell15.setCellValue(richString15);
			rowIndex++;

			sheet.setColumnWidth(1, 10000);

			Row titleRow = sheet.createRow(rowIndex++);

			Cell hssfCell = titleRow.createCell(0);
			hssfCell.setCellStyle(style1);
			XSSFRichTextString richString = new XSSFRichTextString("College");
			richString.applyFont(font);
			hssfCell.setCellValue(richString);
			sheet.setColumnWidth((short) (0), (short) 5000);

			Cell hssfCell1 = titleRow.createCell(1);
			hssfCell1.setCellStyle(style1);
			XSSFRichTextString richString1 = new XSSFRichTextString("Academic year");
			richString1.applyFont(font);
			hssfCell1.setCellValue(richString1);
			sheet.setColumnWidth((short) (1), (short) 3000);

			Cell hssfCell2 = titleRow.createCell(2);
			hssfCell2.setCellStyle(style1);
			XSSFRichTextString richString2 = new XSSFRichTextString("Exam Announcement");
			richString2.applyFont(font);
			hssfCell2.setCellValue(richString2);
			sheet.setColumnWidth((short) (2), (short) 6000);

			Cell hssfCell3 = titleRow.createCell(3);
			hssfCell3.setCellStyle(style1);
			XSSFRichTextString richString3 = new XSSFRichTextString("Programme");
			richString3.applyFont(font);
			hssfCell3.setCellValue(richString3);
			sheet.setColumnWidth((short) (3), (short) 6000);

			Cell hssfCell4 = titleRow.createCell(4);
			hssfCell4.setCellStyle(style1);
			XSSFRichTextString richString4 = new XSSFRichTextString("ProgrammeYear ");
			richString4.applyFont(font);
			hssfCell4.setCellValue(richString4);
			sheet.setColumnWidth((short) (4), (short) 5000);

			Cell hssfCell5 = titleRow.createCell(5);
			hssfCell5.setCellStyle(style1);
			XSSFRichTextString richString5 = new XSSFRichTextString("Semester");
			richString5.applyFont(font);
			hssfCell5.setCellValue(richString5);
			sheet.setColumnWidth((short) (5), (short) 5000);

			Cell hssfCell6 = titleRow.createCell(6);
			hssfCell6.setCellStyle(style1);
			XSSFRichTextString richString6 = new XSSFRichTextString("Course  ");
			richString6.applyFont(font);
			hssfCell6.setCellValue(richString6);
			sheet.setColumnWidth((short) (6), (short) 4000);

			Cell hssfCell7 = titleRow.createCell(7);
			hssfCell7.setCellStyle(style1);
			XSSFRichTextString richString7 = new XSSFRichTextString("Course Code  ");
			richString7.applyFont(font);
			hssfCell7.setCellValue(richString7);
			sheet.setColumnWidth((short) (7), (short) 4000);

			Cell hssfCell8 = titleRow.createCell(8);
			hssfCell8.setCellStyle(style1);
			XSSFRichTextString richString8 = new XSSFRichTextString("Registration Type");
			richString8.applyFont(font);
			hssfCell8.setCellValue(richString8);
			sheet.setColumnWidth((short) (8), (short) 4000);

			Cell hssfCell9 = titleRow.createCell(9);
			hssfCell9.setCellStyle(style1);
			XSSFRichTextString richString9 = new XSSFRichTextString("Staff Name ");
			richString9.applyFont(font);
			hssfCell9.setCellValue(richString9);
			sheet.setColumnWidth((short) (9), (short) 4000);

			Cell hssfCell10 = titleRow.createCell(10);
			hssfCell10.setCellStyle(style1);
			XSSFRichTextString richString10 = new XSSFRichTextString("Mobile");
			richString10.applyFont(font);
			hssfCell10.setCellValue(richString10);
			sheet.setColumnWidth((short) (10), (short) 4000);

			Cell hssfCell11 = titleRow.createCell(11);
			hssfCell11.setCellStyle(style1);
			XSSFRichTextString richString11 = new XSSFRichTextString("Email ID");
			richString11.applyFont(font);
			hssfCell11.setCellValue(richString11);
			sheet.setColumnWidth((short) (11), (short) 4000);

			Cell hssfCell12 = titleRow.createCell(12);
			hssfCell12.setCellStyle(style1);
			XSSFRichTextString richString12 = new XSSFRichTextString("Allocated Booklet");
			richString12.applyFont(font);
			hssfCell12.setCellValue(richString12);
			sheet.setColumnWidth((short) (17), (short) 4000);

			Cell hssfCell13 = titleRow.createCell(13);
			hssfCell13.setCellStyle(style1);
			XSSFRichTextString richString13 = new XSSFRichTextString("Evaluated Booklet");
			richString13.applyFont(font);
			hssfCell13.setCellValue(richString13);
			sheet.setColumnWidth((short) (17), (short) 4000);

			Cell hssfCell14 = titleRow.createCell(14);
			hssfCell14.setCellStyle(style1);
			XSSFRichTextString richString14 = new XSSFRichTextString("Pending Booklet");
			richString14.applyFont(font);
			hssfCell14.setCellValue(richString14);
			sheet.setColumnWidth((short) (17), (short) 4000);

			CreationHelper createHelper = workbook.getCreationHelper();

			
			
			Font headerFont = workbook.createFont();
			headerFont.setBold(true);
			headerFont.setColor(IndexedColors.BLACK.getIndex());

			CellStyle headerCellStyle = workbook.createCellStyle();
			headerCellStyle.setFont(headerFont);

			// Create Cell Style for formatting Date
			CellStyle datetime = workbook.createCellStyle();
			datetime.setDataFormat(createHelper.createDataFormat().getFormat("dd/MM/yyyy hh:mm:ss"));
			if (value.get("status").toString().equals("1")) {
				JSONArray array = new JSONArray(value.get("details").toString());
				int rowIdx = 3;
				for (int i = 0; i < array.length(); i++) {
					JSONObject jsonObj = array.getJSONObject(i);
					Row row = sheet.createRow(rowIdx++);
					row.createCell(0).setCellValue(jsonObj.getString("colleges"));
					row.createCell(1).setCellValue(jsonObj.getString("academicyear") + "");
					row.createCell(2).setCellValue(jsonObj.getString("examannoncement") + "");
					row.createCell(3).setCellValue(jsonObj.getString("program"));
					row.createCell(4).setCellValue(jsonObj.getString("programmeyear"));

					row.createCell(5).setCellValue(jsonObj.getString("semester"));
					row.createCell(6).setCellValue(jsonObj.getString("courses"));
					row.createCell(7).setCellValue(jsonObj.getString("coursesCode") + "");
					row.createCell(8).setCellValue(jsonObj.getString("regtype") + "");
					row.createCell(9).setCellValue(jsonObj.getString("staffname") + "");
					row.createCell(10).setCellValue(jsonObj.getString("mobile") + "");
					row.createCell(11).setCellValue(jsonObj.getString("email") + "");
					row.createCell(12).setCellValue(jsonObj.getInt("allocatedbooklet") + "");
					row.createCell(13).setCellValue(jsonObj.getInt("evaluatedbooklet") + "");
					row.createCell(14).setCellValue(jsonObj.getInt("pendingbooklet") + "");

				}
			}

			workbook.write(out);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ByteArrayInputStream(out.toByteArray());
	}

	@Override
	public List<Object[]> validateExcelTransactionList1(ReportRequest request) {
		List<Object[]> list1 = null;
		List<Object[]> list2 = null;
		List<Object[]> list3 = new ArrayList<>();
		try {
			logger.info("Request for report" + request.toString());
			SimpleDateFormat date = new SimpleDateFormat("dd/mm/yyyy");
			DateFormat dateFormat = new SimpleDateFormat("yyyy-mm-dd hh:MM:ss");

			List<String> paymentstatus = validation.validatePaymentStatus(request);
			String sacademic = validation.validateRepor(request.getAcademicYear());
			// String scenter = validation.validateRepor(request.getColleges());
			// String scourses = validation.validateRepor(request.getCourses());
			String ssemester = validation.validateRepor(request.getSemester());
			// String scategiory = validation.validateRepor(request.getCategory());
			String pstatus = validation.validateReporPaymet(paymentstatus);
			
				
			System.out.println("ddddddddddddddddddddddddddd" + pstatus);
			// Step 2 = create Query for report based on condition

			String sql = "";

			
			String sDate = dateFormat.format(date.parse(request.getStartDate() ));
			System.out.println(">>>>>>>..start date" + sDate);
			String eDate = dateFormat.format(date.parse(request.getEndDate()));
			System.out.println(">>>>>>>..eDate date" + eDate);
			sql = "AND DATE(o.txnDate) >= '" + sDate + "' AND DATE(o.txnDate) <= '" + eDate
					+ "' AND o.academicYear  IN (" + sacademic + ")   AND o.semester IN (" + ssemester
					+ ")  AND o.paymentstatus IN (" + pstatus + ") order by o.txnDate desc";
			System.out.println(">>>>>>" + sDate);
			logger.info(">>>>>>>sql>>>>>>>>>" + sql);
			System.out.println(">>>...list1" + sql);
			
			//  SimpleDateFormat formatter6=new SimpleDateFormat("dd-MMM-yyyy HH:mm:ss");  
			 // Date date6=formatter6.parse(sDate); 
			  
			 // SimpleDateFormat formatter7=new SimpleDateFormat("dd-MMM-yyyy HH:mm:ss");  
			 // Date date7=formatter7.parse(eDate);
			//System.out.println("Academic "+sacademic);
			//System.out.println("Academicxcvb "+request.getAcademicYear());
			//List<Long> academic = Arrays.asList(sacademic.split(",")).stream().map(s -> Long.parseLong(s.trim())).collect(Collectors.toList());
			//System.out.println("Academic2222 "+academic);
			//List<Long> semester = Arrays.asList(ssemester.split(",")).stream().map(s -> Long.parseLong(s.trim())).collect(Collectors.toList());
		//	list1 = accademicdao.getTransactionReport(sql);
			list3 =super.transactionRepository.getTransactionReports(request.getPaymentStatus(),request.getAcademicYear(),request.getSemester(),sDate,eDate);
			
		//	System.out.println("listcccc333333   "+ list1);
			
			// StringBuilder sb = new StringBuilder();
		      //  for (Object[] ch : list1) {
		      //      sb.append(ch);
		      //  }
		      //  String string = sb.toString();
		       // System.out.println("Niftemmmmmmm"   +string);
		       // String[] array = new String[list1.size()];
		      //  int index = 0;
		/*	String s="";
		        for (Object[] value : list1) {
		        	for(int i=0;i<=list1.size()-1;i++) {
		        	 s=value[i] == null ? "NA" :value[i].toString();
		        	   	System.out.println("New123 "+s);
		        	}
		     
		        	//List<String> listOfString = Stream.of(value)
					///		  .map(Object::toString)
						//	  .collect(Collectors.toList());
					//System.out.println("  Ranganath     "+listOfString.toString());	
		               // String[] strArray = (String[]) value;
		               // System.out.println("bbbbb   "+Arrays.toString(strArray));
		         // array[index] =   String.valueOf( value );
		         // String s= array[index];
		         // String s1 = list1.stream().map(Object::toString).collect(Collectors.joining(","));
		        ////  System.out.println("upppppppppppppp   "+ s);   
		        //  System.out.println("uppppppppppppppccccc   "+ s1.split(","));  
		         // index++;
		        }*/
		        
			List<Object[]> list = new ArrayList<Object[]>();
			//list.addAll(list1);
			list.addAll(list3);
			/*
			 * for (Object[] value : list) { for(int i=0;i<list.size()-1;i++) { String
			 * s=value[i] == null ? "NA" : value[i].toString();
			 * System.out.println("NewChanges12345  "+s); } }
			 */
			//List<String> listOfString = Stream.of(list)
			//		  .map(Object::toString)
			//		  .collect(Collectors.toList());
			//System.out.println("       "+listOfString.toString());
			//StringBuilder b = new StringBuilder();
			//list.forEach(b::append);
			//System.out.println("       "+b+"\n");
			//String[] arr = list.toArray(new String[] {});
			//System.out.println("ssssssss   "+Arrays.deepToString(arr));
			return list;
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			return list1;
		}

	}

	@Override
	public List<EvaluatorList> validateexpertListReport(ExportListRequest request) {
		List<EvaluatorList> list = new ArrayList<>();
		try {

			list = super.expertlist.findByExIsActiveAndExIsDelete(true, false);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			return list;
		}
		return list;
	}

	@Override
	public List<Object[]> validateTopperlistReportList1(ReportRequest request) {
		List<Object[]> list = new ArrayList<>();
		try {
			// List<String> Percentage = validation.validatePercentage(request);
			String sacademic = validation.validateRepor(request.getAcademicYear());
			String scollege = validation.validateRepor(request.getColleges());
//	String scourses = validation.validateRepor(request.getCourses());
			String ssemester = validation.validateRepor(request.getSemester());
			String sdegree = validation.validateRepor(request.getDegree());
			String sprogramme = validation.validateRepor(request.getProgrammes());
			String sprogrammeYear = validation.validateRepor(request.getProgrammeYear());
			// String sPercentage = validation.validateReporPercenatge(Percentage);

			// Step 2 = create Query for report based on condition

			String sql = "";

			sql = " s.academicYear  IN (" + sacademic + ")    AND s.semester IN (" + ssemester + ")  AND s.degree IN ("
					+ sdegree + ") AND s.programmes IN (" + sprogramme + ") AND s.programmeYear IN (" + sprogrammeYear
					+ ")";
			logger.info(">>>>>>>sql>>>>>>>>>" + sql);
			list = super.accademicdao.getTopperListReport(sql);//request.getAcademicYear(),request.getSemester(),request.getDegree(),request.getProgrammes(),request.getProgrammeYear());
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());

		}
		return list;

	}

	@Override
	public List<Object[]> validatecriteriaReportlistReportList1(CriteriaRequest request) {
		List<Object[]> list = new ArrayList<>();
		try {

			String collagestatus = "";
			List<Long> list1 = new ArrayList();
			if (request.getColleges().size() > 0) {
				for (int i = 0; i < request.getColleges().size(); i++) {
					Long number = request.getColleges().get(i);
					Long col = new Long(number);
					Optional<Colleges> college = super.colleges.findByIdAndExIsDeleteAndExIsActive(col, false, true);
					list1.add(college.get().getId());
					collagestatus = collagestatus + number + ",";
				}
				collagestatus = collagestatus.substring(0, collagestatus.length() - 1);
				collagestatus = " AND s.colleges IN ( " + collagestatus + " )";
			}

			// Step 2 = create Query for report based on condition

			if (request.getExCGPA() == null || request.getExCGPA().trim().equals("")) {
				return list;
			}

			if ((request.getAcademicYear() != null || !request.getAcademicYear().equals(""))
					&& (request.getDegree() != null || !request.getDegree().equals(""))
					&& (request.getProgramme() != null || !request.getProgramme().equals(""))
					&& (request.getProgrammeYear() != null || !request.getProgrammeYear().equals(""))
					&& (request.getSemester() != null || !request.getSemester().equals(""))
					&& (collagestatus != null || !collagestatus.isEmpty())) {
			}

			list = super.accademicdao.getCriteriaListReport(request.getAcademicYear(), request.getDegree(),
					request.getProgramme(), request.getProgrammeYear(), request.getSemester(), collagestatus,
					request.getExCGPA());

		} catch (Exception e) {
			e.printStackTrace();
		}

		return list;
	}

	@Override
	public List<Object[]> validategoldMeritReportlistReportList1(CriteriaRequest request) {
		List<Object[]> list = new ArrayList<Object[]>();
		try {
			String collagestatus = "";
			List<Long> list1 = new ArrayList();
			if (request.getColleges().size() > 0) {
				for (int i = 0; i < request.getColleges().size(); i++) {
					Long number = request.getColleges().get(i);
					Long col = new Long(number);
					Optional<Colleges> college = super.colleges.findByIdAndExIsDeleteAndExIsActive(col, false, true);
					list1.add(college.get().getId());
					collagestatus = collagestatus + number + ",";
				}
				collagestatus = collagestatus.substring(0, collagestatus.length() - 1);
				collagestatus = " AND o.colleges IN ( " + collagestatus + " )";
			}

			if ((request.getAcademicYear() != null || !request.getAcademicYear().equals(""))
					&& (collagestatus != null || !collagestatus.isEmpty())) {
			}

			//list = super.accademicdao.getExcelGoldmedalReport(request.getAcademicYear(), collagestatus);
			list = super.ogpa.getExcelReport(request.getAcademicYear(), request.getColleges());

		} catch (Exception e) {
			e.printStackTrace();
		}

		return list;

	}

	@Override
	public List<Object[]> validateTransactionReportlistReportList1(OrderTransactionReport request) {
		// TODO Auto-generated method stub
		List<Object[]> list = null;
		try {
			logger.info("Request for report" + request.toString());
			SimpleDateFormat date = new SimpleDateFormat("dd/mm/yyyy");	
			DateFormat dateFormat = new SimpleDateFormat("yyyy-mm-dd hh:MM:ss");
		
			List<String> paymentstatus = validation.validatePaymentStatus(request);

			// create Query for report

			String sacademic = validation.validateRepor(request.getAcademicyear());
	       //String scollege = validation.validateRepor(request.getColleges());
			String sprogram = validation.validateRepor(request.getProgrammes());
			String sprogramyear = validation.validateRepor(request.getProgrammeyear());
			String ssemester = validation.validateRepor(request.getSemester());

			String sfeetype = validation.validateRepor(request.getFeeType());
			String pstatus = validation.validateReporPaymet(paymentstatus);

			
			logger.info("paymentstatuspaymentstatuspaymentstatuspaymentstatus" + pstatus);

			String sql = "";
	
			String sDate = dateFormat.format(date.parse(request.getStartDate().trim() + " 00:00:00"));
			String eDate = dateFormat.format(date.parse(request.getEndDate().trim() + " 23:59:59"));
			sql = "AND DATE(o.txnDate) >= '" + sDate + "' AND DATE(o.txnDate) <= '" + eDate
					+ "' AND o.academicYear  IN (" + sacademic + ") AND o.semester IN ("+ssemester+") AND o.programmes IN ("+sprogram+")   AND o.programmeYear IN ("+sprogramyear+") AND o.paymentstatus IN (" + pstatus + ")";

			logger.info(">>>>>>>sql>>>>>>>>>" + sql);
			list = super.accademicdao.getTransactionReport(sql);

			return list;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			return list;
		}

	}

	@Override
	public JSONObject backlogReport(OrderTransactionReport request) {
		JSONObject info = new JSONObject();
		try {
			logger.info("backlogReport >" + request.toString());
			if (request.getExRollNo() == null || request.getExRollNo().trim().equals("")) {
				info.put("status", "2");
				info.put("message", "Student id are missing");
				return info;
			}

			List<RegistrationType> rtype = super.registrationType.findByExIsDeleteAndExIsActive(false, true);
			if (rtype.size() <= 0) {
				info.put("status", "2");
				info.put("message", "RegistrationType not present");
				return info;
			}

			List dataList = new LinkedList();
			// get Supply Courses
			logger.info("sssssssss>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>qqqqqqq");
			List<Object[]> backlog = super.accademicdao.backlogReport(request.getExRollNo(), rtype.get(1).getId());
			System.out.println("???????????????????????/" + rtype.get(1).getId());
			logger.info("sssssssss>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" + backlog.size());
			for (Object[] s : backlog) {
				JSONObject sply = new JSONObject();
				sply.put("courses", s[0]);
				sply.put("registration", s[1]);
				
				  if(s[2] != null) {
					  if(s[2].toString().equals("true")) {
						  sply.put("isPaid",
 "1"); }else { 
					 sply.put("isPaid", "0"); }
			
				  }else { 
					  sply.put("isPaid", "Not Paid");
					  }
				 
		//		sply.put("isPaid", s[2]);
				sply.put("coursesCode", s[3]);
				sply.put("program", s[4]);

				sply.put("supplyProgramYear", s[5]);
				sply.put("supplySemester", s[6]);

				sply.put("AttendProgramyear", s[7]);
				sply.put("Attendsemester", s[8]);

				sply.put("college", s[9]);
				sply.put("degree", s[10]);
				sply.put("remark", s[11]);

				sply.put("studentid", request.getExRollNo());
				dataList.add(sply);
			}

			info.put("status", "1");
			info.put("details", dataList);
			return info;
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());

			return info;
		}
	}

	@Override
	public ByteArrayInputStream backlogReport(JSONObject value) {
		// TODO Auto-generated method stub
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		System.out.println("****ByteArrayOutputStream**" + out);
		try {
			// HSSFWorkbook workbook = new HSSFWorkbook();
			Workbook workbook = new XSSFWorkbook();
			int rowIndex = 0;
			int index = 0;

			// Create the spreadsheet
			// HSSFSheet sheet = workbook.createSheet("accesslogs");

			Sheet sheet = workbook.createSheet("status");
			rowIndex = 0;

			CellStyle style = workbook.createCellStyle();
			style.setFillBackgroundColor(XSSFFont.COLOR_NORMAL);

			Font font = workbook.createFont();
			XSSFFont font1 = (XSSFFont) font;
			font1.setFontName(font1.DEFAULT_FONT_NAME.toString());
			font1.setFontHeightInPoints((short) 14);
			font1.setBold(true);

			XSSFColor color = new XSSFColor(new java.awt.Color(66, 97, 80));
			font1.setColor(color);

			XSSFRichTextString richString11 = new XSSFRichTextString("Backlog Reports");
			richString11.applyFont(font1);

			CellStyle style1 = workbook.createCellStyle();
			style1.setFont(font);

			Row titleRow1 = sheet.createRow(rowIndex++);
			Cell hssfCell11 = titleRow1.createCell(1);
			hssfCell11.setCellStyle(style1);
			hssfCell11.setCellValue(richString11);
			rowIndex++;

			sheet.setColumnWidth(1, 10000);

			Row titleRow = sheet.createRow(rowIndex++);

			Cell hssfCell = titleRow.createCell(0);
			hssfCell.setCellStyle(style1);
			XSSFRichTextString richString = new XSSFRichTextString("College");
			richString.applyFont(font);
			hssfCell.setCellValue(richString);
			sheet.setColumnWidth((short) (0), (short) 5000);

			Cell hssfCell1 = titleRow.createCell(1);
			hssfCell1.setCellStyle(style1);
			XSSFRichTextString richString1 = new XSSFRichTextString("Program");
			richString1.applyFont(font);
			hssfCell1.setCellValue(richString1);
			sheet.setColumnWidth((short) (1), (short) 3000);

			Cell hssfCell2 = titleRow.createCell(2);
			hssfCell2.setCellStyle(style1);
			XSSFRichTextString richString2 = new XSSFRichTextString("Supply Programme Year");
			richString2.applyFont(font);
			hssfCell2.setCellValue(richString2);
			sheet.setColumnWidth((short) (2), (short) 6000);

			Cell hssfCell3 = titleRow.createCell(3);
			hssfCell3.setCellStyle(style1);
			XSSFRichTextString richString3 = new XSSFRichTextString("Supply Semster");
			richString3.applyFont(font);
			hssfCell3.setCellValue(richString3);
			sheet.setColumnWidth((short) (3), (short) 6000);

			Cell hssfCell4 = titleRow.createCell(4);
			hssfCell4.setCellStyle(style1);
			XSSFRichTextString richString4 = new XSSFRichTextString("Attended Programme Year");
			richString4.applyFont(font);
			hssfCell4.setCellValue(richString4);
			sheet.setColumnWidth((short) (4), (short) 5000);

			Cell hssfCell5 = titleRow.createCell(5);
			hssfCell5.setCellStyle(style1);
			XSSFRichTextString richString5 = new XSSFRichTextString("Attended Programme Semster");
			richString5.applyFont(font);
			hssfCell5.setCellValue(richString5);
			sheet.setColumnWidth((short) (5), (short) 5000);

			Cell hssfCell6 = titleRow.createCell(6);
			hssfCell6.setCellStyle(style1);
			XSSFRichTextString richString6 = new XSSFRichTextString("Degree");
			richString6.applyFont(font);
			hssfCell6.setCellValue(richString6);
			sheet.setColumnWidth((short) (6), (short) 4000);

			Cell hssfCell7 = titleRow.createCell(7);
			hssfCell7.setCellStyle(style1);
			XSSFRichTextString richString7 = new XSSFRichTextString("Courses");
			richString7.applyFont(font);
			hssfCell7.setCellValue(richString7);
			sheet.setColumnWidth((short) (7), (short) 4000);

			Cell hssfCell8 = titleRow.createCell(8);
			hssfCell8.setCellStyle(style1);
			XSSFRichTextString richString8 = new XSSFRichTextString("Courses Code");
			richString8.applyFont(font);
			hssfCell8.setCellValue(richString8);
			sheet.setColumnWidth((short) (8), (short) 4000);

			Cell hssfCell9 = titleRow.createCell(9);
			hssfCell9.setCellStyle(style1);
			XSSFRichTextString richString9 = new XSSFRichTextString("Student Id");
			richString9.applyFont(font);
			hssfCell9.setCellValue(richString9);
			sheet.setColumnWidth((short) (9), (short) 4000);

			Cell hssfCell10 = titleRow.createCell(10);
			hssfCell10.setCellStyle(style1);
			XSSFRichTextString richString10 = new XSSFRichTextString("Payment Status");
			richString10.applyFont(font);
			hssfCell10.setCellValue(richString10);
			sheet.setColumnWidth((short) (10), (short) 4000);

			Cell hssfCell111 = titleRow.createCell(11);
			hssfCell111.setCellStyle(style1);
			XSSFRichTextString richString111 = new XSSFRichTextString("Result Status");
			richString111.applyFont(font);
			hssfCell111.setCellValue(richString111);
			sheet.setColumnWidth((short) (11), (short) 4000);

			CreationHelper createHelper = workbook.getCreationHelper();

			Font headerFont = workbook.createFont();
			headerFont.setBold(true);
			headerFont.setColor(IndexedColors.BLACK.getIndex());

			CellStyle headerCellStyle = workbook.createCellStyle();
			headerCellStyle.setFont(headerFont);

			// Create Cell Style for formatting Date
			if (value.get("status").toString().equals("1")) {
				JSONArray array = new JSONArray(value.get("details").toString());
				int rowIdx = 3;
				for (int i = 0; i < array.length(); i++) {
					JSONObject jsonObj = array.getJSONObject(i);
					Row row = sheet.createRow(rowIdx++);
					row.createCell(0).setCellValue(jsonObj.getString("college"));
					row.createCell(1).setCellValue(jsonObj.getString("program"));
					row.createCell(2).setCellValue(jsonObj.getString("supplyProgramYear"));
					row.createCell(3).setCellValue(jsonObj.getString("supplySemester") + "");

					row.createCell(4).setCellValue(jsonObj.getString("AttendProgramyear"));
					row.createCell(5).setCellValue(jsonObj.getString("Attendsemester") + "");

					row.createCell(6).setCellValue(jsonObj.getString("degree") + "");
					row.createCell(7).setCellValue(jsonObj.getString("courses") + "");
					row.createCell(8).setCellValue(jsonObj.getString("coursesCode") + "");
					row.createCell(9).setCellValue(jsonObj.getString("studentid") + "");
					row.createCell(10).setCellValue(jsonObj.getString("isPaid") + "");
					row.createCell(11).setCellValue(jsonObj.getString("remark") + "");

				}
			}

			
			workbook.write(out);
			// System.out.println("****completed********"+workbook);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ByteArrayInputStream(out.toByteArray());
	}

	@Override
	public List<Object[]> validatequestionPaperReportlistReportList1(OrderTransactionReport request) {
		List<Object[]> list = null;
		try {
			logger.info("Request for report" + request.toString());
			SimpleDateFormat date = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
			DateFormat dateFormat = new SimpleDateFormat("yyyy-mm-dd hh:mm:ss");

			List<String> paymentstatus = validation.validatePaymentStatus(request);

			// create Query for report

			String sacademic = validation.validateRepor(request.getAcademicyear());
			String sdegree = validation.validateRepor(request.getDegreeId());
			String scourse = validation.validateRepor(request.getCourses());
			
			
			String sql = "";
		
			sql = " q.academicYear  IN (" + sacademic + ")  AND q.degree IN (" + sdegree + ") AND q.courses IN ("+scourse+")";

			logger.info(">>>>>>>sql>>>>>>>>>" + sql);
			list = super.accademicdao.getExcelQuestionPaperReports(sql);

			return list;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			return list;
		}

	}

	@Override
	public List<Object[]> validateexcelInvigilatorAllocationReportlistReport(ReportRequest request) {
		List<Object[]> list = null;
		try {
			logger.info("Request for report" + request.toString());
			SimpleDateFormat date = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
			DateFormat dateFormat = new SimpleDateFormat("yyyy-mm-dd hh:mm:ss");

	

			// create Query for report

			String sacademic = validation.validateRepor(request.getAcademicYear());
		
		
			String sprogramme= validation.validateRepor(request.getProgrammes());
			String sdegree= validation.validateRepor(request.getDegree());
			String sdepartment= validation.validateRepor(request.getDepartment());
			
			String sql = "";
		
			sql = " q.academicYear  IN (" + sacademic + ")  AND q.degree IN (" + sdegree + ")  AND q.programmes IN (" + sprogramme + ") AND q.department IN (" + sdepartment + ") ";

			logger.info(">>>>>>>sql>>>>>>>>>" + sql);
			list = super.accademicdao.getExcelInvigilatorReports(sql);

			return list;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			return list;
		}

	}
	@Override
	public List<AccessLogs> accessLogs(ReportRequest request) {
		// TODO Auto-generated method stub
		List<AccessLogs> list = new ArrayList<>();
		try {
			DateFormat sdf = new SimpleDateFormat("dd/MM/yyy hh:mm:ss");
				if ((request.getStartDate() != null && !request.getStartDate().trim().equals(""))
					&& (request.getEndDate() != null && !request.getEndDate().trim().equals(""))) {
				Calendar c = Calendar.getInstance();

				Date Sdate = sdf.parse(request.getStartDate() + " 00:00:00");
				Date edate = sdf.parse(request.getEndDate() + " 00:00:00");
				c.setTime(Sdate);
				c.setTime(edate);

				return (List<AccessLogs>) super.accessLogs.findByCreatedate(Sdate, edate);
			
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			return list;
		}
		return null;
	}

	@Override
	public  ByteArrayInputStream semesterRegistrationReport(List<SemesterRegistration> request) {
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		try {
			Workbook workbook = new XSSFWorkbook();
			int rowIndex = 0;
			int index = 0;
			Sheet sheet = workbook.createSheet("SemesterRegistration Report");
			rowIndex = 1;

			CellStyle styles = workbook.createCellStyle();
	    	  Font font11 = workbook.createFont();
			  font11.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
			  font11.setColor(HSSFColor.WHITE.index);
			  styles.setFont(font11);
			  styles.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());
			  styles.setFillPattern(CellStyle.SOLID_FOREGROUND);
			  styles.setBorderBottom(CellStyle.BORDER_THIN);
			  styles.setBottomBorderColor(IndexedColors.BLACK.getIndex());
			  styles.setBorderLeft(CellStyle.BORDER_THIN);
			  styles.setLeftBorderColor(IndexedColors.BLACK.getIndex());
			  styles.setBorderRight(CellStyle.BORDER_THIN);
			  styles.setRightBorderColor(IndexedColors.BLACK.getIndex());
			  styles.setBorderTop(CellStyle.BORDER_THIN);
			  styles.setTopBorderColor(IndexedColors.BLACK.getIndex());
			  styles.setAlignment(CellStyle.ALIGN_CENTER);
	
			  SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
		        Date date  =  new Date();
		        
		        Row dataRow1 = sheet.createRow(0);	
				Font font = workbook.createFont();
				XSSFFont font1 = (XSSFFont) font;
				XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
		
				Cell cel  =	dataRow1.createCell(0,Cell.CELL_TYPE_STRING);
				cel.setCellStyle(styles);
				cel.setCellValue(ricString);
				font1.setBold(true);
				
				XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());
				Cell cel1  =	dataRow1.createCell(1,Cell.CELL_TYPE_STRING);
				cel1.setCellStyle(styles);
				cel1.setCellValue(ric_String);
				font1.setBold(true);

			CellStyle style1 = workbook.createCellStyle();
			 Font font111 = workbook.createFont();
			  font111.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
			  font111.setColor(HSSFColor.WHITE.index);
			  styles.setFont(font111);
			  style1.setFillForegroundColor(IndexedColors.BLACK.getIndex());
			  style1.setFillPattern(CellStyle.SOLID_FOREGROUND);
			  style1.setBorderBottom(CellStyle.BORDER_THIN);
			  style1.setBottomBorderColor(IndexedColors.BLACK.getIndex());
			  style1.setBorderLeft(CellStyle.BORDER_THIN);
			  style1.setLeftBorderColor(IndexedColors.BLACK.getIndex());
			  style1.setBorderRight(CellStyle.BORDER_THIN);
			  style1.setRightBorderColor(IndexedColors.BLACK.getIndex());
			  style1.setBorderTop(CellStyle.BORDER_THIN);
			  style1.setTopBorderColor(IndexedColors.BLACK.getIndex());
			  style1.setAlignment(CellStyle.ALIGN_CENTER);
			 	  
			  CellStyle style = workbook.createCellStyle();
		        style.setBorderBottom(CellStyle.BORDER_THIN);
		        style.setBottomBorderColor(IndexedColors.BLACK.getIndex());
		        style.setBorderLeft(CellStyle.BORDER_THIN);
		        style.setLeftBorderColor(IndexedColors.BLACK.getIndex());
		        style.setBorderRight(CellStyle.BORDER_THIN);
		        style.setRightBorderColor(IndexedColors.BLACK.getIndex());
		        style.setBorderTop(CellStyle.BORDER_THIN);
		        style.setTopBorderColor(IndexedColors.BLACK.getIndex());
		        style.setAlignment(CellStyle.ALIGN_CENTER);


			XSSFRichTextString richString20 = new XSSFRichTextString("Semester Registration Report");
			richString20.applyFont(font11);

			Row titleRow1 = sheet.createRow(rowIndex++);
			Cell hssfCell20 = titleRow1.createCell(0);
			hssfCell20.setCellStyle(style1);
			hssfCell20.setCellValue(richString20);
			sheet.setColumnWidth((short) (0), (short) 3000);
			rowIndex++;

			sheet.setColumnWidth(1, 10000);
			Row titleRow = sheet.createRow(2);

			Cell hssfCell = titleRow.createCell(0);
			hssfCell.setCellStyle(styles);
			XSSFRichTextString richString = new XSSFRichTextString("College");
			richString.applyFont(font11);
			hssfCell.setCellValue(richString);
			sheet.setColumnWidth((short) (0), (short) 3000);

			Cell hssfCell1 = titleRow.createCell(1);
			hssfCell1.setCellStyle(styles);
			XSSFRichTextString richString1 = new XSSFRichTextString("Degree");
			richString1.applyFont(font11);
			hssfCell1.setCellValue(richString1);
			sheet.setColumnWidth((short) (1), (short) 3000);

			Cell hssfCell2 = titleRow.createCell(2);
			hssfCell2.setCellStyle(styles);
			XSSFRichTextString richString2 = new XSSFRichTextString("Programme");
			richString2.applyFont(font11);
			hssfCell2.setCellValue(richString2);
			sheet.setColumnWidth((short) (2), (short) 3000);

			Cell hssfCell3 = titleRow.createCell(3);
			hssfCell3.setCellStyle(styles);
			XSSFRichTextString richString3 = new XSSFRichTextString("Department");
			richString3.applyFont(font11);
			hssfCell3.setCellValue(richString3);
			sheet.setColumnWidth((short) (3), (short) 3000);

			Cell hssfCell4 = titleRow.createCell(4);
			hssfCell4.setCellStyle(styles);
			XSSFRichTextString richString4 = new XSSFRichTextString("Batch");
			richString4.applyFont(font11);
			hssfCell4.setCellValue(richString4);
			sheet.setColumnWidth((short) (4), (short) 3000);

			Cell hssfCell5 = titleRow.createCell(5);
			hssfCell5.setCellStyle(styles);
			XSSFRichTextString richString5 = new XSSFRichTextString("AcademicYear");
			richString5.applyFont(font11);
			hssfCell5.setCellValue(richString5);
			sheet.setColumnWidth((short) (5), (short) 3000);

			Cell hssfCell6 = titleRow.createCell(6);
			hssfCell6.setCellStyle(styles);
			XSSFRichTextString richString6 = new XSSFRichTextString("Programme_Year");
			richString6.applyFont(font11);
			hssfCell6.setCellValue(richString6);
			sheet.setColumnWidth((short) (6), (short) 3000);

			Cell hssfCell7 = titleRow.createCell(7);
			hssfCell7.setCellStyle(styles);
			XSSFRichTextString richString7 = new XSSFRichTextString("Semester");
			richString7.applyFont(font11);
			hssfCell7.setCellValue(richString7);
			sheet.setColumnWidth((short) (7), (short) 3000);

			Cell hssfCell8 = titleRow.createCell(8);
			hssfCell8.setCellStyle(styles);
			XSSFRichTextString richString8 = new XSSFRichTextString("Students_Name");
			richString8.applyFont(font11);
			hssfCell8.setCellValue(richString8);
			sheet.setColumnWidth((short) (8), (short) 3000);
			
			 Cell hssfCell9 = titleRow.createCell(9); 
			 hssfCell9.setCellStyle(styles);
			 XSSFRichTextString richString9 = new XSSFRichTextString("Enrollment_Number");
			 richString9.applyFont(font11); 
			 hssfCell9.setCellValue(richString9);
			 sheet.setColumnWidth((short) (9), (short) 3000);
			 
			 
			 
			 Cell hssfCell0 = titleRow.createCell(10); 
			 hssfCell0.setCellStyle(styles);
			 XSSFRichTextString richString90 = new XSSFRichTextString("Roll_Number");
			 richString90.applyFont(font11); 
			 hssfCell0.setCellValue(richString90);
			 sheet.setColumnWidth((short) (10), (short) 3000);
			 
			 
			 Cell hssfCell11 = titleRow.createCell(11); 
			 hssfCell11.setCellStyle(styles);
			 XSSFRichTextString richString10 = new XSSFRichTextString("EmailId");
			 richString10.applyFont(font11); 
			 hssfCell11.setCellValue(richString10);
			 sheet.setColumnWidth((short) (11), (short) 3000);
			 
			 
			 Cell hssfCell12 = titleRow.createCell(12); 
			 hssfCell12.setCellStyle(styles);
			 XSSFRichTextString richString12 = new XSSFRichTextString("Contact_Number");
			 richString12.applyFont(font11); 
			 hssfCell12.setCellValue(richString12);
			 sheet.setColumnWidth((short) (12), (short) 3000);
	
			 Cell hssfCell14 = titleRow.createCell(13); 
			 hssfCell14.setCellStyle(styles);
			 XSSFRichTextString richString14 = new XSSFRichTextString("NumberOf_Registered_Courses");
			 richString14.applyFont(font11); 
			 hssfCell14.setCellValue(richString14);
			 sheet.setColumnWidth((short) (13), (short) 3000);		
			int m=14;
			int rowIdx = 3;
			int x=0;
			for (SemesterRegistration req : request) {
				Row row = sheet.createRow(rowIdx++);
				
				Cell sta111 = row.createCell(0);
				sta111.setCellStyle(style);
				sta111.setCellValue(req.getColleges().getExIdentifier() + "");
				
				Cell sta1 = row.createCell(1);
				sta1.setCellStyle(style);
				sta1.setCellValue(req.getDegree().getExName() + "");
				
				
				Cell sta2 = row.createCell(2);
				sta2.setCellStyle(style);
				sta2.setCellValue(req.getProgrammes().getExIdentifier() + "");
				
				
				Cell sta3 = row.createCell(3);
				sta3.setCellStyle(style);
				sta3.setCellValue(req.getDepartment().getExIdentifier() + "");
				
				Cell sta4 = row.createCell(4);
				sta4.setCellStyle(style);
				sta4.setCellValue(req.getStudentadmission().getBatch().getExIdentifier()+"");
				
				Cell sta5 = row.createCell(5);
				sta5.setCellStyle(style);
				sta5.setCellValue(req.getAcademicYear().getExIdentifier()+"");
				
				
				Cell sta6 = row.createCell(6);
				sta6.setCellStyle(style);
				sta6.setCellValue(req.getProgrammeYear().getExName()+"");
				
				Cell sta7 = row.createCell(7);
				sta7.setCellStyle(style);
				sta7.setCellValue(req.getSemester().getExName()+"");
				
				Cell sta8 = row.createCell(8);
				sta8.setCellStyle(style);
				sta8.setCellValue(req.getStudentadmission().getExName().toUpperCase());
				
				Cell sta9 = row.createCell(9);
				sta9.setCellStyle(style);
				sta9.setCellValue(req.getStudentadmission().getExEnrollementNo() + "");
				
				Cell sta10 = row.createCell(10);
				sta10.setCellStyle(style);
				sta10.setCellValue(req.getStudentadmission().getExRollNo()+"");
				
				
				List<Studentpersonal> List =super.studentpersonal.findByStudentadmissionId(req.getStudentadmission().getId());
				String Email ="";
				String Contact ="";
				for(int i=0;i<List.size() ;i++) {
					Email=Email+List.get(i).getExEmailId()+" ";
					Contact=Contact+List.get(i).getExContactDetails();
				}
				Cell sta11 = row.createCell(11);
				sta11.setCellStyle(style);
				sta11.setCellValue(Email);
				
				Cell sta12 = row.createCell(12);
				sta12.setCellStyle(style);
				sta12.setCellValue(Contact);
		
			//	List<CoursesRegistration> list = super.coursesRegistration.findByProgrammesIdAndExIsActiveAndExIsDeleteAndRegistrationIdAndProgrammeYearIdAndSemesterIdAndAcademicYearIdAndStudentadmissionIdOrderByCoursesId(req.getProgrammes().getId() , true , false , req.getRegistrationType().getId(),req.getProgrammeYear().getId(), req.getSemester().getId() ,req.getAcademicYear().getId() , req.getStudentadmission().getId());
				List<CoursesRegistration> list = super.coursesRegistration.getrecorddetails(req.getProgrammes().getId() , true , false , req.getRegistrationType().getId(),req.getProgrammeYear().getId(), req.getSemester().getId() ,req.getAcademicYear().getId() , req.getStudentadmission().getId());
				if(list.size() >0) {
					for(int i =0 ; i<list.size() ;i++) {
						Cell sta13 = row.createCell(m++);
						sta13.setCellStyle(style);
						sta13.setCellValue(list.get(i).getCourses().getExCoursesCode());
						x=x+1;
					}
					
				 Cell sta14 = row.createCell(13);
		    	 sta14.setCellStyle(style);
		    	 sta14.setCellValue(x);
				 m=14;
				}
				x=0;
			}
			 Cell hssfCell13 = titleRow.createCell(14); 
			 hssfCell13.setCellStyle(styles);
			 XSSFRichTextString richString13 = new XSSFRichTextString("Registered_Courses");
			 richString13.applyFont(font11); 
			 hssfCell13.setCellValue(richString13);
			 sheet.setColumnWidth((short) (14), (short) 3000);
			int  lastRowIndex = sheet.getLastRowNum();
			sheet.addMergedRegion(new CellRangeAddress(2,2,14,sheet.getRow(lastRowIndex).getLastCellNum()-1));
			workbook.write(out);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ByteArrayInputStream(out.toByteArray());
	}

	@Override
	public List<Object[]> overallMarksReport(CommonRequest request) {
		List<Object[]> list = new ArrayList<Object[]>();
		try {
				list = super.semester.getrecords(request.getColleges(), request.getProgrammes() , request.getAcademicYear());				
		} catch (Exception e) {
			e.printStackTrace();
		}
		return list;
	}

	@Override
	public List<EligiBilityResponse> eligiblitylist(SemesterEligibility request , List<String> approve) {

		try {
			//List<Object[]> list = new ArrayList<Object[]>();						
			List<SemesterRegistration> list =  super.semesterRegistration.findByExIsDeleteAndExIsActiveAndProgrammesIdAndCollegesIdAndDegreeIdAndAcademicYearIdAndSemesterIdAndDepartmentIdAndProgrammeYearIdOrderByStudentadmissionId(
					false, true, request.getProgrammes(), request.getColleges(), request.getDegree(),
					request.getAcademicYear(), request.getSemester(), request.getDepartment() , request.getProgrammeYear());
			
			List<EligiBilityResponse> eligi = new ArrayList<EligiBilityResponse>();
			for(SemesterRegistration s :list) {
				EligiBilityResponse eli = new EligiBilityResponse();
				eli.setStudentname(s.getStudentadmission().getExName());
				eli.setRollnumber(s.getStudentadmission().getExRollNo());
				eli.setEnrollment(s.getStudentadmission().getExEnrollementNo());
				List<String> ap = new ArrayList<String>();
						for(int k = 0; k<approve.size() ; k++) {	
									System.out.println("sssssssssssssss"+s.getId());
							int value = noDuePenalty.gettype(s.getId(), approve.get(k));
							System.out.println(approve.get(k)+"sssssssssssssss"+value);
								if(value <= 0) {
									ap.add("Pending");
								}else {
									ap.add("Approved");
								}
							
						}
						System.out.println("sssssssssssssss"+ap);
				eli.setApprovetye(ap);
				eligi.add(eli);
			}
			System.out.println("vvvvvvvvvvvvv"+eligi);
			return eligi;
		
		} catch (Exception e) {
				e.printStackTrace();
			return null;
		}
	}


	@Override
	public ByteArrayInputStream eligiblitylistReport(JSONObject value) {
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		System.out.println("****ByteArrayOutputStream**" + out);
		try {
			// HSSFWorkbook workbook = new HSSFWorkbook();
		   
			Workbook workbook = new XSSFWorkbook();
			int rowIndex = 0;
			Sheet sheet = workbook.createSheet("status");
			rowIndex = 0;
			CellStyle style = workbook.createCellStyle();
			style.setFillBackgroundColor(XSSFFont.COLOR_NORMAL);
		
			Font font = workbook.createFont();
			XSSFFont font1 = (XSSFFont) font;
			font1.setFontName(font1.DEFAULT_FONT_NAME.toString());
			font1.setFontHeightInPoints((short) 14);
			font1.setBold(true);

			XSSFColor color = new XSSFColor(new java.awt.Color(66, 97, 80));
			font1.setColor(color);

			XSSFRichTextString richString11 = new XSSFRichTextString("ELigiblity List Report");
			richString11.applyFont(font1);

			CellStyle style1 = workbook.createCellStyle();
			style1.setFont(font);
	
			  CellStyle style11 = workbook.createCellStyle();
			  style11.setFont(font);
			  style11.setAlignment(CellStyle.ALIGN_CENTER);
			  style11.setBorderBottom(CellStyle.BORDER_THIN);
			  style11.setBottomBorderColor(IndexedColors.BLACK.getIndex());
			  style11.setBorderLeft(CellStyle.BORDER_THIN);
			  style11.setLeftBorderColor(IndexedColors.BLACK.getIndex());
			  style11.setBorderRight(CellStyle.BORDER_THIN);
			  style11.setRightBorderColor(IndexedColors.BLACK.getIndex());
			  style11.setBorderTop(CellStyle.BORDER_THIN);
			  style11.setTopBorderColor(IndexedColors.BLACK.getIndex());
			  style11.setFillBackgroundColor(IndexedColors.GREY_25_PERCENT.getIndex());
			  style11.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());
			  style11.setFillPattern(CellStyle.SOLID_FOREGROUND);
			 
		

			 SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
		        Date date  =  new Date();
		        Row dataRow1 = sheet.createRow(1);	
		        sheet.createRow(0);
				XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");	
				dataRow1.createCell(1).setCellValue(ricString);
				
				XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());					
				dataRow1.createCell(2).setCellValue(ric_String);
				
				
			CellStyle style2 = workbook.createCellStyle();
			style2.setAlignment(CellStyle.ALIGN_CENTER);
			style2.setBorderBottom(CellStyle.BORDER_THIN);
			style2.setBottomBorderColor(IndexedColors.BLACK.getIndex());
			style2.setBorderLeft(CellStyle.BORDER_THIN);
			style2.setLeftBorderColor(IndexedColors.BLACK.getIndex());
			style2.setBorderRight(CellStyle.BORDER_THIN);
			style2.setRightBorderColor(IndexedColors.BLACK.getIndex());
			style2.setBorderTop(CellStyle.BORDER_THIN);
			style2.setTopBorderColor(IndexedColors.BLACK.getIndex());
			
			

			Row titleRow1 = sheet.createRow(rowIndex++);
			Cell hssfCell11 = titleRow1.createCell(1);
			hssfCell11.setCellStyle(style11);
			hssfCell11.setCellValue(richString11);
			rowIndex++;

			sheet.setColumnWidth(1, 10000);

			Row titleRow = sheet.createRow(rowIndex++);

			Cell hssfCell = titleRow.createCell(0);
			hssfCell.setCellStyle(style11);
			XSSFRichTextString richString = new XSSFRichTextString("SL NO");
			richString.applyFont(font);
			hssfCell.setCellValue(richString);
			sheet.setColumnWidth((short) (0), (short) 5000);

			Cell hssfCell1 = titleRow.createCell(1);
			hssfCell1.setCellStyle(style11);
			XSSFRichTextString richString1 = new XSSFRichTextString("Roll No");
			richString1.applyFont(font);
			hssfCell1.setCellValue(richString1);
			sheet.setColumnWidth((short) (1), (short) 3000);

			Cell hssfCell2 = titleRow.createCell(2);
			hssfCell2.setCellStyle(style11);
			XSSFRichTextString richString2 = new XSSFRichTextString("Student Name");
			richString2.applyFont(font);
			hssfCell2.setCellValue(richString2);
			sheet.setColumnWidth((short) (2), (short) 6000);

			
			 Cell hssfCell3 = titleRow.createCell(3);
			 hssfCell3.setCellStyle(style11);
			  XSSFRichTextString richString21 = new XSSFRichTextString("StudenteEnrollmentNo");
			  richString21.applyFont(font); 
			  hssfCell3.setCellValue(richString21);
			  sheet.setColumnWidth((short) (3), (short) 6000);
			  
			  
			  Cell hssfCell31 = titleRow.createCell(4);
			  hssfCell31.setCellStyle(style11);
			  XSSFRichTextString richString211 = new XSSFRichTextString("StudenteContactNo");
			  richString211.applyFont(font); 
			  hssfCell31.setCellValue(richString211);
			  sheet.setColumnWidth((short) (4), (short) 6000);
			  
			  Cell hssfCell311 = titleRow.createCell(5);
			  hssfCell311.setCellStyle(style11);
			  XSSFRichTextString richString2111 = new XSSFRichTextString("StudenteEmailId");
			  richString2111.applyFont(font); 
			  hssfCell311.setCellValue(richString2111);
			  sheet.setColumnWidth((short) (5), (short) 6000);
			  
			  Cell hssfCell3111 = titleRow.createCell(6);
			  hssfCell3111.setCellStyle(style11);
			  XSSFRichTextString richString21111 = new XSSFRichTextString("EligibleStatus");
			  richString2111.applyFont(font); 
			  hssfCell3111.setCellValue(richString21111);
			  sheet.setColumnWidth((short) (6), (short) 6000);
			  
			  Cell hssfCell3112 = titleRow.createCell(7);
			  hssfCell3112.setCellStyle(style11);
			  XSSFRichTextString richString21112 = new XSSFRichTextString("Accounts Approve");
			  richString21112.applyFont(font); 
			  hssfCell3112.setCellValue(richString21112);
			  sheet.setColumnWidth((short) (7), (short) 6000);
			  
			  
			  
			  Cell hssfCell3113 = titleRow.createCell(8);
			  hssfCell3113.setCellStyle(style11);
			  XSSFRichTextString richString21113 = new XSSFRichTextString("Computer Lab Approve");
			  richString21113.applyFont(font); 
			  hssfCell3113.setCellValue(richString21113);
			  sheet.setColumnWidth((short) (8), (short) 6000);
			  
			  
			  Cell hssfCell3114 = titleRow.createCell(9);
			  hssfCell3114.setCellStyle(style11);
			  XSSFRichTextString richString21114 = new XSSFRichTextString("Dean Approve");
			  richString21114.applyFont(font); 
			  hssfCell3114.setCellValue(richString21114);
			  sheet.setColumnWidth((short) (9), (short) 6000);
			  
			  
			  Cell hssfCell3115 = titleRow.createCell(10);
			  hssfCell3115.setCellStyle(style11);
			  XSSFRichTextString richString21115 = new XSSFRichTextString("Examination Approve");
			  richString21115.applyFont(font); 
			  hssfCell3115.setCellValue(richString21115);
			  sheet.setColumnWidth((short) (10), (short) 6000);
			  
			  Cell hssfCell3116 = titleRow.createCell(11);
			  hssfCell3116.setCellStyle(style11);
			  XSSFRichTextString richString21117 = new XSSFRichTextString("IT Department Approve");
			  richString21117.applyFont(font); 
			  hssfCell3116.setCellValue(richString21117);
			  sheet.setColumnWidth((short) (11), (short) 6000);
			  
			  Cell hssfCell3117 = titleRow.createCell(12);
			  hssfCell3117.setCellStyle(style11);
			  XSSFRichTextString richString21118 = new XSSFRichTextString("Mentor Approve");
			  richString21118.applyFont(font); 
			  hssfCell3117.setCellValue(richString21118);
			  sheet.setColumnWidth((short) (12), (short) 6000);
			  
			  
			  Cell hssfCell3118 = titleRow.createCell(13);
			  hssfCell3118.setCellStyle(style11);
			  XSSFRichTextString richString21119 = new XSSFRichTextString("Library Approve");
			  richString21119.applyFont(font); 
			  hssfCell3118.setCellValue(richString21119);
			  sheet.setColumnWidth((short) (13), (short) 6000);
			  
			  
			  Cell hssfCell31183 = titleRow.createCell(14);
			  hssfCell31183.setCellStyle(style11);
			  XSSFRichTextString richString211198 = new XSSFRichTextString("Hostel Approve");
			  richString211198.applyFont(font); 
			  hssfCell31183.setCellValue(richString211198);
			  sheet.setColumnWidth((short) (14), (short) 6000);
			  
			  
		
			CreationHelper createHelper = workbook.getCreationHelper();

			Font headerFont = workbook.createFont();
			headerFont.setBold(true);
			headerFont.setColor(IndexedColors.BLACK.getIndex());

			CellStyle headerCellStyle = workbook.createCellStyle();
			headerCellStyle.setFont(headerFont);
			CellStyle datetime = workbook.createCellStyle();
			datetime.setDataFormat(createHelper.createDataFormat().getFormat("dd/MM/yyyy hh:mm:ss"));
			

			int count = 0;
			if (value.get("status").toString().equals("1")) {
				JSONArray array = new JSONArray(value.get("details").toString());
				int rowIdx = 3;
				for (int i = 0; i < array.length(); i++) {
					JSONObject jsonObj = array.getJSONObject(i);
					Row row = sheet.createRow(rowIdx++);
					

					Cell sta111 = row.createCell(0);
					sta111.setCellStyle(style2);
					sta111.setCellValue(jsonObj.getString("studentcount") + "");
					

					Cell sta1 = row.createCell(1);
					sta1.setCellStyle(style2);
					sta1.setCellValue(jsonObj.getString("exRollNo") + "");
					
					Cell sta2 = row.createCell(2);
					sta2.setCellStyle(style2);
					sta2.setCellValue(jsonObj.getString("exName"));
				
					Cell sta3 = row.createCell(3);
					sta3.setCellStyle(style2);
					sta3.setCellValue(jsonObj.getString("exEnrollmentNo"));
					
					Cell sta4 = row.createCell(4);
					sta4.setCellStyle(style2);
					sta4.setCellValue(jsonObj.getString("exContactDetails"));
					
					Cell sta5 = row.createCell(5);
					sta5.setCellStyle(style2);
					sta5.setCellValue(jsonObj.getString("exEmailId"));
					
					Cell sta6 = row.createCell(6);
					sta6.setCellStyle(style2);
					sta6.setCellValue(jsonObj.getString("Status"));
					
					Cell sta7 = row.createCell(7);
					sta7.setCellStyle(style2);
					sta7.setCellValue(jsonObj.getString("exIsAccountsApprove"));
					
					Cell sta8 = row.createCell(8);
					sta8.setCellStyle(style2);
					sta8.setCellValue(jsonObj.getString("exIsComputerlabApprove"));
					
					Cell sta9 = row.createCell(9);
					sta9.setCellStyle(style2);
					sta9.setCellValue(jsonObj.getString("exIsDeanApprove"));
					
					Cell sta10 = row.createCell(10);
					sta10.setCellStyle(style2);
					sta10.setCellValue(jsonObj.getString("exIsExaminationApprove"));
					
					Cell sta11 = row.createCell(11);
					sta11.setCellStyle(style2);
					sta11.setCellValue(jsonObj.getString("exIsItDepartmentApprove"));
					
					Cell sta12 = row.createCell(12);
					sta12.setCellStyle(style2);
					sta12.setCellValue(jsonObj.getString("exIsMentorApprove"));
					
					Cell sta13 = row.createCell(13);
					sta13.setCellStyle(style2);
					sta13.setCellValue(jsonObj.getString("exIsLibraryApprove"));
					
					Cell sta14 = row.createCell(14);
					sta14.setCellStyle(style2);
					sta14.setCellValue(jsonObj.getString("exIsHostelApprove"));
					
					
					
			}
			}
			workbook.write(out);
			// System.out.println("****completed********"+workbook);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ByteArrayInputStream(out.toByteArray());
	}

	@Override
	public List<Studentpersonal> semesterNotRegistrationReport(ReportRequest request) {
		// TODO Auto-generated method stub
		List<Studentpersonal> list1 = new ArrayList<>();
		try {
			return super.studentpersonal.getUnregistertBetween(request.getProgrammes() ,  request.getDegree() ,request.getProgrammeYear() , request.getSemester() ,request.getDepartment() , request.getAcademicYear() , request.getBatch());
			} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			return list1;
		}

	}

	
	@Override
	public List<Object[]> validateMasterOfAllReport(ReportRequest request) {
		List<Object[]> list = new ArrayList<>();
		try {
			list = acdemicDao.masterofall(request.getColleges(), request.getProgrammes(), request.getDepartment(),
					request.getProgrammeYear(), request.getCourses(), request.getAcademicYear(), true, false,
					request.getDegree(), request.getSemester());
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			return list;
		}
		return list;

	}

	@Override
	public List<CreditHours> validatecreditHoursReportNewReport(CreditHoursRquest request) {
		List<CreditHours> list = new ArrayList<>();
		try {
			list = super.creditHours.findByExIsDelete(false);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			return list;
		}
		return list;
	}

	@Override
	public List<Object[]> NewBatchReport(CommonRequest request) {
			List<Object[]> list = new ArrayList<Object[]>();
			try {
					list = super.studentpersonal.getcompletedetails(request.getColleges(),request.getAcademicYear());				
			} catch (Exception e) {
				e.printStackTrace();
			}
			return list;
		}

	@Override
	public List<Object[]> SubmittedReport(CommonRequest request) {
		List<Object[]> list = new ArrayList<Object[]>();
		try {
				list = super.midtermmarksMarks.getsubmissionrecords(request.getColleges(),request.getAcademicYear(),request.getSemester());				
		} catch (Exception e) {
			e.printStackTrace();
		}
		return list;
	}

	@Override
	public List<SemesterRegistration> validatesemRegistration(ReportRequest request) {
		List<SemesterRegistration> list = new ArrayList<>();
		try {
			/*
			 * list = super.semesterRegistration
			 * .findByExIsDeleteAndExIsActiveAndProgrammesIdInAndCollegesIdInAndDegreeIdInAndAcademicYearIdInAndSemesterIdInAndDepartmentIdInAndProgrammeYearIdIn(
			 * false, true, request.getProgrammes(), request.getColleges(),
			 * request.getDegree(), request.getAcademicYear(), request.getSemester(),
			 * request.getDepartment(), request.getProgrammeYear());
			 */
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			return list;
		}

		return list;
	}

	@Override
	public List<Object[]> validateSupplyReport(ReportRequest request) {
		List<Object[]> list = new ArrayList<>();
		try {
			list =super.gradeReport.Fgrades(request.getColleges(), request.getProgrammes(), request.getDepartment(),
				request.getAcademicYear(),request.getDegree());
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			return list;
		}
		return list;
	}

	@Override
	public List<Object[]> validateteachercoursemapreport(ReportRequest request) {
		List<Object[]> list = new ArrayList<>();
		try {
			list=super.teacherCourseMapping.getteachermappeddeatils(request.getProgrammes(), request.getSemester(),
				 request.getDegree(), request.getColleges(), request.getAcademicYear(),request.getProgrammeYear());
			
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			return list;
		}
		return list;
	}


	@Override
	public Map<String, Object> getExcelForInternal(InternalMarksRequest request) {
		List dataList = new LinkedList();
		Map<String, Object> info = new LinkedHashMap<>();	
		try {
			Optional<Courses> courses = super.courses.findByIdAndExIsDeleteAndExIsActive(request.getCourses(),false,true);
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not  present");
				return info;
		
			}
			 
			
			Optional<ProgrammeYear> programyear = super.programmeYear.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear() ,true ,false );
			if(!programyear.isPresent()) {
				info.put("status", "2");
				info.put("message", "ProgrammeYear not present");
				return info;
			}

			
			
			Optional<AcademicYear> academicYearid = super.academicYear.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(),false,true);
			if (!academicYearid.isPresent()) {
				info.put("status", "2");
				info.put("message", "AcademicYear id not present");
				return info;
			}	
			
			Optional<Semster> sem = super.semester.findByIdAndExIsActiveAndExIsDelete(request.getSemester() ,true ,false);
			if (!sem.isPresent()){
				info.put("status", "2");
				info.put("message", "Semster not present");
				return info;
			}
					
			Optional<Programmes> Prog = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true, request.getProgrammes());
			if (!Prog.isPresent()) {
				info.put("status", "2");
				info.put("message", "Programmes not present");
				return info;
			}			
			Optional<Courses> course = super.courses.findByIdAndExIsDeleteAndExIsActive(request.getCourses(),false,true);
			if (!course.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not  present");
				return info;
		
			}			
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false,true,request.getDegree());
			if (!degree.isPresent() ||  !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}	
			
			Optional<Colleges> collage = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),false, true);
			if (!collage.isPresent()) {
				info.put("status", "2");
				info.put("message", "College Id not Present");
				return info;
			}
			
			
			Optional<Department> department = super.department.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),false, true);
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department Id not Present");
				return info;
			}
			
			Section sections =null;
			 Long Section=null ;
			 String Sectionsname ="";
	  			if(request.getSection()== null ||request.getSection().equals("")) {
	  				Section=null;
	  				sections=null;
	  			}else {
	  				Optional<Section> Sections = super.section.findByExIsDeleteAndExIsActiveAndId(false,true,request.getSection());		
	  				if (!Sections.isPresent() ) {
	  					info.put("status", "2");
	  					info.put("message", "Section id not present");
	  					return info;
	  				}
	  				sections=Sections.get();
	  				Section=Sections.get().getId();
	  				 Sectionsname =Sections.get().getExName();
	  			}
	  															
				//int  semester_status  = 0;			
			  List<Object[]> stuid = super.coursesRegistration.getDetails(request.getDegree(),request.getAcademicYear(),request.getProgrammes(),request.getCourses(),request.getProgrammeYear(),request.getSemester(),request.getColleges(),Section ,request.getDepartment());				  
			 if(stuid.size() <=0) {
				 info.put("status", "2");
					info.put("message", "student registration are pending");
					return info;
			 }
			  
			  for (Object[] e : stuid) {
			  Map<Object, Object> studentinfo = new HashMap<Object, Object>();		  
			  // get Student Internal marks if present
			  List<MidTermMarks> getresult = super.midtermmarksMarks.findByDegreeIdAndCoursesIdAndExRollNoAndAcademicYearIdAndProgrammesIdAndExIsActiveAndExIsDeleteAndSemesterIdAndProgrammeYearIdAndDepartmentId(request.getDegree() , request.getCourses() , e[0].toString() ,request.getAcademicYear() , request.getProgrammes(),true , false ,request.getSemester() ,request.getProgrammeYear(),request.getDepartment()); 
			  if(getresult.size()<=0)
			  { 
				  studentinfo.put("exAssignmentMarks", "");
				  studentinfo.put("exMidTermRemarks","");
				  studentinfo.put("exAttendenceMarks", "");				
				  studentinfo.put("exMidTermMarks", "");
				  studentinfo.put("exPracticalLearning", "");
				  studentinfo.put("exPracticalRecordMarks", "");
				  studentinfo.put("exCaseStudy", "");
				  studentinfo.put("exQuizMarks", "");
				  studentinfo.put("exStudentId", e[0]);
				  studentinfo.put("exCoursesName", e[1]);
				  studentinfo.put("exFirstName", e[2]); 
				  studentinfo.put("exCoursesCode", e[5]);
				  studentinfo.put("exCreditHourTitle", e[6]);
				  studentinfo.put("studentAdmissionId", e[7]);
				  studentinfo.put("exIsSave", false);
				  studentinfo.put("exIsSubmit", false);
				  studentinfo.put("exLabExperiments", "-");
				  studentinfo.put("exViva","-");
				  dataList.add(studentinfo);
			  }else {
				  if(getresult.get(0).getExIsSubmit() !=null && getresult.get(0).getExIsSubmit() == false) {
					  //studentinfo.put("exAssignmentMarks", getresult.get(0).getExAssignmentMarks() == null ?"0.0":getresult.get(0).getExAssignmentMarks());
					  
					  
					  if(getresult.get(0).getExAssignmentMarkRemark() == null || getresult.get(0).getExAssignmentMarkRemark().equals("NA")) {
						  studentinfo.put("exAssignmentMarks", getresult.get(0).getExAssignmentMarks() == null ?"-":getresult.get(0).getExAssignmentMarks());						
					  }else {
						  studentinfo.put("exAssignmentMarks", getresult.get(0).getExAssignmentMarkRemark() == null ?"-":getresult.get(0).getExAssignmentMarkRemark());
							
					  }
					  
						 if(getresult.get(0).getExQuizRemark() == null || getresult.get(0).getExQuizRemark().equals("NA")) {
							 studentinfo.put("exQuizMarks", getresult.get(0).getExQuizMarks() == null ?"-":getresult.get(0).getExQuizMarks());						
						  }else {
							  studentinfo.put("exQuizMarks", getresult.get(0).getExQuizRemark() == null ?"-":getresult.get(0).getExQuizRemark());
								
						  }
						  if(getresult.get(0).getExAttendenceRemark() == null || getresult.get(0).getExAttendenceRemark().equals("NA")) {
							  studentinfo.put("exAttendenceMarks", getresult.get(0).getExAttendenceMarks() == null ?"-":getresult.get(0).getExAttendenceMarks());						
						  }else {
							  studentinfo.put("exAttendenceMarks", getresult.get(0).getExAttendenceRemark() == null ?"-":getresult.get(0).getExAttendenceRemark());
								
						  }
						  if(getresult.get(0).getExMidTermRemarks() == null || getresult.get(0).getExMidTermRemarks().equals("NA")) {
							  studentinfo.put("exMidTermMarks", getresult.get(0).getExMidTermMarks() == null ?"-":getresult.get(0).getExMidTermMarks());						
						  }else {
							  studentinfo.put("exMidTermMarks", getresult.get(0).getExMidTermRemarks() == null ?"-":getresult.get(0).getExMidTermRemarks());
								
						  }
						  
						  if(getresult.get(0).getExCaseStudyRemark() == null || getresult.get(0).getExCaseStudyRemark().equals("NA")) {
							  studentinfo.put("exCaseStudy", getresult.get(0).getExCaseStudy() == null ?"-":getresult.get(0).getExCaseStudy());						
						  }else {
							  studentinfo.put("exCaseStudy", getresult.get(0).getExCaseStudyRemark() == null ?"-":getresult.get(0).getExCaseStudyRemark());
								
						  }
						  
					  
					///  studentinfo.put("exAttendenceMarks", getresult.get(0).getExAttendenceMarks()== null ?"0.0":getresult.get(0).getExAttendenceMarks());
					  studentinfo.put("exMidTermMarks", getresult.get(0).getExMidTermMarks()== null ?"0.0": getresult.get(0).getExMidTermMarks());
					  studentinfo.put("exMidTermRemarks", getresult.get(0).getExMidTermRemarks()== null ?"NA": getresult.get(0).getExMidTermRemarks());
					  studentinfo.put("exPracticalLearning", getresult.get(0).getExPracticalLearning()== null ?"0.0":getresult.get(0).getExPracticalLearning());
					  studentinfo.put("exPracticalRecordMarks", getresult.get(0).getExPracticalRecordMarks()== null ?"0.0":getresult.get(0).getExPracticalRecordMarks());
					 // studentinfo.put("exQuizMarks", getresult.get(0).getExQuizMarks()== null ?"0.0":getresult.get(0).getExQuizMarks());
					 // get the marks
					  
					  List<Object[]> external = super.accademicdao.getExternalMarks(request.getCourses() , e[0].toString() ,request.getAcademicYear() ); 
						if(external.size() <=0) {
							 studentinfo.put("exLabExperiments", "");
							 studentinfo.put("exViva","");
						}else {
							 studentinfo.put("exLabExperiments", external.get(0)[0] == null ? "-" :external.get(0)[0] );
							 studentinfo.put("exViva",external.get(0)[1] == null ? "-" :external.get(0)[1] );
						}					  
					  studentinfo.put("exStudentId", e[0]);
					  studentinfo.put("exCoursesName", e[1]);
					  studentinfo.put("exFirstName", e[2]); 
					  studentinfo.put("exCoursesCode", e[5]);
					  studentinfo.put("exCreditHourTitle", e[6]);
					  studentinfo.put("exIsSave", getresult.get(0).getExIsSave());
					  studentinfo.put("exIsSubmit", getresult.get(0).getExIsSubmit());	
					  studentinfo.put("studentAdmissionId", e[7]);

					  dataList.add(studentinfo);
				  }  
				}	
			 
			  }
			  if(dataList.size() >0) { 
			  info.put("status","1"); 
			  info.put("message", "success"); 
			  info.put("details", dataList); 
			  return info; 
			  }
			  else { 
				  info.put("status", "2");
				  info.put("message", "Internal component marks already submitted, Please contact  for marks Update!!!"); 
				  return info; 
				}
			 
		}catch(Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}
	}

	public static ByteArrayInputStream excelForInternal(Map<String, Object> info, String  courses) {
		System.out.println("Welcome To Excel*****************");
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		try {
			
		
			
			Workbook workbook = new XSSFWorkbook();
			int rowIndex = 0;
			int index = 0;
			Sheet sheet = workbook.createSheet(courses);
			rowIndex = 0;

			CellStyle style = workbook.createCellStyle();
			style.setFillBackgroundColor(XSSFFont.COLOR_NORMAL);

			
			Font font = workbook.createFont();
			XSSFFont font1 = (XSSFFont) font;
			font1.setFontName(font1.DEFAULT_FONT_NAME.toString());
			font1.setFontHeightInPoints((short) 14);
			font1.setBold(true);

			XSSFColor color = new XSSFColor(new java.awt.Color(66, 97, 80));
			font1.setColor(color);

			CellStyle style1 = workbook.createCellStyle();
			style1.setFont(font);
			
			CellStyle style11 = workbook.createCellStyle();
			style11.setFont(font);
			style11.setAlignment(CellStyle.ALIGN_CENTER);
			style11.setBorderBottom(CellStyle.BORDER_THIN);
			style11.setBottomBorderColor(IndexedColors.BLACK.getIndex());
			style11.setBorderLeft(CellStyle.BORDER_THIN);
			style11.setLeftBorderColor(IndexedColors.BLACK.getIndex());
			style11.setBorderRight(CellStyle.BORDER_THIN);
			style11.setRightBorderColor(IndexedColors.BLACK.getIndex());
			style11.setBorderTop(CellStyle.BORDER_THIN);
			style11.setTopBorderColor(IndexedColors.BLACK.getIndex());
			style11.setFillBackgroundColor(IndexedColors.DARK_YELLOW.getIndex());
			style11.setFillForegroundColor(IndexedColors.YELLOW.getIndex());
			style11.setFillPattern(CellStyle.SOLID_FOREGROUND);
			
			
			CellStyle style2 = workbook.createCellStyle();
			style2.setAlignment(CellStyle.ALIGN_CENTER);
			style2.setBorderBottom(CellStyle.BORDER_THIN);
			style2.setBottomBorderColor(IndexedColors.BLACK.getIndex());
			style2.setBorderLeft(CellStyle.BORDER_THIN);
			style2.setLeftBorderColor(IndexedColors.BLACK.getIndex());
			style2.setBorderRight(CellStyle.BORDER_THIN);
			style2.setRightBorderColor(IndexedColors.BLACK.getIndex());
			style2.setBorderTop(CellStyle.BORDER_THIN);
			style2.setTopBorderColor(IndexedColors.BLACK.getIndex());

			sheet.setColumnWidth(1, 10000);

			Row titleRow = sheet.createRow(rowIndex++);

			Cell hssfCell = titleRow.createCell(0);
			hssfCell.setCellStyle(style11);
			XSSFRichTextString richString = new XSSFRichTextString("Student id");
			richString.applyFont(font);
			hssfCell.setCellValue(richString);
			sheet.setColumnWidth((short) (0), (short) 5000);

			Cell hssfCell1 = titleRow.createCell(1);
			hssfCell1.setCellStyle(style11);
			XSSFRichTextString richString1 = new XSSFRichTextString("AssignmentMarks");
			richString1.applyFont(font);
			hssfCell1.setCellValue(richString1);
			sheet.setColumnWidth((short) (1), (short) 3000);

			Cell hssfCell2 = titleRow.createCell(2);
			hssfCell2.setCellStyle(style11);
			XSSFRichTextString richString2 = new XSSFRichTextString("MidTermMarks");
			richString2.applyFont(font);
			hssfCell2.setCellValue(richString2);
			sheet.setColumnWidth((short) (2), (short) 6000);

			Cell hssfCell3 = titleRow.createCell(3);
			hssfCell3.setCellStyle(style11);
			XSSFRichTextString richString3 = new XSSFRichTextString("AttendenceMarks");
			richString3.applyFont(font);
			hssfCell3.setCellValue(richString3);
			sheet.setColumnWidth((short) (3), (short) 6000);

			Cell hssfCell4 = titleRow.createCell(4);
			hssfCell4.setCellStyle(style11);
			XSSFRichTextString richString4 = new XSSFRichTextString("PracticalRecordMarks");
			richString4.applyFont(font);
			hssfCell4.setCellValue(richString4);
			sheet.setColumnWidth((short) (4), (short) 5000);

			Cell hssfCell5 = titleRow.createCell(5);
			hssfCell5.setCellStyle(style11);
			XSSFRichTextString richString5 = new XSSFRichTextString("PracticalLearning");
			richString5.applyFont(font);
			hssfCell5.setCellValue(richString5);
			sheet.setColumnWidth((short) (5), (short) 5000);

			Cell hssfCell6 = titleRow.createCell(6);
			hssfCell6.setCellStyle(style11);
			XSSFRichTextString richString6 = new XSSFRichTextString("CaseStudy");
			richString6.applyFont(font);
			hssfCell6.setCellValue(richString6);
			sheet.setColumnWidth((short) (6), (short) 5000);

			Cell hssfCell7 = titleRow.createCell(7);
			hssfCell7.setCellStyle(style11);
			XSSFRichTextString richString7 = new XSSFRichTextString("QuizMarks");
			richString7.applyFont(font);
			hssfCell7.setCellValue(richString7);
			sheet.setColumnWidth((short) (7), (short) 5000);

			Cell hssfCell8 = titleRow.createCell(8);
			hssfCell8.setCellStyle(style11);
			XSSFRichTextString richString8 = new XSSFRichTextString("LabExperiments");
			richString8.applyFont(font);
			hssfCell8.setCellValue(richString8);
			sheet.setColumnWidth((short) (8), (short) 5000);
			
			Cell hssfCell9 = titleRow.createCell(9);
			hssfCell9.setCellStyle(style11);
			XSSFRichTextString richString9 = new XSSFRichTextString("Viva");
			richString9.applyFont(font);
			hssfCell9.setCellValue(richString9);
			sheet.setColumnWidth((short) (9), (short) 5000);
			
		

			CreationHelper createHelper = workbook.getCreationHelper();

			Font headerFont = workbook.createFont();
			headerFont.setBold(true);
			headerFont.setColor(IndexedColors.BLACK.getIndex());

			CellStyle headerCellStyle = workbook.createCellStyle();
			headerCellStyle.setFont(headerFont);

			int rowIdx = 1;
			Set<Long> staffIds = new HashSet<>();
			
			
			 ObjectMapper mapper = new ObjectMapper();
			 JsonNode jsonNode = mapper.valueToTree(info);
			
			
			 
			if(jsonNode.get("status").textValue().equalsIgnoreCase("1")) {
				

				 for(int i= 0 ; jsonNode.get("details").size() >i ; i++) {
					
					Row row = sheet.createRow(rowIdx++);
					row.createCell(0).setCellValue(jsonNode.get("details").get(i).get("exStudentId").asText() + "");
					row.createCell(1).setCellValue(jsonNode.get("details").get(i).get("exAssignmentMarks").asText() + "");
					row.createCell(2).setCellValue(jsonNode.get("details").get(i).get("exMidTermMarks").asText() + "");
					
					row.createCell(3).setCellValue(jsonNode.get("details").get(i).get("exAttendenceMarks").asText() + "");
					
					row.createCell(4).setCellValue(jsonNode.get("details").get(i).get("exPracticalRecordMarks").asText() + "");
					row.createCell(5).setCellValue(jsonNode.get("details").get(i).get("exPracticalLearning").asText() + "");
					
					row.createCell(6).setCellValue(jsonNode.get("details").get(i).get("exCaseStudy").asText() + "");
					row.createCell(7).setCellValue(jsonNode.get("details").get(i).get("exQuizMarks").asText() + "");
					
					
					row.createCell(8).setCellValue(jsonNode.get("details").get(i).get("exLabExperiments").asText() + "");
					row.createCell(9).setCellValue(jsonNode.get("details").get(i).get("exViva").asText() + "");
				}
			}else {				
				Row row = sheet.createRow(rowIdx++);				 
				row.createCell(0).setCellValue(jsonNode.get("message").textValue() + "");
				System.out.println("***Excel out**" +jsonNode.get("message").textValue());
			}
			
			// Write the output to a file
			workbook.write(out);
			
		} catch (Exception e) {
			e.printStackTrace();
		}

		return new ByteArrayInputStream(out.toByteArray());
	}

	@Override
	public List<CoursesRegistration> validatesemcrRegistration(List<SemesterRegistration> student) {
		List<CoursesRegistration> list = new ArrayList<>();
		try {
			for(SemesterRegistration req: student) {
				list = super.coursesRegistration.findByProgrammesIdAndExIsActiveAndExIsDeleteAndRegistrationIdAndProgrammeYearIdAndSemesterIdAndAcademicYearIdAndStudentadmissionId(req.getProgrammes().getId() , true , false , req.getRegistrationType().getId(),req.getProgrammeYear().getId(), req.getSemester().getId() ,req.getAcademicYear().getId() , req.getStudentadmission().getId());
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			return list;
		}

		return list;
	}

	@Override
	public List<Courses> validatesemcrccRegistration(List<SemesterRegistration> student) {
		List<Courses> list = new ArrayList<>();
		try {
			for(SemesterRegistration req1: student) {
		list=super.courses.findByProgrammesIdAndProgrammeYearIdAndDegreeIdAndCollegesIdAndAndSemesterIdAndDepartmentIdAndBatchId(req1.getProgrammes().getId(),req1.getProgrammeYear().getId(),req1.getDegree().getId(),req1.getColleges().getId(),req1.getSemester().getId(),req1.getDepartment().getId(),req1.getStudentadmission().getBatch().getId());
			
			}
			} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			return list;
		}

		return list;

}
	@Override
	public List<Object[]> validateGradeReport(ReportRequest request) {
		List<Object[]> list = new ArrayList<>();
		try {
			list=super.gradeReport.getgradedetails(request.getProgrammes(), request.getSemester(),
				 request.getDegree(), request.getColleges(), request.getAcademicYear(),request.getProgrammeYear(),request.getDepartment());
			
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			return list;
		}
		return list;
	}

	@Override
	public List<Object[]> validateStaffReport(ReportRequest request) {
		List<Object[]> list = new ArrayList<>();
		try {
			list=super.staffpersonal.getstaffdetails();
			
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			return list;
		}
		return list;
	}




	@Override
	public List<CoursesRegistration> validateIATheoryMarksReport(CommonRequest request) {
		List<CoursesRegistration> list = new ArrayList<>();
		try {

			list = super.coursesRegistration.TheoryIA(request.getColleges(),request.getDegree(),request.getProgrammes(),request.getDepartment(),request.getAcademicYear(),
					request.getProgrammeYear(),request.getSemester(),request.getStream(),
					request.getExamAnnouncement(),request.getCourses());
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			return list;
		}
		return list;
	}

	@Override
	public List<CoursesRegistration> validateIAPracticalMarksReport(CommonRequest request) {
		List<CoursesRegistration> list = new ArrayList<>();
		try {

			list = super.coursesRegistration.PracticalIA(request.getColleges(),request.getDegree(),request.getProgrammes(),
					request.getDepartment(),request.getAcademicYear(),request.getProgrammeYear(),request.getSemester(),request.getStream(),
					request.getExamAnnouncement(),request.getCourses());
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			return list;
		}
		return list;
	}

	@Override
	public List<CoursesRegistration> validateIATheoryMarksBtechReport(CommonRequest request) {
		List<CoursesRegistration> list = new ArrayList<>();
		try {

			list = super.coursesRegistration.TheoryBtechIA(request.getColleges(),request.getDegree(),request.getProgrammes(),request.getDepartment(),request.getAcademicYear(),
					request.getProgrammeYear(),request.getSemester(),request.getStream(),
					request.getExamAnnouncement(),request.getCourses());
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			return list;
		}
		return list;
	}

	@Override
	public List<Object[]> overallMarksReportMtechMba(CommonRequest request) {
		List<Object[]> list = new ArrayList<Object[]>();
		try {
				list = super.semester.getrecordssssss(request.getColleges(), request.getProgrammes() , request.getAcademicYear());				
		} catch (Exception e) {
			e.printStackTrace();
		}
		return list;
	}

	@Override
	public List<Object[]> MarksheetUploadStatus(CommonRequest request) {
		List<Object[]> list = new ArrayList<Object[]>();
		try {
				list = super.semester.getmarksheetrecords(request.getColleges(), request.getProgrammes() , request.getAcademicYear());				
		} catch (Exception e) {
			e.printStackTrace();
		}
		return list;
	}

	@Override
	public List<Object[]> MarksheetUploadStatusMtechMba(CommonRequest request) {
		List<Object[]> list = new ArrayList<Object[]>();
		try {
				list = super.semester.getmarksheetrecordsmtechmba(request.getColleges(), request.getProgrammes() , request.getAcademicYear());				
		} catch (Exception e) {
			e.printStackTrace();
		}
		return list;
	}

	@Override
	public List<Object[]> validateStudentsDocumentsUploadstatus(CommonRequest request) {
		List<Object[]> list = new ArrayList<Object[]>();
		try {
				list = super.studentadmission.getDocuments(request.getColleges(), request.getProgrammes() , request.getAcademicYear());				
		} catch (Exception e) {
			e.printStackTrace();
		}
		return list;
	}

	@Override
	public List<Object[]> validateteachercoursemapreportSample(ReportRequest request) {
		List<Object[]> list = new ArrayList<>();
		try {
			list=super.teacherCourseMapping.getteachermappeddeatilsNiftem(request.getProgrammes(), request.getSemester(),
				 request.getDegree(), request.getColleges(), request.getAcademicYear(),request.getProgrammeYear(),request.getCoursesType());
			
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			return list;
		}
		return list;
	}

	@Override
	public List<Object[]> validateteachercoursemapreportSamples(ReportRequest request) {
		List<Object[]> list = new ArrayList<>();
		try {
			list=super.teacherCourseMapping.getteachermappeddeatilsExam(request.getProgrammes(), request.getSemester(),
				 request.getDegree(), request.getColleges(), request.getAcademicYear(),request.getProgrammeYear(),request.getCoursesType());
			
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			return list;
		}
		return list;
	}

	@Override
	public List<SemesterRegistration> validationSemesterRegistration(ReportRequest request) {
		// TODO Auto-generated method stub
		List<SemesterRegistration> list = new ArrayList<>();
		try {
			list = super.semesterRegistration.semRegistration(request.getProgrammes(), request.getColleges(), request.getDegree(),
							request.getAcademicYear(), request.getSemester(), request.getDepartment(),
							request.getProgrammeYear(),request.getBatch());
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			return list;
		}

		return list;
	}

	

	@Override
	public ByteArrayInputStream semesterRegistration(List<SemesterRegistration> request) {
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		try {
			Workbook workbook = new XSSFWorkbook();
			int rowIndex = 0;
			int rowIndex1=1;
			int rowIndex3=3;
			Sheet sheet = workbook.createSheet("SemesterRegistration Report");
			rowIndex = 0;
			
			CellStyle styles = workbook.createCellStyle();
	    	  Font font11 = workbook.createFont();
			  font11.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
			  font11.setColor(HSSFColor.WHITE.index);
			  styles.setFont(font11);
			  styles.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());
			  styles.setFillPattern(CellStyle.SOLID_FOREGROUND);
			  styles.setBorderBottom(CellStyle.BORDER_THIN);
			  styles.setBottomBorderColor(IndexedColors.BLACK.getIndex());
			  styles.setBorderLeft(CellStyle.BORDER_THIN);
			  styles.setLeftBorderColor(IndexedColors.BLACK.getIndex());
			  styles.setBorderRight(CellStyle.BORDER_THIN);
			  styles.setRightBorderColor(IndexedColors.BLACK.getIndex());
			  styles.setBorderTop(CellStyle.BORDER_THIN);
			  styles.setTopBorderColor(IndexedColors.BLACK.getIndex());
			  styles.setAlignment(CellStyle.ALIGN_CENTER);
		
			  
				CellStyle styless = workbook.createCellStyle();
		    	  Font font111 = workbook.createFont();
		    	  font111.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
		    	  font111.setColor(HSSFColor.WHITE.index);
		    	  styless.setFont(font111);
		    	  styless.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());
		    	  styless.setFillPattern(CellStyle.SOLID_FOREGROUND);
		    	  styless.setBorderBottom(CellStyle.BORDER_THIN);
		    	  styless.setBottomBorderColor(IndexedColors.BLACK.getIndex());
		    	  styless.setBorderLeft(CellStyle.BORDER_THIN);
		    	  styless.setLeftBorderColor(IndexedColors.BLACK.getIndex());
		    	  styless.setBorderRight(CellStyle.BORDER_THIN);
		    	  styless.setRightBorderColor(IndexedColors.BLACK.getIndex());
		    	  styless.setBorderTop(CellStyle.BORDER_THIN);
		    	  styless.setTopBorderColor(IndexedColors.BLACK.getIndex());
		    	  styless.setAlignment(CellStyle.ALIGN_CENTER);
		    	  styless.setWrapText(true);
			  
			CellStyle style1 = workbook.createCellStyle();
			 Font font = workbook.createFont();
			  font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
			  font.setColor(HSSFColor.WHITE.index);
			  style1.setFont(font);
			  style1.setFillForegroundColor(IndexedColors.BLACK.getIndex());
			  style1.setFillPattern(CellStyle.SOLID_FOREGROUND);
			  style1.setBorderBottom(CellStyle.BORDER_THIN);
			  style1.setBottomBorderColor(IndexedColors.BLACK.getIndex());
			  style1.setBorderLeft(CellStyle.BORDER_THIN);
			  style1.setLeftBorderColor(IndexedColors.BLACK.getIndex());
			  style1.setBorderRight(CellStyle.BORDER_THIN);
			  style1.setRightBorderColor(IndexedColors.BLACK.getIndex());
			  style1.setBorderTop(CellStyle.BORDER_THIN);
			  style1.setTopBorderColor(IndexedColors.BLACK.getIndex());
			  style1.setAlignment(CellStyle.ALIGN_CENTER);
			 	  
			  CellStyle style2 = workbook.createCellStyle();
			  style2.setBorderBottom(CellStyle.BORDER_THIN);
			  style2.setBottomBorderColor(IndexedColors.BLACK.getIndex());
			  style2.setBorderLeft(CellStyle.BORDER_THIN);
			  style2.setLeftBorderColor(IndexedColors.BLACK.getIndex());
			  style2.setBorderRight(CellStyle.BORDER_THIN);
			  style2.setRightBorderColor(IndexedColors.BLACK.getIndex());
			  style2.setBorderTop(CellStyle.BORDER_THIN);
			  style2.setTopBorderColor(IndexedColors.BLACK.getIndex());
			  style2.setAlignment(CellStyle.ALIGN_CENTER);
			
			
			  SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
		        Date date  =  new Date();
		        
		        Row dataRow1 = sheet.createRow(0);	
				Font font112 = workbook.createFont();
				XSSFFont font1 = (XSSFFont) font112;
				
				XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
				Cell cel  =	dataRow1.createCell(0,Cell.CELL_TYPE_STRING);
				cel.setCellStyle(styles);
				cel.setCellValue(ricString);
				font1.setBold(true);
				
				XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());
				Cell cel1  =dataRow1.createCell(1,Cell.CELL_TYPE_STRING);
				cel1.setCellStyle(styles);
				cel1.setCellValue(ric_String);
				font1.setBold(true);
			
				XSSFRichTextString richString20 = new XSSFRichTextString("National Institute of Food Technology Entrepreneurship and Management");
				Cell hssfCell20 = dataRow1.createCell(4,Cell.CELL_TYPE_STRING);
				hssfCell20.setCellStyle(style1);
				hssfCell20.setCellValue(richString20);
				sheet.setColumnWidth((short) (4), (short) 9000);
		
	
			XSSFRichTextString richString2020 = new XSSFRichTextString("Student Wise Subject List");
			Row titleRow23 = sheet.createRow(1);
			Cell hssfCell2020 = titleRow23.createCell(4);
			hssfCell2020.setCellStyle(style1);
			hssfCell2020.setCellValue(richString2020);
			sheet.setColumnWidth((short) (4), (short) 9000);
	
			sheet.setColumnWidth(1, 10000);
			Row titleRow = sheet.createRow(rowIndex3++);
			
			Cell hssfCell111 = titleRow.createCell(0);
			hssfCell111.setCellStyle(styles);
			XSSFRichTextString richString111 = new XSSFRichTextString("Batch");
			richString111.applyFont(font);
			hssfCell111.setCellValue(richString111);
			sheet.setColumnWidth((short) (0), (short) 5000);


			Cell hssfCell = titleRow.createCell(1);
			hssfCell.setCellStyle(styles);
			XSSFRichTextString richString = new XSSFRichTextString("AcademicYear");
			richString.applyFont(font);
			hssfCell.setCellValue(richString);
			sheet.setColumnWidth((short) (1), (short) 5000);

			Cell hssfCell1 = titleRow.createCell(2);
			hssfCell1.setCellStyle(styles);
			XSSFRichTextString richString1 = new XSSFRichTextString("College Name");
			richString1.applyFont(font);
			hssfCell1.setCellValue(richString1);
			sheet.setColumnWidth((short) (2), (short) 3000);

			Cell hssfCell2 = titleRow.createCell(3);
			hssfCell2.setCellStyle(styles);
			XSSFRichTextString richString2 = new XSSFRichTextString("Degree");
			richString2.applyFont(font);
			hssfCell2.setCellValue(richString2);
			sheet.setColumnWidth((short) (3), (short) 6000);

			Cell hssfCell3 = titleRow.createCell(4);
			hssfCell3.setCellStyle(styles);
			XSSFRichTextString richString3 = new XSSFRichTextString("Programmes");
			richString3.applyFont(font);
			hssfCell3.setCellValue(richString3);
			sheet.setColumnWidth((short) (4), (short) 9000);

			Cell hssfCell4 = titleRow.createCell(5);
			hssfCell4.setCellStyle(styles);
			XSSFRichTextString richString4 = new XSSFRichTextString("Programme Year");
			richString4.applyFont(font);
			hssfCell4.setCellValue(richString4);
			sheet.setColumnWidth((short) (5), (short) 5000);

			Cell hssfCell5 = titleRow.createCell(6);
			hssfCell5.setCellStyle(styles);
			XSSFRichTextString richString5 = new XSSFRichTextString("Semester");
			richString5.applyFont(font);
			hssfCell5.setCellValue(richString5);
			sheet.setColumnWidth((short) (6), (short) 5000);

			Cell hssfCell6 = titleRow.createCell(7);
			hssfCell6.setCellStyle(styles);
			XSSFRichTextString richString6 = new XSSFRichTextString("Student's Name");
			richString6.applyFont(font);
			hssfCell6.setCellValue(richString6);
			sheet.setColumnWidth((short) (7), (short) 5000);

			Cell hssfCell7 = titleRow.createCell(8);
			hssfCell7.setCellStyle(styles);
			XSSFRichTextString richString7 = new XSSFRichTextString("Roll No");
			richString7.applyFont(font);
			hssfCell7.setCellValue(richString7);
			sheet.setColumnWidth((short) (8), (short) 5000);

			Cell hssfCell8 = titleRow.createCell(9);
			hssfCell8.setCellStyle(styles);
			XSSFRichTextString richString8 = new XSSFRichTextString("Enrollment No");
			richString8.applyFont(font);
			hssfCell8.setCellValue(richString8);
			sheet.setColumnWidth((short) (9), (short) 5000);
			
			
			Cell hssfCell9 = titleRow.createCell(10);
			hssfCell9.setCellStyle(styles);
			XSSFRichTextString richString9= new XSSFRichTextString("Registration Done Date/Time");
			richString9.applyFont(font);
			hssfCell9.setCellValue(richString9);
			sheet.setColumnWidth((short) (10), (short) 20000);
			
			
			
			Cell hssfCell10 = titleRow.createCell(11);
			hssfCell10.setCellStyle(styles);
			XSSFRichTextString richString10 = new XSSFRichTextString("Department");
			richString10.applyFont(font);
			hssfCell10.setCellValue(richString10);
			sheet.setColumnWidth((short) (11), (short) 8000);
			
			
			Cell hssfCell11 = titleRow.createCell(12);
			hssfCell11.setCellStyle(styles);
			XSSFRichTextString richString11 = new XSSFRichTextString("ContactDetails");
			richString11.applyFont(font);
			hssfCell11.setCellValue(richString11);
			sheet.setColumnWidth((short) (12), (short) 8000);
			

			Cell hssfCell12 = titleRow.createCell(13);
			hssfCell12.setCellStyle(styles);
			XSSFRichTextString richString12 = new XSSFRichTextString("Email");
			richString12.applyFont(font);
			hssfCell12.setCellValue(richString12);
			sheet.setColumnWidth((short) (13), (short) 8000);
			
			
			Cell hssfCell13 = titleRow.createCell(14);
			hssfCell13.setCellStyle(styles);
			XSSFRichTextString richString13 = new XSSFRichTextString("Registration Done BY");
			richString13.applyFont(font);
			hssfCell13.setCellValue(richString13);
			sheet.setColumnWidth((short) (14), (short) 8000);
			     
			int rowIdx = 4;
				for (SemesterRegistration req : request) {
				Row row = sheet.createRow(rowIdx++);
				
				Cell sta111 = row.createCell(0);
				sta111.setCellStyle(style2);
				sta111.setCellValue(req.getStudentadmission().getBatch().getExIdentifier() + "");
				
				Cell sta1 = row.createCell(1);
				sta1.setCellStyle(style2);
				sta1.setCellValue(req.getAcademicYear().getExIdentifier() + "");
			
				Cell sta2 = row.createCell(2);
				sta2.setCellStyle(style2);
				sta2.setCellValue(req.getColleges().getExIdentifier() + "");
	
				Cell sta3 = row.createCell(3);
				sta3.setCellStyle(style2);
				sta3.setCellValue(req.getDegree().getExName() + "");
		
				Cell sta4 = row.createCell(4);
				sta4.setCellStyle(style2);
				sta4.setCellValue(req.getProgrammes().getExIdentifier() + "");
		
				Cell sta5 = row.createCell(5);
				sta5.setCellStyle(style2);
				sta5.setCellValue(req.getProgrammeYear().getExName() + "");
			
				Cell sta6 = row.createCell(6);
				sta6.setCellStyle(style2);
				sta6.setCellValue(req.getSemester().getExName() + "");
			
				Cell sta7 = row.createCell(7);
				sta7.setCellStyle(style2);
				sta7.setCellValue(req.getStudentadmission().getExName().toUpperCase());
		
				Cell sta8 = row.createCell(8);
				sta8.setCellStyle(style2);
				sta8.setCellValue(req.getStudentadmission().getExRollNo() + "");
			
				Cell sta9 = row.createCell(9);
				sta9.setCellStyle(style2);
				sta9.setCellValue(req.getStudentadmission().getExEnrollementNo() + "");
	
				Cell sta10 = row.createCell(10);
				sta10.setCellStyle(style2);
				sta10.setCellValue(req.getExCreateDate() + "");

				Cell sta11 = row.createCell(11);
				sta11.setCellStyle(style2);
				sta11.setCellValue(req.getDepartment().getExIdentifier());
			
				
				//List<CoursesRegistration> list = super.coursesRegistration.findByProgrammesIdAndExIsActiveAndExIsDeleteAndRegistrationIdAndProgrammeYearIdAndSemesterIdAndAcademicYearIdAndStudentadmissionId( req.getProgrammes().getId() , true , false , req.getRegistrationType().getId(),req.getProgrammeYear().getId(), req.getSemester().getId() ,req.getAcademicYear().getId() , req.getStudentadmission().getId());	
				List<CoursesRegistration> list = super.coursesRegistration.SemesterRegistrationdetails( req.getProgrammes().getId() ,req.getRegistrationType().getId(),req.getProgrammeYear().getId(), req.getSemester().getId() ,req.getAcademicYear().getId() , req.getStudentadmission().getId(),req.getStudentadmission().getBatch());
				System.out.println("ddddddddddddddddddddddd"+list.size());
				String courseList = "";
				if(list.size() >0) {	
					for(int i =0 ; i<list.size() ;i++) {
						if(i!=list.size()-1)
					courseList  = courseList+list.get(i).getCourses().getExCoursesCode()+",";
						else courseList = courseList+list.get(i).getCourses().getExCoursesCode()+",";
					}
					System.out.println("ddddddddddddddddddddddd"+list.size());
					//row.createCell(15).setCellValue(courseList);
				}
				
				List<Studentpersonal> List =super.studentpersonal.findByStudentadmissionId(req.getStudentadmission().getId());
				System.out.println("fffffffffffffffff"+List.size());
				String Email ="";
				String Contact ="";
				for(int i=0;i<List.size() ;i++) {
					Email=Email+List.get(i).getExEmailId()+" ";
					Contact=Contact+List.get(i).getExContactDetails();
				}
				Cell sta12 = row.createCell(12);
				sta12.setCellStyle(style2);
				sta12.setCellValue(Contact);
		
				Cell sta13 = row.createCell(13);
				sta13.setCellStyle(style2);
				sta13.setCellValue(Email);
				
				List<Courses> course=super.courses.findByProgrammesIdAndProgrammeYearIdAndDegreeIdAndCollegesIdAndAndSemesterIdAndDepartmentIdAndBatchId(req.getProgrammes().getId(),req.getProgrammeYear().getId(),req.getDegree().getId(),req.getColleges().getId(),req.getSemester().getId(),req.getDepartment().getId(),req.getStudentadmission().getBatch().getId());
				String coursescodes = "";
				int cod=15;
				if(course.size() >0) {	
					for(int i =0 ; i<course.size();i++) {
						if(i!=course.size()-1)
							coursescodes  = coursescodes+course.get(i).getExCoursesCode()+",";
								else coursescodes = coursescodes+course.get(i).getExCoursesCode()+",";
					}
				     String str[]=courseList.split(",");
				     String str1[]=coursescodes.split(",");
				     
				     
				     System.out.println("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"); 
				     System.out.println(coursescodes);
				     System.out.println(courseList);
				     System.out.println("-------------------------------------------------------");
				    // String statement="";
				     //	boolean flag=false;
				 //    int cellno=30;
				     for(String s:str1)
				     {
				    	// boolean flag=false;
				    	 String statement=" ";
				    	 for(String t:str) {
				    		 if(s.equalsIgnoreCase(t)) {
				    			// flag=true;
				    			 statement="Y";
				    		 }
				    	 }
						 Cell sta14 = row.createCell(cod++);
				    	 sta14.setCellStyle(style2);
				    	 sta14.setCellValue(statement);
				    	 
				     }
			}
				List<Courses> course1=super.courses.findByProgrammesIdAndProgrammeYearIdAndDegreeIdAndCollegesIdAndAndSemesterIdAndDepartmentIdAndBatchId(req.getProgrammes().getId(),req.getProgrammeYear().getId(),req.getDegree().getId(),req.getColleges().getId(),req.getSemester().getId(),req.getDepartment().getId(),req.getStudentadmission().getBatch().getId());
				String coursescodes1 = "";
				int cod1=15;
				if(course1.size() >0) {	
					for(int i =0 ; i<course1.size();i++) {
						if(i!=course1.size()-1)
							coursescodes1  = coursescodes1+course1.get(i).getExCoursesCode()+",";
								else coursescodes1 = coursescodes1+course1.get(i).getExCoursesCode();
						Cell hssfCell14 = titleRow.createCell(cod1++);
						XSSFRichTextString richString14 = new XSSFRichTextString(course1.get(i).getExCoursesCode());
						hssfCell14.setCellStyle(styles);
						richString14.applyFont(font);
						hssfCell14.setCellValue(richString14);
						sheet.setColumnWidth((short)(0),(short)(50000));
						//styles.setWrapText(true);
						//row.createCell(cod++).setCellValue(course.get(i).getExCoursesCode());
					}
				}
				List<AccessLogs> statement1=super.accessLogs.findAllById(req.getId());
				String logs="";
				if(statement1.size()>0) {
					for(int j=0;j<statement1.size();j++) {
					logs=logs+statement1.get(j).getRole();	
					}
				}
				 Cell sta15 = row.createCell(14);
				 sta15.setCellStyle(style2);
				 sta15.setCellValue(logs);
				//row.createCell(13).setCellValue(logs);
		}	
			workbook.write(out);
			System.out.println("***Excel out**" + out);
		}catch (Exception e) {
			e.printStackTrace();
		}
		return new ByteArrayInputStream(out.toByteArray());
	}

	@Override
	public List<Object[]> BankdetailsReport(ReportRequest request) {
		List<Object[]> list = new ArrayList<Object[]>();
		try {
			list = super.studentpersonal.getAdmisionRecords(request.getColleges(), request.getDegree(),
					request.getProgrammes(), request.getAcademicYear());				
		} catch (Exception e) {
			e.printStackTrace();
		}
		return list;
	}

	@Override
	public List<InvigilatorDuty> invigolatorReport(SeatArrangementRequest request) {
		// TODO Auto-generated method stub
		return invigilatorduty.findByAcademicYearIdAndExSemesterTypeAndExExamType(request.getAcademicYear(),request.getSemeserType() , request.getExExamType());
	}

	@Override
	public List<Studentpersonal> validateCompletestudentAdmissionReport(ReportRequest request) {
				List<Studentpersonal> list = new ArrayList<>();
				try {
					list = super.studentpersonal.getCompleteAdmisionRecord(request.getColleges(), request.getDegree(),
							request.getProgrammes(), request.getAcademicYear(),request.getBoards(),request.getStates(),request.getReligion(),request.getNationality(),request.getBloodgroup(),request.getMinority(),request.getMothertongue());
				} catch (Exception e) {
					// TODO: handle exception
					e.printStackTrace();
					logger.error("Exception occured" + e);
					StringWriter errors = new StringWriter();
					e.printStackTrace(new PrintWriter(errors));
					logger.error(errors.toString());
					return list;
				}
				return list;
	}

	@Override
	public List<Object[]> studentDynamicReport(StudentDynamicRequest request) {
		// TODO Auto-generated method stub
		List<Object[]> list = new ArrayList<Object[]>();
		try {			
			// get the table Name 
			List<ReportRequestEntity> tablename = reportrequest.getTableName(request.getFilter());			
			String tablenamerow = "";
			for(ReportRequestEntity r :tablename) {
				tablenamerow = tablenamerow+r.getTableNamevalue()+" ,";				
			}	
			
			
			StringBuffer sb= new StringBuffer(tablenamerow.trim());			
			tablenamerow = sb.deleteCharAt(sb.length()-1).toString();  
			
			boolean isboard = false;
			
			tablenamerow = tablenamerow+ " where " ;
			if(tablename.size() > 1) {
				//get the table name 
				System.out.println("ssssssssssssssssssssss"+tablename.size());
					if(tablename.size() == 2) {						
						tablenamerow = tablenamerow+tablename.get(0).getTableMappingvalue() +" = " + tablename.get(1).getTableMappingvalue() +"  AND ";
					}	
					System.out.println("mmmmmmmmmmmmmmmmmm"+tablenamerow);
					if(tablename.size() == 3) {	
						isboard = true;
						tablenamerow = tablenamerow+tablename.get(0).getTableMappingvalue() +" = " + tablename.get(1).getTableMappingvalue() +"  AND "+ tablename.get(0).getTableMappingvalue() +" = "+ tablename.get(2).getTableMappingvalue() + " AND ";
					}	
			}
			
			// get the filed name 			
			List<ReportRequestEntity> coloumn = reportrequest.getColoumnName(request.getFilter());		
			String coloumnname = "";
			for(ReportRequestEntity r :coloumn) {
				coloumnname = coloumnname+r.getExValue()+" , ";		
			}
			StringBuffer cb= new StringBuffer(coloumnname.trim());			
			coloumnname = cb.deleteCharAt(cb.length()-1).toString();  
			
			String board = "";			
			if(request.getBoards().size() >0) {
				List<String> hid = new ArrayList<String>();
				for(int i = 0 ; i<request.getBoards().size() ; i++) {
					hid.add("'"+request.getBoards().get(i)+"'");					
				}
				String	up = hid.toString();
				up = up.replace("[", "(").replace("]", ")");
				board = " and l.exTenthBoardOfPass IN "+up+" ";
			}
			
			String state = "";		
			if(request.getStates().size() >0) {
				List<String> hid = new ArrayList<String>();
				for(int i = 0 ; i<request.getStates().size() ; i++) {
					hid.add("'"+request.getStates().get(i)+"'");					
				}
				String	up = hid.toString();
				up = up.replace("[", "(").replace("]", ")");
				state = " and p.exNativeState IN "+up+" ";
			}
			
			String category = "";		
			if(request.getCategory().size() >0) {
				List<String> hid = new ArrayList<String>();
				for(int i = 0 ; i<request.getCategory().size() ; i++) {
					hid.add("'"+request.getCategory().get(i)+"'");					
				}
				String	up = hid.toString();
				up = up.replace("[", "(").replace("]", ")");
				category = " and s.category.id IN "+up+" ";
			}
			
			String department = "";		
			if(request.getDepartment().size() >0) {
				List<String> hid = new ArrayList<String>();
				for(int i = 0 ; i<request.getDepartment().size() ; i++) {
					hid.add("'"+request.getDepartment().get(i)+"'");					
				}
				String	up = hid.toString();
				up = up.replace("[", "(").replace("]", ")");
				department = " and s.department.id IN "+up+" ";
			}
			
			String gender = "";		
			if(request.getGender().size() >0) {
				List<String> hid = new ArrayList<String>();
				for(int i = 0 ; i<request.getGender().size() ; i++) {
					hid.add("'"+request.getGender().get(i)+"'");					
				}
				String	up = hid.toString();
				up = up.replace("[", "(").replace("]", ")");
				department = " and p.exGender IN "+up+" ";
			}
			
			String religin = "";		
			if(request.getReligion().size() >0) {
				List<String> hid = new ArrayList<String>();
				for(int i = 0 ; i<request.getReligion().size() ; i++) {
					hid.add("'"+request.getReligion().get(i)+"'");					
				}
				String	up = hid.toString();
				up = up.replace("[", "(").replace("]", ")");
				department = " and p.exReligion IN "+up+" ";
			}
			
			
			String blouude = "";		
			if(request.getBloodgroup().size() >0) {
				List<String> hid = new ArrayList<String>();
				for(int i = 0 ; i<request.getBloodgroup().size() ; i++) {
					hid.add("'"+request.getBloodgroup().get(i)+"'");					
				}
				String	up = hid.toString();
				up = up.replace("[", "(").replace("]", ")");
				blouude = " and p.exBloodGroup IN "+up+" ";
			}
			
			String mother = "";		
			if(request.getMotherTongue().size() >0) {
				List<String> hid = new ArrayList<String>();
				for(int i = 0 ; i<request.getMotherTongue().size() ; i++) {
					hid.add("'"+request.getMotherTongue().get(i)+"'");					
				}
				String	up = hid.toString();
				up = up.replace("[", "(").replace("]", ")");
				mother = " and l.exMotherTounge IN "+up+" ";
			}
				
			String dynaquery = "select"+" "+coloumnname+" from "+tablenamerow +"  s.academicYear IN (" + validateRepor(request.getAcademicYear()) +") and s.degree = "+request.getDegree()+"  and s.colleges = "+request.getColleges()+"  and s.programmes IN (" + validateRepor(request.getProgrammes()) +") "+board+" "+state+" "+category+" "+department+" "+gender+" "+blouude+" "+mother+"";
			
		System.out.println("ddddddddddddddd"+dynaquery);
			list = acdemicDao.getStudentDynamicreport(dynaquery);
			System.out.println("bbbbbbbbbbbbbbbbbbbb"+list.size());
			return list;
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			return list;
		}
	}

	public String validateReporstr(List<String> list) {
		String validatereport  = "";
		if(list.size()>0) {		
			for(int i =0 ; i<list.size() ; i++) {
				String number =list.get(i);
			validatereport = validatereport+number+",";
			}	
			validatereport =  validatereport.substring(0, validatereport.length() -1);
		}
		return validatereport;
	}	

	@Override
	public List<CoursesRegistration> validationSupplysemesterRegistrationReport(ReportRequest request) {
		List<CoursesRegistration> list = new ArrayList<>();
		try {
			list = super.coursesRegistration.
					findByRegistrationIdAndExIsDeleteAndExIsActiveAndStudentadmissionProgrammesIdInAndCollegesIdInAndDegreeIdInAndAcademicYearIdInAndSemesterIdInAndStudentadmissionDepartmentIdInAndProgrammeYearIdInOrderByStudentadmissionIdAsc(
							2L,false, true, request.getProgrammes(), request.getColleges(), request.getDegree(),
							request.getAcademicYear(), request.getSemester(), request.getDepartment(),
							request.getProgrammeYear());
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			return list;
		}

		return list;
	}

	@Override
	public ByteArrayInputStream SupplysemesterRegistrationReport(List<CoursesRegistration> request) {
			ByteArrayOutputStream out = new ByteArrayOutputStream();
			try {
				Workbook workbook = new XSSFWorkbook();
				int rowIndex = 0;
				int index = 0;
				Sheet sheet = workbook.createSheet("SemesterRegistration Report");
				rowIndex = 1;

				CellStyle styles = workbook.createCellStyle();
		    	  Font font11 = workbook.createFont();
				  font11.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
				  font11.setColor(HSSFColor.WHITE.index);
				  styles.setFont(font11);
				  styles.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());
				  styles.setFillPattern(CellStyle.SOLID_FOREGROUND);
				  styles.setBorderBottom(CellStyle.BORDER_THIN);
				  styles.setBottomBorderColor(IndexedColors.BLACK.getIndex());
				  styles.setBorderLeft(CellStyle.BORDER_THIN);
				  styles.setLeftBorderColor(IndexedColors.BLACK.getIndex());
				  styles.setBorderRight(CellStyle.BORDER_THIN);
				  styles.setRightBorderColor(IndexedColors.BLACK.getIndex());
				  styles.setBorderTop(CellStyle.BORDER_THIN);
				  styles.setTopBorderColor(IndexedColors.BLACK.getIndex());
				  styles.setAlignment(CellStyle.ALIGN_CENTER);
		
				  SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
			        Date date  =  new Date();
			        
			        Row dataRow1 = sheet.createRow(0);	
					Font font = workbook.createFont();
					XSSFFont font1 = (XSSFFont) font;
					XSSFRichTextString ricString = new XSSFRichTextString("Downloded Time :");
			
					Cell cel  =	dataRow1.createCell(0,Cell.CELL_TYPE_STRING);
					cel.setCellStyle(styles);
					cel.setCellValue(ricString);
					font1.setBold(true);
					
					XSSFRichTextString ric_String = new XSSFRichTextString(date.toString());
					Cell cel1  =	dataRow1.createCell(1,Cell.CELL_TYPE_STRING);
					cel1.setCellStyle(styles);
					cel1.setCellValue(ric_String);
					font1.setBold(true);

				CellStyle style1 = workbook.createCellStyle();
				 Font font111 = workbook.createFont();
				  font111.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
				  font111.setColor(HSSFColor.WHITE.index);
				  styles.setFont(font111);
				  style1.setFillForegroundColor(IndexedColors.BLACK.getIndex());
				  style1.setFillPattern(CellStyle.SOLID_FOREGROUND);
				  style1.setBorderBottom(CellStyle.BORDER_THIN);
				  style1.setBottomBorderColor(IndexedColors.BLACK.getIndex());
				  style1.setBorderLeft(CellStyle.BORDER_THIN);
				  style1.setLeftBorderColor(IndexedColors.BLACK.getIndex());
				  style1.setBorderRight(CellStyle.BORDER_THIN);
				  style1.setRightBorderColor(IndexedColors.BLACK.getIndex());
				  style1.setBorderTop(CellStyle.BORDER_THIN);
				  style1.setTopBorderColor(IndexedColors.BLACK.getIndex());
				  style1.setAlignment(CellStyle.ALIGN_CENTER);
				 	  
				  CellStyle style = workbook.createCellStyle();
			        style.setBorderBottom(CellStyle.BORDER_THIN);
			        style.setBottomBorderColor(IndexedColors.BLACK.getIndex());
			        style.setBorderLeft(CellStyle.BORDER_THIN);
			        style.setLeftBorderColor(IndexedColors.BLACK.getIndex());
			        style.setBorderRight(CellStyle.BORDER_THIN);
			        style.setRightBorderColor(IndexedColors.BLACK.getIndex());
			        style.setBorderTop(CellStyle.BORDER_THIN);
			        style.setTopBorderColor(IndexedColors.BLACK.getIndex());
			        style.setAlignment(CellStyle.ALIGN_CENTER);


				XSSFRichTextString richString20 = new XSSFRichTextString("Supply Registration Report");
				richString20.applyFont(font11);

				Row titleRow1 = sheet.createRow(rowIndex++);
				Cell hssfCell20 = titleRow1.createCell(0);
				hssfCell20.setCellStyle(style1);
				hssfCell20.setCellValue(richString20);
				sheet.setColumnWidth((short) (0), (short) 3000);
				rowIndex++;

				sheet.setColumnWidth(1, 10000);
				Row titleRow = sheet.createRow(2);

				Cell hssfCell = titleRow.createCell(0);
				hssfCell.setCellStyle(styles);
				XSSFRichTextString richString = new XSSFRichTextString("College");
				richString.applyFont(font11);
				hssfCell.setCellValue(richString);
				sheet.setColumnWidth((short) (0), (short) 3000);

				Cell hssfCell1 = titleRow.createCell(1);
				hssfCell1.setCellStyle(styles);
				XSSFRichTextString richString1 = new XSSFRichTextString("Degree");
				richString1.applyFont(font11);
				hssfCell1.setCellValue(richString1);
				sheet.setColumnWidth((short) (1), (short) 3000);

				Cell hssfCell2 = titleRow.createCell(2);
				hssfCell2.setCellStyle(styles);
				XSSFRichTextString richString2 = new XSSFRichTextString("Programme");
				richString2.applyFont(font11);
				hssfCell2.setCellValue(richString2);
				sheet.setColumnWidth((short) (2), (short) 3000);

				Cell hssfCell3 = titleRow.createCell(3);
				hssfCell3.setCellStyle(styles);
				XSSFRichTextString richString3 = new XSSFRichTextString("Department");
				richString3.applyFont(font11);
				hssfCell3.setCellValue(richString3);
				sheet.setColumnWidth((short) (3), (short) 3000);

				Cell hssfCell4 = titleRow.createCell(4);
				hssfCell4.setCellStyle(styles);
				XSSFRichTextString richString4 = new XSSFRichTextString("Batch");
				richString4.applyFont(font11);
				hssfCell4.setCellValue(richString4);
				sheet.setColumnWidth((short) (4), (short) 3000);

				Cell hssfCell5 = titleRow.createCell(5);
				hssfCell5.setCellStyle(styles);
				XSSFRichTextString richString5 = new XSSFRichTextString("AcademicYear");
				richString5.applyFont(font11);
				hssfCell5.setCellValue(richString5);
				sheet.setColumnWidth((short) (5), (short) 3000);

				Cell hssfCell6 = titleRow.createCell(6);
				hssfCell6.setCellStyle(styles);
				XSSFRichTextString richString6 = new XSSFRichTextString("Programme_Year");
				richString6.applyFont(font11);
				hssfCell6.setCellValue(richString6);
				sheet.setColumnWidth((short) (6), (short) 3000);

				Cell hssfCell7 = titleRow.createCell(7);
				hssfCell7.setCellStyle(styles);
				XSSFRichTextString richString7 = new XSSFRichTextString("Semester");
				richString7.applyFont(font11);
				hssfCell7.setCellValue(richString7);
				sheet.setColumnWidth((short) (7), (short) 3000);

				Cell hssfCell8 = titleRow.createCell(8);
				hssfCell8.setCellStyle(styles);
				XSSFRichTextString richString8 = new XSSFRichTextString("Students_Name");
				richString8.applyFont(font11);
				hssfCell8.setCellValue(richString8);
				sheet.setColumnWidth((short) (8), (short) 3000);
				
				 Cell hssfCell9 = titleRow.createCell(9); 
				 hssfCell9.setCellStyle(styles);
				 XSSFRichTextString richString9 = new XSSFRichTextString("Enrollment_Number");
				 richString9.applyFont(font11); 
				 hssfCell9.setCellValue(richString9);
				 sheet.setColumnWidth((short) (9), (short) 3000);
				 
				 
				 
				 Cell hssfCell0 = titleRow.createCell(10); 
				 hssfCell0.setCellStyle(styles);
				 XSSFRichTextString richString90 = new XSSFRichTextString("Roll_Number");
				 richString90.applyFont(font11); 
				 hssfCell0.setCellValue(richString90);
				 sheet.setColumnWidth((short) (10), (short) 3000);
				 
				 
				 Cell hssfCell11 = titleRow.createCell(11); 
				 hssfCell11.setCellStyle(styles);
				 XSSFRichTextString richString10 = new XSSFRichTextString("EmailId");
				 richString10.applyFont(font11); 
				 hssfCell11.setCellValue(richString10);
				 sheet.setColumnWidth((short) (11), (short) 3000);
				 
				 
				 Cell hssfCell12 = titleRow.createCell(12); 
				 hssfCell12.setCellStyle(styles);
				 XSSFRichTextString richString12 = new XSSFRichTextString("Contact_Number");
				 richString12.applyFont(font11); 
				 hssfCell12.setCellValue(richString12);
				 sheet.setColumnWidth((short) (12), (short) 3000);
		
				 Cell hssfCell14 = titleRow.createCell(13); 
				 hssfCell14.setCellStyle(styles);
				 XSSFRichTextString richString14 = new XSSFRichTextString("Registered_Courses");
				 richString14.applyFont(font11); 
				 hssfCell14.setCellValue(richString14);
				 sheet.setColumnWidth((short) (13), (short) 3000);		
				 
				 
				 
				 Cell hssfCell15 = titleRow.createCell(14); 
				 hssfCell15.setCellStyle(styles);
				 XSSFRichTextString richString15 = new XSSFRichTextString("Payment Status");
				 richString15.applyFont(font11); 
				 hssfCell15.setCellValue(richString15);
				 sheet.setColumnWidth((short) (14), (short) 3000);	
				 
				 
				 
				 
				 
				 
				int m=14;
				int rowIdx = 3;
				int x=0;
				for (CoursesRegistration req : request) {
					Row row = sheet.createRow(rowIdx++);
					
					Cell sta111 = row.createCell(0);
					sta111.setCellStyle(style);
					sta111.setCellValue(req.getColleges().getExIdentifier() + "");
					
					Cell sta1 = row.createCell(1);
					sta1.setCellStyle(style);
					sta1.setCellValue(req.getDegree().getExName() + "");
					
					
					Cell sta2 = row.createCell(2);
					sta2.setCellStyle(style);
					sta2.setCellValue(req.getStudentadmission().getProgrammes().getExIdentifier() + "");
					
					
					Cell sta3 = row.createCell(3);
					sta3.setCellStyle(style);
					sta3.setCellValue(req.getStudentadmission().getDepartment().getExIdentifier() + "");
					
					Cell sta4 = row.createCell(4);
					sta4.setCellStyle(style);
					sta4.setCellValue(req.getStudentadmission().getBatch().getExIdentifier()+"");
					
					Cell sta5 = row.createCell(5);
					sta5.setCellStyle(style);
					sta5.setCellValue(req.getAcademicYear().getExIdentifier()+"");
					
					
					Cell sta6 = row.createCell(6);
					sta6.setCellStyle(style);
					sta6.setCellValue(req.getProgrammeYear().getExName()+"");
					
					Cell sta7 = row.createCell(7);
					sta7.setCellStyle(style);
					sta7.setCellValue(req.getSemester().getExName()+"");
					
					Cell sta8 = row.createCell(8);
					sta8.setCellStyle(style);
					sta8.setCellValue(req.getStudentadmission().getExName().toUpperCase());
					
					Cell sta9 = row.createCell(9);
					sta9.setCellStyle(style);
					sta9.setCellValue(req.getStudentadmission().getExEnrollementNo() + "");
					
					Cell sta10 = row.createCell(10);
					sta10.setCellStyle(style);
					sta10.setCellValue(req.getStudentadmission().getExRollNo()+"");
					
					
					List<Studentpersonal> List =super.studentpersonal.findByStudentadmissionId(req.getStudentadmission().getId());
					String Email ="";
					String Contact ="";
					for(int i=0;i<List.size() ;i++) {
						Email=Email+List.get(i).getExEmailId()+" ";
						Contact=Contact+List.get(i).getExContactDetails();
					}
					Cell sta11 = row.createCell(11);
					sta11.setCellStyle(style);
					sta11.setCellValue(Email);
					
					Cell sta12 = row.createCell(12);
					sta12.setCellStyle(style);
					sta12.setCellValue(Contact);
					
					Cell sta13 = row.createCell(13);
					sta13.setCellStyle(style);
					sta13.setCellValue(req.getCourses().getExCoursesCode());
					
					Cell sta14 = row.createCell(14);
					sta14.setCellStyle(style);
					 if(req.getExIsPaid() !=null && req.getExIsPaid() == true) {
						 sta14.setCellValue("Yes");
					 }else {
						 sta14.setCellValue("NO");
					 }
					
					
					
				}
				workbook.write(out);
			} catch (Exception e) {
				e.printStackTrace();
			}
			return new ByteArrayInputStream(out.toByteArray());
		}

	
	public String validateRepor(List<Long> list) {
		String validatereport  = "";
		if(list.size()>0) {		
			for(int i =0 ; i<list.size() ; i++) {
				Long number =list.get(i);
			validatereport = validatereport+number+",";
			}	
			validatereport =  validatereport.substring(0, validatereport.length() -1);
		}
		return validatereport;
	}

	@Override
	public List<InvigilatorDuty> invigolatorReportWithExamHall(SeatArrangementRequest request) {
		try {
			SimpleDateFormat date = new SimpleDateFormat("yyyy-mm-dd");
			DateFormat dateFormat = new SimpleDateFormat("yyyy-mm-dd 00:00:00");
			String sDate = dateFormat.format(date.parse(request.getExamHallDate()));
		System.out.println("dddddddddd"+sDate);
			// TODO Auto-generated method stub
			return invigilatorduty.getInvigilatorOnroom(sDate , request.getAcademicYear(), request.getExExamType(),request.getSemeserType()  ,request.getRoomId());

			
			
		}catch(Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public List<SemesterRegistration> validationSemesterRegistrationReport(ReportRequest request) {
		List<SemesterRegistration> list = new ArrayList<>();
		try {
			list = super.semesterRegistration.findByExIsDeleteAndExIsActiveAndProgrammesIdInAndCollegesIdInAndDegreeIdInAndAcademicYearIdInAndSemesterIdInAndDepartmentIdInAndProgrammeYearIdInOrderByDepartmentId(false,true,request.getProgrammes(), request.getColleges(), request.getDegree(),
							request.getAcademicYear(), request.getSemester(), request.getDepartment(),
							request.getProgrammeYear());
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			return list;
		}

		return list;
	}
}
