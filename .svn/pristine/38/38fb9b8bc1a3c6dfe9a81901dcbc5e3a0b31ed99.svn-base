package com.niftem.app.repository;

import java.util.List;
import java.util.Optional;

import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.CrudRepository;
import org.springframework.transaction.annotation.Transactional;

import com.niftem.app.entity.Category;
import com.niftem.app.entity.FeeMaster;

public interface FeeMasterRepository extends CrudRepository<FeeMaster, Long>{


	List<FeeMaster> findByExFeeNameAndExIsDeleteAndSemsterIdAndProgrammeyearIdAndAcademicYearIdAndProgrammesId
	(String exFeeName, boolean b , long sem , Long programyaer , long academic , long program);
	
	List<FeeMaster> findByExIsDelete(boolean b);

	@Modifying
	@Transactional
	@Query(value = "update ex_fee_master set ex_fee_name = ?1, ex_is_Active = ?2, ex_fee_amount =?3, ex_fee_code =?4 ,feecategory_id =?5  , academic_year_id =?7   where id =?6", nativeQuery = true)
	int updateFeeMaster(String exName, Boolean exIsActive, String exFeeAmount, String exFeeCode,
			Long feecategory, Long id, Long academic);
	
	@Modifying
	@Transactional	
	@Query(value = "insert into ex_fee_master_fee_type(fee_master_id,fee_type_id)values(?1,?2)", nativeQuery = true)
	int savefeeMasterfeeType(Long feemaster_id, Long col);

	
	@Modifying
	@Transactional
	@Query(value = "delete from ex_fee_master_fee_type  where fee_master_id =?2", nativeQuery = true)
	void deletefeeMasterfeeType(Long id );

	
	@Modifying
	@Transactional	
	@Query(value = "insert into ex_fee_master_category(fee_master_id,category_id)values(?1,?2)", nativeQuery = true)
	int savefeeMasterCategory(Long fee_master_id, Long category_id);

	
	@Modifying
	@Transactional
	@Query(value = "delete from ex_fee_master_category  where fee_master_id =?2", nativeQuery = true)	
	void deletefeeMasterCategory(Long id);

	@Modifying
	@Transactional
	@Query(value = "update ex_fee_master set ex_is_delete = ?1 ,ex_is_Active =?2  where id =?3", nativeQuery = true)
	int deleteFeeMaster(Boolean exIsDelete, Boolean is_active, Long id);
	

	List<FeeMaster> findByExFeeNameAndExIsDeleteAndProgrammesIdAndProgrammeyearIdAndBatchIdAndDegreeIdAndSemsterId(
			String trim, boolean b, Long id, Long id2, Long id3, Long id4, Long id5);
	
	List<FeeMaster> findByExFeeCodeAndExIsDeleteAndProgrammesIdAndProgrammeyearIdAndBatchIdAndDegreeIdAndSemsterId(
			String trim, boolean b, Long id, Long id2, Long id3, Long id4, Long id5);
	
	List<FeeMaster> findByExIsDeleteAndProgrammesIdAndBatchIdAndDegreeIdAndSemsterIdAndProgrammeyearIdAndAcademicYearIdAndCategoryId(
		 boolean detele, Long program, Long batch, Long degree, Long semester , Long programyar, Long academic , Long category);
	
	List<FeeMaster> findByExIsDeleteAndProgrammesIdAndBatchIdAndDegreeIdAndSemsterIdAndProgrammeyearIdAndAcademicYearIdAndCategoryIdAndIdIn(
			 boolean detele, Long program, Long batch, Long degree, Long semester , Long programyar, Long academic , Long category, List<Long> feeid);

	
	List<FeeMaster> findByExFeeNameAndExIsDeleteAndProgrammesIdAndProgrammeyearIdAndBatchIdAndDegreeIdAndSemsterIdAndFeecategoryIdAndCategoryIn(
			String trim, boolean b, Long id, Long id2, Long id3, Long id4, Long id5 , Long feectegory, List<Category> category1  );

	
	
	@Query(value = "SELECT * FROM ex_fee_master a WHERE a.academic_year_id IN ?1 AND a.semster_id IN ?2 GROUP BY a.ex_fee_name ORDER BY a.id" , nativeQuery = true)
	List<FeeMaster> findrecords(List<Long> academicYear, List<Long> semester);



	
	
	//Optional<FeeMaster> findByExIsDeleteAndProgrammesIdAndProgrammeyearIdAndBatchIdAndDegreeIdAndSemsterIdAndFeecategoryIdAndAcademicYearId(
	//		boolean b, Long id, Long id2, Long id3, Long id4, Long id5, Long id6, Long id7);

	Optional<FeeMaster> findByExIsDeleteAndProgrammesIdAndProgrammeyearIdAndBatchIdAndDegreeIdAndSemsterIdAndFeecategoryIdAndAcademicYearIdAndExFeeAmount(
			boolean b, Long id, Long id2, Long id3, Long id4, Long id5, Long id6, Long id7, String trim);


	
}
