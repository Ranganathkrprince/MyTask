
  package com.niftem.app.controller;
 
  import java.io.File;
import java.io.FileInputStream;
import
  java.io.PrintWriter;
import java.io.StringWriter;
import
  java.util.LinkedHashMap;
import java.util.Map;

import org.slf4j.LoggerFactory;
import
  org.springframework.beans.factory.annotation.Autowired;
import
  org.springframework.core.io.InputStreamResource;
import
  org.springframework.http.HttpHeaders;
import
  org.springframework.http.HttpStatus;
import
  org.springframework.http.MediaType;
import
  org.springframework.http.ResponseEntity;
import
  org.springframework.validation.annotation.Validated;
import
  org.springframework.web.bind.annotation.CrossOrigin;
import
  org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import
  org.springframework.web.bind.annotation.RequestMapping;
import
  org.springframework.web.bind.annotation.RestController;

import com.niftem.app.model.AcademicClenderForPdfRequest;
import com.niftem.app.model.CertificatesRequest;
import com.niftem.app.model.ClassTimeTablePdfRequest;
import com.niftem.app.model.CommonRequest;
import com.niftem.app.model.CoursesCoverageRequest;
import com.niftem.app.model.CoursesRequest;
import com.niftem.app.model.ExamAttendanceRequest;
import com.niftem.app.model.ExamTimeTableRequest;
import com.niftem.app.model.FeedbackRequest;
import com.niftem.app.model.GradeReportRequest;
import com.niftem.app.model.InternalMarksRequest;
import com.niftem.app.model.PhotoCopyRequest;
import com.niftem.app.model.QuestionpaperRequest;
import com.niftem.app.model.ReportRequest;
import com.niftem.app.model.SemesterEligibility;
import
  com.niftem.app.service.PdfService;
import com.niftem.app.util.CommonHelper;

  @RequestMapping("/api/pdf/")
  
  @CrossOrigin(origins = "", allowedHeaders = "")
  
  @RestController
  
  @Validated public class PdfController { private static org.slf4j.Logger
  logger = LoggerFactory.getLogger("master-log");
  
  @Autowired private PdfService PdfService;
  
  @Autowired private CommonHelper CommonHelper;
  
  
	@PostMapping(value = "/generateAcademicCalenderPdf")
	public ResponseEntity generateAcademicCalenderPdf(@RequestBody AcademicClenderForPdfRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
		    Map<String, Object> tasks = PdfService.generateAcademicCalenderPdf(request);
		  //  return tasks;		    	    
		    String status = (String) tasks.get("status");		    
		    if(status !=null && status.equals("1")) {
		    	 File file =  CommonHelper.downloadPDF((String) tasks.get("url"));	        
			        if(file!=null) {
				        InputStreamResource resource = new InputStreamResource(new FileInputStream(file));		   	 
				        return ResponseEntity.ok()
				                // Content-Disposition
				                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=" + file.getName())
				                // Content-Type
				                .contentType(MediaType.APPLICATION_PDF)
				                // Contet-Length
				                .contentLength(file.length()) //
				                .body(resource);	        	
			        	
			        }else {
						info.put("status", "0");
						info.put("message", "Something went wrong");
						return new ResponseEntity<Map>(info, HttpStatus.OK);
			        }
		    }else {
		    	return new ResponseEntity<Map>(tasks, HttpStatus.OK); 
		    } 	
		    
		}catch(Exception e) {
			logger.error("Exception occured"+ e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return new ResponseEntity<Map>(info, HttpStatus.OK); 
		}
		
	}
	
	@PostMapping(value = "/academicCalenderPdfForStudent")
	public ResponseEntity academicCalenderPdfForStudent(@RequestBody AcademicClenderForPdfRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
		    Map<String, Object> tasks = PdfService.academicCalenderPdfForStudent(request);
		  //  return tasks;		    	    
		    String status = (String) tasks.get("status");		    
		    if(status !=null && status.equals("1")) {
		    	 File file =  CommonHelper.downloadPDF((String) tasks.get("url"));	        
			        if(file!=null) {
				        InputStreamResource resource = new InputStreamResource(new FileInputStream(file));		   	 
				        return ResponseEntity.ok()
				                // Content-Disposition
				                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=" + file.getName())
				                // Content-Type
				                .contentType(MediaType.APPLICATION_PDF)
				                // Contet-Length
				                .contentLength(file.length()) //
				                .body(resource);	        	
			        	
			        }else {
						info.put("status", "0");
						info.put("message", "Something went wrong");
						return new ResponseEntity<Map>(info, HttpStatus.OK);
			        }
		    }else {
		    	return new ResponseEntity<Map>(tasks, HttpStatus.OK); 
		    } 	
		    
		}catch(Exception e) {
			logger.error("Exception occured"+ e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return new ResponseEntity<Map>(info, HttpStatus.OK); 
		}
		
	}
	
	@PostMapping(value = "/generateClassTimeTablePdf")
	public ResponseEntity generateClassTimeTablePdf(@RequestBody ClassTimeTablePdfRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
		    Map<String, Object> tasks = PdfService.generateClassTimeTablePdf(request);
		  //  return tasks;
		    String status = (String) tasks.get("status");		    
		    if(status !=null && status.equals("1")) {
		    	 File file =  CommonHelper.downloadPDF((String) tasks.get("url"));	        
			        if(file!=null) {
				        InputStreamResource resource = new InputStreamResource(new FileInputStream(file));		   	 
				        return ResponseEntity.ok()
				                // Content-Disposition
				                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=" + file.getName())
				                // Content-Type
				                .contentType(MediaType.APPLICATION_PDF)
				                // Contet-Length
				                .contentLength(file.length()) //
				                .body(resource);	        	
			        	
			        }else {
						info.put("status", "0");
						info.put("message", "Something went wrong");
						return new ResponseEntity<Map>(info, HttpStatus.OK);
			        }
		    }else {
		    	return new ResponseEntity<Map>(tasks, HttpStatus.OK); 
		    } 	
		    
		}catch(Exception e) {
			logger.error("Exception occured"+ e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return new ResponseEntity<Map>(info, HttpStatus.OK); 
		}
		
	}
  
	@PostMapping(value = "/generateExamTimeTablePdf")
	public ResponseEntity getExamTimeTablePdf(@RequestBody ExamTimeTableRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
		    Map<String, Object> tasks = PdfService.getExamTimeTablePdf(request);
		  //  return tasks;
		    String status = (String) tasks.get("status");		    
		    if(status !=null && status.equals("1")) {
		    	 File file =  CommonHelper.downloadPDF((String) tasks.get("url"));	        
			        if(file!=null) {
				        InputStreamResource resource = new InputStreamResource(new FileInputStream(file));		   	 
				        return ResponseEntity.ok()
				                // Content-Disposition
				                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=" + file.getName())
				                // Content-Type
				                .contentType(MediaType.APPLICATION_PDF)
				                // Contet-Length
				                .contentLength(file.length()) //
				                .body(resource);	        	
			        	
			        }else {
						info.put("status", "0");
						info.put("message", "Something went wrong");
						return new ResponseEntity<Map>(info, HttpStatus.OK);
			        }
		    }else {
		    	return new ResponseEntity<Map>(tasks, HttpStatus.OK); 
		    } 	
		    
		}catch(Exception e) {
			logger.error("Exception occured"+ e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return new ResponseEntity<Map>(info, HttpStatus.OK); 
		}
		
	}
  

	@PostMapping(value = "/generateQuestionPaperPdf")
	public ResponseEntity generateQuestionPaperPdf(@RequestBody QuestionpaperRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
		    Map<String, Object> tasks = PdfService.generateQuestionPaperPdf(request);
		  //  return tasks;
		    String status = (String) tasks.get("status");		    
		    if(status !=null && status.equals("1")) {
		    	 File file =  CommonHelper.downloadPDF((String) tasks.get("url"));	        
			        if(file!=null) {
				        InputStreamResource resource = new InputStreamResource(new FileInputStream(file));		   	 
				        return ResponseEntity.ok()
				                // Content-Disposition
				                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=" + file.getName())
				                // Content-Type
				                .contentType(MediaType.APPLICATION_PDF)
				                // Contet-Length
				                .contentLength(file.length()) //
				                .body(resource);	        	
			        	
			        }else {
						info.put("status", "0");
						info.put("message", "Something went wrong");
						return new ResponseEntity<Map>(info, HttpStatus.OK);
			        }
		    }else {
		    	return new ResponseEntity<Map>(tasks, HttpStatus.OK); 
		    } 	
		    
		}catch(Exception e) {
			logger.error("Exception occured"+ e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return new ResponseEntity<Map>(info, HttpStatus.OK); 
		}
		
	}
  
  

	@PostMapping(value = "/generateBarcodeSheet")
	public ResponseEntity generateBarcodeSheet(@RequestBody ExamAttendanceRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
		    Map<String, Object> tasks = PdfService.generateBarcodeSheet(request);
		  //  return tasks;
		    		    
		    String status = (String) tasks.get("status");		    
		    if(status !=null && status.equals("1")) {
		    	 File file =  CommonHelper.downloadPDF((String) tasks.get("url"));	        
		    	   if(file!=null) {
				        InputStreamResource resource = new InputStreamResource(new FileInputStream(file));		   	 
				        return ResponseEntity.ok()
				                // Content-Disposition
				                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=" + file.getName())
				                // Content-Type
				                .contentType(MediaType.APPLICATION_PDF)
				                // Contet-Length
				                .contentLength(file.length()) //
				                .body(resource);	        	
			        	
			        }else {
						info.put("status", "0");
						info.put("message", "Something went wrong");
						return new ResponseEntity<Map>(info, HttpStatus.OK);
			        }
		    }else {
		    	return new ResponseEntity<Map>(tasks, HttpStatus.OK); 
		    } 	
		    
		}catch(Exception e) {
			logger.error("Exception occured"+ e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return new ResponseEntity<Map>(info, HttpStatus.OK); 
		}
		
	}
	
	@PostMapping(value = "/generateAttendenceSheet")
	public ResponseEntity generateAttendenceSheet(@RequestBody ExamAttendanceRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
		    Map<String, Object> tasks = PdfService.generateAttendenceSheet(request);
		  //  return tasks;
		    		    
		    String status = (String) tasks.get("status");		    
		    if(status !=null && status.equals("1")) {
		    	 File file =  CommonHelper.downloadPDF((String) tasks.get("url"));	        
		    	   if(file!=null) {
				        InputStreamResource resource = new InputStreamResource(new FileInputStream(file));		   	 
				        return ResponseEntity.ok()
				                // Content-Disposition
				                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=" + file.getName())
				                // Content-Type
				                .contentType(MediaType.APPLICATION_PDF)
				                // Contet-Length
				                .contentLength(file.length()) //
				                .body(resource);	        	
			        	
			        }else {
						info.put("status", "0");
						info.put("message", "Something went wrong");
						return new ResponseEntity<Map>(info, HttpStatus.OK);
			        }
		    }else {
		    	return new ResponseEntity<Map>(tasks, HttpStatus.OK); 
		    } 	
		    
		}catch(Exception e) {
			logger.error("Exception occured"+ e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return new ResponseEntity<Map>(info, HttpStatus.OK); 
		}
		
	}
	
	@PostMapping(value = "/generateIndexingPdf")
	public ResponseEntity generateIndexingPdf(@RequestBody QuestionpaperRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			  Map<String, Object> tasks = PdfService.generateIndexingPdf(request);
			  //  return tasks;
			    		    
			    String status = (String) tasks.get("status");		    
			    if(status !=null && status.equals("1")) {
			    	 File file =  CommonHelper.downloadPDF((String) tasks.get("url"));	        
			    	   if(file!=null) {
					        InputStreamResource resource = new InputStreamResource(new FileInputStream(file));		   	 
					        return ResponseEntity.ok()
					                // Content-Disposition
					                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=" + file.getName())
					                // Content-Type
					                .contentType(MediaType.APPLICATION_PDF)
					                // Contet-Length
					                .contentLength(file.length()) //
					                .body(resource);	        	
				        	
				        }else {
							info.put("status", "0");
							info.put("message", "Something went wrong");
							return new ResponseEntity<Map>(info, HttpStatus.OK);
				        }
			    }else {
			    	return new ResponseEntity<Map>(tasks, HttpStatus.OK); 
			    } 	
		    
		}catch(Exception e) {
			logger.error("Exception occured"+ e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return new ResponseEntity<Map>(info, HttpStatus.OK); 
		}
		
	}
	
	@PostMapping(value = "/generateGradeReportPdf")
	public ResponseEntity generateGradeReportPdf(@RequestBody GradeReportRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			  Map<String, Object> tasks = PdfService.generateGradeReportPdf(request);
			  //  return tasks;
			    		    
			    String status = (String) tasks.get("status");		    
			    if(status !=null && status.equals("1")) {
			    	 File file =  CommonHelper.downloadPDF((String) tasks.get("url"));	        
			    	   if(file!=null) {
					        InputStreamResource resource = new InputStreamResource(new FileInputStream(file));		   	 
					        return ResponseEntity.ok()
					                // Content-Disposition
					                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=" + file.getName())
					                // Content-Type
					                .contentType(MediaType.APPLICATION_PDF)
					                // Contet-Length
					                .contentLength(file.length()) //
					                .body(resource);	        	
				        	
				        }else {
							info.put("status", "0");
							info.put("message", "Something went wrong");
							return new ResponseEntity<Map>(info, HttpStatus.OK);
				        }
			    }else {
			    	return new ResponseEntity<Map>(tasks, HttpStatus.OK); 
			    } 	
		    
		}catch(Exception e) {
			logger.error("Exception occured"+ e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return new ResponseEntity<Map>(info, HttpStatus.OK); 
		}
		
	}
	
	
	@PostMapping(value = "/generateSemesterReportPdf")
	public ResponseEntity generateSemesterReportPdf(@RequestBody GradeReportRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			  Map<String, Object> tasks = PdfService.generateSemesterReportPdf(request);
			  //  return tasks;
			    		    
			    String status = (String) tasks.get("status");		    
			    if(status !=null && status.equals("1")) {
			    	 File file =  CommonHelper.downloadPDF((String) tasks.get("url"));	        
			    	   if(file!=null) {
					        InputStreamResource resource = new InputStreamResource(new FileInputStream(file));		   	 
					        return ResponseEntity.ok()
					                // Content-Disposition
					                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=" + file.getName())
					                // Content-Type
					                .contentType(MediaType.APPLICATION_PDF)
					                // Contet-Length
					                .contentLength(file.length()) //
					                .body(resource);	        	
				        	
				        }else {
							info.put("status", "0");
							info.put("message", "Something went wrong");
							return new ResponseEntity<Map>(info, HttpStatus.OK);
				        }
			    }else {
			    	return new ResponseEntity<Map>(tasks, HttpStatus.OK); 
			    } 	
		    
		}catch(Exception e) {
			logger.error("Exception occured"+ e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return new ResponseEntity<Map>(info, HttpStatus.OK); 
		}
		
	}
	
	@PostMapping(value = "/generateFeeReceiptPdf")
	public ResponseEntity generateFeeReceiptPdf(String orderid ,Long user) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
		    Map<String, Object> tasks = PdfService.generateFeeReceiptPdf(orderid,user);
		  //  return tasks;
		    String status = (String) tasks.get("status");		    
		    if(status !=null && status.equals("1")) {
		    	 File file =  CommonHelper.downloadPDF((String) tasks.get("url"));	        
			        if(file!=null) {
				        InputStreamResource resource = new InputStreamResource(new FileInputStream(file));		   	 
				        return ResponseEntity.ok()
				                // Content-Disposition
				                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=" + file.getName())
				                // Content-Type
				                .contentType(MediaType.APPLICATION_PDF)
				                // Contet-Length
				                .contentLength(file.length()) //
				                .body(resource);	        	
			        	
			        }else {
						info.put("status", "0");
						info.put("message", "Something went wrong");
						return new ResponseEntity<Map>(info, HttpStatus.OK);
			        }
		    }else {
		    	return new ResponseEntity<Map>(tasks, HttpStatus.OK); 
		    } 	
		    
		}catch(Exception e) {
			logger.error("Exception occured"+ e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return new ResponseEntity<Map>(info, HttpStatus.OK); 
		}
		
	}
	
	
	@PostMapping(value = "/getRegisterCoursesList")
	public ResponseEntity getRegisterCoursesList(@RequestBody CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
		    Map<String, Object> tasks = PdfService.getRegisterCoursesList(request);
		  //  return tasks;
		    String status = (String) tasks.get("status");		    
		    if(status !=null && status.equals("1")) {
		    	 File file =  CommonHelper.downloadPDF((String) tasks.get("url"));	        
			        if(file!=null) {
				        InputStreamResource resource = new InputStreamResource(new FileInputStream(file));		   	 
				        return ResponseEntity.ok()
				                // Content-Disposition
				                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=" + file.getName())
				                // Content-Type
				                .contentType(MediaType.APPLICATION_PDF)
				                // Contet-Length
				                .contentLength(file.length()) //
				                .body(resource);	        	
			        	
			        }else {
						info.put("status", "0");
						info.put("message", "Something went wrong");
						return new ResponseEntity<Map>(info, HttpStatus.OK);
			        }
		    }else {
		    	return new ResponseEntity<Map>(tasks, HttpStatus.OK); 
		    } 	
		    
		}catch(Exception e) {
			logger.error("Exception occured"+ e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return new ResponseEntity<Map>(info, HttpStatus.OK); 
		}
		
	}	
	
		
	@PostMapping(value = "/generateMigGradeReportPdf")
	public ResponseEntity generateMigGradeReportPdf(@RequestBody GradeReportRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			  Map<String, Object> tasks = PdfService.generateMigGradeReportPdf(request);
			  //  return tasks;
			    		    
			    String status = (String) tasks.get("status");		    
			    if(status !=null && status.equals("1")) {
			    	 File file =  CommonHelper.downloadPDF((String) tasks.get("url"));	        
			    	   if(file!=null) {
					        InputStreamResource resource = new InputStreamResource(new FileInputStream(file));		   	 
					        return ResponseEntity.ok()
					                // Content-Disposition
					                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=" + file.getName())
					                // Content-Type
					                .contentType(MediaType.APPLICATION_PDF)
					                // Contet-Length
					                .contentLength(file.length()) //
					                .body(resource);	        	
				        	
				        }else {
							info.put("status", "0");
							info.put("message", "Something went wrong");
							return new ResponseEntity<Map>(info, HttpStatus.OK);
				        }
			    }else {
			    	return new ResponseEntity<Map>(tasks, HttpStatus.OK); 
			    } 	
		    
		}catch(Exception e) {
			logger.error("Exception occured"+ e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return new ResponseEntity<Map>(info, HttpStatus.OK); 
		}
		
	}
	
	
	@PostMapping(value = "/generateMigSemesterReportPdf")
	public ResponseEntity generateMigSemesterReportPdf(@RequestBody GradeReportRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			  Map<String, Object> tasks = PdfService.generateMigSemesterReportPdf(request);
			  //  return tasks;
			    		    
			    String status = (String) tasks.get("status");		    
			    if(status !=null && status.equals("1")) {
			    	 File file =  CommonHelper.downloadPDF((String) tasks.get("url"));	        
			    	   if(file!=null) {
					        InputStreamResource resource = new InputStreamResource(new FileInputStream(file));		   	 
					        return ResponseEntity.ok()
					                // Content-Disposition
					                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=" + file.getName())
					                // Content-Type
					                .contentType(MediaType.APPLICATION_PDF)
					                // Contet-Length
					                .contentLength(file.length()) //
					                .body(resource);	        	
				        	
				        }else {
							info.put("status", "0");
							info.put("message", "Something went wrong");
							return new ResponseEntity<Map>(info, HttpStatus.OK);
				        }
			    }else {
			    	return new ResponseEntity<Map>(tasks, HttpStatus.OK); 
			    } 	
		    
		}catch(Exception e) {
			logger.error("Exception occured"+ e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return new ResponseEntity<Map>(info, HttpStatus.OK); 
		}
		
	}
	
	
	
	
	@PostMapping(value = "/generateMigTranscriptReportPdf")
	public ResponseEntity generateMigTranscriptReportPdf(@RequestBody GradeReportRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			  Map<String, Object> tasks = PdfService.generateMigTranscriptReportPdf(request);
			  //  return tasks;
			    		    
			    String status = (String) tasks.get("status");		    
			    if(status !=null && status.equals("1")) {
			    	 File file =  CommonHelper.downloadPDF((String) tasks.get("url"));	        
			    	   if(file!=null) {
					        InputStreamResource resource = new InputStreamResource(new FileInputStream(file));		   	 
					        return ResponseEntity.ok()
					                // Content-Disposition
					                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=" + file.getName())
					                // Content-Type
					                .contentType(MediaType.APPLICATION_PDF)
					                // Contet-Length
					                .contentLength(file.length()) //
					                .body(resource);	        	
				        	
				        }else {
							info.put("status", "0");
							info.put("message", "Something went wrong");
							return new ResponseEntity<Map>(info, HttpStatus.OK);
				        }
			    }else {
			    	return new ResponseEntity<Map>(tasks, HttpStatus.OK); 
			    } 	
		    
		}catch(Exception e) {
			logger.error("Exception occured"+ e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return new ResponseEntity<Map>(info, HttpStatus.OK); 
		}
		
	}	
	
	
	
	@PostMapping(value = "/generateKeyAnserPdf")
	public ResponseEntity generateKeyAnserPdf(@RequestBody QuestionpaperRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			  Map<String, Object> tasks = PdfService.generateKeyAnserPdf(request);
			  //  return tasks;
			    		    
			    String status = (String) tasks.get("status");		    
			    if(status !=null && status.equals("1")) {
			    	 File file =  CommonHelper.downloadPDF((String) tasks.get("url"));	        
			    	   if(file!=null) {
					        InputStreamResource resource = new InputStreamResource(new FileInputStream(file));		   	 
					        return ResponseEntity.ok()
					                // Content-Disposition
					                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=" + file.getName())
					                // Content-Type
					                .contentType(MediaType.APPLICATION_PDF)
					                // Contet-Length
					                .contentLength(file.length()) //
					                .body(resource);	        	
				        	
				        }else {
							info.put("status", "0");
							info.put("message", "Something went wrong");
							return new ResponseEntity<Map>(info, HttpStatus.OK);
				        }
			    }else {
			    	return new ResponseEntity<Map>(tasks, HttpStatus.OK); 
			    } 	
		    
		}catch(Exception e) {
			logger.error("Exception occured"+ e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return new ResponseEntity<Map>(info, HttpStatus.OK); 
		}
		
	}
	
	@PostMapping(value = "/generateHallTicketPdf")
	public ResponseEntity generateHallTicketPdf(@RequestBody SemesterEligibility request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			  Map<String, Object> tasks = PdfService.generateHallTicketPdf(request);
			  //  return tasks;
			    		    
			    String status = (String) tasks.get("status");		    
			    if(status !=null && status.equals("1")) {
			    	 File file =  CommonHelper.downloadPDF((String) tasks.get("url"));	        
			    	   if(file!=null) {
					        InputStreamResource resource = new InputStreamResource(new FileInputStream(file));		   	 
					        return ResponseEntity.ok()
					                // Content-Disposition
					                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=" + file.getName())
					                // Content-Type
					                .contentType(MediaType.APPLICATION_PDF)
					                // Contet-Length
					                .contentLength(file.length()) //
					                .body(resource);	        	
				        	
				        }else {
							info.put("status", "0");
							info.put("message", "Something went wrong");
							return new ResponseEntity<Map>(info, HttpStatus.OK);
				        }
			    }else {
			    	return new ResponseEntity<Map>(tasks, HttpStatus.OK); 
			    } 	
		    
		}catch(Exception e) {
			logger.error("Exception occured"+ e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return new ResponseEntity<Map>(info, HttpStatus.OK); 
		}
		
	}
	
	
	@PostMapping(value = "/generateInternalMarks")
	public ResponseEntity generateInternalMarksPdf(@RequestBody InternalMarksRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			  Map<String, Object> tasks = PdfService.generateInternalMarksPdf(request);
			  //  return tasks;
			    		    
			    String status = (String) tasks.get("status");		    
			    if(status !=null && status.equals("1")) {
			    	 File file =  CommonHelper.downloadPDF((String) tasks.get("url"));	        
			    	   if(file!=null) {
					        InputStreamResource resource = new InputStreamResource(new FileInputStream(file));		   	 
					        return ResponseEntity.ok()
					                // Content-Disposition
					                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=" + file.getName())
					                // Content-Type
					                .contentType(MediaType.APPLICATION_PDF)
					                // Contet-Length
					                .contentLength(file.length()) //
					                .body(resource);	        	
				        	
				        }else {
							info.put("status", "0");
							info.put("message", "Something went wrong");
							return new ResponseEntity<Map>(info, HttpStatus.OK);
				        }
			    }else {
			    	return new ResponseEntity<Map>(tasks, HttpStatus.OK); 
			    } 	
		    
		}catch(Exception e) {
			logger.error("Exception occured"+ e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return new ResponseEntity<Map>(info, HttpStatus.OK); 
		}
		
	}
	
	@PostMapping(value = "/generateFeedbackPdf")
	public ResponseEntity generateFeedbackPdf(@RequestBody FeedbackRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			  Map<String, Object> tasks = PdfService.generateFeedbackPdf(request);
			  //  return tasks;
			    		    
			    String status = (String) tasks.get("status");		    
			    if(status !=null && status.equals("1")) {
			    	 File file =  CommonHelper.downloadPDF((String) tasks.get("url"));	        
			    	   if(file!=null) {
					        InputStreamResource resource = new InputStreamResource(new FileInputStream(file));		   	 
					        return ResponseEntity.ok()
					                // Content-Disposition
					                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=" + file.getName())
					                // Content-Type
					                .contentType(MediaType.APPLICATION_PDF)
					                // Contet-Length
					                .contentLength(file.length()) //
					                .body(resource);	        	
				        	
				        }else {
							info.put("status", "0");
							info.put("message", "Something went wrong");
							return new ResponseEntity<Map>(info, HttpStatus.OK);
				        }
			    }else {
			    	return new ResponseEntity<Map>(tasks, HttpStatus.OK); 
			    } 	
		    
		}catch(Exception e) {
			logger.error("Exception occured"+ e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return new ResponseEntity<Map>(info, HttpStatus.OK); 
		}
		
	}
	
	@PostMapping(value = "/generateMarksPdf")
	public ResponseEntity generateMarksPdf(@RequestBody PhotoCopyRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
		    Map<String, Object> tasks = PdfService.generateMarksPdf(request.getBarcode());
		  //  return tasks;	    
		    String status = (String) tasks.get("status");		    
		    if(status !=null && status.equals("1")) {
		    	 File file =  CommonHelper.downloadPDF((String) tasks.get("url"));	      
			        if(file!=null) {
				        InputStreamResource resource = new InputStreamResource(new FileInputStream(file));		   	 
				        return ResponseEntity.ok()
				                // Content-Disposition
				                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=" + file.getName())
				                // Content-Type
				                .contentType(MediaType.APPLICATION_PDF)
				                // Contet-Length
				                .contentLength(file.length()) //
				                .body(resource);	        	
			        	
			        }else {
						info.put("status", "0");
						info.put("message", "Something went wrong");
						return new ResponseEntity<Map>(info, HttpStatus.OK);
			        }
		    }else {
		    	return new ResponseEntity<Map>(tasks, HttpStatus.OK); 
		    } 	
		    
		}catch(Exception e) {
			logger.error("Exception occured"+ e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return new ResponseEntity<Map>(info, HttpStatus.OK); 
		}
		
	}	

	
	@PostMapping(value = "/generateEligibleListPdf")
	public ResponseEntity generateEligibleListPdf(@RequestBody SemesterEligibility request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			  Map<String, Object> tasks = PdfService.generateEligibleListPdf(request);
			  //  return tasks;
			    		    
			    String status = (String) tasks.get("status");		    
			    if(status !=null && status.equals("1")) {
			    	 File file =  CommonHelper.downloadPDF((String) tasks.get("url"));	        
			    	   if(file!=null) {
					        InputStreamResource resource = new InputStreamResource(new FileInputStream(file));		   	 
					        return ResponseEntity.ok()
					                // Content-Disposition
					                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=" + file.getName())
					                // Content-Type
					                .contentType(MediaType.APPLICATION_PDF)
					                // Contet-Length
					                .contentLength(file.length()) //
					                .body(resource);	        	
				        	
				        }else {
							info.put("status", "0");
							info.put("message", "Something went wrong");
							return new ResponseEntity<Map>(info, HttpStatus.OK);
				        }
			    }else {
			    	return new ResponseEntity<Map>(tasks, HttpStatus.OK); 
			    } 	
		    
		}catch(Exception e) {
			logger.error("Exception occured"+ e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return new ResponseEntity<Map>(info, HttpStatus.OK); 
		}
		
	}	
	
	@PostMapping(value = "/generatePdcPdf")
	public ResponseEntity generatePdcPdf(@RequestBody CertificatesRequest  request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
		    Map<String, Object> tasks = PdfService.generatePdcPdf(request);
		  //  return tasks;
		    
		    
		    String status = (String) tasks.get("status");		    
		    if(status !=null && status.equals("1")) {
		    	 File file =  CommonHelper.downloadPDF((String) tasks.get("url"));	        
		    	  if(file!=null) {
				        InputStreamResource resource = new InputStreamResource(new FileInputStream(file));		   	 
				        return ResponseEntity.ok()
				                // Content-Disposition
				                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=" + file.getName())
				                // Content-Type
				                .contentType(MediaType.APPLICATION_PDF)
				                // Contet-Length
				                .contentLength(file.length()) //
				                .body(resource);	        	
			        	
			        }else {
						info.put("status", "0");
						info.put("message", "Something went wrong");
						return new ResponseEntity<Map>(info, HttpStatus.OK);
			        }
		    }else {
		    	return new ResponseEntity<Map>(tasks, HttpStatus.OK); 
		    } 	
	    
	}catch(Exception e) {
		logger.error("Exception occured"+ e);
		StringWriter errors = new StringWriter();
		e.printStackTrace(new PrintWriter(errors));
		logger.error(errors.toString());
		info.put("status", "0");
		info.put("message", "Something went wrong");
		return new ResponseEntity<Map>(info, HttpStatus.OK); 
	}
	
}
	
	
	@PostMapping(value = "/generateTrancriptOgpaPdf")
	public ResponseEntity generateTRancriptOgpaPdf(@RequestBody CertificatesRequest  request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
		    Map<String, Object> tasks = PdfService.generateTRancriptOgpaPdf(request);
		  //  return tasks;
		    
		    
		    String status = (String) tasks.get("status");		    
		    if(status !=null && status.equals("1")) {
		    	 File file =  CommonHelper.downloadPDF((String) tasks.get("url"));	        
		    	  if(file!=null) {
				        InputStreamResource resource = new InputStreamResource(new FileInputStream(file));		   	 
				        return ResponseEntity.ok()
				                // Content-Disposition
				                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=" + file.getName())
				                // Content-Type
				                .contentType(MediaType.APPLICATION_PDF)
				                // Contet-Length
				                .contentLength(file.length()) //
				                .body(resource);	        	
			        	
			        }else {
						info.put("status", "0");
						info.put("message", "Something went wrong");
						return new ResponseEntity<Map>(info, HttpStatus.OK);
			        }
		    }else {
		    	return new ResponseEntity<Map>(tasks, HttpStatus.OK); 
		    } 	
	    
	}catch(Exception e) {
		logger.error("Exception occured"+ e);
		StringWriter errors = new StringWriter();
		e.printStackTrace(new PrintWriter(errors));
		logger.error(errors.toString());
		info.put("status", "0");
		info.put("message", "Something went wrong");
		return new ResponseEntity<Map>(info, HttpStatus.OK); 
	}
	
}
	
	@PostMapping(value = "/generateBulkSemesterReportPdf")
	public ResponseEntity generateBulkSemesterReportPdf(@RequestBody GradeReportRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			  Map<String, Object> tasks = PdfService.generateBulkSemesterReportPdf(request);
			  //  return tasks;
			    		    
			    String status = (String) tasks.get("status");		    
			    if(status !=null && status.equals("1")) {
			    	 File file =  CommonHelper.downloadPDF((String) tasks.get("url"));	        
			    	   if(file!=null) {
					        InputStreamResource resource = new InputStreamResource(new FileInputStream(file));		   	 
					        return ResponseEntity.ok()
					                // Content-Disposition
					                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=" + file.getName())
					                // Content-Type
					                .contentType(MediaType.APPLICATION_PDF)
					                // Contet-Length
					                .contentLength(file.length()) //
					                .body(resource);	        	
				        	
				        }else {
							info.put("status", "0");
							info.put("message", "Something went wrong");
							return new ResponseEntity<Map>(info, HttpStatus.OK);
				        }
			    }else {
			    	return new ResponseEntity<Map>(tasks, HttpStatus.OK); 
			    } 	
		    
		}catch(Exception e) {
			logger.error("Exception occured"+ e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return new ResponseEntity<Map>(info, HttpStatus.OK); 
		}
		
	}	
	//migration
	
	
	@PostMapping(value = "/generateMigrationCancellationPdf")
	public ResponseEntity generateMigrationPdf(@RequestBody CertificatesRequest  request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
		    Map<String, Object> tasks = PdfService.generateMigrationPdf(request);
		  //  return tasks;
		    String status = (String) tasks.get("status");		    
		    if(status !=null && status.equals("1")) {
		    	 File file =  PdfService.downloadgradeReport((String) tasks.get("url"));	        
			        if(file!=null) {
				        InputStreamResource resource = new InputStreamResource(new FileInputStream(file));	
				    	 String filenames =  PdfService.allowallspecialcharcter(file.getName());	

				        return ResponseEntity.ok()
				                // Content-Disposition
				                .header(HttpHeaders.CONTENT_DISPOSITION, filenames)
				                // Content-Type
				                .contentType(MediaType.APPLICATION_PDF)
				                // Contet-Length
				                .contentLength(file.length()) //
				                .body(resource);	        	
			        	
			        }else {
						info.put("status", "0");
						info.put("message", "Something went wrong");
						return new ResponseEntity<Map>(info, HttpStatus.OK);
			        }
		    }else {
		    	return new ResponseEntity<Map>(tasks, HttpStatus.OK); 
		    } 	
		    
		}catch(Exception e) {
			logger.error("Exception occured"+ e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return new ResponseEntity<Map>(info, HttpStatus.OK); 
		}
		
	}
	
	
	@PostMapping(value = "/generateBulkPdcPdf")
	public ResponseEntity generateBulkPDCPdf(@RequestBody CertificatesRequest  request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
		    Map<String, Object> tasks = PdfService.generateBulkPDCPdf(request);
		  //  return tasks;
		    
		    
		    String status = (String) tasks.get("status");		    
		    if(status !=null && status.equals("1")) {
		    	 File file =  PdfService.downloadgradeReport((String) tasks.get("url"));	        
			        if(file!=null) {
				        InputStreamResource resource = new InputStreamResource(new FileInputStream(file));	
				    	 String filenames =  PdfService.allowallspecialcharcter(file.getName());	

				        return ResponseEntity.ok()
				                // Content-Disposition
				                .header(HttpHeaders.CONTENT_DISPOSITION, filenames)
				                // Content-Type
				                .contentType(MediaType.APPLICATION_PDF)
				                // Contet-Length
				                .contentLength(file.length()) //
				                .body(resource);	        	
			        	
			        }else {
						info.put("status", "0");
						info.put("message", "Something went wrong");
						return new ResponseEntity<Map>(info, HttpStatus.OK);
			        }
		    }else {
		    	return new ResponseEntity<Map>(tasks, HttpStatus.OK); 
		    } 	
		    
		}catch(Exception e) {
			logger.error("Exception occured"+ e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return new ResponseEntity<Map>(info, HttpStatus.OK); 
		}
		
	}
		
	@PostMapping(value = "/generateBulkMigrationPdf")
	public ResponseEntity generateBulkMigrationPdf(@RequestBody CertificatesRequest  request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
		    Map<String, Object> tasks = PdfService.generateBulkMigrationPdf(request);
		  //  return tasks;
		    	    String status = (String) tasks.get("status");		    
			    if(status !=null && status.equals("1")) {
			    	 File file =  CommonHelper.downloadPDF((String) tasks.get("url"));	        
			    	   if(file!=null) {
					        InputStreamResource resource = new InputStreamResource(new FileInputStream(file));		   	 
					        return ResponseEntity.ok()
					                // Content-Disposition
					                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=" + file.getName())
					                // Content-Type
					                .contentType(MediaType.APPLICATION_PDF)
					                // Contet-Length
					                .contentLength(file.length()) //
					                .body(resource);	        	
				        	
				        }else {
							info.put("status", "0");
							info.put("message", "Something went wrong");
							return new ResponseEntity<Map>(info, HttpStatus.OK);
				        }
			    }else {
			    	return new ResponseEntity<Map>(tasks, HttpStatus.OK); 
			    } 	
		    
		}catch(Exception e) {
			logger.error("Exception occured"+ e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return new ResponseEntity<Map>(info, HttpStatus.OK); 
		}
		
	}	
	
	
	
	//agriculture
	
	
	/*
	 * @PostMapping(value = "/generateAgriculturePdf") public ResponseEntity
	 * generateAgriculturePdf(@RequestBody CertificatesRequest request) {
	 * Map<String, Object> info = new LinkedHashMap<>(); try { Map<String, Object>
	 * tasks = PdfService.generateAgriculturePdf(request); // return tasks;
	 * 
	 * 
	 * String status = (String) tasks.get("status"); if(status !=null &&
	 * status.equals("1")) { File file = CommonHelper.downloadPDF((String)
	 * tasks.get("url")); if(file!=null) { InputStreamResource resource = new
	 * InputStreamResource(new FileInputStream(file)); return ResponseEntity.ok() //
	 * Content-Disposition .header(HttpHeaders.CONTENT_DISPOSITION,
	 * "attachment;filename=" + file.getName()) // Content-Type
	 * .contentType(MediaType.APPLICATION_PDF) // Contet-Length
	 * .contentLength(file.length()) // .body(resource);
	 * 
	 * }else { info.put("status", "0"); info.put("message", "Something went wrong");
	 * return new ResponseEntity<Map>(info, HttpStatus.OK); } }else { return new
	 * ResponseEntity<Map>(tasks, HttpStatus.OK); }
	 * 
	 * }catch(Exception e) { logger.error("Exception occured"+ e); StringWriter
	 * errors = new StringWriter(); e.printStackTrace(new PrintWriter(errors));
	 * logger.error(errors.toString()); info.put("status", "0"); info.put("message",
	 * "Something went wrong"); return new ResponseEntity<Map>(info, HttpStatus.OK);
	 * }
	 * 
	 * }
	 * 
	 * 
	 */
	
	
	
	@PostMapping(value = "/generateBulkFeedbackPdf")
	public ResponseEntity generateBulkFeedbackPdf(@RequestBody FeedbackRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
		    Map<String, Object> tasks = PdfService.generateBulkFeedbackPdf(request);

		    String status = (String) tasks.get("status");		    
		    if(status !=null && status.equals("1")) {
		    	 File file =  PdfService.downloadgradeReport((String) tasks.get("url"));	        
			        if(file!=null) {
				        InputStreamResource resource = new InputStreamResource(new FileInputStream(file));	
				    	 String filenames =  PdfService.allowallspecialcharcter(file.getName());	

				        return ResponseEntity.ok()
				                // Content-Disposition
				                .header(HttpHeaders.CONTENT_DISPOSITION, filenames)
				                // Content-Type
				                .contentType(MediaType.APPLICATION_PDF)
				                // Contet-Length
				                .contentLength(file.length()) //
				                .body(resource);	        	
			        	
			        }else {
						info.put("status", "0");
						info.put("message", "Something went wrong");
						return new ResponseEntity<Map>(info, HttpStatus.OK);
			        }
		    }else {
		    	return new ResponseEntity<Map>(tasks, HttpStatus.OK); 
		    } 	
		    
		}catch(Exception e) {
			logger.error("Exception occured"+ e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return new ResponseEntity<Map>(info, HttpStatus.OK); 
		}
		
	}
	
	
	
	
	
	@PostMapping(value = "/generateDegreePdf")
	public ResponseEntity generateDegreePdf(@RequestBody CertificatesRequest  request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
		    Map<String, Object> tasks = PdfService.generateDegreePdf(request);
		  //  return tasks;
		    
		    
		    String status = (String) tasks.get("status");		    
		    if(status !=null && status.equals("1")) {
		    	 File file =  PdfService.downloadgradeReport((String) tasks.get("url"));	        
			        if(file!=null) {
				        InputStreamResource resource = new InputStreamResource(new FileInputStream(file));
				    	 String filenames =  PdfService.allowallspecialcharcter(file.getName());	

				        return ResponseEntity.ok()
				                // Content-Disposition
				                .header(HttpHeaders.CONTENT_DISPOSITION, filenames)
				                // Content-Type
				                .contentType(MediaType.APPLICATION_PDF)
				                // Contet-Length
				                .contentLength(file.length()) //
				                .body(resource);	        	
			        	
			        }else {
						info.put("status", "0");
						info.put("message", "Something went wrong");
						return new ResponseEntity<Map>(info, HttpStatus.OK);
			        }
		    }else {
		    	return new ResponseEntity<Map>(tasks, HttpStatus.OK); 
		    } 	
		    
		}catch(Exception e) {
			logger.error("Exception occured"+ e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return new ResponseEntity<Map>(info, HttpStatus.OK); 
		}
		
	}
	
	
	
	@PostMapping(value = "/generateCourseWisePdf")
	public ResponseEntity generateCourseWisePdf(@RequestBody CertificatesRequest  request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
		    Map<String, Object> tasks = PdfService.generateCourseWisePdf(request);
		  //  return tasks;
		    
		    
		    String status = (String) tasks.get("status");		    
		    if(status !=null && status.equals("1")) {
		    	 File file =  PdfService.downloadgradeReport((String) tasks.get("url"));	        
			        if(file!=null) {
				        InputStreamResource resource = new InputStreamResource(new FileInputStream(file));
				    	 String filenames =  PdfService.allowallspecialcharcter(file.getName());	

				        return ResponseEntity.ok()
				                // Content-Disposition
				                .header(HttpHeaders.CONTENT_DISPOSITION, filenames)
				                // Content-Type
				                .contentType(MediaType.APPLICATION_PDF)
				                // Contet-Length
				                .contentLength(file.length()) //
				                .body(resource);	        	
			        	
			        }else {
						info.put("status", "0");
						info.put("message", "Something went wrong");
						return new ResponseEntity<Map>(info, HttpStatus.OK);
			        }
		    }else {
		    	return new ResponseEntity<Map>(tasks, HttpStatus.OK); 
		    } 	
		    
		}catch(Exception e) {
			logger.error("Exception occured"+ e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return new ResponseEntity<Map>(info, HttpStatus.OK); 
		}
		
	}	
	
	
	@PostMapping(value = "/generateMigrationCompletionsPdf")
	public ResponseEntity generateMigrationCompletionPdf(@RequestBody CertificatesRequest  request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
		    Map<String, Object> tasks = PdfService.generateMigrationCompletionPdf(request);
		  //  return tasks;
		    
		    String status = (String) tasks.get("status");		    
		    if(status !=null && status.equals("1")) {
		    	 File file =  PdfService.downloadgradeReport((String) tasks.get("url"));	        
			        if(file!=null) {
				        InputStreamResource resource = new InputStreamResource(new FileInputStream(file));	
				    	 String filenames =  PdfService.allowallspecialcharcter(file.getName());	
				    	 	//System.gc();
				        return ResponseEntity.ok()
				                // Content-Disposition
				                .header(HttpHeaders.CONTENT_DISPOSITION, filenames)
				                // Content-Type
				                .contentType(MediaType.APPLICATION_PDF)
				                // Contet-Length
				                .contentLength(file.length()) //
				                .body(resource);	        	
			        	
			        }else {
						info.put("status", "0");
						info.put("message", "Something went wrong");
						return new ResponseEntity<Map>(info, HttpStatus.OK);
			        }
		    }else {
		    	return new ResponseEntity<Map>(tasks, HttpStatus.OK); 
		    } 	
		    
		}catch(Exception e) {
			logger.error("Exception occured"+ e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return new ResponseEntity<Map>(info, HttpStatus.OK); 
		}
		
	}
	
	
	@PostMapping(value = "/getStudentCertificates")
	public ResponseEntity getCertificates(@RequestBody CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Map<String, Object> tasks = PdfService.getStudentCertificates(request);
			String status = (String) tasks.get("status");
			if (status != null && status.equals("1")) {
				File file = PdfService.downloadgradeReport((String) tasks.get("url"));
				if (file != null) {
					InputStreamResource resource = new InputStreamResource(new FileInputStream(file));
					String filenames = PdfService.allowallspecialcharcter(file.getName());

					return ResponseEntity.ok()
							// Content-Disposition
							.header(HttpHeaders.CONTENT_DISPOSITION, filenames)
							// Content-Type
							.contentType(MediaType.APPLICATION_PDF)
							// Contet-Length
							.contentLength(file.length()) //
							.body(resource);

				} else {
					info.put("status", "0");
					info.put("message", "Something went wrong");
					return new ResponseEntity<Map>(info, HttpStatus.OK);
				}
			} else {
				return new ResponseEntity<Map>(tasks, HttpStatus.OK);
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return new ResponseEntity<Map>(info, HttpStatus.OK);
		}
	}	
	
	@PostMapping(value = "/generateInternalMarksPdf")
	public ResponseEntity generateInternalMarks(@RequestBody InternalMarksRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			  Map<String, Object> tasks = PdfService.generateInternalMarks(request);
			  //  return tasks;
			    		    
			    String status = (String) tasks.get("status");		    
			    if(status !=null && status.equals("1")) {
			    	 File file =  CommonHelper.downloadPDF((String) tasks.get("url"));	        
			    	   if(file!=null) {
					        InputStreamResource resource = new InputStreamResource(new FileInputStream(file));		   	 
					        return ResponseEntity.ok()
					                // Content-Disposition
					                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=" + file.getName())
					                // Content-Type
					                .contentType(MediaType.APPLICATION_PDF)
					                // Contet-Length
					                .contentLength(file.length()) //
					                .body(resource);	        	
				        	
				        }else {
							info.put("status", "0");
							info.put("message", "Something went wrong");
							return new ResponseEntity<Map>(info, HttpStatus.OK);
				        }
			    }else {
			    	return new ResponseEntity<Map>(tasks, HttpStatus.OK); 
			    } 	
		    
		}catch(Exception e) {
			logger.error("Exception occured"+ e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return new ResponseEntity<Map>(info, HttpStatus.OK); 
		}
		
	}
	
	//new era
	
	@PostMapping(value = "/generatestudentadmissiondetailsPdf")
	public ResponseEntity generatestudentadmissiondetailsPdf(@RequestBody  ReportRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
		    Map<String, Object> tasks = PdfService.getStudentadmissiondetailsPdf(request);
		  //  return tasks;
		    String status = (String) tasks.get("status");		    
		    if(status !=null && status.equals("1")) {
		    	 File file =  CommonHelper.downloadPDF((String) tasks.get("url"));	        
			        if(file!=null) {
				        InputStreamResource resource = new InputStreamResource(new FileInputStream(file));		   	 
				        return ResponseEntity.ok()
				                // Content-Disposition
				                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=" + file.getName())
				                // Content-Type
				                .contentType(MediaType.APPLICATION_PDF)
				                // Contet-Length
				                .contentLength(file.length()) //
				                .body(resource);	        	
			        	
			        }else {
						info.put("status", "0");
						info.put("message", "Something went wrong");
						return new ResponseEntity<Map>(info, HttpStatus.OK);
			        }
		    }else {
		    	return new ResponseEntity<Map>(tasks, HttpStatus.OK); 
		    } 	
		    
		}catch(Exception e) {
			logger.error("Exception occured"+ e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return new ResponseEntity<Map>(info, HttpStatus.OK); 
		}
		
	}
	

	@PostMapping(value = "/generateOverallmarksPdf")
	public ResponseEntity generateOverallmarksPdf(@RequestBody  CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
		    Map<String, Object> tasks = PdfService.getOverallmarksPdfPdf(request);
		  //  return tasks;
		    String status = (String) tasks.get("status");		    
		    if(status !=null && status.equals("1")) {
		    	 File file =  CommonHelper.downloadPDF((String) tasks.get("url"));	        
			        if(file!=null) {
				        InputStreamResource resource = new InputStreamResource(new FileInputStream(file));		   	 
				        return ResponseEntity.ok()
				                // Content-Disposition
				                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=" + file.getName())
				                // Content-Type
				                .contentType(MediaType.APPLICATION_PDF)
				                // Contet-Length
				                .contentLength(file.length()) //
				                .body(resource);	        	
			        	
			        }else {
						info.put("status", "0");
						info.put("message", "Something went wrong");
						return new ResponseEntity<Map>(info, HttpStatus.OK);
			        }
		    }else {
		    	return new ResponseEntity<Map>(tasks, HttpStatus.OK); 
		    } 	
		    
		}catch(Exception e) {
			logger.error("Exception occured"+ e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return new ResponseEntity<Map>(info, HttpStatus.OK); 
		}
		
	}
	
	@PostMapping(value = "/generateStudentAddressAndContactDetailspdf")
	public ResponseEntity generateStudentAddressAndContactDetailspdf(@RequestBody  ReportRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
		    Map<String, Object> tasks = PdfService.getStudentAddressAndContactDetailspdf(request);
		  //  return tasks;
		    String status = (String) tasks.get("status");		    
		    if(status !=null && status.equals("1")) {
		    	 File file =  CommonHelper.downloadPDF((String) tasks.get("url"));	        
			        if(file!=null) {
				        InputStreamResource resource = new InputStreamResource(new FileInputStream(file));		   	 
				        return ResponseEntity.ok()
				                // Content-Disposition
				                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=" + file.getName())
				                // Content-Type
				                .contentType(MediaType.APPLICATION_PDF)
				                // Contet-Length
				                .contentLength(file.length()) //
				                .body(resource);	        	
			        	
			        }else {
						info.put("status", "0");
						info.put("message", "Something went wrong");
						return new ResponseEntity<Map>(info, HttpStatus.OK);
			        }
		    }else {
		    	return new ResponseEntity<Map>(tasks, HttpStatus.OK); 
		    } 	
		    
		}catch(Exception e) {
			logger.error("Exception occured"+ e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return new ResponseEntity<Map>(info, HttpStatus.OK); 
		}
		
	}
	
	@PostMapping(value = "/generateTermWiseSubjectspdf")
	public ResponseEntity generateTermWiseSubjectspdf(@RequestBody  CoursesRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
		    Map<String, Object> tasks = PdfService.getTermWiseSubjectspdf(request);
		  //  return tasks;
		    String status = (String) tasks.get("status");		    
		    if(status !=null && status.equals("1")) {
		    	 File file =  CommonHelper.downloadPDF((String) tasks.get("url"));	        
			        if(file!=null) {
				        InputStreamResource resource = new InputStreamResource(new FileInputStream(file));		   	 
				        return ResponseEntity.ok()
				                // Content-Disposition
				                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=" + file.getName())
				                // Content-Type
				                .contentType(MediaType.APPLICATION_PDF)
				                // Contet-Length
				                .contentLength(file.length()) //
				                .body(resource);	        	
			        	
			        }else {
						info.put("status", "0");
						info.put("message", "Something went wrong");
						return new ResponseEntity<Map>(info, HttpStatus.OK);
			        }
		    }else {
		    	return new ResponseEntity<Map>(tasks, HttpStatus.OK); 
		    } 	
		    
		}catch(Exception e) {
			logger.error("Exception occured"+ e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return new ResponseEntity<Map>(info, HttpStatus.OK); 
		}
		
	}
	
	
	@PostMapping(value = "/generateTransactionpdf")
	public ResponseEntity generateTransactionpdf(@RequestBody  ReportRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
		    Map<String, Object> tasks = PdfService.getTransactionpdf(request);
		  //  return tasks;
		    String status = (String) tasks.get("status");		    
		    if(status !=null && status.equals("1")) {
		    	 File file =  CommonHelper.downloadPDF((String) tasks.get("url"));	        
			        if(file!=null) {
				        InputStreamResource resource = new InputStreamResource(new FileInputStream(file));		   	 
				        return ResponseEntity.ok()
				                // Content-Disposition
				                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=" + file.getName())
				                // Content-Type
				                .contentType(MediaType.APPLICATION_PDF)
				                // Contet-Length
				                .contentLength(file.length()) //
				                .body(resource);	        	
			        	
			        }else {
						info.put("status", "0");
						info.put("message", "Something went wrong");
						return new ResponseEntity<Map>(info, HttpStatus.OK);
			        }
		    }else {
		    	return new ResponseEntity<Map>(tasks, HttpStatus.OK); 
		    } 	
		    
		}catch(Exception e) {
			logger.error("Exception occured"+ e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return new ResponseEntity<Map>(info, HttpStatus.OK); 
		}
		
	}
	
	
	
	@PostMapping(value = "/generateCourseCoveragepdf")
	public ResponseEntity generateCourseCoveragepdf(@RequestBody  CoursesCoverageRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
		    Map<String, Object> tasks = PdfService.generateCourseCoveragepdf(request);
		  //  return tasks;
		    String status = (String) tasks.get("status");		    
		    if(status !=null && status.equals("1")) {
		    	 File file =  CommonHelper.downloadPDF((String) tasks.get("url"));	        
			        if(file!=null) {
				        InputStreamResource resource = new InputStreamResource(new FileInputStream(file));		   	 
				        return ResponseEntity.ok()
				                // Content-Disposition
				                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=" + file.getName())
				                // Content-Type
				                .contentType(MediaType.APPLICATION_PDF)
				                // Contet-Length
				                .contentLength(file.length()) //
				                .body(resource);	        	
			        	
			        }else {
						info.put("status", "0");
						info.put("message", "Something went wrong");
						return new ResponseEntity<Map>(info, HttpStatus.OK);
			        }
		    }else {
		    	return new ResponseEntity<Map>(tasks, HttpStatus.OK); 
		    } 	
		    
		}catch(Exception e) {
			logger.error("Exception occured"+ e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return new ResponseEntity<Map>(info, HttpStatus.OK); 
		}
		
	}
	
	
	@PostMapping(value = "/generateCourseProgressionpdf")
	public ResponseEntity generateCourseProgressionpdf(@RequestBody  CoursesCoverageRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
		    Map<String, Object> tasks = PdfService.generateCourseProgressionpdf(request);
		  //  return tasks;
		    String status = (String) tasks.get("status");		    
		    if(status !=null && status.equals("1")) {
		    	 File file =  CommonHelper.downloadPDF((String) tasks.get("url"));	        
			        if(file!=null) {
				        InputStreamResource resource = new InputStreamResource(new FileInputStream(file));		   	 
				        return ResponseEntity.ok()
				                // Content-Disposition
				                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=" + file.getName())
				                // Content-Type
				                .contentType(MediaType.APPLICATION_PDF)
				                // Contet-Length
				                .contentLength(file.length()) //
				                .body(resource);	        	
			        	
			        }else {
						info.put("status", "0");
						info.put("message", "Something went wrong");
						return new ResponseEntity<Map>(info, HttpStatus.OK);
			        }
		    }else {
		    	return new ResponseEntity<Map>(tasks, HttpStatus.OK); 
		    } 	
		    
		}catch(Exception e) {
			logger.error("Exception occured"+ e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return new ResponseEntity<Map>(info, HttpStatus.OK); 
		}
		
	}
	
	
	@PostMapping(value = "/generatestudentstatusReportPdf")
	public ResponseEntity generatestudentstatusReportPdf(@RequestBody  ReportRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
		    Map<String, Object> tasks = PdfService.generatestudentstatusReportPdf(request);
		  //  return tasks;
		    String status = (String) tasks.get("status");		    
		    if(status !=null && status.equals("1")) {
		    	 File file =  CommonHelper.downloadPDF((String) tasks.get("url"));	        
			        if(file!=null) {
				        InputStreamResource resource = new InputStreamResource(new FileInputStream(file));		   	 
				        return ResponseEntity.ok()
				                // Content-Disposition
				                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=" + file.getName())
				                // Content-Type
				                .contentType(MediaType.APPLICATION_PDF)
				                // Contet-Length
				                .contentLength(file.length()) //
				                .body(resource);	        	
			        	
			        }else {
						info.put("status", "0");
						info.put("message", "Something went wrong");
						return new ResponseEntity<Map>(info, HttpStatus.OK);
			        }
		    }else {
		    	return new ResponseEntity<Map>(tasks, HttpStatus.OK); 
		    } 	
		    
		}catch(Exception e) {
			logger.error("Exception occured"+ e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return new ResponseEntity<Map>(info, HttpStatus.OK); 
		}
		
	}
	
	@PostMapping(value = "/generateTotalStudentFeePaidDetailsPdf")
	public ResponseEntity generateTotalStudentFeePaidDetailsPdf(@RequestBody  ReportRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
		    Map<String, Object> tasks = PdfService.generateTotalStudentFeePaidDetailsPdf(request);
		  //  return tasks;
		    String status = (String) tasks.get("status");		    
		    if(status !=null && status.equals("1")) {
		    	 File file =  CommonHelper.downloadPDF((String) tasks.get("url"));	        
			        if(file!=null) {
				        InputStreamResource resource = new InputStreamResource(new FileInputStream(file));		   	 
				        return ResponseEntity.ok()
				                // Content-Disposition
				                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=" + file.getName())
				                // Content-Type
				                .contentType(MediaType.APPLICATION_PDF)
				                // Contet-Length
				                .contentLength(file.length()) //
				                .body(resource);	        	
			        	
			        }else {
						info.put("status", "0");
						info.put("message", "Something went wrong");
						return new ResponseEntity<Map>(info, HttpStatus.OK);
			        }
		    }else {
		    	return new ResponseEntity<Map>(tasks, HttpStatus.OK); 
		    } 	
		    
		}catch(Exception e) {
			logger.error("Exception occured"+ e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return new ResponseEntity<Map>(info, HttpStatus.OK); 
		}
		
	}
	
	@PostMapping(value = "/generateNoduesDetailsPdf")
	public ResponseEntity generateNoduesDetailsPdf(@RequestBody  ReportRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
		    Map<String, Object> tasks = PdfService.generateNoduesDetailsPdf(request);
		  //  return tasks;
		    String status = (String) tasks.get("status");		    
		    if(status !=null && status.equals("1")) {
		    	 File file =  CommonHelper.downloadPDF((String) tasks.get("url"));	        
			        if(file!=null) {
				        InputStreamResource resource = new InputStreamResource(new FileInputStream(file));		   	 
				        return ResponseEntity.ok()
				                // Content-Disposition
				                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=" + file.getName())
				                // Content-Type
				                .contentType(MediaType.APPLICATION_PDF)
				                // Contet-Length
				                .contentLength(file.length()) //
				                .body(resource);	        	
			        	
			        }else {
						info.put("status", "0");
						info.put("message", "Something went wrong");
						return new ResponseEntity<Map>(info, HttpStatus.OK);
			        }
		    }else {
		    	return new ResponseEntity<Map>(tasks, HttpStatus.OK); 
		    } 	
		    
		}catch(Exception e) {
			logger.error("Exception occured"+ e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return new ResponseEntity<Map>(info, HttpStatus.OK); 
		}
		
	}
	
	
	@PostMapping(value = "/generateSeatingplanPdf")
	public ResponseEntity generateSeatingplanPdf(@RequestBody InternalMarksRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			  Map<String, Object> tasks = PdfService.generateSeatingplanPdf(request);
			  //  return tasks;
			    		    
			    String status = (String) tasks.get("status");		    
			    if(status !=null && status.equals("1")) {
			    	 File file =  CommonHelper.downloadPDF((String) tasks.get("url"));	        
			    	   if(file!=null) {
					        InputStreamResource resource = new InputStreamResource(new FileInputStream(file));		   	 
					        return ResponseEntity.ok()
					                // Content-Disposition
					                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=" + file.getName())
					                // Content-Type
					                .contentType(MediaType.APPLICATION_PDF)
					                // Contet-Length
					                .contentLength(file.length()) //
					                .body(resource);	        	
				        	
				        }else {
							info.put("status", "0");
							info.put("message", "Something went wrong");
							return new ResponseEntity<Map>(info, HttpStatus.OK);
				        }
			    }else {
			    	return new ResponseEntity<Map>(tasks, HttpStatus.OK); 
			    } 	
		    
		}catch(Exception e) {
			logger.error("Exception occured"+ e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return new ResponseEntity<Map>(info, HttpStatus.OK); 
		}
		
	}
	

 }
