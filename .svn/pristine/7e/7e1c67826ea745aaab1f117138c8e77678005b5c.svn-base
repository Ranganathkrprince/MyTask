package com.niftem.app.implementation;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.math.BigInteger;
import java.nio.file.FileVisitResult;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.SimpleFileVisitor;
import java.nio.file.attribute.BasicFileAttributes;
import java.sql.Time;
import java.text.SimpleDateFormat;
import java.time.Month;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Random;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import javax.transaction.Transactional;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.DateUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.niftem.app.controller.CommonController;
import com.niftem.app.entity.AboutFeedBack;
import com.niftem.app.entity.AcademicCalender;
import com.niftem.app.entity.AcademicCalenderLog;
import com.niftem.app.entity.AcademicYear;
import com.niftem.app.entity.CertificatesLog;
import com.niftem.app.entity.ClassTimeTable;
import com.niftem.app.entity.ClassTimeTableDays;
import com.niftem.app.entity.Colleges;
import com.niftem.app.entity.Courses;
import com.niftem.app.entity.CoursesCoverage;
import com.niftem.app.entity.CoursesRegistration;
import com.niftem.app.entity.Degree;
import com.niftem.app.entity.Department;
import com.niftem.app.entity.ExamAcademicYearProgrammes;
import com.niftem.app.entity.ExamAnnouncement;
import com.niftem.app.entity.ExamAttendance;
import com.niftem.app.entity.ExamBarcodes;
import com.niftem.app.entity.ExamTimeTable;
import com.niftem.app.entity.ExamTimeTableLogs;
import com.niftem.app.entity.ExternalMarks;
import com.niftem.app.entity.FeedBack;
import com.niftem.app.entity.FeedBackScale;
import com.niftem.app.entity.GradeReport;
import com.niftem.app.entity.GradeReportLog;
import com.niftem.app.entity.MidTermMarks;
import com.niftem.app.entity.NoDuePenalty;
import com.niftem.app.entity.NoDuesConfiguration;
import com.niftem.app.entity.NoDuesConfiguration;
import com.niftem.app.entity.OGPA;
import com.niftem.app.entity.OrderTransaction;
import com.niftem.app.entity.ProgrammeYear;
import com.niftem.app.entity.Programmes;
import com.niftem.app.entity.QuestionOptionMapping;
import com.niftem.app.entity.QuestionPaper;
import com.niftem.app.entity.QuestionPaperLog;
import com.niftem.app.entity.QuestionPaperVersion;
import com.niftem.app.entity.RegistrationType;
import com.niftem.app.entity.RoomMaster;
import com.niftem.app.entity.SeatArrangement;
import com.niftem.app.entity.Section;
import com.niftem.app.entity.SemesterProgressReport;
import com.niftem.app.entity.SemesterRegistration;
import com.niftem.app.entity.Semster;
import com.niftem.app.entity.StaffEmpDetails;
import com.niftem.app.entity.Staffpersonal;
import com.niftem.app.entity.Stream;
import com.niftem.app.entity.Studentadmission;
import com.niftem.app.entity.Studentpersonal;
import com.niftem.app.entity.TeacherCourseMapping;
import com.niftem.app.entity.TeachingSummary;
import com.niftem.app.entity.University;
import com.niftem.app.entity.User;
import com.niftem.app.model.AcademicClenderForPdfRequest;
import com.niftem.app.model.CertificatesRequest;
import com.niftem.app.model.ClassTimeTablePdfRequest;
import com.niftem.app.model.CommonRequest;
import com.niftem.app.model.CoursesCoverageRequest;
import com.niftem.app.model.CoursesRequest;
import com.niftem.app.model.ExamAttendanceRequest;
import com.niftem.app.model.ExamTimeTableRequest;
import com.niftem.app.model.FeedbackRequest;
import com.niftem.app.model.GradeReportRequest;
import com.niftem.app.model.InternalMarksRequest;
import com.niftem.app.model.QuestionpaperRequest;
import com.niftem.app.model.ReportRequest;
import com.niftem.app.model.SemesterEligibility;
import com.niftem.app.repository.NoDuesConfigurationRepository;
import com.niftem.app.service.PdfService;
import com.niftem.app.util.AutoManager;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.export.ooxml.JRDocxExporter;
import net.sf.jasperreports.export.Exporter;
import net.sf.jasperreports.export.SimpleExporterInput;

@Service
@Transactional
public class PdfImp extends AutoManager implements PdfService {
	@Autowired
	private NoDuesConfigurationRepository nodues;

	private static Logger logger = LoggerFactory.getLogger("master-log");
	
	@Override
	public Map<String, Object> generateAcademicCalenderPdf(AcademicClenderForPdfRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();

		try {
			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}

			if (request.getExIsEven() == null || request.getExIsEven().equals("null")) {
				info.put("status", "2");
				info.put("message", "exIsEven ie required 0/1");
				return info;
			}

			List<University> uid = super.university.findAllUnivesity();
			if (uid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "University not present");
				return info;
			}
			String university = uid.get(0).getExName().toUpperCase();

			List dataList = new LinkedList();

			List<AcademicCalender> academicCalender = super.academicCalender.getrecordForPdf(false, true, request.getAcademicYear(),request.getExIsEven(),request.getBatch());
			if (academicCalender.size() <= 0) {
				info.put("status", "2");
				info.put("message", "AcademicCalender not present");
				return info;
			}
			// get the praposed date and activity 
			
			List<AcademicCalenderLog> tasks = super.academicCalenderLog.getRecord(academicCalender.get(0).getId());
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "AcademicCalender not created");
				return info;
			}
			
			String academicyear  = academic.get().getExYear();
			String exCreateDate = academicCalender.get(0).getExCreateDate().toString();
			
			
			for (AcademicCalenderLog e : tasks) {
				Map<Object, Object> data = new HashMap<Object, Object>();
				data.put("academicYear", academicyear);
				data.put("exCreateDate", exCreateDate);
				data.put("ativity", e.getAcademicCalenderActivity().getExName());
				data.put("exProposedDates", e.getExProposedDates());

				dataList.add(data);

			}
			// }
			List<TeachingSummary> TeachingSummary = super.teachingsummary
					.findByExIsDeleteAndExIsActiveAndAcademicYearIdAndExIsEven(false, true, request.getAcademicYear(),
							request.getExIsEven());
			if (TeachingSummary.size() <= 0) {

				info.put("status", "2");
				info.put("message", "TeachingSummary not present");
				return info;
			}
			for (TeachingSummary e : TeachingSummary) {
				Map<Object, Object> data1 = new HashMap<Object, Object>();

				data1.put("academicYear", e.getAcademicYear().getExYear());
				data1.put("monthnam", e.getMonthname().getExName());
				data1.put("teachingDays", e.getExTeachingDays());
				data1.put("exHolidayDates", e.getExHolidayDates());
				dataList.add(data1);

			}
			Map<Object, Object> datae = new HashMap<Object, Object>();
			datae.put("summary", "summary");

			dataList.add(datae);

			System.out.println("??????????????dataList????????????" + dataList);

			String serverurl = super.commonHelper.getSettingValue("SERVER_IP");
			// String reportPath = "src/main/resources/";
			String reportPath = super.commonHelper.getSettingValue("DOCUMENT_PATH");
			String image = super.commonHelper.getSettingValue("IMAGE_PATH");
			String image1 = super.commonHelper.getSettingValue("MOFPI_PATH");
			String image2 = super.commonHelper.getSettingValue("EMBLEM_PATH");
		
			logger.info(image);

			// Compile the Jasper report from .jrxml to .japser

			String path = resourceLoader.getResource("classpath:academicClender.jrxml").getURI().getPath();
			JasperReport jasperReport = JasperCompileManager.compileReport(path);

			// JasperReport jasperReport = JasperCompileManager.compileReport(reportPath +
			// "\\gradeReport.jrxml");

			// Get your data source

			JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(dataList);

			// Add parameters
			Map<String, Object> parameters = new HashMap<>();
			parameters.put("remark", academicCalender.get(0).getExRemark());
			parameters.put("createdBy", "Win.org");
			parameters.put("university", university);
			parameters.put("academic", academic.get().getExYear());
			parameters.put("exIsEven", request.getExIsEven() == true ? "Even" : "Odd");
			parameters.put("createdDate", academicCalender.get(0).getExCreateDate());

			parameters.put("logo", image);
			parameters.put("emblem", image1);
			parameters.put("logo1", image2);
			
			String sem = "";
			if (request.getExIsEven() == true) {
				sem = "Even";
			} else {
				sem = "Odd";
			}
			String feesName = "\\" + academic.get().getExYear() + sem + ".pdf";

			String folder = createFolder(academic.get().getExYear(), sem, "academicClender");

			// Fill the report
			JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,
					jrBeanCollectionDataSource);

			// Export the report to a PDF file
			JasperExportManager.exportReportToPdfFile(jasperPrint, reportPath + folder + feesName);

			File filenew = new File(reportPath + folder + feesName);
			if (filenew.exists()) {
				filenew.setExecutable(true, false);
				filenew.setReadable(true, false);
				filenew.setWritable(true, false);
			}

			// info.put("gradeReport", dataList);
			info.put("status", "1");
			info.put("url", folder + feesName);
			info.put("message", "Report successfully generated");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}
	}

/*	@Override
	public Map<String, Object> generateClassTimeTablePdf(ClassTimeTablePdfRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		java.sql.Connection conn = null;

		try {
			List<University> uid = super.university.findAllUnivesity();
			if (uid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "University not present");
				return info;
			}
			String university = uid.get(0).getExName();
			Optional<Colleges> Colleges = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),
					false, true);
			if (!Colleges.isPresent() || !Colleges.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}

			Optional<Programmes> Programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Programmes.isPresent() || !Programmes.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}

			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department not present");
				return info;
			}

			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent() || !academic.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}

			Optional<ProgrammeYear> programmeYear = super.programmeYear
					.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
			if (!programmeYear.isPresent() || !programmeYear.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!sem.isPresent() || !sem.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Semster not present");
				return info;
			}

			Optional<Stream> res = super.stream.findByIdAndExIsDeleteAndExIsActive(request.getStream(), false, true);
			if (!res.isPresent()) {
				info.put("status", "2");
				info.put("message", "Stream id not present");
				return info;
			}

			List<ClassTimeTable> TeachingSummary = super.classtimetable
					.findByExIsDeleteAndExIsActiveAndAcademicYearIdAndExIsUpdate(false, true, request.getAcademicYear(),
							true);
			if (TeachingSummary.size() <= 0) {

				info.put("status", "2");
				info.put("message", "Class time table not updated");
				return info;
			}

			List<Object[]> data = super.timetabledays.getalltimetable(TeachingSummary.get(0).getId());
			if (data.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Class time table not updated");
				return info;
			}

			List dataList = new LinkedList();
			int count = 0;
			for (Object[] e : data) {
				Map<Object, Object> studentinfo = new HashMap<Object, Object>();
				studentinfo.put("code", e[0]);
				studentinfo.put("title", e[1]);
				studentinfo.put("credit ", e[2]);

				System.out.println(">>>>>code" + studentinfo);

				dataList.add(studentinfo);
				count++;
			}
			
			 
			//conn = jdbcTemplate.getDataSource().getConnection();
			String serverurl = super.commonHelper.getSettingValue("SERVER_IP");
			String reportPath = super.commonHelper.getSettingValue("DOCUMENT_PATH"); // "src/main/resources/";
			String image = super.commonHelper.getSettingValue("IMAGE_PATH");
			logger.info(image);

			String path = resourceLoader.getResource("classpath:classTimeTable2.jrxml").getURI().getPath();
			JasperReport jasperReport = JasperCompileManager.compileReport(path);

			// Parameters for report
			Map<String, Object> parameters = new HashMap<>();
			parameters.put("programmeYear", request.getProgrammeYear());
			parameters.put("programme", request.getProgrammes());
			parameters.put("semester", request.getSemester());
			parameters.put("department", request.getDepartment());
			parameters.put("academicYear", request.getAcademicYear());
			parameters.put("college", request.getColleges());
			parameters.put("degree", request.getDegree());
			parameters.put("stream", request.getStream());

			parameters.put("programmeYearName", programmeYear.get().getExName());
			parameters.put("programmeName", Programmes.get().getExName());
			parameters.put("semesterName", sem.get().getExName());
			parameters.put("departmentName", department.get().getExName());
			parameters.put("academicYearName", academic.get().getExYear());
			parameters.put("collegeName", Colleges.get().getExName());
			parameters.put("degreeName", degree.get().getExName());
			parameters.put("streamName", res.get().getExName());

			parameters.put("createdBy", "CONTROLLER OF EXAMINATIONS");
			parameters.put("university", university);
			parameters.put("logo", image);

			// Fill the report
			JasperPrint print = JasperFillManager.fillReport(jasperReport, parameters, conn);
			// Export the report to a PDF file
			String folder = createFolder(academic.get().getExYear(), department.get().getExName(), "ClassTimeTable");
			// String reg =registration.get(0).getId() == 1
			// ?"":registration.get(0).getExName();
			String filename = "\\" + "ClassTimeTable.pdf";

			JasperExportManager.exportReportToPdfFile(print, reportPath + folder + filename);

			File filenew = new File(reportPath + folder + filename);
			if (filenew.exists()) {
				filenew.setExecutable(true, false);
				filenew.setReadable(true, false);
				filenew.setWritable(true, false);
			}

			// info.put("gradeReport", dataList);
			info.put("status", "1");
			info.put("url", folder + filename);
			info.put("message", "Report successfully generated");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}
	} */
	

	@Override
	public Map<String, Object> generateClassTimeTablePdf(ClassTimeTablePdfRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<Object> datalist10 = new ArrayList<Object>();
			List<Object> datalist1 = new ArrayList<Object>();
			List<Object> datalist2 = new ArrayList<Object>();
			List<Object> datalist3 = new ArrayList<Object>();
			List<Object> datalist4 = new ArrayList<Object>();
			List<Object> datalist5 = new ArrayList<Object>();
			List<Object> datalist6 = new ArrayList<Object>();
		
			List<University> uid = super.university.findAllUnivesity();
			if (uid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "University not present");
				return info;
			}
			String university = uid.get(0).getExName();
			Optional<Colleges> Colleges = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),
					false, true);
			if (!Colleges.isPresent() || !Colleges.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}

			Optional<Programmes> Programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Programmes.isPresent() || !Programmes.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}

			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department not present");
				return info;
			}

			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent() || !academic.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}

			Optional<ProgrammeYear> programmeYear = super.programmeYear
					.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
			if (!programmeYear.isPresent() || !programmeYear.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!sem.isPresent() || !sem.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Semster not present");
				return info;
			}

			Optional<Stream> res = super.stream.findByIdAndExIsDeleteAndExIsActive(request.getStream(), false, true);
			if (!res.isPresent()) {
				info.put("status", "2");
				info.put("message", "Stream id not present");
				return info;
			}

			Optional<Section> section  = super.section.findByExIsDeleteAndExIsActiveAndId( false, true,request.getSection());
			if(!section.isPresent()) {
				info.put("status", "2");
				info.put("message", "Section not present.");
				return info;
			}	
			
			List<ClassTimeTable> TeachingSummary = super.classtimetable
					.findByExIsDeleteAndExIsActiveAndAcademicYearIdAndSectionIdAndExIsUpdate(false, true, request.getAcademicYear(),request.getSection(),
							true);
			if (TeachingSummary.size() <= 0) {

				info.put("status", "2");
				info.put("message", "Class time table not updated");
				return info;
			}

			List<ClassTimeTableDays> data = super.timetabledays
					.getclasstimetable(
							request.getAcademicYear(),request.getSection(),request.getColleges(),request.getDegree(),request.getProgrammes(),request.getDepartment(),request.getSemester());
			if (data.size() <= 0) {

				info.put("status", "2");
				info.put("message", "Class time table not updated");
				return info;
			}

			int count = 0;
			List<Object[]> records = super.courses.classtimetablerecordsss(request.getProgrammes(), request.getDepartment(), false, true , request.getSection(),request.getAcademicYear(),request.getSemester());
			if (records.size() <= 0) {

				info.put("status", "2");
				info.put("message", "No records found");
				return info;
			}
			String timings="";
		/*	for (Object[] e1 : records) {
				Map<Object, Object> studentinfo = new HashMap<Object, Object>();
				System.out.println("><><><><><><>Coursescodes"+ e1[0]==null ? "NA": e1[0].toString().concat(" :: ").concat(e1[2]==null ? "NA": e1[2].toString()).concat(e1[3]==null ? "NA": e1[3].toString()));
				SimpleDateFormat formatTime = new SimpleDateFormat("hh:mm aa");
				
				Date createdDate = (Date) e1[1];
				Date createdDate1 = (Date) e1[2];
				 String myTime = formatTime.format(createdDate);
				 String myTime1 = formatTime.format(createdDate1);
				 studentinfo.put("code", e1[0]==null ? "NA": e1[0].toString().concat(" ( ").concat(myTime.concat(" to ").concat(myTime1)).concat(" ) ").concat(e1[3]==null ? "NA": e1[3].toString()).concat(" ( ").concat(e1[4]==null ? "NA": e1[4].toString()).concat(" ) ").concat(" ( ").concat(e1[5]==null ? "NA": e1[5].toString()).concat(" ) "));
				studentinfo.put("title", myTime.concat(" to ").concat(myTime1));
				timings=myTime.concat(" to ").concat(myTime1);
				datalist10.add(studentinfo);
			}
			
			List<Object[]> recordTuesday = super.courses.classtimetablerecordTuesday(request.getProgrammes(), request.getDepartment(), false, true , request.getSection(),request.getAcademicYear(),request.getSemester());
			if (recordTuesday.size() <= 0) {

				info.put("status", "2");
				info.put("message", "No records found");
				return info;
			}
			for (Object[] e1 : recordTuesday) {
				Map<Object, Object> studentinfo2 = new HashMap<Object, Object>();
				System.out.println("><><><><><><>Coursescodes"+ e1[0]==null ? "NA": e1[0].toString().concat(" :: ").concat(e1[2]==null ? "NA": e1[2].toString()).concat(e1[3]==null ? "NA": e1[3].toString()));
				SimpleDateFormat formatTime = new SimpleDateFormat("hh:mm aa");
				
				Date createdDate = (Date) e1[1];
				Date createdDate1 = (Date) e1[2];
				 String myTime = formatTime.format(createdDate);
				 String myTime1 = formatTime.format(createdDate1);
				 studentinfo2.put("code1", e1[0]==null ? "NA": e1[0].toString().concat(" ( ").concat(myTime.concat(" to ").concat(myTime1)).concat(" ) ").concat(e1[3]==null ? "NA": e1[3].toString()).concat(" ( ").concat(e1[4]==null ? "NA": e1[4].toString()).concat(" ) ").concat(" ( ").concat(e1[5]==null ? "NA": e1[5].toString()).concat(" ) "));
				 studentinfo2.put("title1", myTime.concat(" to ").concat(myTime1));
				timings=myTime.concat(" to ").concat(myTime1);
				datalist2.add(studentinfo2);
			}
			
			List<Object[]> recordWed = super.courses.classtimetablerecordrecordWed(request.getProgrammes(), request.getDepartment(), false, true , request.getSection(),request.getAcademicYear(),request.getSemester());
			if (recordWed.size() <= 0) {

				info.put("status", "2");
				info.put("message", "No records found");
				return info;
			}
			for (Object[] e1 : recordWed) {
				Map<Object, Object> studentinfo3 = new HashMap<Object, Object>();
				System.out.println("><><><><><><>Coursescodes"+ e1[0]==null ? "NA": e1[0].toString().concat(" :: ").concat(e1[2]==null ? "NA": e1[2].toString()).concat(e1[3]==null ? "NA": e1[3].toString()));
				SimpleDateFormat formatTime = new SimpleDateFormat("hh:mm aa");
				
				Date createdDate = (Date) e1[1];
				Date createdDate1 = (Date) e1[2];
				 String myTime = formatTime.format(createdDate);
				 String myTime1 = formatTime.format(createdDate1);
				 studentinfo3.put("code2", e1[0]==null ? "NA": e1[0].toString().concat(" ( ").concat(myTime.concat(" to ").concat(myTime1)).concat(" ) ").concat(e1[3]==null ? "NA": e1[3].toString()).concat(" ( ").concat(e1[4]==null ? "NA": e1[4].toString()).concat(" ) ").concat(" ( ").concat(e1[5]==null ? "NA": e1[5].toString()).concat(" ) "));
				 studentinfo3.put("title2", myTime.concat(" to ").concat(myTime1));
				timings=myTime.concat(" to ").concat(myTime1);
				datalist3.add(studentinfo3);
			}
			
			List<Object[]> recordThur = super.courses.classtimetablerecordThur(request.getProgrammes(), request.getDepartment(), false, true , request.getSection(),request.getAcademicYear(),request.getSemester());
			if (recordThur.size() <= 0) {

				info.put("status", "2");
				info.put("message", "No records found");
				return info;
			}
			for (Object[] e1 : recordThur) {
				Map<Object, Object> studentinfo4 = new HashMap<Object, Object>();
				System.out.println("><><><><><><>Coursescodes"+ e1[0]==null ? "NA": e1[0].toString().concat(" :: ").concat(e1[2]==null ? "NA": e1[2].toString()).concat(e1[3]==null ? "NA": e1[3].toString()));
				SimpleDateFormat formatTime = new SimpleDateFormat("hh:mm aa");
				
				Date createdDate = (Date) e1[1];
				Date createdDate1 = (Date) e1[2];
				 String myTime = formatTime.format(createdDate);
				 String myTime1 = formatTime.format(createdDate1);
				 studentinfo4.put("code3", e1[0]==null ? "NA": e1[0].toString().concat(" ( ").concat(myTime.concat(" to ").concat(myTime1)).concat(" ) ").concat(e1[3]==null ? "NA": e1[3].toString()).concat(" ( ").concat(e1[4]==null ? "NA": e1[4].toString()).concat(" ) ").concat(" ( ").concat(e1[5]==null ? "NA": e1[5].toString()).concat(" ) "));
				 studentinfo4.put("title3", myTime.concat(" to ").concat(myTime1));
				timings=myTime.concat(" to ").concat(myTime1);
				datalist4.add(studentinfo4);
			}
			
			List<Object[]> recordFrid = super.courses.classtimetablerecordFrid(request.getProgrammes(), request.getDepartment(), false, true , request.getSection(),request.getAcademicYear(),request.getSemester());
			if (recordFrid.size() <= 0) {

				info.put("status", "2");
				info.put("message", "No records found");
				return info;
			}
			for (Object[] e1 : recordFrid) {
				Map<Object, Object> studentinfo5 = new HashMap<Object, Object>();
				System.out.println("><><><><><><>Coursescodes"+ e1[0]==null ? "NA": e1[0].toString().concat(" :: ").concat(e1[2]==null ? "NA": e1[2].toString()).concat(e1[3]==null ? "NA": e1[3].toString()));
				SimpleDateFormat formatTime = new SimpleDateFormat("hh:mm aa");
				
				Date createdDate = (Date) e1[1];
				Date createdDate1 = (Date) e1[2];
				 String myTime = formatTime.format(createdDate);
				 String myTime1 = formatTime.format(createdDate1);
				 studentinfo5.put("code4", e1[0]==null ? "NA": e1[0].toString().concat(" ( ").concat(myTime.concat(" to ").concat(myTime1)).concat(" ) ").concat(e1[3]==null ? "NA": e1[3].toString()).concat(" ( ").concat(e1[4]==null ? "NA": e1[4].toString()).concat(" ) ").concat(" ( ").concat(e1[5]==null ? "NA": e1[5].toString()).concat(" ) "));
				 studentinfo5.put("title4", myTime.concat(" to ").concat(myTime1));
				timings=myTime.concat(" to ").concat(myTime1);
				datalist5.add(studentinfo5);
			}*/
			
			
			for (ClassTimeTableDays e : data) {
				if( e.getWeekdays().getId()==1) {			
				Map<Object, Object> studentinfo = new HashMap<Object, Object>();
				 studentinfo.put("code", e.getCourses().getExCoursesCode().concat("(").concat(e.getClasstimetable().getCoursesType().getExName().concat(")").concat(" :: ").concat(e.getRoom().getExName().concat(" :: ").concat(e.getClasstimetable().getSection().getExName()))));
				 SimpleDateFormat formatTime = new SimpleDateFormat("hh:mm aa");
				 String myTime = formatTime.format(e.getExStartTime()==null?"NA":e.getExStartTime());
			        String myTime1 = formatTime.format(e.getExEndTime() ==null ? "NA" : e.getExEndTime());
			        System.out.println(myTime+"myTime");
				
				studentinfo.put("title", myTime.concat(" to ").concat(myTime1));
				studentinfo.put("credit ", myTime1);
				studentinfo.put("days ",e.getExDayName());
				studentinfo.put("section",e.getClasstimetable().getSection().getExName());
				studentinfo.put("roomName",e.getRoom().getExRoomNumber());

				System.out.println(">>>>>code" + studentinfo);
				datalist10.add(studentinfo);
				count++;	
				}
				if( e.getWeekdays().getId()==2) {
					Map<Object, Object> studentinfo2 = new HashMap<Object, Object>();
		 		    
		 		    SimpleDateFormat formatTimess = new SimpleDateFormat("hh:mm aa");
					 String myTime = formatTimess.format(e.getExStartTime()==null?"NA":e.getExStartTime());
				     String myTime1 = formatTimess.format(e.getExEndTime() ==null ? "NA" : e.getExEndTime());
			
		 		     studentinfo2.put("title1", myTime.concat(" to ").concat(myTime1));
				        studentinfo2.put("credit1 ", myTime1);
				        studentinfo2.put("days1 ",e.getExDayName());
				        studentinfo2.put("section1",e.getClasstimetable().getSection().getExName());
				        studentinfo2.put("roomName1",e.getRoom().getExRoomNumber());
				        System.out.println("timings" + timings==myTime.concat(" to ").concat(myTime1));
				        studentinfo2.put("code1", e.getCourses().getExCoursesCode().concat("(").concat(e.getClasstimetable().getCoursesType().getExName().concat(")").concat(" :: ").concat(e.getRoom().getExName().concat(" :: ").concat(e.getClasstimetable().getSection().getExName()))));
					System.out.println(">>>>>code12" + studentinfo2);
					datalist2.add(studentinfo2);
					count++;
				}
				
				if( e.getWeekdays().getId()==3) {
					Map<Object, Object> studentinfo3 = new HashMap<Object, Object>();
					studentinfo3.put("code2",e.getCourses().getExCoursesCode().concat("(").concat(e.getClasstimetable().getCoursesType().getExName().concat(")").concat(" :: ").concat(e.getRoom().getExName().concat(" :: ").concat(e.getClasstimetable().getSection().getExName()))));
					
					 SimpleDateFormat formatTime = new SimpleDateFormat("hh:mm aa");
					 String myTime = formatTime.format(e.getExStartTime()==null?"NA":e.getExStartTime());
				        String myTime1 = formatTime.format(e.getExEndTime() ==null ? "NA" : e.getExEndTime());
					
				        studentinfo3.put("title2", myTime.concat(" to ").concat(myTime1));
				        studentinfo3.put("credit2 ", myTime1);
				        studentinfo3.put("days2 ",e.getExDayName());
				        studentinfo3.put("section2",e.getClasstimetable().getSection().getExName());
				        studentinfo3.put("roomName2",e.getRoom().getExRoomNumber());
					System.out.println(">>>>>code3" + studentinfo3);
					datalist3.add(studentinfo3);
					count++;
				}	
				
				if( e.getWeekdays().getId()==4) {
					Map<Object, Object> studentinfo4 = new HashMap<Object, Object>();
					studentinfo4.put("code3",e.getCourses().getExCoursesCode().concat("(").concat(e.getClasstimetable().getCoursesType().getExName().concat(")").concat(" :: ").concat(e.getRoom().getExName().concat(" :: ").concat(e.getClasstimetable().getSection().getExName()))));
					
					 SimpleDateFormat formatTime = new SimpleDateFormat("hh:mm aa");
					 String myTime = formatTime.format(e.getExStartTime()==null?"NA":e.getExStartTime());
				        String myTime1 = formatTime.format(e.getExEndTime() ==null ? "NA" : e.getExEndTime());
					
				        studentinfo4.put("title3", myTime.concat(" to ").concat(myTime1));
				        studentinfo4.put("credit3 ", myTime1);
				        studentinfo4.put("days3 ",e.getExDayName());
				        studentinfo4.put("section3",e.getClasstimetable().getSection().getExName());
				        studentinfo4.put("roomName3",e.getRoom().getExRoomNumber());
					System.out.println(">>>>>code4" + studentinfo4);
					datalist4.add(studentinfo4);
					count++;
				}	
				
				if( e.getWeekdays().getId()==5) {
					Map<Object, Object> studentinfo5 = new HashMap<Object, Object>();
					studentinfo5.put("code4",e.getCourses().getExCoursesCode().concat("(").concat(e.getClasstimetable().getCoursesType().getExName().concat(")").concat(" :: ").concat(e.getRoom().getExName().concat(" :: ").concat(e.getClasstimetable().getSection().getExName()))));
					
					 SimpleDateFormat formatTime = new SimpleDateFormat("hh:mm aa");
					 String myTime = formatTime.format(e.getExStartTime()==null?"NA":e.getExStartTime());
				        String myTime1 = formatTime.format(e.getExEndTime() ==null ? "NA" : e.getExEndTime());
					
				        studentinfo5.put("title4", myTime.concat(" to ").concat(myTime1));
				        studentinfo5.put("credit4 ", myTime1);
				        studentinfo5.put("days4 ",e.getExDayName());
				        studentinfo5.put("section4",e.getClasstimetable().getSection().getExName());
				        studentinfo5.put("roomName4",e.getRoom().getExRoomNumber());
					System.out.println(">>>>>code5" + studentinfo5);
					datalist5.add(studentinfo5);
					count++;
				}	
			}
			
			List<Object[]> dataqwertys = super.courses.classtimetablerecords(request.getProgrammes(), request.getDepartment(), false, true , request.getSection(),request.getAcademicYear(),request.getSemester());
			if (dataqwertys.size() <= 0) {

				info.put("status", "2");
				info.put("message", "No records found");
				return info;
			}
			for (Object[] e : dataqwertys) {
				Map<Object, Object> studentinfo6 = new HashMap<Object, Object>();
				studentinfo6.put("Coursescodes",e[0]==null ? "NA": e[0].toString());
				studentinfo6.put("coursenames",e[1]==null ? "NA": e[1].toString());
				studentinfo6.put("coursetype",e[2]==null ? "NA": e[2].toString());
				studentinfo6.put("staff",e[3]==null ? "NA": e[3].toString());
				studentinfo6.put("credithours",e[4]==null ? "NA": e[4].toString());
				studentinfo6.put("section",e[5]==null ? "NA": e[5].toString());
				datalist6.add(studentinfo6);	
			}

			
			String serverurl = super.commonHelper.getSettingValue("SERVER_IP");
			String reportPath = super.commonHelper.getSettingValue("DOCUMENT_PATH");
			String image = super.commonHelper.getSettingValue("IMAGE_PATH");
			String image1 = super.commonHelper.getSettingValue("MOFPI_PATH");
			String image2 = super.commonHelper.getSettingValue("EMBLEM_PATH");
			logger.info(image);

			String path = resourceLoader.getResource("classpath:classtimetablesssss.jrxml").getURI().getPath();
			JasperReport jasperReport = JasperCompileManager.compileReport(path);
		
			JRBeanCollectionDataSource datasource1 = new JRBeanCollectionDataSource(datalist10);
			JRBeanCollectionDataSource datasource2 = new JRBeanCollectionDataSource(datalist2);
			JRBeanCollectionDataSource datasource3 = new JRBeanCollectionDataSource(datalist3);
			JRBeanCollectionDataSource datasource4 = new JRBeanCollectionDataSource(datalist4);
			JRBeanCollectionDataSource datasource5 = new JRBeanCollectionDataSource(datalist5);
			JRBeanCollectionDataSource datasource6 = new JRBeanCollectionDataSource(datalist6);
			Map<String, Object> parameters = new HashMap<>();
			parameters.put("ds1", datasource1);
			parameters.put("ds2", datasource2);
			parameters.put("ds3", datasource3);
			parameters.put("ds4", datasource4);
			parameters.put("ds5", datasource5);
			parameters.put("ds6", datasource6);
			parameters.put("programe", Programmes.get().getExIdentifier().toUpperCase());
			parameters.put("semester", sem.get().getExName().toUpperCase());
			parameters.put("department", department.get().getExName());
			parameters.put("academicYear", academic.get().getExYear());
			parameters.put("college", Colleges.get().getExName());
			parameters.put("degree", degree.get().getExName());
			parameters.put("stream", res.get().getExName());
			parameters.put("section", section.get().getExName());
			parameters.put("programmeYear", programmeYear.get().getExName().toUpperCase());
			parameters.put("createdBy", "CONTROLLER OF EXAMINATIONS");
			parameters.put("university", university);
			parameters.put("logo", image);
			parameters.put("emblem", image1);
			parameters.put("logo1", image2);

			JasperPrint print = JasperFillManager.fillReport(jasperReport, parameters,new JREmptyDataSource());
			String folder = createFolder(academic.get().getExYear(), department.get().getExName(), "ClassTimeTable");
			String filename = "\\" + "ClassTimeTable.pdf";

			JasperExportManager.exportReportToPdfFile(print, reportPath + folder + filename);

			File filenew = new File(reportPath + folder + filename);
			if (filenew.exists()) {
				filenew.setExecutable(true, false);
				filenew.setReadable(true, false);
				filenew.setWritable(true, false);
			}
			info.put("status", "1");
			info.put("url", folder + filename);
			info.put("message", "Report successfully generated");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}
	}

	

	private String createFolder(String academicyear, String iseven, String type) {
		try {
			String UPLOADED_FOLDER = super.commonHelper.getSettingValue("DOCUMENT_PATH");

			File file2 = new File(UPLOADED_FOLDER + "/" + academicyear);
			if (file2.mkdir()) {
				file2.setExecutable(true, false);
				file2.setReadable(true, false);
				file2.setWritable(true, false);

			}
			String academic = file2.getPath();
			File file3 = new File(academic + "/" + iseven);
			if (file3.mkdir()) {
				file3.setExecutable(true, false);
				file3.setReadable(true, false);
				file3.setWritable(true, false);
			}

			String collegename = file3.getPath();
			File file4 = new File(collegename + "/" + type);
			if (file4.mkdir()) {
				file4.setExecutable(true, false);
				file4.setReadable(true, false);
				file4.setWritable(true, false);
			}

			Date now = new Date();
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			String day = dateFormat.format(now);
			String datetime = file4.getPath();
			File file5 = new File(datetime + "/" + day);
			if (file5.mkdir()) {
				file5.setExecutable(true, false);
				file5.setReadable(true, false);
				file5.setWritable(true, false);
			}

			SimpleDateFormat dateFormat1 = new SimpleDateFormat("HH mm ss");
			String time = dateFormat1.format(now);
			String gettime = file5.getPath();
			File file6 = new File(gettime + "/" + time);
			if (file6.mkdir()) {
				file6.setExecutable(true, false);
				file6.setReadable(true, false);
				file6.setWritable(true, false);
			}
			return "/" + academicyear + "/" + iseven + "/" + type + "/" + day + "/" + time;
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
		}
		return "NA";
	}

/*	@Override
	public Map<String, Object> getExamTimeTablePdf(ExamTimeTableRequest request) {
		List tasks = new ArrayList();
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			logger.info("Request :" + request);

			List<University> uid = super.university.findAllUnivesity();
			if (uid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "University not present");
				return info;
			}
			String university = uid.get(0).getExName().toUpperCase();

			if (request.getExExamType() == null || request.getExExamType().toString().isEmpty()) {
				info.put("status", "2");
				info.put("message", "select ExamType");
				return info;

			}

			Optional<Degree> Degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!Degree.isPresent()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}

			Optional<Programmes> programmes = super.programmes
					.findByIdAndExIsDeleteAndExIsActive(request.getProgrammes(), false, true);
			if (!programmes.isPresent()) {
				info.put("status", "2");
				info.put("message", "programmes not present");
				return info;
			}

			Optional<AcademicYear> academicYearid = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getAcademicYear());
			if (!academicYearid.isPresent()) {
				info.put("status", "2");
				info.put("message", "academicYear id not present");
				return info;
			}

			List<ExamAnnouncement> result = super.examAnnouncement.findByIdAndExIsDelete(request.getExamAnnouncement(),
					false);
			if (result.size() <= 0) {
				info.put("status", "2");
				info.put("message", "ExamAnnouncement id not present");
				return info;
			}

			if (request.getExExamType() == 0L) {

				List<ExamTimeTable> examlist = super.examtimetable
						.findByExIsDeleteAndAcademicYearIdAndProgrammesIdAndExamAnnouncementIdAndExExamTypeAndDegreeIdAndDepartmentId(
								false, request.getAcademicYear(), request.getProgrammes(),
								request.getExamAnnouncement(), request.getExExamType(), request.getDegree() ,request.getDeparment());
				if (examlist.size() <= 0) {
					info.put("status", "2");
					info.put("message", "MidTerm TimeTable records not found");
					return info;
				}
			}
			if (request.getExExamType() == 1L) {
				List<RegistrationType> registration = super.registrationType
						.findByIdAndExIsDelete(request.getRegistrationType(), false);
				if (registration.size() <= 0) {
					info.put("status", "2");
					info.put("message", "RegistrationType id not present");
					return info;
				}
			//	List<ExamTimeTable> examlist1 = super.examtimetable
				//		.findByExIsDeleteAndAcademicYearIdAndProgrammesIdAndExamAnnouncementIdAndRegistrationIdAndDegreeIdAndExExamTypeAndExamAnnouncementSemesterIdAndDepartmentId(
				//				false, request.getAcademicYear(), request.getProgrammes(),
				//				request.getExamAnnouncement(), request.getRegistrationType(), request.getDegree(),
					//			request.getExExamType(),result.get(0).getSemester().getId() , request.getDeparment()); 
				List<ExamTimeTable> examlist1 = super.examtimetable
						.findrecords(
								false, request.getAcademicYear(), request.getProgrammes(),
								request.getExamAnnouncement(), request.getRegistrationType(), request.getDegree(),
								request.getExExamType(),result.get(0).getSemester().getId() , request.getDeparment()); 
				
				
				System.out.println(">"+examlist1);
				if (examlist1.size() <= 0) {
					info.put("status", "2");
					info.put("message", "No records found");
					return info;
				}
			}
		
			String serverurl = commonHelper.getSettingValue("SERVER_IP");
			String reportPath = commonHelper.getSettingValue("DOCUMENT_PATH"); // "src/main/resources/";
			java.sql.Connection conn = jdbcTemplate.getDataSource().getConnection();
			String image = super.commonHelper.getSettingValue("IMAGE_PATH");
			logger.info(image);

			if (conn == null) {
				info.put("status", "2");
				info.put("message", "Database not connected");
				return info;
			}
			String path = "";
			if (request.getProgrammes() == 1 && request.getDegree() == 1) {
				if (request.getExExamType() == 0L) {
					path = resourceLoader.getResource("classpath:midBtechExamTimeTable.jrxml").getURI().getPath();
				}
				if (request.getExExamType() == 1L) {
					path = resourceLoader.getResource("classpath:examTimeTable.jrxml").getURI().getPath();
				}
			}
			if (request.getProgrammes() == 2 && request.getDegree() == 2) {
				if (request.getExExamType() == 0L) {
					path = resourceLoader.getResource("classpath:midBtechExamTimeTable.jrxml").getURI().getPath();
				}
				if (request.getExExamType() == 1L) {
					path = resourceLoader.getResource("classpath:examTimeTable.jrxml").getURI().getPath();
				}

			}
			if (request.getProgrammes() ==3 && request.getDegree() == 2) {
				if (request.getExExamType() == 0L) {
					path = resourceLoader.getResource("classpath:midMbaexamTimeTable.jrxml").getURI().getPath();
				}
				if (request.getExExamType() == 1L) {
					path = resourceLoader.getResource("classpath:examTimeTable.jrxml").getURI().getPath();
				}

			}
			JasperReport jasperReport = JasperCompileManager.compileReport(path);

			// Parameters for report
			Map<String, Object> parameters = new HashMap<>();
			parameters.put("academicYear", request.getAcademicYear());
			parameters.put("examannouncement", request.getExamAnnouncement());
		//	parameters.put("registrationType", request.getRegistrationType());
		//	parameters.put("examannouncement", request.getExamAnnouncement());
			parameters.put("registrationType",
					request.getRegistrationType() == null ? "IS NULL" : +request.getRegistrationType());
			parameters.put("degree", request.getDegree());
			parameters.put("exExamType", request.getExExamType());
			parameters.put("type", request.getExExamType() == 0 ? "MidTerm" : "EndTerm");

			parameters.put("programme", request.getProgrammes());
			parameters.put("department", request.getDeparment());
			
			parameters.put("delete", false);
			parameters.put("createdBy", "CONTROLLER OF EXAMINATIONS");
			parameters.put("university", university.toUpperCase());
			parameters.put("logo", image);

			// Fill the report
			JasperPrint print = JasperFillManager.fillReport(jasperReport, parameters, conn);
			// Export the report to a PDF file

			String folder = createFolder(academicYearid.get().getExYear(), Degree.get().getExName(), "ExamTimeTable");
			JasperExportManager.exportReportToPdfFile(print, reportPath + folder + "/ExamTimeTable.pdf");

			File filenew = new File(reportPath + folder + "/ExamTimeTable.pdf");
			if (filenew.exists()) {
				filenew.setExecutable(true, false);
				filenew.setReadable(true, false);
				filenew.setWritable(true, false);
			}
			ExamTimeTableLogs logs = new ExamTimeTableLogs();
			Date date = new Date();
			if (request.getUser() == null || request.getUser().equals("")) {
				logs.setUser(null);
			} else {
				List<User> user = super.user.findByIdAndExIsDelete(request.getUser(), false);
				if (user.size() <= 0) {
					info.put("status", "2");
					info.put("message", "User id not present");
					return info;
				}

				logs.setUser(user.get(0));
			}
			logs.setExamAnnouncement(result.get(0));
			logs.setAcademicYear(academicYearid.get());
			logs.setExTimeTableUrl(folder + "/ExamTimeTable.pdf");
			logs.setExCreateDate(date);
			logs.setDegree(Degree.get());
			logs.setProgrammes(programmes.get());
			logs.setReportType(true);
			logs.setExExamType(request.getExExamType());
			super.examTimeTableLogs.save(logs);

			info.put("status", "1");
			info.put("url", folder + "/ExamTimeTable.pdf");
			info.put("message", "Report successfully generated");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}

	}
*/
	//==========================
	
	@Override
	public Map<String, Object> getExamTimeTablePdf(ExamTimeTableRequest request) {
		
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			logger.info("Request :" + request);
			List<Object> datalist = new ArrayList<Object>();
			
			List<University> uid = super.university.findAllUnivesity();
			if (uid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "University not present");
				return info;
			}
			String university = uid.get(0).getExName().toUpperCase();

			if (request.getExExamType() == null || request.getExExamType().toString().isEmpty()) {
				info.put("status", "2");
				info.put("message", "select ExamType");
				return info;

			}

			Optional<Degree> Degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!Degree.isPresent()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}

			Optional<Programmes> programmes = super.programmes
					.findByIdAndExIsDeleteAndExIsActive(request.getProgrammes(), false, true);
			if (!programmes.isPresent()) {
				info.put("status", "2");
				info.put("message", "programmes not present");
				return info;
			}

			Optional<AcademicYear> academicYearid = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getAcademicYear());
			if (!academicYearid.isPresent()) {
				info.put("status", "2");
				info.put("message", "academicYear id not present");
				return info;
			}
			
			Optional<Department> dept = super.department.findByIdAndExIsDeleteAndExIsActive(request.getDeparment(),
					false, true);
			if (!dept.isPresent()) {
				info.put("status", "2");
				info.put("message", "department not  present");
				return info;

			}
			
		
			Optional<Stream> stream = super.stream.findByDegreeIdAndProgrammesIdAndDepartmentIdAndExIsActiveAndExIsDelete(Degree.get().getId(), programmes.get().getId(), dept.get().getId(), true, false);
			if (!dept.isPresent()) {
				info.put("status", "2");
				info.put("message", "department not  present");
				return info;

			}
			
			
			
			List<ExamAnnouncement> result = super.examAnnouncement.findByIdAndExIsDelete(request.getExamAnnouncement(),
					false);
			if (result.size() <= 0) {
				info.put("status", "2");
				info.put("message", "ExamAnnouncement id not present");
				return info;
			}
			
			String pattern = "dd/MM/yyyy";
			DateFormat df = new SimpleDateFormat(pattern);
			Date today = Calendar.getInstance().getTime();        
			String todayAsString = df.format(today);
			System.out.println("Today is: " + todayAsString);
			String Monthofthename = "";
			if (request.getExExamType() == 0L) {
				
				List<ExamAcademicYearProgrammes> examlists = super.examAcademicYearProgrammes.findByAcademicYearIdAndExamAnnouncementIdAndProgrammesIdAndExExamTypeAndDegreeIdAndDepartmentIdAndExIsPublish(request.getAcademicYear(),request.getExamAnnouncement(),request.getProgrammes(), request.getExExamType(),request.getDegree(), request.getDeparment(),true);
				if (examlists.size() <= 0) {
					info.put("status", "2");
					info.put("message", "time table Not Published ");
					return info;
				}else {
				List<ExamTimeTable> examlist = super.examtimetable
						.findByExIsDeleteAndAcademicYearIdAndProgrammesIdAndExamAnnouncementIdAndExExamTypeAndDegreeIdAndDepartmentIdOrderByExStartDateAscExStartTimeAsc(
						false, request.getAcademicYear(), request.getProgrammes(),
							request.getExamAnnouncement(), request.getExExamType(), request.getDegree() ,request.getDeparment());
		
				if (examlist.size() <= 0) {
					info.put("status", "2");
					info.put("message", "MidTerm TimeTable records not found");
					return info;
				}else {
					for(ExamTimeTable e :examlist) {
						Map<String, Object> detailss = new HashMap<>();
						 SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy");
						   Date javaDate= e.getExStartDate(); 
						    String strDate = dtFormat.format(javaDate); 
						    
					        Calendar c = Calendar.getInstance();
					        c.setTime(e.getExStartDate());
					        String dayWeekText = new SimpleDateFormat("EEEE").format(e.getExStartDate());
					      
					        SimpleDateFormat formatTime = new SimpleDateFormat("hh:mm aa");
					       
					        String myTime = formatTime.format(e.getExStartTime());
					        String myTime1 = formatTime.format(e.getExEndTime());
					        
					        detailss.put("ex_start_time",myTime);
					        detailss.put("endtime",myTime1);
					        detailss.put("daynames",dayWeekText);
					        detailss.put("Field_1",strDate);
					        detailss.put("course1",e.getCourses().getExCoursesCode());
					        detailss.put("coursenames",e.getCourses().getExName());
					        datalist.add(detailss);
					
					}
					for(ExamTimeTable e1 :examlist) {
						 SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy");
						   Date javaDate= e1.getExStartDate(); 
						    String strDates = dtFormat.format(javaDate);
						     String months = strDates;
								String separate[] = months.split("/");
								System.out.println("Details of month " +Arrays.toString(separate));
								 Month month = Month.of(Integer.parseInt(separate[1]));
								 Monthofthename = month.toString();
							        System.out.println(month);
							        System.out.println(Monthofthename);
							        break;
					}
					
				}
				}
			}
			if (request.getExExamType() == 1L) {
				List<RegistrationType> registration = super.registrationType
						.findByIdAndExIsDelete(request.getRegistrationType(), false);
				if (registration.size() <= 0) {
					info.put("status", "2");
					info.put("message", "RegistrationType id not present");
					return info;
				}
				
				List<ExamAcademicYearProgrammes> examlists = super.examAcademicYearProgrammes.findByAcademicYearIdAndExamAnnouncementIdAndProgrammesIdAndExExamTypeAndDegreeIdAndDepartmentIdAndRegistrationIdAndExIsPublish(request.getAcademicYear(),request.getExamAnnouncement(),request.getProgrammes(), request.getExExamType(),request.getDegree(), request.getDeparment(),request.getRegistrationType(),true);
				if (examlists.size() <= 0) {
					info.put("status", "2");
					info.put("message", "time table Not Published ");
					return info;
				}else {
				List<ExamTimeTable> examlist1 = super.examtimetable
					.findByExIsDeleteAndAcademicYearIdAndProgrammesIdAndExamAnnouncementIdAndRegistrationIdAndDegreeIdAndExExamTypeAndExamAnnouncementSemesterIdAndDepartmentIdOrderByExStartDateAscExStartTimeAsc(
								false, request.getAcademicYear(), request.getProgrammes(),
								request.getExamAnnouncement(), request.getRegistrationType(), request.getDegree(),
							request.getExExamType(),result.get(0).getSemester().getId() , request.getDeparment()); 
				if (examlist1.size() <= 0) {
					info.put("status", "2");
					info.put("message", "No records found");
					return info;
				}else {
					String strDate = "";
					for(ExamTimeTable e :examlist1) {
					Map<String, Object> detail = new HashMap<>();
					 SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy");
					   Date javaDate= e.getExStartDate(); 
					     strDate = dtFormat.format(javaDate); 
					    
				        Calendar c = Calendar.getInstance();
				        c.setTime(e.getExStartDate());
				        String dayWeekText = new SimpleDateFormat("EEEE").format(e.getExStartDate());
				      
				        SimpleDateFormat formatTime = new SimpleDateFormat("hh:mm aa");
				       
				        String myTime = formatTime.format(e.getExStartTime());
				        String myTime1 = formatTime.format(e.getExEndTime());
				        
				    detail.put("ex_start_time",myTime);
				    detail.put("endtime",myTime1);
				    detail.put("daynames",dayWeekText);
					detail.put("Field_1",strDate);
					detail.put("course1",e.getCourses().getExCoursesCode());
					detail.put("coursenames",e.getCourses().getExName());
					datalist.add(detail);
					}
					
					for(ExamTimeTable e1 :examlist1) {
						 SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy");
						   Date javaDate= e1.getExStartDate(); 
						    String strDates = dtFormat.format(javaDate);
						     String months = strDates;
								String separate[] = months.split("/");
								System.out.println("Details of month " +Arrays.toString(separate));
								 Month month = Month.of(Integer.parseInt(separate[1]));
								 Monthofthename = month.toString();
							        System.out.println(month);
							        System.out.println(Monthofthename);
							        break;
					}
				}
			}
			}
			String serverurl = commonHelper.getSettingValue("SERVER_IP");
			String reportPath = commonHelper.getSettingValue("DOCUMENT_PATH"); // "src/main/resources/";
			String image = super.commonHelper.getSettingValue("IMAGE_PATH");
			String image1 = super.commonHelper.getSettingValue("MOFPI_PATH");
			String image2 = super.commonHelper.getSettingValue("EMBLEM_PATH");
			logger.info(image);
			
			String Coe = "images/Coe.jpg";
			String Narender = "images/Nare_Sign.jpg";
			
			String path = "";
			if (request.getProgrammes() == 1 && request.getDegree() == 1) {
				if (request.getExExamType() == 0L) {
					path = resourceLoader.getResource("classpath:midBtechTimeTable.jrxml").getURI().getPath();
				}
				if (request.getExExamType() == 1L) {
					path = resourceLoader.getResource("classpath:BtechexamTimeTable.jrxml").getURI().getPath();
				}
			}
			if (request.getProgrammes() == 2 && request.getDegree() == 2) {
				if (request.getExExamType() == 0L) {
					path = resourceLoader.getResource("classpath:midBtechExamTimeTable2.jrxml").getURI().getPath();
				}
				if (request.getExExamType() == 1L) {
					path = resourceLoader.getResource("classpath:examTimeTable2.jrxml").getURI().getPath();
				}

			}
			if (request.getProgrammes() ==3 && request.getDegree() == 2) {
				if (request.getExExamType() == 0L) {
					path = resourceLoader.getResource("classpath:midBtechExamTimeTable2.jrxml").getURI().getPath();
				}
				if (request.getExExamType() == 1L) {
					path = resourceLoader.getResource("classpath:examTimeTable2.jrxml").getURI().getPath();
				}

			}
			JasperReport jasperReport = JasperCompileManager.compileReport(path);

			JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(datalist);
			// Parameters for report
			Map<String, Object> parameters = new HashMap<>();
			parameters.put("academicYear", academicYearid.get().getExIdentifier());
			parameters.put("examannouncement", result.get(0).getExName());
			parameters.put("registrationType",
					request.getRegistrationType() == null ? "IS NULL" : +request.getRegistrationType());
			parameters.put("degree",Degree.get().getExName());
			parameters.put("exExamType", request.getExExamType());
			parameters.put("type", request.getExExamType() == 0 ? "MID-TERM" : "END-TERM");

			parameters.put("programme", programmes.get().getExName().toUpperCase());
			parameters.put("programmeIdentifier", programmes.get().getExIdentifier().toUpperCase());
			parameters.put("semester", result.get(0).getSemester().getExDescription().toUpperCase());
	
			parameters.put("department", dept.get().getExName().toUpperCase());
			
			parameters.put("streamM",stream.get().getExName().toUpperCase());
			
			parameters.put("todayAsString",todayAsString);
			
			parameters.put("delete", false);
			parameters.put("createdBy", "CONTROLLER OF EXAMINATIONS");
			parameters.put("university", university.toUpperCase());
			parameters.put("logo", image);
			parameters.put("Coe", Coe);
			parameters.put("Narender", Narender);
			parameters.put("Monthofthename", Monthofthename);
			parameters.put("emblem", image1);
			parameters.put("logo1", image2);
			// Fill the report
			JasperPrint print = JasperFillManager.fillReport(jasperReport, parameters, jrBeanCollectionDataSource);
			// Export the report to a PDF file

			String folder = createFolder(academicYearid.get().getExYear(), Degree.get().getExName(), "ExamTimeTable");
			JasperExportManager.exportReportToPdfFile(print, reportPath + folder + "/ExamTimeTable.pdf");

			File filenew = new File(reportPath + folder + "/ExamTimeTable.pdf");
			if (filenew.exists()) {
				filenew.setExecutable(true, false);
				filenew.setReadable(true, false);
				filenew.setWritable(true, false);
			}
			ExamTimeTableLogs logs = new ExamTimeTableLogs();
			Date date = new Date();
			if (request.getUser() == null || request.getUser().equals("")) {
				logs.setUser(null);
			} else {
				List<User> user = super.user.findByIdAndExIsDelete(request.getUser(), false);
				if (user.size() <= 0) {
					info.put("status", "2");
					info.put("message", "User id not present");
					return info;
				}

				logs.setUser(user.get(0));
			}
			logs.setExamAnnouncement(result.get(0));
			logs.setAcademicYear(academicYearid.get());
			logs.setExTimeTableUrl(folder + "/ExamTimeTable.pdf");
			logs.setExCreateDate(date);
			logs.setDegree(Degree.get());
			logs.setProgrammes(programmes.get());
			logs.setReportType(true);
			logs.setExExamType(request.getExExamType());
			super.examTimeTableLogs.save(logs);

			info.put("status", "1");
			info.put("url", folder + "/ExamTimeTable.pdf");
			info.put("message", "Report successfully generated");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}

	}
	
	//===================
	@Override
	public Map<String, Object> generateQuestionPaperPdf(QuestionpaperRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			logger.info("Inside QPaper  Report" + request);

			List<Object> datalist = new ArrayList<Object>();
			if (request.getExVersion() == null || request.getExVersion().equals("")) {
				info.put("status", "2");
				info.put("message", "Version is required");
				return info;
			}

			if (request.getExtime() == null || request.getExtime().equals("")) {
				info.put("status", "2");
				info.put("message", "Time is required");
				return info;
			}

			Optional<AcademicYear> academicYearid = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getAcademicYear());
			if (!academicYearid.isPresent()) {
				info.put("status", "2");
				info.put("message", "AcademicYear id not present");
				return info;
			}
			Optional<Programmes> Prog = super.programme.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Prog.isPresent()) {
				info.put("status", "2");
				info.put("message", "Programmes not present");
				return info;
			}
			Optional<Courses> courses = super.courses.findByIdAndExIsDeleteAndExIsActiveAndAcademicYearId(
					request.getCourses(), false, true, request.getAcademicYear());
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not  present");
				return info;

			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<Department> departments = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!departments.isPresent()) {
				info.put("status", "2");
				info.put("message", "department not present");
				return info;
			}
			Optional<ExamAnnouncement> examann = super.examAnnouncement
					.findByIdAndExIsDeleteAndExIsActive(request.getExamAnnouncement(), false, true);
			if (!examann.isPresent()) {
				info.put("status", "2");
				info.put("message", "ExamAnnouncement id not present");
				return info;
			}

			// examtimetable present
			List<ExamTimeTable> examlist = super.examtimetable
					.findByExIsDeleteAndAcademicYearIdAndProgrammesIdAndExamAnnouncementIdAndCoursesIdAndExExamType(
							false, request.getAcademicYear(), request.getProgrammes(), request.getExamAnnouncement(),
							request.getCourses(), 1L);
			if (examlist.size() <= 0) {

				info.put("status", "2");
				info.put("message", "Time table Not created");
				return info;
			}

			List<University> uid = super.university.findAllUnivesity();
			if (uid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "University not present");
				return info;
			}

			String university = uid.get(0).getExName();
			Map<String, Object> parameters = new HashMap<>();

			// if version-1 means its original
			if (request.getExVersion().equals("Version-1")) {
				List<QuestionPaper> patterns = super.QuestionPaper.getpatterns(false, true, request.getAcademicYear(),
						request.getCourses(), request.getDegree(), request.getExamAnnouncement(),
						request.getExVersion(), request.getDepartment(), request.getProgrammes());

				if (patterns.size() <= 0) {
					info.put("status", "2");
					info.put("message", "Questionpaper not present ");
					return info;
				}
				// parameters.put("coursecodeno", patterns.get(0).getCourseCodeNo());

				for (QuestionPaper p : patterns) {
					Map<Object, Object> optiondata = new HashMap<Object, Object>();

					List<QuestionPaper> Questionpapercheck = super.QuestionPaper
							.findByExIsDeleteAndExIsActiveAndAcademicYearIdAndCoursesIdAndDegreeIdAndExamAnnouncementIdAndExversionAndQuestionPaperPatternIdAndDepartmentIdAndProgrammesId(
									false, true, request.getAcademicYear(), request.getCourses(), request.getDegree(),
									request.getExamAnnouncement(), request.getExVersion(),
									p.getQuestionPaperPattern().getId(), request.getDepartment(),
									request.getProgrammes());
					if (Questionpapercheck.size() <= 0) {
						info.put("status", "2");
						info.put("message", "Questionpaper not present");
						return info;
					}
					optiondata.put("type", p.getQuestionPaperPattern().getQuestionPaperTopic().getExQpTopic());
					optiondata.put("eachmarks", p.getQuestionPaperPattern().getExEachQuestionMark());
					optiondata.put("noofquest", p.getQuestionPaperPattern().getExNoOfQuestion() + "*");
					optiondata.put("marks", p.getQuestionPaperPattern().getExNoOfQuestion()
							* +p.getQuestionPaperPattern().getExEachQuestionMark());

					datalist.add(optiondata);

					for (QuestionPaper r : Questionpapercheck) {
						List<QuestionOptionMapping> options = super.QuestionOptionMappingRepository
								.findByQuestionPaperId(r.getId());
						Map<Object, Object> data = new HashMap<Object, Object>();

						if (options.size() == 0) {
							data.put("Question", r.getExQuestion());
							data.put("Questionnum", r.getExQuestionNum());

							datalist.add(data);
						}

						if (options.size() == 4) {
							data.put("Question", r.getExQuestion());
							data.put("Questionnum", r.getExQuestionNum());
							data.put("option1", options.get(0).getExOptionValue());
							data.put("option2", options.get(1).getExOptionValue());
							data.put("option3", options.get(2).getExOptionValue());
							data.put("option4", options.get(3).getExOptionValue());
							datalist.add(data);
						}

					}
				}

			}

			if (request.getExVersion().equals("Version-2") || request.getExVersion().equals("Version-3")) {

				List<QuestionPaperVersion> qpversion = super.QuestionPaperVersion.getpatterns(request.getAcademicYear(),
						request.getCourses(), request.getDegree(), request.getExamAnnouncement(),
						request.getExVersion(), request.getDepartment(), request.getProgrammes());

				if (qpversion.size() <= 0) {

					info.put("status", "2");
					info.put("message", "Questionpaper not Jumbled ");
					return info;
				}

				for (QuestionPaperVersion q : qpversion) {

					List<QuestionPaperVersion> Questionpapercheck = super.QuestionPaperVersion
							.findByAcademicYearIdAndCoursesIdAndDegreeIdAndExamAnnouncementIdAndQuestionPaperPatternIdAndExVersionAndDepartmentIdAndProgrammesId(
									request.getAcademicYear(), request.getCourses(), request.getDegree(),
									request.getExamAnnouncement(), q.getQuestionPaperPattern().getId(),
									request.getExVersion(), request.getDepartment(), request.getProgrammes());
					if (Questionpapercheck.size() <= 0) {
						info.put("status", "2");
						info.put("message", "Questionpaper not present");
						return info;
					}
					Map<Object, Object> optiondata = new HashMap<Object, Object>();

					optiondata.put("type", q.getQuestionPaperPattern().getQuestionPaperTopic().getExQpTopic());
					optiondata.put("eachmarks", q.getQuestionPaperPattern().getExEachQuestionMark());
					optiondata.put("noofquest", q.getQuestionPaperPattern().getExNoOfQuestion() + "*");
					optiondata.put("marks", q.getQuestionPaperPattern().getExNoOfQuestion()
							+ q.getQuestionPaperPattern().getExEachQuestionMark());
					datalist.add(optiondata);

					for (QuestionPaperVersion r : Questionpapercheck) {

						List<QuestionOptionMapping> options = super.QuestionOptionMappingRepository
								.findByQuestionPaperId(r.getQuestionPaper().getId());
						Map<Object, Object> data = new HashMap<Object, Object>();

						if (options.size() == 0) {
							data.put("Question", r.getQuestionPaper().getExQuestion());
							data.put("Questionnum", r.getExQuestionNum());

							datalist.add(data);
						}
						if (options.size() == 4) {

							data.put("Question", r.getQuestionPaper().getExQuestion());
							data.put("Questionnum", r.getExQuestionNum());
							data.put("option1", options.get(0).getExOptionValue());
							data.put("option2", options.get(1).getExOptionValue());
							data.put("option3", options.get(2).getExOptionValue());
							data.put("option4", options.get(3).getExOptionValue());
							datalist.add(data);
						}
						if (options.size() == 1) {
							data.put("Question", r.getQuestionPaper().getExQuestion());
							data.put("Questionnum", r.getExQuestionNum());

							data.put("match", options.get(0).getExOptionValue());
							datalist.add(data);
						}
					}
				}

			}

			String serverurl = super.commonHelper.getSettingValue("SERVER_IP");
			String reportPath = super.commonHelper.getSettingValue("DOCUMENT_PATH"); // "src/main/resources/";
			String image = super.commonHelper.getSettingValue("IMAGE_PATH");
			logger.info(image);

			// Compile the Jasper report from .jrxml to .japser

			String path = resourceLoader.getResource("classpath:qp.jrxml").getURI().getPath();

			JasperReport jasperReport = JasperCompileManager.compileReport(path);
			// Get your data source
			JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(datalist);

			// Add parameters

			String ver = "";

			if (request.getExVersion().equalsIgnoreCase("Version-1")) {
				ver = "V-1";
			}
			if (request.getExVersion().equalsIgnoreCase("Version-2")) {
				ver = "V-2";
			}
			if (request.getExVersion().equalsIgnoreCase("Version-3")) {
				ver = "V-3";
			}

			parameters.put("logo", image);
			parameters.put("course", courses.get().getExName());
			parameters.put("academicYear", academicYearid.get().getExYear());
			parameters.put("university", uid.get(0).getExName());
			parameters.put("credithour", courses.get().getCreditHours().getExCreditHourTitle());
			parameters.put("coursecode", courses.get().getExCoursesCode());
			parameters.put("examanouncment", examann.get().getExDescription());
			parameters.put("version", request.getExVersion());
			parameters.put("versionNo", ver);
			parameters.put("time", request.getExtime());
			parameters.put("examdate", examlist.get(0).getExStartDate());

			// String folder =
			// createFolder(uid.get().getExIdentifier(),academicYearid.get().getExYear(),
			// "timetable");
			String folder = createFolder(academicYearid.get().getExYear(), "Question Papers", "QP");

			// Fill the report
			JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,
					jrBeanCollectionDataSource);

			String filename = "\\" + courses.get().getExCoursesCode() + " " + "("
					+ courses.get().getCreditHours().getExCreditHourTitle() + ")" + ".pdf";

			// Export the report to a PDF file
			JasperExportManager.exportReportToPdfFile(jasperPrint, reportPath + folder + filename);

			File filenew = new File(reportPath + folder + filename);
			if (filenew.exists()) {
				filenew.setExecutable(true, false);
				filenew.setReadable(true, false);
				filenew.setWritable(true, false);
			}

			QuestionPaperLog logs = new QuestionPaperLog();

			if (request.getUser() == null || request.getUser().equals("")) {
				logs.setUser(null);
			} else {
				List<User> user = super.user.findByIdAndExIsDelete(request.getUser(), false);
				if (user.size() <= 0) {
					info.put("status", "2");
					info.put("message", "User id not present");
					return info;
				}

				logs.setUser(user.get(0));

			}
			Date date = new Date();
			logs.setExUrl(folder + filename.replace("\\", "/"));
			logs.setAcademicYear(academicYearid.get());
			logs.setCourses(courses.get());
			logs.setDegree(degree.get());
			logs.setExamAnnouncement(examann.get());
			logs.setExCreateDate(date);
			logs.setExIsActive(true);
			logs.setExIsDelete(false);
			logs.setExFileName(filename);
			logs.setExVersion(request.getExVersion());

			// super.questionPaperLog.save(logs);

			info.put("status", "1");
			info.put("url", folder + filename);
			info.put("message", "Report successfully generated");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong.");
			return info;
		}

	}

	@Override
	public Map<String, Object> generateBarcodeSheet(ExamAttendanceRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			if (request.getRegistrationType() == null || request.getRegistrationType().equals("")) {
				info.put("status", "2");
				info.put("message", "RegistrationType id is required");
				return info;
			}
			Optional<Colleges> collage = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!collage.isPresent()) {
				info.put("status", "2");
				info.put("message", "College Id not Present");
				return info;
			}
			Optional<AcademicYear> academicYearid = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getAcademicYear());
			if (!academicYearid.isPresent()) {
				info.put("status", "2");
				info.put("message", "AcademicYear id not present");
				return info;
			}
			Optional<Programmes> Prog = super.programme.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Prog.isPresent()) {
				info.put("status", "2");
				info.put("message", "Programmes not present");
				return info;
			}
			Optional<Courses> courses = super.courses.findByIdAndExIsDeleteAndExIsActive(request.getCourses(), false,
					true);
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not  present");
				return info;

			}
			Optional<Department> dept = super.department.findByIdAndExIsDeleteAndExIsActive(request.getDepartment(),
					false, true);
			if (!dept.isPresent()) {
				info.put("status", "2");
				info.put("message", "department not  present");
				return info;

			}

			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<RoomMaster> room = super.roomMaster.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getRoomId());
			if (!room.isPresent()) {
				info.put("status", "2");
				info.put("message", "room not present");
				return info;
			}

			Optional<ExamAnnouncement> result = super.examAnnouncement
					.findByIdAndExIsDeleteAndExIsActive(request.getExamAnnouncement(), false, true);
			if (!result.isPresent()) {
				info.put("status", "2");
				info.put("message", "ExamAnnouncement id not present");
				return info;
			}

			List<RegistrationType> registration = super.registrationType
					.findByIdAndExIsDelete(request.getRegistrationType(), false);
			if (registration.size() <= 0) {
				info.put("status", "2");
				info.put("message", "RegistrationType id not present");
				return info;
			}
			Optional<Stream> stream = super.stream.findByIdAndExIsDeleteAndExIsActive(request.getStream(), false, true);
			if (!stream.isPresent()) {
				info.put("status", "2");
				info.put("message", "stream not  present");
				return info;
			}

			List<ExamAttendance> attendence = super.examAttendance
					.findByExIsDeleteAndAcademicYearIdAndCollegesIdAndCoursesIdAndDegreeIdAndExamAnnouncementIdAndProgrammesIdAndRegistrationIdAndDepartmentIdAndRoomIdIdAndStreamId(
							false, request.getAcademicYear(), request.getColleges(), request.getCourses(),
							request.getDegree(), request.getExamAnnouncement(), request.getProgrammes(),
							request.getRegistrationType(), request.getDepartment(), request.getRoomId(),
							request.getStream());

			if (attendence.size() == 0) {
				info.put("status", "2");
				info.put("message", "No record found");
				return info;
			}

			Boolean is_exsit = false;
			Date date = new Date();
			List dataList = new LinkedList();
			for (ExamAttendance e : attendence) {
				Map<Object, Object> timetabledata = new HashMap<Object, Object>();
				timetabledata.put("exExamAttendanceId", e.getId());
				timetabledata.put("exStudentId", e.getStudentadmission().getExRollNo());
				timetabledata.put("exRoomName", e.getRoomId().getExName());
				timetabledata.put("exRoomNumber", e.getRoomId().getExRoomNumber());
				timetabledata.put("exBarcode", e.getExBarcode());
				timetabledata.put("exIsActive", e.getExIsActive());
				timetabledata.put("exStudentName", e.getStudentadmission().getExName());
				timetabledata.put("registrationType", e.getRegistration().getExName());
				dataList.add(timetabledata);
			}
			List<University> uid = super.university.findAllUnivesity();
			if (uid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "University not present");
				return info;
			}
			String university = uid.get(0).getExName();
			String serverurl = super.commonHelper.getSettingValue("SERVER_IP");
			String reportPath = super.commonHelper.getSettingValue("DOCUMENT_PATH"); // "src/main/resources/";
			String image = super.commonHelper.getSettingValue("IMAGE_PATH");
			logger.info(image);
			logger.info(image);

			// Compile the Jasper report from .jrxml to .japser

			String path = resourceLoader.getResource("classpath:barcodeSheet.jrxml").getURI().getPath();
			JasperReport jasperReport = JasperCompileManager.compileReport(path);
			// Get your data source
			JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(dataList);

			// Add parameters
			Map<String, Object> parameters = new HashMap<>();

			parameters.put("createdBy", "Win.org");
			parameters.put("logo", image);
			parameters.put("courses", courses.get().getExName());
			parameters.put("coursesCode", courses.get().getExCoursesCode());
			parameters.put("creditHour", courses.get().getCreditHours().getExCreditHourTitle());
			parameters.put("examAnnouncement", result.get().getExName());
			parameters.put("registration", registration.get(0).getId() == 1 ? "" : registration.get(0).getExName());

			parameters.put("university", university);
			String folder = createFolder(academicYearid.get().getExYear(), collage.get().getExIdentifier(),
					"barcodeSheet");

			String filename = "\\" + attendence.get(0).getRoomId().getExName() + "-" + courses.get().getExCoursesCode()
					+ ".pdf";

			// Fill the report
			JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,
					jrBeanCollectionDataSource);

			// Export the report to a PDF file
			System.out.println(reportPath + folder + filename);
			JasperExportManager.exportReportToPdfFile(jasperPrint, reportPath + folder + filename);

			File filenew = new File(reportPath + folder + filename);
			if (filenew.exists()) {
				filenew.setExecutable(true, false);
				filenew.setReadable(true, false);
				filenew.setWritable(true, false);
			}

			info.put("status", "1");
			info.put("url", folder + filename);
			info.put("message", "Report successfully generated");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> generateAttendenceSheet(ExamAttendanceRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {

			if (request.getRegistrationType() == null || request.getRegistrationType().equals("")) {
				info.put("status", "2");
				info.put("message", "RegistrationType id is required");
				return info;
			}
			Optional<Colleges> collage = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!collage.isPresent()) {
				info.put("status", "2");
				info.put("message", "College Id not Present");
				return info;
			}
			Optional<AcademicYear> academicYearid = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getAcademicYear());
			if (!academicYearid.isPresent()) {
				info.put("status", "2");
				info.put("message", "AcademicYear id not present");
				return info;
			}
			Optional<Programmes> Prog = super.programme.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Prog.isPresent()) {
				info.put("status", "2");
				info.put("message", "Programmes not present");
				return info;
			}
			Optional<Courses> courses = super.courses.findByIdAndExIsDeleteAndExIsActive(request.getCourses(), false,
					true);
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not  present");
				return info;

			}
			Optional<Department> dept = super.department.findByIdAndExIsDeleteAndExIsActive(request.getDepartment(),
					false, true);
			if (!dept.isPresent()) {
				info.put("status", "2");
				info.put("message", "department not  present");
				return info;

			}

			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<RoomMaster> room = super.roomMaster.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getRoomId());
			if (!room.isPresent()) {
				info.put("status", "2");
				info.put("message", "room not present");
				return info;
			}

			Optional<ExamAnnouncement> result = super.examAnnouncement
					.findByIdAndExIsDeleteAndExIsActive(request.getExamAnnouncement(), false, true);
			if (!result.isPresent()) {
				info.put("status", "2");
				info.put("message", "ExamAnnouncement id not present");
				return info;
			}

			List<RegistrationType> registration = super.registrationType
					.findByIdAndExIsDelete(request.getRegistrationType(), false);
			if (registration.size() <= 0) {
				info.put("status", "2");
				info.put("message", "RegistrationType id not present");
				return info;
			}
			Optional<Stream> stream = super.stream.findByIdAndExIsDeleteAndExIsActive(request.getStream(), false, true);
			if (!stream.isPresent()) {
				info.put("status", "2");
				info.put("message", "stream not  present");
				return info;
			}

			List<ExamTimeTable> examlist = super.examtimetable
					.findByExIsDeleteAndAcademicYearIdAndProgrammesIdAndExamAnnouncementIdAndRegistrationIdAndCoursesIdAndExExamType(
							false, request.getAcademicYear(), request.getProgrammes(), request.getExamAnnouncement(),
							request.getRegistrationType(), request.getCourses(), 1L);
			if (examlist.size() <= 0) {

				info.put("status", "2");
				info.put("message", "Time table Not created");
				return info;
			}

			List<ExamAttendance> attendence = super.examAttendance
					.findByExIsDeleteAndAcademicYearIdAndCollegesIdAndCoursesIdAndDegreeIdAndExamAnnouncementIdAndProgrammesIdAndRegistrationIdAndDepartmentIdAndRoomIdIdAndStreamId(
							false, request.getAcademicYear(), request.getColleges(), request.getCourses(),
							request.getDegree(), request.getExamAnnouncement(), request.getProgrammes(),
							request.getRegistrationType(), request.getDepartment(), request.getRoomId(),
							request.getStream());

			if (attendence.size() == 0) {
				info.put("status", "2");
				info.put("message", "No record found");
				return info;
			}
			List dataList = new LinkedList();
			for (ExamAttendance e : attendence) {
				Map<Object, Object> timetabledata = new HashMap<Object, Object>();

				timetabledata.put("exExamAttendanceId", e.getId());
				timetabledata.put("exStudentId", e.getStudentadmission().getExRollNo());
				timetabledata.put("exRoomName", e.getRoomId().getExName());
				timetabledata.put("exRoomNumber", e.getRoomId().getExRoomNumber());
				timetabledata.put("exBarcode", e.getExBarcode());
				timetabledata.put("exIsActive", e.getExIsActive());
				timetabledata.put("exStudentName", e.getStudentadmission().getExName());
				timetabledata.put("registrationType", e.getRegistration().getExName());
				dataList.add(timetabledata);
			}

			List<University> uid = super.university.findAllUnivesity();
			if (uid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "University not present");
				return info;
			}
			String university = uid.get(0).getExName();
			String serverurl = super.commonHelper.getSettingValue("SERVER_IP");
			String reportPath = super.commonHelper.getSettingValue("DOCUMENT_PATH"); // "src/main/resources/";
			String image = super.commonHelper.getSettingValue("IMAGE_PATH");
			logger.info(image);

			// Compile the Jasper report from .jrxml to .japser

			String path = resourceLoader.getResource("classpath:attendance.jrxml").getURI().getPath();
			JasperReport jasperReport = JasperCompileManager.compileReport(path);
			// Get your data source
			JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(dataList);

			// Add parameters
			Map<String, Object> parameters = new HashMap<>();
			SimpleDateFormat formatter2 = new SimpleDateFormat("dd-MM-yyyy");
			parameters.put("createdBy", "Win.org");
			parameters.put("logo", image);

			parameters.put("degree", degree.get().getExName());
			parameters.put("programmes", Prog.get().getExName());
			parameters.put("academicYear", academicYearid.get().getExYear());
			parameters.put("courses", courses.get().getExName());
			parameters.put("coursesCode", courses.get().getExCoursesCode());
			parameters.put("creditHour", courses.get().getCreditHours().getExCreditHourTitle());
			parameters.put("examAnnouncement", result.get().getExName());
			parameters.put("examDate", examlist.get(0).getExStartDate() == null ? null
					: formatter2.format(examlist.get(0).getExStartDate()));
			parameters.put("examTime", examlist.get(0).getExStartTime());
			parameters.put("college", dept.get().getExName());
			parameters.put("university", university);
			parameters.put("registration",
					registration.get(0).getId() == 1 ? " " : registration.get(0).getExName().toUpperCase());
			parameters.put("venue", attendence.get(0).getRoomId().getExName());

			String folder = createFolder(academicYearid.get().getExYear(), collage.get().getExIdentifier(),
					"attendance");

			String filename = "\\" + attendence.get(0).getRoomId().getExName() + "-" + courses.get().getExCoursesCode()
					+ ".pdf";

			// Fill the report
			JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,
					jrBeanCollectionDataSource);

			// Export the report to a PDF file
			JasperExportManager.exportReportToPdfFile(jasperPrint, reportPath + folder + filename);

			File filenew = new File(reportPath + folder + filename);
			if (filenew.exists()) {
				filenew.setExecutable(true, false);
				filenew.setReadable(true, false);
				filenew.setWritable(true, false);
			}

			info.put("status", "1");
			info.put("url", folder + filename);
			info.put("message", "Report successfully generated");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;

		}
	}

	@Override
	public Map<String, Object> generateIndexingPdf(QuestionpaperRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		java.sql.Connection conn = null;
		try {
			logger.info("InsideIndexing pdf");
			List<Object> datalist = new ArrayList<Object>();

			if (request.getDegree() == null || request.getDegree().equals("")) {
				info.put("status", "2");
				info.put("message", "Degree  is required");
				return info;
			}
			if (request.getExamAnnouncement() == null || request.getExamAnnouncement().equals("")) {
				info.put("status", "2");
				info.put("message", "ExamAnnouncement is required");
				return info;
			}
			if (request.getCourses() == null || request.getCourses().equals("")) {
				info.put("status", "2");
				info.put("message", "Courses is required");
				return info;
			}

			if (request.getAcademicYear() == null || request.getAcademicYear().equals("")) {
				info.put("status", "2");
				info.put("message", "AcademicYear is required");
				return info;
			}

			Optional<AcademicYear> academicYearid = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getAcademicYear());
			if (!academicYearid.isPresent()) {
				info.put("status", "2");
				info.put("message", "AcademicYear id not present");
				return info;
			}
			Optional<Programmes> Prog = super.programme.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Prog.isPresent()) {
				info.put("status", "2");
				info.put("message", "Programmes not present");
				return info;
			}
			Optional<Courses> courses = super.courses.findByIdAndExIsDeleteAndExIsActiveAndAcademicYearId(
					request.getCourses(), false, true, request.getAcademicYear());
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not  present");
				return info;

			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<Department> departments = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!departments.isPresent()) {
				info.put("status", "2");
				info.put("message", "department not present");
				return info;
			}
			Optional<ExamAnnouncement> examann = super.examAnnouncement
					.findByIdAndExIsDeleteAndExIsActive(request.getExamAnnouncement(), false, true);
			if (!examann.isPresent()) {
				info.put("status", "2");
				info.put("message", "ExamAnnouncement id not present");
				return info;
			}

			List<University> uid = super.university.findAllUnivesity();
			if (uid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "University not present");
				return info;
			}
			Optional<RegistrationType> rtype = super.registrationType.findByExIsDeleteAndExIsActiveAndId(false, true,
					1L);
			if (!rtype.isPresent()) {
				info.put("status", "2");
				info.put("message", "Regular Registration Type not present");
				return info;
			}

			Optional<ExamTimeTable> ExamTimeTable = super.examtimetable
					.findByExIsDeleteAndExIsActiveAndCoursesIdAndExamAnnouncementIdAndAcademicYearIdAndRegistrationId(
							false, true, request.getCourses(), request.getExamAnnouncement(), request.getAcademicYear(),
							rtype.get().getId());
			if (!ExamTimeTable.isPresent()) {
				info.put("status", "2");
				info.put("message", "ExamTimeTable not present ");
				return info;
			}
			String university = uid.get(0).getExName();
			List<QuestionPaper> patterns = super.QuestionPaper
					.findByExIsDeleteAndExIsActiveAndAcademicYearIdAndCoursesIdAndDegreeIdAndExamAnnouncementId(false,
							true, request.getAcademicYear(), request.getCourses(), request.getDegree(),
							request.getExamAnnouncement());
			if (patterns.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Questionpaper not present ");
				return info;
			}
			List<QuestionPaper> Questionpapercheck = super.QuestionPaper
					.findByExIsDeleteAndExIsActiveAndAcademicYearIdAndCoursesIdAndDegreeIdAndExamAnnouncementIdAndExtype(
							false, true, request.getAcademicYear(), request.getCourses(), request.getDegree(),
							request.getExamAnnouncement(), "1");
			if (Questionpapercheck.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Questionpaper not present");
				return info;
			}
			logger.info("Questionpapercheck>>>>>>>>>>>>>>>" + Questionpapercheck.size());
			Map<String, Object> parameters = new HashMap<>();

			for (QuestionPaper Q : Questionpapercheck) {
				Map<Object, Object> data = new HashMap<Object, Object>();
				data.put("originalqno", Q.getExQuestionNum());
				data.put(Q.getExversion(), Q.getExversion());
				data.put("key1", Q.getExkeyAnswer());
				datalist.add(data);
				logger.info("Q.getExQuestionNum()>>>>>>>>>>>>>>>" + Q.getExQuestionNum());

				List<QuestionPaperVersion> question = super.QuestionPaperVersion
						.findByAcademicYearIdAndCoursesIdAndDegreeIdAndExamAnnouncementIdAndExQuestionNumAndExType(
								request.getAcademicYear(), request.getCourses(), request.getDegree(),
								request.getExamAnnouncement(), Q.getExQuestionNum(), "1");
				if (question.size() <= 0) {
					info.put("status", "2");
					info.put("message", "versions not present");
					return info;

				}
				parameters.put("version1", question.get(0).getExVersion());
				parameters.put("version2", question.get(1).getExVersion());

				for (int i = 0; i <= question.size(); i++) {
					if (i == 0) {
						Map<Object, Object> data1 = new HashMap<Object, Object>();
						data1.put("num", Q.getExQuestionNum());
						// parameters.put("version1",question.get(0).getVersion());
						data1.put("key2", question.get(0).getQuestionPaper().getExkeyAnswer());
						datalist.add(data1);
					}
					if (i == 1) {
						Map<Object, Object> data1 = new HashMap<Object, Object>();
						data1.put("num", Q.getExQuestionNum());
						// parameters.put("version2",question.get(1).getVersion());
						data1.put("key3", question.get(1).getQuestionPaper().getExkeyAnswer());
						datalist.add(data1);
					}

				}

			}
			String serverurl = super.commonHelper.getSettingValue("SERVER_IP");
			String reportPath = super.commonHelper.getSettingValue("DOCUMENT_PATH"); // "src/main/resources/";
			String image = super.commonHelper.getSettingValue("IMAGE_PATH");
			logger.info(image);
			// String center = CommonHelper.getSettingValue("EXAM_CENTER");

			conn = jdbcTemplate.getDataSource().getConnection();

			if (conn == null) {
				info.put("status", "2");
				info.put("message", "Database not connected");
				return info;
			}

			String path = resourceLoader.getResource("classpath:indexing.jrxml").getURI().getPath();
			JasperReport jasperReport = JasperCompileManager.compileReport(path);

			// Map<String, Object> parameters = new HashMap<>();
			parameters.put("logo", image);

			parameters.put("university", university);
			parameters.put("credithour", courses.get().getCreditHours().getExCreditHourTitle());
			parameters.put("coursecode", courses.get().getExCoursesCode());
			parameters.put("version", request.getExVersion());
			parameters.put("acdemicid", request.getAcademicYear());
			parameters.put("courseid", request.getCourses());
			parameters.put("examid", request.getExamAnnouncement());
			parameters.put("degreeid", request.getDegree());

			// String folder =
			// createFolder(uid.get().getExIdentifier(),academicYearid.get().getExYear(),
			// "timetable");
			String folder = createFolder(academicYearid.get().getExYear(), "Question Papers", "indexing");

			// Fill the report
			JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters, conn);

			String filename = "\\" + courses.get().getExCoursesCode() + " " + "("
					+ courses.get().getCreditHours().getExCreditHourTitle() + ")" + ".pdf";

			// Export the report to a PDF file
			JasperExportManager.exportReportToPdfFile(jasperPrint, reportPath + folder + filename);

			File filenew = new File(reportPath + folder + filename);
			if (filenew.exists()) {
				filenew.setExecutable(true, false);
				filenew.setReadable(true, false);
				filenew.setWritable(true, false);
			}

			QuestionPaperLog logs = new QuestionPaperLog();

			if (request.getUser() == null || request.getUser().equals("")) {
				logs.setUser(null);
			} else {
				List<User> user = super.user.findByIdAndExIsDelete(request.getUser(), false);
				if (user.size() <= 0) {
					info.put("status", "2");
					info.put("message", "User id not present");
					return info;
				}

				logs.setUser(user.get(0));

			}
			Date date = new Date();
			logs.setExUrl(folder + filename.replace("\\", "/"));
			logs.setAcademicYear(academicYearid.get());
			logs.setCourses(courses.get());
			logs.setDegree(degree.get());
			logs.setExamAnnouncement(examann.get());
			logs.setDepartment(departments.get());
			logs.setProgrammes(examann.get().getProgrammes());
			logs.setExCreateDate(date);
			logs.setExIsActive(true);
			logs.setExIsDelete(false);
			logs.setExFileName(filename);
			logs.setExVersion(request.getExVersion());
			logs.setExQuestionType(Questionpapercheck.get(0).getQuestionPaperType().getExQpType());

			super.questionPaperLog.save(logs);

			info.put("status", "1");
			info.put("url", folder + filename);
			info.put("message", "Report successfully generated");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		} finally {
			if (conn != null) {
				try {
					conn.close();
				} catch (Exception e) {
					e.printStackTrace();
					logger.error("Exception occured" + e);
					StringWriter errors = new StringWriter();
					e.printStackTrace(new PrintWriter(errors));
					logger.error(errors.toString());
					info.put("status", "0");
					info.put("message", "something went wrong");
					return info;
				}
			}
		}

	}

	@Override
	public Map<String, Object> generateGradeReportPdf(GradeReportRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Optional<Colleges> collage = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!collage.isPresent()) {
				info.put("status", "2");
				info.put("message", "College Id not Present");
				return info;
			}
			Optional<AcademicYear> academicYearid = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getAcademicYear());
			if (!academicYearid.isPresent()) {
				info.put("status", "2");
				info.put("message", "AcademicYear id not present");
				return info;
			}
			Optional<Programmes> Prog = super.programme.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Prog.isPresent()) {
				info.put("status", "2");
				info.put("message", "Programmes not present");
				return info;
			}
			Optional<Courses> courses = super.courses.findByIdAndExIsDeleteAndExIsActive(request.getCourses(), false,
					true);
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not  present");
				return info;

			}
			Optional<Department> dept = super.department.findByIdAndExIsDeleteAndExIsActive(request.getDepartment(),
					false, true);
			if (!dept.isPresent()) {
				info.put("status", "2");
				info.put("message", "department not  present");
				return info;

			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}

			List<RegistrationType> registration = super.registrationType
					.findByIdAndExIsDelete(request.getRegistrationType(), false);
			if (registration.size() <= 0) {
				info.put("status", "2");
				info.put("message", "RegistrationType id not present");
				return info;
			}

			List<University> uid = super.university.findAllUnivesity();
			if (uid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "University not present");
				return info;
			}
			String university = uid.get(0).getExName().toUpperCase();
			Section Sectionobj = null;
			Long Section = null;
			String Sectionsname = "";
			if (request.getSectionId() == null || request.getSectionId().equals("")) {
				Section = null;
				Sectionobj = null;
			} else {
				Optional<Section> Sections = super.section.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getSectionId());
				if (!Sections.isPresent()) {
					info.put("status", "2");
					info.put("message", "Section id not present");
					return info;
				}
				Sectionobj = Sections.get();
				Section = Sections.get().getId();
				Sectionsname = Sections.get().getExName();
			}

			if (request.getExamAnnouncement() == null || request.getExamAnnouncement().equals("NA")) {

				return generateMigGradeReportPdf(request);

			}
			Optional<ExamAnnouncement> result = super.examAnnouncement.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getExamAnnouncement());
			if (!result.isPresent()) {
				info.put("status", "2");
				info.put("message", "Examannouncement  not present");
				return info;
			}

			List dataList = new LinkedList();

			ArrayList<GradeReport> semreg = super.gradeReport.getGradeReport(request.getColleges(),
					request.getCourses(), request.getProgrammes(), request.getSemester(), request.getDegree(),
					request.getExamAnnouncement(), request.getAcademicYear(), request.getDepartment(),
					request.getRegistrationType(), request.getProgrammeYear(), Section);
			if (semreg.size() <= 0) {
				info.put("status", "2");
				info.put("message", "No records found");
				return info;
			}

			List<TeacherCourseMapping> teacher = super.teacherCourseMapping
					.findByCoursesIdAndDepartmentIdAndAcademicYearIdAndCollegesIdAndDegreeIdAndProgrammeYearIdAndSemsterIdAndSectionId(
							request.getCourses(), request.getDepartment(), request.getAcademicYear(),
							request.getColleges(), request.getDegree(), courses.get().getProgrammeYear().getId(),
							request.getSemester(), Section);
			List<String> data = new ArrayList<String>();
			String teachername = "";
			for (int j = 0; j < teacher.size(); j++) {
				teachername = teacher.get(j).getStaffpersonal().getExName();

				String[] collageid = teachername.split("/");
				for (int i = 0; i < collageid.length; i++) {
					data.add(collageid[i]);
				}
			}
			double internaltotal = 0.0, practicaltotal = 0.0;

			for (GradeReport e : semreg) {
				Map<Object, Object> omrlist = new HashMap<Object, Object>();
				if (e.getCourses().getCoursesType().size() == 1) {
					if (e.getCourses().getCoursesType().get(0).getId() == 1) {
						internaltotal = (e.getExQuizMarks() + e.getExAssignmentMarks() + e.getExAttendenceMarks() + e.getExCaseStudy());
						omrlist.put("id", e.getId());
						omrlist.put("exEndTermMarks", super.commonHelper.doubleprefixdigit(e.getExEndTermMarks()));
						omrlist.put("exMidtermMarks", super.commonHelper.doubleprefixdigit(e.getExMidTermMarks()));
						omrlist.put("internalmarks", super.commonHelper.doubleprefixdigit(internaltotal));
						omrlist.put("practicaltotal", "NA");

					}
					if (e.getCourses().getCoursesType().get(0).getId() == 2) {
						practicaltotal = e.getExPracticalInternalMarks() + e.getExPracticalExternalMarks();
						omrlist.put("practicaltotal", super.commonHelper.doubleprefixdigit(practicaltotal));
						omrlist.put("exEndTermMarks", "NA");
						omrlist.put("exMidtermMarks", "NA");
						omrlist.put("internalmarks", "NA");
					}
				}

				if (e.getCourses().getCoursesType().size() == 2) {

					practicaltotal = (e.getExPracticalInternalMarks() == null ? 0 : e.getExPracticalInternalMarks()) + (e.getExPracticalExternalMarks() == null ? 0 :e.getExPracticalExternalMarks());
					internaltotal = (e.getExQuizMarks() + e.getExAssignmentMarks() + e.getExAttendenceMarks()+e.getExCaseStudy());

					omrlist.put("exEndTermMarks", super.commonHelper.doubleprefixdigit(e.getExEndTermMarks()));
					omrlist.put("exMidtermMarks", super.commonHelper.doubleprefixdigit(e.getExMidTermMarks()));
					omrlist.put("internalmarks", super.commonHelper.doubleprefixdigit(internaltotal));
					omrlist.put("practicaltotal", super.commonHelper.doubleprefixdigit(practicaltotal));
					

				}

				
				omrlist.put("exGrandTotal", super.commonHelper.doubleprefixdigit(e.getExGrandTotal()));
				omrlist.put("lettergrade", e.getExLetterGrades());
				omrlist.put("exGradePoint", super.commonHelper.getwithoutPoint(e.getExGradePoint()));

				// if(e.getCourses().getExIsPractical()==true) {
				// omrlist.put("exGradePoint", e.getExGradePoint()>=5
				// ?CommonHelper.doubledigit(e.getExGradePoint()):"Fail");
				// }
				// else {
				// omrlist.put("exGradePoint", e.getExGradePoint());
				// }
				omrlist.put("exFirstName", e.getStudentadmission().getExName());
				omrlist.put("exStudentId", e.getExRollNo());
				omrlist.put("exCoursesCode", e.getExCoursesCode());
				omrlist.put("college", e.getColleges().getExName());
				omrlist.put("dept", e.getDepartment().getExName());
				omrlist.put("collegeid", e.getColleges().getId());
				omrlist.put("programeid", e.getProgrammes().getId());
				omrlist.put("semester", e.getSemester().getExName());
				omrlist.put("examannouncment", e.getExamAnnouncement().getExName());
				omrlist.put("academicyear", e.getAcademicYear().getExYear());
				omrlist.put("exCourseName", e.getExCoursesName());
				omrlist.put("exCourseid", e.getCourses().getId());
				omrlist.put("excerdithour", e.getCourses().getCreditHours().getExCreditHourTitle());
				omrlist.put("programe", e.getProgrammes().getExName());
				omrlist.put("programeYear", e.getCourses().getProgrammeYear().getExName());
				omrlist.put("exRemark", e.getExRemark());
				omrlist.put("university", university);

				omrlist.put("regtype", registration.get(0).getId() == 1 ? "" : registration.get(0).getExName());
				omrlist.put("depatment", dept.get());
				omrlist.put("teacherName", teachername);
				omrlist.put("section", Section == null ? null : Sectionsname);
				omrlist.put("dateOfDeclaration", request.getDateOfDeclaration());
		

				// String teacherslist =data.toString();
				// omrlist.put("teacherName",teacherslist.replaceAll("\\[",
				// "").replaceAll("\\]",""));
				// logger.info(">>>>>>>>>teacherslist>>>>>>"+teacherslist);

				dataList.add(omrlist);
			}

			String serverurl = super.commonHelper.getSettingValue("SERVER_IP");
			String reportPath = super.commonHelper.getSettingValue("DOCUMENT_PATH"); // "src/main/resources/";
			String image = super.commonHelper.getSettingValue("IMAGE_PATH");
			
			String image1 = super.commonHelper.getSettingValue("MOFPI_PATH");
			String image2 = super.commonHelper.getSettingValue("EMBLEM_PATH");
			logger.info(image);
			// String center =super.commonHelper.getSettingValue("EXAM_CENTER");

			// Compile the Jasper report from .jrxml to .japser

			String path = resourceLoader.getResource("classpath:gradeReport.jrxml").getURI().getPath();
			JasperReport jasperReport = JasperCompileManager.compileReport(path);
			JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(dataList);

			// Add parameters
			Map<String, Object> parameters = new HashMap<>();

			// parameters.put("center",center);

			parameters.put("createdBy", "Win.org");
			parameters.put("university", university);
			parameters.put("logo", image);
			parameters.put("emblem", image1);
			parameters.put("logo1", image2);

			String feesName = "\\" + courses.get().getExCoursesCode() + " " + "("
					+ courses.get().getCreditHours().getExCreditHourTitle() + ")" + ".pdf";

			String folder = createFolder(result.get().getAcademicYear().getExYear(), collage.get().getExIdentifier(),
					"gradeReport");

			// Fill the report
			JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,
					jrBeanCollectionDataSource);

			// Export the report to a PDF file
			JasperExportManager.exportReportToPdfFile(jasperPrint, reportPath + folder + feesName);

			File filenew = new File(reportPath + folder + feesName);
			if (filenew.exists()) {
				filenew.setExecutable(true, false);
				filenew.setReadable(true, false);
				filenew.setWritable(true, false);
			}

			GradeReportLog logs = new GradeReportLog();

			if (request.getUser() == null || request.getUser().equals("")) {
				logs.setUser(null);
			} else {
				List<User> user = super.user.findByIdAndExIsDelete(request.getUser(), false);
				if (user.size() <= 0) {
					info.put("status", "2");
					info.put("message", "User id not present");
					return info;
				}

				logs.setUser(user.get(0));

			}
			Date date = new Date();
			logs.setExamAnnouncement(result.get());
			logs.setAcademicYear(courses.get().getAcademicYear());
			logs.setExUrl(folder + feesName.replace("\\", "/"));
			logs.setExCreateDate(date);
			logs.setColleges(collage.get());
			logs.setDegree(degree.get());
			logs.setCourses(courses.get());
			logs.setProgrammes(Prog.get());
			logs.setSemester(result.get().getSemester());
			logs.setRegistrationType(registration.get(0));
			logs.setExReportType("GradeReport");
			logs.setDepartment(dept.get());
			logs.setProgrammeYear(result.get().getProgrammeYear());
			logs.setSemester(result.get().getSemester());
			logs.setExReportCategory("PDFDownload");
			logs.setExIsActive(true);
			logs.setExIsDelete(false);
			logs.setSection(Sectionobj);
			super.GradeReportLog.save(logs);

			info.put("status", "1");
			info.put("url", folder + feesName);
			info.put("message", "Report successfully generated");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}
	}

/*	@Override
	public Map<String, Object> generateSemesterReportPdf(GradeReportRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List dataList = new LinkedList();
			logger.info("getSemesterReports Report");

			Optional<Colleges> collage = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!collage.isPresent()) {
				info.put("status", "2");
				info.put("message", "College Id not Present");
				return info;
			}
			Optional<AcademicYear> academicYearid = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getAcademicYear());
			if (!academicYearid.isPresent()) {
				info.put("status", "2");
				info.put("message", "AcademicYear id not present");
				return info;
			}
			Optional<Programmes> Prog = super.programme.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Prog.isPresent()) {
				info.put("status", "2");
				info.put("message", "Programmes not present");
				return info;
			}

			Optional<Department> dept = super.department.findByIdAndExIsDeleteAndExIsActive(request.getDepartment(),
					false, true);
			if (!dept.isPresent()) {
				info.put("status", "2");
				info.put("message", "department not  present");
				return info;

			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}

			Optional<Stream> stream = super.stream.findByIdAndExIsDeleteAndExIsActive(request.getStream(), false, true);
			if (!stream.isPresent()) {
				info.put("status", "2");
				info.put("message", "stream not  present");
				return info;
			}
			Optional<ProgrammeYear> programmeYear = super.programmeYear
					.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
			if (!programmeYear.isPresent()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!sem.isPresent()) {
				info.put("status", "2");
				info.put("message", "Semster not present");
				return info;
			}

			List<University> uid = super.university.findAllUnivesity();
			if (uid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "University not present");
				return info;
			}
			String university = uid.get(0).getExName().toUpperCase();

			List<Object> regtype = new ArrayList<Object>();
			Long retypefro = (long) 1;
			regtype.add(1L);
			regtype.add(2L);
			// regtype.add(5L);

			List<Studentpersonal> studentPersonal = super.studentpersonal.checkExRollNo(request.getExRollNo(), true,
					false);
			if (studentPersonal.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Student not Present");
				return info;
			}
			if (request.getExamAnnouncement() == null || request.getExamAnnouncement().equals("NA")) {
				return generateMigSemesterReportPdf(request);
			}
			Optional<ExamAnnouncement> result = super.examAnnouncement.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getExamAnnouncement());
			if (!result.isPresent()) {
				info.put("status", "2");
				info.put("message", "Examannouncement  not present");
				return info;
			}

		//if(request.getSemester() == 4)// || request.getSemester() == 3 || request.getSemester() == 5 ||request.getSemester() == 7)

		//{
		//	return generateoddSemesterReportPdf(request);
			
		//}
			
			int count = 0;
			int theory = 0;
			int pract = 0;
			List<CoursesRegistration> gradecourse = super.coursesRegistration
					.findByStudentadmissionIdAndProgrammesIdAndExIsActiveAndExIsDeleteAndRegistrationIdAndSemesterIdAndProgrammeYearIdAndAcademicYearIdAndDepartmentId(
							studentPersonal.get(0).getStudentadmission().getId(), request.getProgrammes(), true, false,
							retypefro, request.getSemester(), request.getProgrammeYear(), request.getAcademicYear(),
							request.getDepartment());
			for (CoursesRegistration grade : gradecourse) {
				if (grade.getCourses().getExIsSatisfactory() == false) {

					Map<Object, Object> gradial = new HashMap<Object, Object>();

					List<GradeReport> gradelist = super.gradeReport
							.findByCollegesIdAndProgrammesIdAndDegreeIdAndSemesterIdAndExRollNoAndProgrammeYearIdAndRegistrationTypeIdInAndExIsActiveAndExIsDeleteAndCoursesId(
									request.getColleges(), request.getProgrammes(), request.getDegree(),
									request.getSemester(), request.getExRollNo(), request.getProgrammeYear(), regtype,
									true, false, grade.getCourses().getId());

					if (gradelist.size() <= 0) {
						info.put("status", "2");
						info.put("message", "grade report not created for ::" + grade.getCourses().getExName()+grade.getCourses().getExCoursesCode());
						return info;

					} else {
						if (gradelist.get(0).getExRemark() != null
								&& gradelist.get(0).getExRemark().equalsIgnoreCase("Pass")) {
							gradial.put("exGradePoint", gradelist.get(0).getExLetterGrades());
						} else {
							gradial.put("exGradePoint", "F");
						}
						// gradial.put("exGradePoint", gradelist.get(0).getExGradePoint());
						gradial.put("exCoursesCode", grade.getCourses().getExCoursesCode());
						gradial.put("exCoursesName", grade.getCourses().getExName());
						gradial.put("exCreditHour",
								"(" + grade.getCourses().getCreditHours().getExCreditHourTitle() + ")");
						theory = theory + (int) (grade.getCourses().getCreditHours().getExCreditHourLecture().intValue());
							
						pract = pract
								+ (int) (grade.getCourses().getCreditHours().getExCreditHourPractical().intValue());

						dataList.add(gradial);
						count++;
					}
				}
			}

			// check from semester progress report
			List<SemesterProgressReport> semesterreport = super.semesterProgressReport
					.findByCollegesIdAndDegreeIdAndProgrammesIdAndSemesterIdAndExamAnnouncementIdAndExRollNo(
							request.getColleges(), request.getDegree(), request.getProgrammes(), request.getSemester(),
							request.getExamAnnouncement(), request.getExRollNo());

			if (semesterreport.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Semester Progress Report not genrated");
				return info;
			}
			Map<Object, Object> results = new HashMap<Object, Object>();
			results.put("exGradePointAv", super.commonHelper.doubledigit(semesterreport.get(0).getExGradePointAv()));

			if (request.getSemester() == 1) {
				results.put("exCamuGradePointAv", "NA");

			} else {
				results.put("exCamuGradePointAv",
						super.commonHelper.doubledigit(semesterreport.get(0).getExCamuGradePointAv()));
			}
			dataList.add(results);
		
			List<CoursesRegistration> gradecourses = super.coursesRegistration
					.findByStudentadmissionIdAndProgrammesIdAndExIsActiveAndExIsDeleteAndRegistrationIdAndSemesterIdAndProgrammeYearIdAndAcademicYearIdAndDepartmentId(
							studentPersonal.get(0).getStudentadmission().getId(), request.getProgrammes(), true, false,
							retypefro, request.getSemester(), request.getProgrammeYear(), request.getAcademicYear(),
							request.getDepartment());
			
			for (CoursesRegistration grade1 : gradecourses) {
				if (grade1.getCourses().getExIsSatisfactory() == true) {
					Map<Object, Object> gradial122 = new HashMap<Object, Object>();
					System.out.println("?????grade.getCourses().getExIsSatisfactory()????????"+grade1.getCourses().getExIsSatisfactory());
					

					List<GradeReport> gradelist = super.gradeReport
							.findByCollegesIdAndProgrammesIdAndDegreeIdAndSemesterIdAndExRollNoAndProgrammeYearIdAndRegistrationTypeIdInAndExIsActiveAndExIsDeleteAndCoursesId(
									request.getColleges(), request.getProgrammes(), request.getDegree(),
									request.getSemester(), request.getExRollNo(), request.getProgrammeYear(), regtype,
									true, false, grade1.getCourses().getId());
					System.out.println("?????????????"+gradelist);
					if (gradelist.size() <= 0) {
						info.put("status", "2");
						info.put("message", "grade report not created for ::" + grade1.getCourses().getExName()+grade1.getCourses().getExCoursesCode());
						return info;

					} else {
					gradial122.put("satacourses",grade1.getCourses().getExCoursesCode() + "(" + grade1.getCourses().getExName() + ")");
						gradial122.put("satgradeletters", gradelist.get(0).getExLetterGrades());
						System.out.println("????????gradial122?????"+gradial122);
						dataList.add(gradial122);
						System.out.println("???????dataList??????"+dataList);	
					}
				}

			}

			System.out.println(">>>>>>>>>>>>>>>dataList>>>>>>>>" + dataList);

			String serverurl = super.commonHelper.getSettingValue("SERVER_IP");
			String reportPath = super.commonHelper.getSettingValue("DOCUMENT_PATH"); // "src/main/resources/";
			String image = super.commonHelper.getSettingValue("IMAGE_PATH");
		String image1 = super.commonHelper.getSettingValue("MOFPI_PATH");
			String image2 = super.commonHelper.getSettingValue("EMBLEM_OF_INDIA");
			
			String formula = "images/formula.jpg";

			logger.info(image);
			// Compile the Jasper report from .jrxml to .japser

			String path = resourceLoader.getResource("classpath:semesterReport2.jrxml").getURI().getPath();
			JasperReport jasperReport = JasperCompileManager.compileReport(path);
			// Get your data source
			JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(dataList);

			// Add parameters
			Map<String, Object> parameters = new HashMap<>();

			int SGPA = super.commonHelper.roundOffInt(semesterreport.get(0).getExGradePointAv().intValue());
			System.out.println("??????????????????????" + SGPA);
			
			if (SGPA >= 5 ) {

				parameters.put("reportStatus", "Promoted");
			} else {

				parameters.put("reportStatus", "DePromoted");

			}
			parameters.put("logo", image);
			
			parameters.put("formula", formula);

			parameters.put("emblem", image1);
			parameters.put("photo", image2);
			parameters.put("exFirstName", semesterreport.get(0).getStudentadmission().getExName().toUpperCase());
			parameters.put("exRollNo", semesterreport.get(0).getExRollNo());
			parameters.put("enrollementNo", semesterreport.get(0).getStudentadmission().getExEnrollementNo());
			parameters.put("father", studentPersonal.get(0).getExFatherName().toUpperCase());
			parameters.put("mother", studentPersonal.get(0).getExMotherName().toUpperCase());

			parameters.put("degree", degree.get().getExName());
			parameters.put("programmes", Prog.get().getExName().toUpperCase());
			parameters.put("examAnnouncement", result.get().getExName());
			parameters.put("colleges", uid.get(0).getExDescription());
			parameters.put("programmeYear", programmeYear.get().getExName());
			parameters.put("semester", sem.get().getExDescription().toUpperCase());
			parameters.put("academicYear", academicYearid.get().getExIdentifier());
			parameters.put("university", university);
			parameters.put("dateofdeclaration", request.getDateOfDeclaration());
			parameters.put("totalCreditHour", "(" + theory + "+" + pract + ")");
			parameters.put("dept", "(" + dept.get().getExName() + ")");
			parameters.put("randnuber", semesterreport.get(0).getSerialNumber());

			// parameters.put("collegesaddress", collage.get().getExAddress());

			String folder = createFolder(academicYearid.get().getExYear(), collage.get().getExIdentifier(),
					"semesterReport");

			String fileName = "\\" + semesterreport.get(0).getExRollNo() + ".pdf";

			// Fill the report
			JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,
					jrBeanCollectionDataSource);

			// Export the report to a PDF file
			JasperExportManager.exportReportToPdfFile(jasperPrint, reportPath + folder + fileName);

			File filenew = new File(reportPath + folder + fileName);
			if (filenew.exists()) {
				filenew.setExecutable(true, false);
				filenew.setReadable(true, false);
				filenew.setWritable(true, false);
			}

			GradeReportLog logs = new GradeReportLog();

			if (request.getUser() == null || request.getUser().equals("")) {
				logs.setUser(null);
			} else {
				List<User> user = super.user.findByIdAndExIsDelete(request.getUser(), false);
				if (user.size() <= 0) {
					info.put("status", "2");
					info.put("message", "User id not present");
					return info;
				}

				logs.setUser(user.get(0));

			}
			Date date = new Date();
			logs.setExamAnnouncement(result.get());
			logs.setAcademicYear(academicYearid.get());
			logs.setExUrl(folder + fileName.replace("\\", "/"));
			logs.setExCreateDate(date);
			logs.setColleges(collage.get());
			logs.setDegree(degree.get());
			logs.setProgrammes(Prog.get());
			logs.setSemester(result.get().getSemester());
			logs.setExReportType("SemesterReport");
			logs.setDepartment(dept.get());
			logs.setProgrammeYear(result.get().getProgrammeYear());
			logs.setSemester(result.get().getSemester());
			logs.setExReportCategory("PDFDownload");
			logs.setExIsActive(true);
			logs.setExIsDelete(false);
			super.GradeReportLog.save(logs);

			// info.put("gradeReport", dataList);
			info.put("status", "1");
			info.put("url", folder + fileName);
			info.put("message", "Report successfully generated");
			return info;
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}

	}
	
	@Override
	public Map<String, Object> generateSemesterReportPdf(GradeReportRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List dataList = new LinkedList();
			logger.info("getSemesterReports Report");

			Optional<Colleges> collage = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!collage.isPresent()) {
				info.put("status", "2");
				info.put("message", "College Id not Present");
				return info;
			}
			Optional<AcademicYear> academicYearid = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getAcademicYear());
			if (!academicYearid.isPresent()) {
				info.put("status", "2");
				info.put("message", "AcademicYear id not present");
				return info;
			}
			Optional<Programmes> Prog = super.programme.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Prog.isPresent()) {
				info.put("status", "2");
				info.put("message", "Programmes not present");
				return info;
			}

			Optional<Department> dept = super.department.findByIdAndExIsDeleteAndExIsActive(request.getDepartment(),
					false, true);
			if (!dept.isPresent()) {
				info.put("status", "2");
				info.put("message", "department not  present");
				return info;

			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}

			Optional<Stream> stream = super.stream.findByIdAndExIsDeleteAndExIsActive(request.getStream(), false, true);
			if (!stream.isPresent()) {
				info.put("status", "2");
				info.put("message", "stream not  present");
				return info;
			}
			Optional<ProgrammeYear> programmeYear = super.programmeYear
					.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
			if (!programmeYear.isPresent()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!sem.isPresent()) {
				info.put("status", "2");
				info.put("message", "Semster not present");
				return info;
			}

			List<University> uid = super.university.findAllUnivesity();
			if (uid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "University not present");
				return info;
			}
			String university = uid.get(0).getExName().toUpperCase();

			List<Object> regtype = new ArrayList<Object>();
			Long retypefro = (long) 1;
			regtype.add(1L);
			regtype.add(2L);
			// regtype.add(5L);

			List<Studentpersonal> studentPersonal = super.studentpersonal.checkExRollNo(request.getExRollNo(), true,
					false);
			if (studentPersonal.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Student not Present");
				return info;
			}
		
			int count = 0;
			int theory = 0;
			int pract = 0;
			List<CoursesRegistration> gradecourse = super.coursesRegistration
					.findByStudentadmissionIdAndProgrammesIdAndExIsActiveAndExIsDeleteAndRegistrationIdAndSemesterIdAndProgrammeYearIdAndAcademicYearIdAndDepartmentId(
							studentPersonal.get(0).getStudentadmission().getId(), request.getProgrammes(), true, false,
							retypefro, request.getSemester(), request.getProgrammeYear(), request.getAcademicYear(),
							request.getDepartment());
			for (CoursesRegistration grade : gradecourse) {
				if (grade.getCourses().getExIsSatisfactory() == false) {

					Map<Object, Object> gradial = new HashMap<Object, Object>();

					List<GradeReport> gradelist = super.gradeReport
							.findByCollegesIdAndProgrammesIdAndDegreeIdAndSemesterIdAndExRollNoAndProgrammeYearIdAndRegistrationTypeIdInAndExIsActiveAndExIsDeleteAndCoursesId(
									request.getColleges(), request.getProgrammes(), request.getDegree(),
									request.getSemester(), request.getExRollNo(), request.getProgrammeYear(), regtype,
									true, false, grade.getCourses().getId());

					if (gradelist.size() <= 0) {
						info.put("status", "2");
						info.put("message", "grade report not created for ::" + grade.getCourses().getExName());
						return info;

					} else {
						if (gradelist.get(0).getExRemark() != null
								&& gradelist.get(0).getExRemark().equalsIgnoreCase("Pass")) {
							gradial.put("exGradePoint", gradelist.get(0).getExLetterGrades());
						} else {
							gradial.put("exGradePoint", "F");
						}
						// gradial.put("exGradePoint", gradelist.get(0).getExGradePoint());
						gradial.put("exCoursesCode", grade.getCourses().getExCoursesCode());
						gradial.put("exCoursesName", grade.getCourses().getExName());
						gradial.put("exCreditHour",
								"(" + grade.getCourses().getCreditHours().getExCreditHourTitle() + ")");
						theory = theory + (int) (grade.getCourses().getCreditHours().getExCreditHourLecture().intValue());
							
						pract = pract
								+ (int) (grade.getCourses().getCreditHours().getExCreditHourPractical().intValue());

						dataList.add(gradial);
						count++;
					}
				}
			}

			// check from semester progress report
			List<SemesterProgressReport> semesterreport = super.semesterProgressReport
					.findByCollegesIdAndDegreeIdAndProgrammesIdAndSemesterIdAndExRollNo(
							request.getColleges(), request.getDegree(), request.getProgrammes(), request.getSemester(),
							 request.getExRollNo());

			if (semesterreport.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Semester Progress Report not genrated");
				return info;
			}
			
			Map<Object, Object> results = new HashMap<Object, Object>();
			results.put("exGradePointAv", super.commonHelper.doubledigit(semesterreport.get(0).getExGradePointAv()));

			if (request.getSemester() == 1) {
				results.put("exCamuGradePointAv", "NA");

			} else {
				results.put("exCamuGradePointAv",
						super.commonHelper.doubledigit(semesterreport.get(0).getExCamuGradePointAv()));
			}
			dataList.add(results);
		
			List<CoursesRegistration> gradecourses = super.coursesRegistration
					.findByStudentadmissionIdAndProgrammesIdAndExIsActiveAndExIsDeleteAndRegistrationIdAndSemesterIdAndProgrammeYearIdAndAcademicYearIdAndDepartmentId(
							studentPersonal.get(0).getStudentadmission().getId(), request.getProgrammes(), true, false,
							retypefro, request.getSemester(), request.getProgrammeYear(), request.getAcademicYear(),
							request.getDepartment());
			
			for (CoursesRegistration grade1 : gradecourses) {
				if (grade1.getCourses().getExIsSatisfactory() == true) {
					Map<Object, Object> gradial122 = new HashMap<Object, Object>();
					System.out.println("?????grade.getCourses().getExIsSatisfactory()????????"+grade1.getCourses().getExIsSatisfactory());
					

					List<GradeReport> gradelist = super.gradeReport
							.findByCollegesIdAndProgrammesIdAndDegreeIdAndSemesterIdAndExRollNoAndProgrammeYearIdAndRegistrationTypeIdInAndExIsActiveAndExIsDeleteAndCoursesId(
									request.getColleges(), request.getProgrammes(), request.getDegree(),
									request.getSemester(), request.getExRollNo(), request.getProgrammeYear(), regtype,
									true, false, grade1.getCourses().getId());
					System.out.println("?????????????"+gradelist);
					if (gradelist.size() <= 0) {
						info.put("status", "2");
						info.put("message", "grade report not created for ::" + grade1.getCourses().getExName());
						return info;

					} else {
					gradial122.put("satacourses",grade1.getCourses().getExCoursesCode() + "(" + grade1.getCourses().getExName() + ")");
						gradial122.put("satgradeletters", gradelist.get(0).getExLetterGrades());
						System.out.println("????????gradial122?????"+gradial122);
						dataList.add(gradial122);
						System.out.println("???????dataList??????"+dataList);	
					}
				}

			}

			System.out.println(">>>>>>>>>>>>>>>dataList>>>>>>>>" + dataList);

			String serverurl = super.commonHelper.getSettingValue("SERVER_IP");
			String reportPath = super.commonHelper.getSettingValue("DOCUMENT_PATH"); // "src/main/resources/";
			String image = super.commonHelper.getSettingValue("IMAGE_PATH");
		String image1 = super.commonHelper.getSettingValue("MOFPI_PATH");
			String image2 = super.commonHelper.getSettingValue("EMBLEM_PATH");
			
		//	String formula = "images/formula.jpg";
			String formula = "images/DAS_5641.jpg";
			
			String formula1 = "images/DAS_5636.jpg";
			

			logger.info(image);
			// Compile the Jasper report from .jrxml to .japser

			String path = "";
			 path = resourceLoader.getResource("classpath:semesterReport2.jrxml").getURI().getPath();
			//String path = resourceLoader.getResource("classpath:semesterReport2.jrxml").getURI().getPath();
			if(request.getSemester() == 1 || request.getSemester() == 3 || request.getSemester() == 5 ||request.getSemester() == 7)
			{
				 path = resourceLoader.getResource("classpath:semesterReport3.jrxml").getURI().getPath();
			}
			
			
			JasperReport jasperReport = JasperCompileManager.compileReport(path);
			// Get your data source
			JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(dataList);

			// Add parameters
			Map<String, Object> parameters = new HashMap<>();

			int SGPA = super.commonHelper.roundOffInt(semesterreport.get(0).getExGradePointAv().intValue());
			System.out.println("??????????????????????" + SGPA);
			if (SGPA >= 5) {

				parameters.put("reportStatus", "Promoted");
			} else {

				parameters.put("reportStatus", "DePromoted");

			}
			parameters.put("logo", image);
			
			parameters.put("formula", formula);

			parameters.put("emblem", image1);
			parameters.put("photo", image2);
			parameters.put("exFirstName", semesterreport.get(0).getStudentadmission().getExName().toUpperCase());
			parameters.put("exRollNo", semesterreport.get(0).getExRollNo());
			parameters.put("enrollementNo", semesterreport.get(0).getStudentadmission().getExEnrollementNo());
			parameters.put("father", studentPersonal.get(0).getExFatherName().toUpperCase());
			parameters.put("mother", studentPersonal.get(0).getExMotherName().toUpperCase());

			parameters.put("degree", degree.get().getExName());
			parameters.put("programmes", Prog.get().getExName().toUpperCase());
			parameters.put("examAnnouncement", "NA");
			parameters.put("colleges", uid.get(0).getExDescription());
			parameters.put("programmeYear", programmeYear.get().getExName());
			parameters.put("semester", sem.get().getExDescription().toUpperCase());
			parameters.put("academicYear", academicYearid.get().getExIdentifier());
			parameters.put("university", university);
			parameters.put("dateofdeclaration", request.getDateOfDeclaration());
			parameters.put("totalCreditHour", "(" + theory + "+" + pract + ")");
			parameters.put("dept", "(" + dept.get().getExName() + ")");
			parameters.put("randnuber", semesterreport.get(0).getSerialNumber());

			// parameters.put("collegesaddress", collage.get().getExAddress());

			String folder = createFolder(academicYearid.get().getExYear(), collage.get().getExIdentifier(),
					"semesterReport");

			String fileName = "\\" + semesterreport.get(0).getExRollNo() + ".pdf";

			// Fill the report
			JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,
					jrBeanCollectionDataSource);

			// Export the report to a PDF file
			JasperExportManager.exportReportToPdfFile(jasperPrint, reportPath + folder + fileName);

			File filenew = new File(reportPath + folder + fileName);
			if (filenew.exists()) {
				filenew.setExecutable(true, false);
				filenew.setReadable(true, false);
				filenew.setWritable(true, false);
			}

			GradeReportLog logs = new GradeReportLog();

			if (request.getUser() == null || request.getUser().equals("")) {
				logs.setUser(null);
			} else {
				List<User> user = super.user.findByIdAndExIsDelete(request.getUser(), false);
				if (user.size() <= 0) {
					info.put("status", "2");
					info.put("message", "User id not present");
					return info;
				}

				logs.setUser(user.get(0));

			}
			Date date = new Date();
			//logs.setExamAnnouncement(result.get());
			logs.setAcademicYear(academicYearid.get());
			logs.setExUrl(folder + fileName.replace("\\", "/"));
			logs.setExCreateDate(date);
			logs.setColleges(collage.get());
			logs.setDegree(degree.get());
			logs.setProgrammes(Prog.get());
			logs.setSemester(sem.get());
			logs.setExReportType("SemesterReport");
			logs.setDepartment(dept.get());
			logs.setProgrammeYear(programmeYear.get());
			//logs.setSemester(result.get().getSemester());
			logs.setExReportCategory("PDFDownload");
			logs.setExIsActive(true);
			logs.setExIsDelete(false);
			super.GradeReportLog.save(logs);

			// info.put("gradeReport", dataList);
			info.put("status", "1");
			info.put("url", folder + fileName);
			info.put("message", "Report successfully generated");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}

	}*/
	
	
	
	@SuppressWarnings({ "unchecked" })
	@Override
	public Map<String, Object> generateSemesterReportPdf(GradeReportRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List dataList = new LinkedList();
			logger.info("getSemesterReports Report");

			Optional<Colleges> collage = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!collage.isPresent()) {
				info.put("status", "2");
				info.put("message", "College Id not Present");
				return info;
			}
			Optional<AcademicYear> academicYearid = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getAcademicYear());
			if (!academicYearid.isPresent()) {
				info.put("status", "2");
				info.put("message", "AcademicYear id not present");
				return info;
			}
			Optional<Programmes> Prog = super.programme.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Prog.isPresent()) {
				info.put("status", "2");
				info.put("message", "Programmes not present");
				return info;
			}

			Optional<Department> dept = super.department.findByIdAndExIsDeleteAndExIsActive(request.getDepartment(),
					false, true);
			if (!dept.isPresent()) {
				info.put("status", "2");
				info.put("message", "department not  present");
				return info;

			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}

			Optional<Stream> stream = super.stream.findByIdAndExIsDeleteAndExIsActive(request.getStream(), false, true);
			if (!stream.isPresent()) {
				info.put("status", "2");
				info.put("message", "stream not  present");
				return info;
			}
			Optional<ProgrammeYear> programmeYear = super.programmeYear
					.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
			if (!programmeYear.isPresent()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!sem.isPresent()) {
				info.put("status", "2");
				info.put("message", "Semster not present");
				return info;
			}

			List<University> uid = super.university.findAllUnivesity();
			if (uid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "University not present");
				return info;
			}
			String university = uid.get(0).getExName();
		
			List<Object> regtype = new ArrayList<Object>();
			Long retypefro = (long) 1;
			regtype.add(1L);
			regtype.add(2L);
			// regtype.add(5L);

			List<Studentpersonal> studentPersonal = super.studentpersonal.checkExRollNo(request.getExRollNo(), true,
					false);
			if (studentPersonal.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Student not Present");
				return info;
			}

			  int count = 0;
				int theory = 0;
				int pract = 0;
				List<GradeReport> gradecourse = super.gradeReport
						.findByCollegesIdAndProgrammesIdAndDegreeIdAndSemesterIdAndExRollNoAndProgrammeYearIdAndExIsActiveAndExIsDelete(
								request.getColleges(), request.getProgrammes(), request.getDegree(), request.getSemester(),
								request.getExRollNo(), request.getProgrammeYear(), true, false);
				for (GradeReport grade : gradecourse) {
					if (grade.getCourses().getExIsSatisfactory() == false) {

						Map<Object, Object> gradial = new HashMap<Object, Object>();

						List<GradeReport> gradelist = super.gradeReport
								.findByCollegesIdAndProgrammesIdAndDegreeIdAndSemesterIdAndExRollNoAndProgrammeYearIdAndRegistrationTypeIdInAndExIsActiveAndExIsDeleteAndCoursesId(
										request.getColleges(), request.getProgrammes(), request.getDegree(),
										request.getSemester(), request.getExRollNo(), request.getProgrammeYear(), regtype,
										true, false, grade.getCourses().getId());

						if (gradelist.size() <= 0) {
							info.put("status", "2");
							info.put("message", "grade report not created for ::" + grade.getCourses().getExName());
							return info;

						} else {
							if (gradelist.get(0).getExRemark() != null
									&& gradelist.get(0).getExRemark().equalsIgnoreCase("Pass") && gradelist.get(0).getRegistrationType().getId()==2) {
								gradial.put("exGradePoint","*"+gradelist.get(0).getExLetterGrades());
							}else if (gradelist.get(0).getExRemark() != null
									&& gradelist.get(0).getExRemark().equalsIgnoreCase("Pass")  && gradelist.get(0).getRegistrationType().getId()==1) {
								gradial.put("exGradePoint", gradelist.get(0).getExLetterGrades());
							}
							else {
								gradial.put("exGradePoint", "F");
							}
							// gradial.put("exGradePoint", gradelist.get(0).getExGradePoint());
							gradial.put("exCoursesCode", grade.getCourses().getExCoursesCode());
							gradial.put("exCoursesName", grade.getCourses().getExName());
							gradial.put("exCreditHour",
									"(" + grade.getCourses().getCreditHours().getExCreditHourTitle() + ")");
							theory = theory + (int) (grade.getCourses().getCreditHours().getExCreditHourLecture().intValue());
								
							pract = pract
									+ (int) (grade.getCourses().getCreditHours().getExCreditHourPractical().intValue());	
							dataList.add(gradial);
							count++;
							
						}
					}
				}

				// check from semester progress report
				List<SemesterProgressReport> semesterreport = super.semesterProgressReport
						.findByCollegesIdAndDegreeIdAndProgrammesIdAndSemesterIdAndExRollNo(request.getColleges(),
								request.getDegree(), request.getProgrammes(), request.getSemester(), request.getExRollNo());

				if (semesterreport.size() <= 0) {
					info.put("status", "2");
					info.put("message", "Semester Progress Report not genrated");
					return info;
				}
				Map<Object, Object> results = new HashMap<Object, Object>();
				results.put("exGradePointAv", super.commonHelper.doubledigit(semesterreport.get(0).getExGradePointAv()));

				if (request.getSemester() == 1) {
					results.put("exCamuGradePointAv", "NA");

				} else {
					results.put("exCamuGradePointAv",
							super.commonHelper.doubledigit(semesterreport.get(0).getExCamuGradePointAv()));
				}
				dataList.add(results);

				List<GradeReport> gradecourses = super.gradeReport
						.findByCollegesIdAndProgrammesIdAndDegreeIdAndSemesterIdAndExRollNoAndProgrammeYearIdAndExIsActiveAndExIsDelete(
								request.getColleges(), request.getProgrammes(), request.getDegree(), request.getSemester(),
								request.getExRollNo(), request.getProgrammeYear(), true, false);
			
				String str = "";
				String letters = "";
				for (GradeReport grade : gradecourses) {
					if (grade.getCourses().getExIsSatisfactory() == true ) {
						Map<Object, Object> gradial122 = new HashMap<Object, Object>();

						List<GradeReport> gradelist = super.gradeReport
								.findByCollegesIdAndProgrammesIdAndDegreeIdAndSemesterIdAndExRollNoAndProgrammeYearIdAndRegistrationTypeIdInAndExIsActiveAndExIsDeleteAndCoursesId(
										request.getColleges(), request.getProgrammes(), request.getDegree(),
										request.getSemester(), request.getExRollNo(), request.getProgrammeYear(), regtype,
										true, false, grade.getCourses().getId());

				
						
						if (gradelist.size() <= 0) {
							info.put("status", "2");
							info.put("message", "grade report not created for ::" + grade.getCourses().getExName());
							return info;
							
						} else {
							//gradial122.put("satisfactory",
							//		gradelist.get(0).getExCoursesCode() + "  (" + gradelist.get(0).getExCoursesName() + ")  ");
						//	gradial122.put("satgradeletter", gradelist.get(0).getExLetterGrades());
							//dataList.add(gradial122);
							System.out.println("Standardsofniftem"+gradelist.get(0).getExCoursesCode() + "  (" + gradelist.get(0).getExCoursesName() + ")  ");
						}
						str  = str+grade.getExCoursesCode()+ "  (" + grade.getExCoursesName() + ")  "+",";
						letters = letters+ grade.getExLetterGrades()+",";
					}
					
				}
				String s = str;
				String s1 = letters;
				String[] satis = s.split(",");
				String[] lgrades = s1.split(",");
				Map<Object, Object> gradial1223 = new HashMap<Object, Object>();
				System.out.println("length of the string" + satis.length);
				if(satis.length ==1) {
					gradial1223.put("satisfactory",
							satis[0] == null ? " " : satis[0]);
					gradial1223.put("satgradeletter",
							lgrades[0] == null ? " " : lgrades[0]);
				}
				if(satis.length ==2) {
					gradial1223.put("satisfactory",
							satis[0] == null ? " " : satis[0]);
					gradial1223.put("satgradeletter",
							lgrades[0] == null ? " " : lgrades[0]);
					
					gradial1223.put("satisfactory1",
							satis[1] == null ? " " : satis[1]);
					gradial1223.put("satgradeletter1",
							lgrades[1] == null ? " " : lgrades[1]);
				}
					dataList.add(gradial1223);

				String serverurl = super.commonHelper.getSettingValue("SERVER_IP");
				String reportPath = super.commonHelper.getSettingValue("DOCUMENT_PATH"); // "src/main/resources/";
				String image = super.commonHelper.getSettingValue("IMAGE_PATH");
			String image1 = super.commonHelper.getSettingValue("MOFPI_PATH");
				String image2 = super.commonHelper.getSettingValue("EMBLEM_PATH");
				
				String formula = "images/DAS_5641.JPG";
				
				String formula1 = "images/DAS_5636.jpg";
				

				logger.info(image);
				// Compile the Jasper report from .jrxml to .japser

				String path = "";
				if(request.getSemester() == 1 && request.getDegree()== 1&& satis.length==1) {
					path = resourceLoader.getResource("classpath:semesterReport5.jrxml").getURI().getPath();
				}
				else if( request.getSemester() == 3 || request.getSemester() == 5 ||request.getSemester() == 7)
				{
					 path = resourceLoader.getResource("classpath:semesterReport4.jrxml").getURI().getPath();
				}
				else if(request.getSemester() == 1 && request.getDegree()== 1){
				 path = resourceLoader.getResource("classpath:semesterReport3.jrxml").getURI().getPath();
				}
				else if(request.getDegree()== 2 && request.getSemester()==1) {
					 path = resourceLoader.getResource("classpath:semesterReport4.jrxml").getURI().getPath();
				}else
				{
					 path = resourceLoader.getResource("classpath:semesterReport2.jrxml").getURI().getPath();
				}
				JasperReport jasperReport = JasperCompileManager.compileReport(path);
				// Get your data source
				JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(dataList);
				// Add parameters
				Map<String, Object> parameters = new HashMap<>();

				int SGPA = super.commonHelper.roundOffInt(semesterreport.get(0).getExGradePointAv().intValue());
				System.out.println("??????????????????????" + SGPA);
				if (SGPA >= 5) {

					parameters.put("reportStatus", "Promoted");
				} else {

					parameters.put("reportStatus", "DePromoted");

				}
				parameters.put("logo", image);
				
				parameters.put("formula", formula);

				parameters.put("emblem", image1);
				parameters.put("photo", image2);
				parameters.put("exFirstName", semesterreport.get(0).getStudentadmission().getExName().toUpperCase());
				parameters.put("exRollNo", semesterreport.get(0).getExRollNo());
				parameters.put("enrollementNo", semesterreport.get(0).getStudentadmission().getExEnrollementNo());
				parameters.put("father", studentPersonal.get(0).getExFatherName().toUpperCase());
				parameters.put("mother", studentPersonal.get(0).getExMotherName().toUpperCase());

				parameters.put("degree", degree.get().getExName());
				parameters.put("programmes", Prog.get().getExName().toUpperCase());
				parameters.put("examAnnouncement", "NA");
				parameters.put("colleges", uid.get(0).getExDescription());
				parameters.put("programmeYear", programmeYear.get().getExName());
				parameters.put("semester", sem.get().getExDescription().toUpperCase());
				parameters.put("academicYear", academicYearid.get().getExIdentifier());
				parameters.put("university", university);
				parameters.put("dateofdeclaration", request.getDateOfDeclaration());
				parameters.put("totalCreditHour", "(" + theory + "+" + pract + ")");
				parameters.put("dept", "(" + dept.get().getExName() + ")");
				parameters.put("randnuber", semesterreport.get(0).getSerialNumber());

				// parameters.put("collegesaddress", collage.get().getExAddress());

				String folder = createFolder(academicYearid.get().getExYear(), collage.get().getExIdentifier(),
						"semesterReport");

				String fileName = "\\" + semesterreport.get(0).getExRollNo() + ".pdf";

				// Fill the report
				JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,
						jrBeanCollectionDataSource);

				// Export the report to a PDF file
				JasperExportManager.exportReportToPdfFile(jasperPrint, reportPath + folder + fileName);

				File filenew = new File(reportPath + folder + fileName);
				if (filenew.exists()) {
					filenew.setExecutable(true, false);
					filenew.setReadable(true, false);
					filenew.setWritable(true, false);
				}

				GradeReportLog logs = new GradeReportLog();

				if (request.getUser() == null || request.getUser().equals("")) {
					logs.setUser(null);
				} else {
					List<User> user = super.user.findByIdAndExIsDelete(request.getUser(), false);
					if (user.size() <= 0) {
						info.put("status", "2");
						info.put("message", "User id not present");
						return info;
					}

					logs.setUser(user.get(0));

				}
				Date date = new Date();
				//logs.setExamAnnouncement(result.get());
				logs.setAcademicYear(academicYearid.get());
				logs.setExUrl(folder + fileName.replace("\\", "/"));
				logs.setExCreateDate(date);
				logs.setColleges(collage.get());
				logs.setDegree(degree.get());
				logs.setProgrammes(Prog.get());
				logs.setSemester(sem.get());
				logs.setExReportType("SemesterReport");
				logs.setDepartment(dept.get());
				logs.setProgrammeYear(programmeYear.get());
				//logs.setSemester(result.get().getSemester());
				logs.setExReportCategory("PDFDownload");
				logs.setExIsActive(true);
				logs.setExIsDelete(false);
				super.GradeReportLog.save(logs);

				// info.put("gradeReport", dataList);
				info.put("status", "1");
				info.put("url", folder + fileName);
				info.put("message", "Report successfully generated");
				return info;

			} catch (Exception e) {
				e.printStackTrace();
				logger.error("Exception occured" + e);
				StringWriter errors = new StringWriter();
				e.printStackTrace(new PrintWriter(errors));
				logger.error(errors.toString());
				info.put("status", "0");
				info.put("message", "something went wrong");
				return info;
			}

		}


	
	@Override
	public Map<String, Object> generateFeeReceiptPdf(String orderid, Long user) {
		Map<String, Object> info = new LinkedHashMap<>();

		try {

			if (orderid == null || orderid.equals("")) {
				info.put("status", "2");
				info.put("message", "orderid is required");
				return info;
			}
			List<University> uid = super.university.findAllUnivesity();
			if (uid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "University not present");
				return info;
			}

			
			String pattern = "dd/MM/yyyy";
			DateFormat df = new SimpleDateFormat(pattern);
			Date today = Calendar.getInstance().getTime();        
			String todayAsString = df.format(today);
			System.out.println("Today is: " + todayAsString);
			
			String university = uid.get(0).getExName().toUpperCase();

			String[] myStringArray = { "Success", "Failed" , "success"};

			List<String> wordList = Arrays.asList(myStringArray);
			List<OrderTransaction> data = super.transactionRepository.findByOrderIdAndPaymentstatusIn(orderid,wordList);
			if (data.size() <= 0) {
				info.put("status", "2");
				info.put("message", "No records found.");
				return info;
			}
			List<Studentpersonal> sp = super.studentpersonal.findByStudentadmissionId(data.get(0).getStudentadmission().getId());
		
			
			if(sp.size()<=0)
			{
				info.put("status", "2");
				info.put("message", "No records found.");
				return info;
			}
			
		

			else {
				/*
				 * if(data.get(0).getExIsHostel() == true) { return
				 * generateHostelFeeReceiptPdf(orderid); }
				 */

				// regular fees pdf
				if (data.get(0).getRegistration().getId() == 1) {
					List dataList = new LinkedList();
				
				//	String value = data.get(0).getAcademicYear().getExYear();
					//String [] str =  value.split("-");
					//value = str[0]+"-"+gen();
				//	System.out.println("Niftem fee random"+value+gen());
					
					for (OrderTransaction e : data) {
						Map<Object, Object> list = new HashMap<Object, Object>();
						list.put("id", e.getId());
						if (e.getFeemaster() == null) {
							list.put("feesName", "Penalty");
							list.put("amount", e.getTxnAmount());
						} else {

							DecimalFormat df2 = new DecimalFormat("####0.00");
							Double attendance =( e.getTxnAmount() == null ? 0.00 :  e.getTxnAmount());
							String satt = df2.format(attendance);
							list.put("feesName", e.getFeemaster().getExFeeName());
							list.put("amount", attendance);
		
						}
						dataList.add(list);
					}

					String serverurl = super.commonHelper.getSettingValue("SERVER_IP");
					String reportPath = super.commonHelper.getSettingValue("DOCUMENT_PATH"); // "src/main/resources/";
					String image = super.commonHelper.getSettingValue("IMAGE_PATH");
					logger.info(image);

					// Compile the Jasper report from .jrxml to .japser

					String path = resourceLoader.getResource("classpath:Fee.jrxml").getURI().getPath();
					JasperReport jasperReport = JasperCompileManager.compileReport(path);

					JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(dataList);

					// Add parameters
					Map<String, Object> parameters = new HashMap<>();

					List<Studentpersonal> studentid = super.studentpersonal.checkExRollNo(data.get(0).getExRollNo(),
							true, false);
					if (studentid.size() <= 0) {
						info.put("status", "2");
						info.put("message", "Student not Present" + data.get(0).getExRollNo());
						return info;
					}
					parameters.put("logo", image);
					parameters.put("bankid", data.get(0).getBankRefNum());
					parameters.put("orderId", orderid);
					parameters.put("university", university);
					parameters.put("txnDate", data.get(0).getTxnDate());
					parameters.put("txnRefeNo", data.get(0).getMihpayId());
					parameters.put("studentId", data.get(0).getExRollNo());
					parameters.put("status", data.get(0).getPaymentstatus());
					parameters.put("Category", data.get(0).getStudentadmission().getCategory().getExName() == null ? "NA" : data.get(0).getStudentadmission().getCategory().getExName() );
					parameters.put("Batch", data.get(0).getStudentadmission().getBatch().getExIdentifier());
					parameters.put("Department", data.get(0).getStudentadmission().getDepartment().getExIdentifier());
					parameters.put("FatherName",sp.get(0).getExFatherName());
					parameters.put("DateofBirth",sp.get(0).getExDateOfBirth());
					parameters.put("paymentmode",data.get(0).getMode());
					parameters.put("Date",todayAsString);
					
					parameters.put("program", data.get(0).getProgrammes().getExName().toUpperCase());
					parameters.put("programyear", data.get(0).getProgrammeYear().getExName());
					parameters.put("semester", data.get(0).getSemester().getExName());

					parameters.put("fullname",
							studentid.size() <= 0 ? "NA" : studentid.get(0).getStudentadmission().getExName());

					String folder = createFolder(data.get(0).getAcademicYear().getExYear(),
							data.get(0).getDegree().getExName(), "FeeReceipt");

					// Fill the report

					JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,
							jrBeanCollectionDataSource);

					// Export the report to a PDF file
					JasperExportManager.exportReportToPdfFile(jasperPrint, reportPath + folder + "/FeeReceipt.pdf");

					File filenew = new File(reportPath + folder + "/FeeReceipt.pdf");
					if (filenew.exists()) {
						filenew.setExecutable(true, false);
						filenew.setReadable(true, false);
						filenew.setWritable(true, false);
					}

					String Description = folder + "/FeeReceipt.pdf";

					// info.put("gradeReport", dataList);
					info.put("status", "1");
					info.put("file", filenew);
					info.put("url", folder + "/FeeReceipt.pdf");
					info.put("message", "Report successfully generated");
					return info;
				}
				// supply,photocopy,revaluation
				else {
					List<Object[]> data1 = super.transactionRepository.listcourse(orderid, wordList);
					List dataList = new LinkedList();
					if (data1.size() <= 0) {
						info.put("status", "2");
						info.put("message", "No records found,,,,,,");
						return info;
					}

					for (Object[] e : data1) {
						Map<Object, Object> list = new HashMap<Object, Object>();
						list.put("id", e[0]);
						

						list.put("feesName", e[1]);
						list.put("amount", Double.parseDouble(e[2].toString()));
						list.put("courses", e[3]);
						list.put("coursescode", e[11]);

						dataList.add(list);
					}
					String serverurl = super.commonHelper.getSettingValue("SERVER_IP");
					String reportPath = super.commonHelper.getSettingValue("DOCUMENT_PATH"); // "src/main/resources/";
					String image = super.commonHelper.getSettingValue("IMAGE_PATH");
					logger.info(image);

					// Compile the Jasper report from .jrxml to .japser

					String path = resourceLoader.getResource("classpath:otherfeeReceipt.jrxml").getURI().getPath();
					JasperReport jasperReport = JasperCompileManager.compileReport(path);

					// JasperReport jasperReport = JasperCompileManager.compileReport(reportPath +
					// "\\gradeReport.jrxml");

					// Get your data source

					JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(dataList);

					// Add parameters
					Map<String, Object> parameters = new HashMap<>();

					List<Studentpersonal> studentid = super.studentpersonal.checkExRollNo(data.get(0).getExRollNo(),
							true, false);
					if (studentid.size() <= 0) {
						info.put("status", "2");
						info.put("message", "Student not Present" + data.get(0).getExRollNo());
						return info;
					}
					Date dates=new Date();
					parameters.put("logo", image);
					parameters.put("bankid", data.get(0).getBankRefNum());
					parameters.put("orderId", orderid);
					parameters.put("university", university);
					parameters.put("txnDate", data.get(0).getTxnDate());
					parameters.put("txnRefeNo", data.get(0).getMihpayId());
					parameters.put("studentId", data.get(0).getExRollNo());
					parameters.put("status", data.get(0).getPaymentstatus());
					parameters.put("program", data.get(0).getProgrammes().getExName());
					parameters.put("programyear", data.get(0).getProgrammeYear().getExName());
					parameters.put("semester", data.get(0).getSemester().getExName());
					parameters.put("fullname",
							studentid.size() <= 0 ? "NA" : studentid.get(0).getStudentadmission().getExName());

					String feesName = "\\" + data.get(0).getRegistration().getExName() + "FeeRecepit.pdf";

					String folder = createFolder(data.get(0).getAcademicYear().getExYear(),
							data.get(0).getDegree().getExName(), "FeeReceipt");

					// Fill the report
					JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,
							jrBeanCollectionDataSource);

					// Export the report to a PDF file
					JasperExportManager.exportReportToPdfFile(jasperPrint, reportPath + folder + "/FeeReceipt.pdf");

					File filenew = new File(reportPath + folder + "/FeeReceipt.pdf");

					
					
					if (filenew.exists()) {
						filenew.setExecutable(true, false);
						filenew.setReadable(true, false);
						filenew.setWritable(true, false);
					}

					// info.put("gradeReport", dataList);
					info.put("status", "1");
					info.put("url", folder + "/FeeReceipt.pdf");
					info.put("message", "Report successfully generated");
					return info;

				}

			}

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}
	}

	public int gen() {
	    Random r = new Random( System.currentTimeMillis() );
	    return 1000 + r.nextInt(10000);
	}
	
	
	@Override
	public Map<String, Object> generateMigGradeReportPdf(GradeReportRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();

		try {
			Optional<Colleges> collage = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!collage.isPresent()) {
				info.put("status", "2");
				info.put("message", "College Id not Present");
				return info;
			}
			Optional<AcademicYear> academicYearid = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getAcademicYear());
			if (!academicYearid.isPresent()) {
				info.put("status", "2");
				info.put("message", "AcademicYear id not present");
				return info;
			}
			Optional<Programmes> Prog = super.programme.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Prog.isPresent()) {
				info.put("status", "2");
				info.put("message", "Programmes not present");
				return info;
			}
			Optional<Courses> courses = super.courses.findByIdAndExIsDeleteAndExIsActive(request.getCourses(), false,
					true);
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not  present");
				return info;

			}
			Optional<Department> dept = super.department.findByIdAndExIsDeleteAndExIsActive(request.getDepartment(),
					false, true);
			if (!dept.isPresent()) {
				info.put("status", "2");
				info.put("message", "department not  present");
				return info;

			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<ProgrammeYear> programmeYear = super.programmeYear
					.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
			if (!programmeYear.isPresent() || !programmeYear.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Semster> semester = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!semester.isPresent()) {
				info.put("status", "2");
				info.put("message", "semester not present");
				return info;
			}

			List<RegistrationType> registration = super.registrationType
					.findByIdAndExIsDelete(request.getRegistrationType(), false);
			if (registration.size() <= 0) {
				info.put("status", "2");
				info.put("message", "RegistrationType id not present");
				return info;
			}

			List<University> uid = super.university.findAllUnivesity();
			if (uid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "University not present");
				return info;
			}
			String university = uid.get(0).getExName();
			Section Sectionobj = null;
			Long Section = null;
			String Sectionsname = "";
			if (request.getSectionId() == null || request.getSectionId().equals("")) {
				Section = null;
				Sectionobj = null;
			} else {
				Optional<Section> Sections = super.section.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getSectionId());
				if (!Sections.isPresent()) {
					info.put("status", "2");
					info.put("message", "Section id not present");
					return info;
				}
				Sectionobj = Sections.get();
				Section = Sections.get().getId();
				Sectionsname = Sections.get().getExName();
			}

			List dataList = new LinkedList();

			ArrayList<GradeReport> semreg = super.gradeReport.getMIGGradeReport(request.getColleges(),
					request.getCourses(), request.getProgrammes(), request.getSemester(), request.getDegree(),
					request.getAcademicYear(), request.getDepartment(), request.getRegistrationType(),
					request.getProgrammeYear(), Section);
			if (semreg.size() <= 0) {
				info.put("status", "2");
				info.put("message", "No records found");
				return info;
			}

			List<TeacherCourseMapping> teacher = super.teacherCourseMapping
					.findByCoursesIdAndDepartmentIdAndAcademicYearIdAndCollegesIdAndDegreeIdAndProgrammeYearIdAndSemsterIdAndSectionId(
							request.getCourses(), request.getDepartment(), request.getAcademicYear(),
							request.getColleges(), request.getDegree(), courses.get().getProgrammeYear().getId(),
							request.getSemester(), Section);
			List<String> data = new ArrayList<String>();
			String teachername = "";
			for (int j = 0; j < teacher.size(); j++) {
				teachername = teacher.get(j).getStaffpersonal().getExName();
				logger.info(">>>>>>>>>teachername>>>>>>" + teachername);

				String[] collageid = teachername.split("/");
				for (int i = 0; i < collageid.length; i++) {
					data.add(collageid[i]);
				}
			}
			double internaltotal = 0.0, practicaltotal = 0.0;

			for (GradeReport e : semreg) {
				Map<Object, Object> omrlist = new HashMap<Object, Object>();
				if (e.getCourses().getCoursesType().size() == 1) {

					if (e.getCourses().getCoursesType().get(0).getId() == 1) {
						//=============
						
						internaltotal = ((e.getExQuizMarks() ==null? 0.0:e.getExQuizMarks()) +(e.getExAssignmentMarks() == null ?0.0 :e.getExAssignmentMarks()) + (e.getExAttendenceMarks()==null ?0.0 : e.getExAttendenceMarks()));
						//==========
						omrlist.put("id", e.getId());
						omrlist.put("exEndTermMarks", super.commonHelper.doubleprefixdigit(e.getExEndTermMarks()));
						omrlist.put("exMidtermMarks", super.commonHelper.doubleprefixdigit(e.getExMidTermMarks()));
						omrlist.put("internalmarks", super.commonHelper.doubleprefixdigit(internaltotal));
						omrlist.put("practicaltotal", "NA");

					}
					if (e.getCourses().getCoursesType().get(0).getId() == 2) {
						practicaltotal = e.getExPracticalInternalMarks() + e.getExPracticalExternalMarks();
						omrlist.put("practicaltotal", super.commonHelper.doubleprefixdigit(practicaltotal));
						omrlist.put("exEndTermMarks", "NA");
						omrlist.put("exMidtermMarks", "NA");
						omrlist.put("internalmarks", "NA");
					}
				}

				if (e.getCourses().getCoursesType().size() == 2) {

					practicaltotal = e.getExPracticalInternalMarks() + e.getExPracticalExternalMarks();
					internaltotal = (e.getExQuizMarks() + e.getExAssignmentMarks() + e.getExAttendenceMarks());

					omrlist.put("exEndTermMarks", super.commonHelper.doubleprefixdigit(e.getExEndTermMarks()));
					omrlist.put("exMidtermMarks", super.commonHelper.doubleprefixdigit(e.getExMidTermMarks()));
					omrlist.put("internalmarks", super.commonHelper.doubleprefixdigit(internaltotal));
					omrlist.put("practicaltotal", super.commonHelper.doubleprefixdigit(practicaltotal));

				}

				omrlist.put("exGrandTotal", super.commonHelper.doubleprefixdigit(e.getExGrandTotal()));
				omrlist.put("lettergrade", e.getExLetterGrades());
				logger.info("bbbbssssssssssss"+super.commonHelper.getwithoutPoint(e.getExGradePoint()));
				omrlist.put("exGradePoint",super.commonHelper.getwithoutPoint(e.getExGradePoint()));

				// if(e.getCourses().getExIsPractical()==true) {
				// omrlist.put("exGradePoint", e.getExGradePoint()>=5
				// ?CommonHelper.doubledigit(e.getExGradePoint()):"Fail");
				// }
				// else {
				// omrlist.put("exGradePoint", e.getExGradePoint());
				// }
				omrlist.put("exFirstName", e.getStudentadmission().getExName());
				omrlist.put("exStudentId", e.getExRollNo());
				omrlist.put("exCoursesCode", e.getExCoursesCode());
				omrlist.put("college", e.getColleges().getExName());
				omrlist.put("dept", e.getDepartment().getExName());
				omrlist.put("collegeid", e.getColleges().getId());
				omrlist.put("programeid", e.getProgrammes().getId());
				omrlist.put("semester", e.getSemester().getExName());
				omrlist.put("examannouncment", null);
				omrlist.put("academicyear", e.getAcademicYear().getExYear());
				omrlist.put("exCourseName", e.getExCoursesName());
				omrlist.put("exCourseid", e.getCourses().getId());
				omrlist.put("excerdithour", e.getCourses().getCreditHours().getExCreditHourTitle());
				omrlist.put("programe", e.getProgrammes().getExName());
				omrlist.put("programeYear", e.getCourses().getProgrammeYear().getExName());
				omrlist.put("exRemark", e.getExRemark());
				omrlist.put("university", university);

				omrlist.put("regtype", registration.get(0).getId() == 1 ? "" : registration.get(0).getExName());
				omrlist.put("depatment", dept.get());
				omrlist.put("teacherName", teachername);
				omrlist.put("section", Section == null ? null : Sectionsname);
				omrlist.put("dateOfDeclaration", request.getDateOfDeclaration());

				// String teacherslist =data.toString();
				// omrlist.put("teacherName",teacherslist.replaceAll("\\[",
				// "").replaceAll("\\]",""));
				// logger.info(">>>>>>>>>teacherslist>>>>>>"+teacherslist);

				dataList.add(omrlist);
			}

			String serverurl = super.commonHelper.getSettingValue("SERVER_IP");
			String reportPath = super.commonHelper.getSettingValue("DOCUMENT_PATH"); // "src/main/resources/";
			String image = super.commonHelper.getSettingValue("IMAGE_PATH");
			logger.info(image);
			// String center =super.commonHelper.getSettingValue("EXAM_CENTER");

			// Compile the Jasper report from .jrxml to .japser

			String path = resourceLoader.getResource("classpath:gradeReport.jrxml").getURI().getPath();
			JasperReport jasperReport = JasperCompileManager.compileReport(path);
			JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(dataList);

			// Add parameters
			Map<String, Object> parameters = new HashMap<>();

			// parameters.put("center",center);

			parameters.put("createdBy", "Win.org");
			parameters.put("university", university);
			parameters.put("logo", image);

			String feesName = "\\" + courses.get().getExCoursesCode() + " " + "("
					+ courses.get().getCreditHours().getExCreditHourTitle() + ")" + ".pdf";

			String folder = createFolder(academicYearid.get().getExYear(), collage.get().getExIdentifier(),
					"gradeReport");

			// Fill the report
			JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,
					jrBeanCollectionDataSource);

			// Export the report to a PDF file
			JasperExportManager.exportReportToPdfFile(jasperPrint, reportPath + folder + feesName);

			File filenew = new File(reportPath + folder + feesName);
			if (filenew.exists()) {
				filenew.setExecutable(true, false);
				filenew.setReadable(true, false);
				filenew.setWritable(true, false);
			}

			GradeReportLog logs = new GradeReportLog();

			if (request.getUser() == null || request.getUser().equals("")) {
				logs.setUser(null);
			} else {
				List<User> user = super.user.findByIdAndExIsDelete(request.getUser(), false);
				if (user.size() <= 0) {
					info.put("status", "2");
					info.put("message", "User id not present");
					return info;
				}

				logs.setUser(user.get(0));

			}
			Date date = new Date();
			// logs.setExamAnnouncement(result.get());
			logs.setAcademicYear(courses.get().getAcademicYear());
			logs.setExUrl(folder + feesName.replace("\\", "/"));
			logs.setExCreateDate(date);
			logs.setColleges(collage.get());
			logs.setDegree(degree.get());
			logs.setCourses(courses.get());
			logs.setProgrammes(Prog.get());
			logs.setRegistrationType(registration.get(0));
			logs.setExReportType("GradeReport");
			logs.setDepartment(dept.get());
			logs.setProgrammeYear(programmeYear.get());
			logs.setSemester(semester.get());
			logs.setExReportCategory("PDFDownload");
			logs.setExIsActive(true);
			logs.setExIsDelete(false);
			logs.setSection(Sectionobj);
			super.GradeReportLog.save(logs);

			info.put("status", "1");
			info.put("url", folder + feesName);
			info.put("message", "Report successfully generated");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> generateMigSemesterReportPdf(GradeReportRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List dataList = new LinkedList();
			logger.info("getSemesterReports Report");

			Optional<Colleges> collage = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!collage.isPresent()) {
				info.put("status", "2");
				info.put("message", "College Id not Present");
				return info;
			}
			Optional<AcademicYear> academicYearid = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getAcademicYear());
			if (!academicYearid.isPresent()) {
				info.put("status", "2");
				info.put("message", "AcademicYear id not present");
				return info;
			}
			Optional<Programmes> Prog = super.programme.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Prog.isPresent()) {
				info.put("status", "2");
				info.put("message", "Programmes not present");
				return info;
			}

			Optional<Department> dept = super.department.findByIdAndExIsDeleteAndExIsActive(request.getDepartment(),
					false, true);
			if (!dept.isPresent()) {
				info.put("status", "2");
				info.put("message", "department not  present");
				return info;

			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}

			Optional<Stream> stream = super.stream.findByIdAndExIsDeleteAndExIsActive(request.getStream(), false, true);
			if (!stream.isPresent()) {
				info.put("status", "2");
				info.put("message", "stream not  present");
				return info;
			}
			Optional<ProgrammeYear> programmeYear = super.programmeYear
					.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
			if (!programmeYear.isPresent()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!sem.isPresent()) {
				info.put("status", "2");
				info.put("message", "Semster not present");
				return info;
			}

			List<University> uid = super.university.findAllUnivesity();
			if (uid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "University not present");
				return info;
			}
			String university = uid.get(0).getExName();

			List<Object> regtype = new ArrayList<Object>();
			Long retypefro = (long) 1;
			regtype.add(1L);
			regtype.add(2L);

			List<Studentpersonal> studentPersonal = super.studentpersonal.checkExRollNo(request.getExRollNo(), true,
					false);
			if (studentPersonal.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Student not Present");
				return info;
			}
			int count = 0;
			int theory = 0;
			int pract = 0;
			List<GradeReport> gradecourse = super.gradeReport
					.findByCollegesIdAndProgrammesIdAndDegreeIdAndSemesterIdAndExRollNoAndProgrammeYearIdAndExIsActiveAndExIsDelete(
							request.getColleges(), request.getProgrammes(), request.getDegree(), request.getSemester(),
							request.getExRollNo(), request.getProgrammeYear(), true, false);
			for (GradeReport grade : gradecourse) {
				if (grade.getCourses().getExIsSatisfactory() == false) {

					Map<Object, Object> gradial = new HashMap<Object, Object>();

					List<GradeReport> gradelist = super.gradeReport
							.findByCollegesIdAndProgrammesIdAndDegreeIdAndSemesterIdAndExRollNoAndProgrammeYearIdAndRegistrationTypeIdInAndExIsActiveAndExIsDeleteAndCoursesId(
									request.getColleges(), request.getProgrammes(), request.getDegree(),
									request.getSemester(), request.getExRollNo(), request.getProgrammeYear(), regtype,
									true, false, grade.getCourses().getId());

					if (gradelist.size() <= 0) {
						info.put("status", "2");
						info.put("message", "grade report not created for ::" + grade.getCourses().getExName());
						return info;

					} else {
						String sply = "";
						if (grade.getRegistrationType().getId() == 2L) {
							sply = "*";
						}

						if (gradelist.get(0).getExRemark() != null
								&& gradelist.get(0).getExRemark().equalsIgnoreCase("Pass")) {
							gradial.put("exGradePoint", sply + gradelist.get(0).getExLetterGrades());
						} else {
							gradial.put("exGradePoint", "F");
						}
						// gradial.put("exGradePoint", gradelist.get(0).getExGradePoint());
						gradial.put("exCoursesCode", grade.getCourses().getExCoursesCode());
						gradial.put("exCoursesName", grade.getCourses().getExName());
						gradial.put("exCreditHour",
								"(" + grade.getCourses().getCreditHours().getExCreditHourTitle() + ")");
						theory = theory + (int) (grade.getCourses().getCreditHours().getExCreditHourTutorials().intValue());
							pract = pract
								+ (int) (grade.getCourses().getCreditHours().getExCreditHourPractical().intValue());

						dataList.add(gradial);
						count++;
					}
				}
			}

			// check from semester progress report
			List<SemesterProgressReport> semesterreport = super.semesterProgressReport
					.findByCollegesIdAndDegreeIdAndProgrammesIdAndSemesterIdAndExRollNo(request.getColleges(),
							request.getDegree(), request.getProgrammes(), request.getSemester(), request.getExRollNo());

			if (semesterreport.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Semester Progress Report not genrated");
				return info;
			}
			Map<Object, Object> results = new HashMap<Object, Object>();
			results.put("exGradePointAv", super.commonHelper.doubledigit(semesterreport.get(0).getExGradePointAv()));

			if (request.getSemester() == 1) {
				results.put("exCamuGradePointAv", "NA");

			} else {
				results.put("exCamuGradePointAv",
						super.commonHelper.doubledigit(semesterreport.get(0).getExCamuGradePointAv()));
			}
			dataList.add(results);

			List<GradeReport> gradecourses = super.gradeReport
					.findByCollegesIdAndProgrammesIdAndDegreeIdAndSemesterIdAndExRollNoAndProgrammeYearIdAndExIsActiveAndExIsDelete(
							request.getColleges(), request.getProgrammes(), request.getDegree(), request.getSemester(),
							request.getExRollNo(), request.getProgrammeYear(), true, false);
			for (GradeReport grade : gradecourses) {
				if (grade.getCourses().getExIsSatisfactory() == true) {
					Map<Object, Object> gradial122 = new HashMap<Object, Object>();

					List<GradeReport> gradelist = super.gradeReport
							.findByCollegesIdAndProgrammesIdAndDegreeIdAndSemesterIdAndExRollNoAndProgrammeYearIdAndRegistrationTypeIdInAndExIsActiveAndExIsDeleteAndCoursesId(
									request.getColleges(), request.getProgrammes(), request.getDegree(),
									request.getSemester(), request.getExRollNo(), request.getProgrammeYear(), regtype,
									true, false, grade.getCourses().getId());

					if (gradelist.size() <= 0) {
						info.put("status", "2");
						info.put("message", "grade report not created for ::" + grade.getCourses().getExName());
						return info;

					} else {

						gradial122.put("satacourse",
								grade.getCourses().getExCoursesCode() + "(" + grade.getCourses().getExName() + ")");
						gradial122.put("satgradeletter", gradelist.get(0).getExLetterGrades());

						dataList.add(gradial122);

					}
				}

			}

			System.out.println(">>>>>>>>>>>>>>>dataList>>>>>>>>" + dataList);

			String serverurl = super.commonHelper.getSettingValue("SERVER_IP");
			String reportPath = super.commonHelper.getSettingValue("DOCUMENT_PATH"); // "src/main/resources/";
			String image = super.commonHelper.getSettingValue("IMAGE_PATH");
	//		String mofpi = super.commonHelper.getSettingValue("MOFPI_IMAGE");
		
			String image1 = super.commonHelper.getSettingValue("MOFPI_PATH");
				String image2 = super.commonHelper.getSettingValue("EMBLEM_PATH");
			logger.info(image2);
			logger.info(image1);
			// Compile the Jasper report from .jrxml to .japser

			String path = resourceLoader.getResource("classpath:semesterReport.jrxml").getURI().getPath();
			JasperReport jasperReport = JasperCompileManager.compileReport(path);
			// Get your data source
			JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(dataList);
			// String mofpi ="https://kj1bcdn.b-cdn.net/media/27623/mofpi2.png?format=webp";
		//	String symbol = "https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRQxqWdvAyd99Sm245IuJzQM6KM8XN607ePDg&usqp=CAU";

			// Add parameters
			Map<String, Object> parameters = new HashMap<>();

			int SGPA = super.commonHelper.roundOffInt(semesterreport.get(0).getExGradePointAv().intValue());
			System.out.println("??????????????????????" + SGPA);
			if (SGPA >= 5) {

				parameters.put("reportStatus", "Promoted");
			} else {

				parameters.put("reportStatus", "DePromoted");

			}
			parameters.put("logo", image);
			
			parameters.put("emblem", image1);
				parameters.put("photo", image2);
			parameters.put("exFirstName", semesterreport.get(0).getStudentadmission().getExName().toUpperCase());
			parameters.put("exRollNo", semesterreport.get(0).getExRollNo());
			parameters.put("enrollementNo", semesterreport.get(0).getStudentadmission().getExEnrollementNo());
			parameters.put("father", studentPersonal.get(0).getExFatherName().toUpperCase());
			parameters.put("mother", studentPersonal.get(0).getExMotherName().toUpperCase());
			parameters.put("mother", studentPersonal.get(0).getExMotherName());

			parameters.put("degree", degree.get().getExName());
			parameters.put("programmes", Prog.get().getExName().toUpperCase());
			parameters.put("examAnnouncement", null);
			parameters.put("colleges", uid.get(0).getExDescription());
			parameters.put("collegesaddress", collage.get().getExDescription() + collage.get().getExAddress());
			parameters.put("programmeYear", programmeYear.get().getExName());
			parameters.put("semester", sem.get().getExDescription().toUpperCase());
			parameters.put("academicYear", academicYearid.get().getExIdentifier());
			parameters.put("university", university);
			parameters.put("dateofdeclaration", semesterreport.get(0).getDeclaredOn());
			parameters.put("randnuber", semesterreport.get(0).getSerialNumber());
			parameters.put("totalCreditHour", "(" + theory + "+" + pract + ")");
			parameters.put("dept", "(" + dept.get().getExName() + ")");

			String folder = createFolder(academicYearid.get().getExYear(), collage.get().getExIdentifier(),
					"semesterReport");

			String fileName = "\\" + semesterreport.get(0).getExRollNo() + ".pdf";

			// Fill the report
			JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,
					jrBeanCollectionDataSource);

			// Export the report to a PDF file
			JasperExportManager.exportReportToPdfFile(jasperPrint, reportPath + folder + fileName);

			File filenew = new File(reportPath + folder + fileName);
			if (filenew.exists()) {
				filenew.setExecutable(true, false);
				filenew.setReadable(true, false);
				filenew.setWritable(true, false);
			}

			GradeReportLog logs = new GradeReportLog();

			if (request.getUser() == null || request.getUser().equals("")) {
				logs.setUser(null);
			} else {
				List<User> user = super.user.findByIdAndExIsDelete(request.getUser(), false);
				if (user.size() <= 0) {
					info.put("status", "2");
					info.put("message", "User id not present");
					return info;
				}

				logs.setUser(user.get(0));

			}
			Date date = new Date();
			logs.setExamAnnouncement(null);
			logs.setAcademicYear(academicYearid.get());
			logs.setExUrl(folder + fileName.replace("\\", "/"));
			logs.setExCreateDate(date);
			logs.setColleges(collage.get());
			logs.setDegree(degree.get());
			logs.setProgrammes(Prog.get());
			logs.setSemester(sem.get());
			logs.setExReportType("SemesterReport");
			logs.setDepartment(dept.get());
			logs.setProgrammeYear(programmeYear.get());
			logs.setExReportCategory("PDFDownload");
			logs.setExIsActive(true);
			logs.setExIsDelete(false);
			super.GradeReportLog.save(logs);

			// info.put("gradeReport", dataList);
			info.put("status", "1");
			info.put("url", folder + fileName);
			info.put("message", "Report successfully generated");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}

	}

	public static String getRandomNumberString() {
		// It will generate 6 digit random Number.
		// from 0 to 999999
		Random rnd = new Random();
		int number = rnd.nextInt(999999);

		// this will convert any number sequence into 6 character.
		return String.format("%06d", number);
	}

	@Override
	public Map<String, Object> generateKeyAnserPdf(QuestionpaperRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			logger.info("Inside keyAnswer docx");

			List<Object> datalist = new ArrayList<Object>();

			if (request.getDegree() == null || request.getDegree().equals("")) {
				info.put("status", "2");
				info.put("message", "Degree  is required");
				return info;
			}
			if (request.getExamAnnouncement() == null || request.getExamAnnouncement().equals("")) {
				info.put("status", "2");
				info.put("message", "ExamAnnouncement is required");
				return info;
			}
			if (request.getCourses() == null || request.getCourses().equals("")) {
				info.put("status", "2");
				info.put("message", "Courses is required");
				return info;
			}

			if (request.getAcademicYear() == null || request.getAcademicYear().equals("")) {
				info.put("status", "2");
				info.put("message", "AcademicYear is required");
				return info;
			}

			Optional<AcademicYear> academicYearid = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getAcademicYear());
			if (!academicYearid.isPresent()) {
				info.put("status", "2");
				info.put("message", "AcademicYear id not present");
				return info;
			}
			Optional<Programmes> Prog = super.programme.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Prog.isPresent()) {
				info.put("status", "2");
				info.put("message", "Programmes not present");
				return info;
			}
			Optional<Courses> courses = super.courses.findByIdAndExIsDeleteAndExIsActiveAndAcademicYearId(
					request.getCourses(), false, true, request.getAcademicYear());
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not  present");
				return info;

			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<Department> departments = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!departments.isPresent()) {
				info.put("status", "2");
				info.put("message", "department not present");
				return info;
			}
			Optional<ExamAnnouncement> examann = super.examAnnouncement
					.findByIdAndExIsDeleteAndExIsActive(request.getExamAnnouncement(), false, true);
			if (!examann.isPresent()) {
				info.put("status", "2");
				info.put("message", "ExamAnnouncement id not present");
				return info;
			}

			List<University> uid = super.university.findAllUnivesity();
			if (uid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "University not present");
				return info;
			}
			Optional<RegistrationType> rtype = super.registrationType.findByExIsDeleteAndExIsActiveAndId(false, true,
					1L);
			if (!rtype.isPresent()) {
				info.put("status", "2");
				info.put("message", "Regular Registration Type not present");
				return info;
			}

			Optional<ExamTimeTable> ExamTimeTable = super.examtimetable
					.findByExIsDeleteAndExIsActiveAndCoursesIdAndExamAnnouncementIdAndAcademicYearIdAndRegistrationId(
							false, true, request.getCourses(), request.getExamAnnouncement(), request.getAcademicYear(),
							rtype.get().getId());
			if (!ExamTimeTable.isPresent()) {
				info.put("status", "2");
				info.put("message", "ExamTimeTable not present ");
				return info;
			}
			String university = uid.get(0).getExName();

			List<QuestionPaper> patterns = super.QuestionPaper
					.findByExIsDeleteAndExIsActiveAndAcademicYearIdAndCoursesIdAndDegreeIdAndExamAnnouncementId(false,
							true, request.getAcademicYear(), request.getCourses(), request.getDegree(),
							request.getExamAnnouncement());
			if (patterns.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Questionpaper not present ");
				return info;
			}

			List<QuestionPaper> Questionpapercheck = super.QuestionPaper
					.findByExIsDeleteAndExIsActiveAndAcademicYearIdAndCoursesIdAndDegreeIdAndExamAnnouncementIdAndExtype(
							false, true, request.getAcademicYear(), request.getCourses(), request.getDegree(),
							request.getExamAnnouncement(), "1");
			if (Questionpapercheck.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Questionpaper not present");
				return info;
			}
			Map<String, Object> parameters = new HashMap<>();

			for (QuestionPaper Q : Questionpapercheck) {
				Map<Object, Object> data = new HashMap<Object, Object>();
				data.put("originalqno", Q.getExQuestionNum());
				data.put(Q.getExversion(), Q.getExversion());
				data.put("key1", Q.getExkeyAnswer());
				datalist.add(data);
				System.out.println("........W.............." + Q.getExQuestionNum());

				List<QuestionPaperVersion> question = super.QuestionPaperVersion
						.findByAcademicYearIdAndCoursesIdAndDegreeIdAndExamAnnouncementIdAndExQuestionNumAndExType(
								request.getAcademicYear(), request.getCourses(), request.getDegree(),
								request.getExamAnnouncement(), Q.getExQuestionNum(), "1");
				System.out.println("......................" + question.size());
				if (question.size() <= 0) {
					info.put("status", "2");
					info.put("message", "versions not present");
					return info;

				}
				parameters.put("version1", question.get(0).getExVersion());
				parameters.put("version2", question.get(1).getExVersion());

				for (int i = 0; i <= question.size(); i++) {
					if (i == 0) {
						System.out.println("...............question.get(0).getVersion()......."
								+ question.get(0).getExVersion() + i);
						Map<Object, Object> data1 = new HashMap<Object, Object>();
						data1.put("num", Q.getExQuestionNum());

						// parameters.put("version1",question.get(0).getVersion());
						data1.put("key2", question.get(0).getQuestionPaper().getExkeyAnswer());
						datalist.add(data1);
					}
					if (i == 1) {
						Map<Object, Object> data1 = new HashMap<Object, Object>();
						data1.put("num", Q.getExQuestionNum());
						// parameters.put("version2",question.get(1).getVersion());
						data1.put("key3", question.get(1).getQuestionPaper().getExkeyAnswer());
						datalist.add(data1);
					}

				}

			}

			String serverurl = super.commonHelper.getSettingValue("SERVER_IP");
			String reportPath = super.commonHelper.getSettingValue("DOCUMENT_PATH"); // "src/main/resources/";
			String image = super.commonHelper.getSettingValue("IMAGE_PATH");
			logger.info(image);

			java.sql.Connection conn = jdbcTemplate.getDataSource().getConnection();

			if (conn == null) {
				info.put("status", "2");
				info.put("message", "Database not connected");
				return info;
			}

			String path = resourceLoader.getResource("classpath:keyAnswer.jrxml").getURI().getPath();
			JasperReport jasperReport = JasperCompileManager.compileReport(path);

			// Add parameters
			// Map<String, Object> parameters = new HashMap<>();
			parameters.put("logo", image);
			parameters.put("course", courses.get().getExName());
			parameters.put("academicYear", academicYearid.get().getExYear());
			parameters.put("university", uid.get(0).getExName());
			parameters.put("credithour", courses.get().getCreditHours().getExCreditHourTitle());
			parameters.put("coursecode", courses.get().getExCoursesCode());
			parameters.put("examanouncment", examann.get().getExName());
			parameters.put("version", request.getExVersion());
			parameters.put("examdate", ExamTimeTable.get().getExStartDate());
			parameters.put("sem", ExamTimeTable.get().getSemester().getExName() + " SEMESTER");
			parameters.put("acdemic", ExamTimeTable.get().getAcademicYear().getExYear());
			parameters.put("acdemicid", request.getAcademicYear());
			parameters.put("courseid", request.getCourses());
			parameters.put("examid", request.getExamAnnouncement());
			parameters.put("degreeid", request.getDegree());

			// String folder =
			// createFolder(uid.get().getExIdentifier(),academicYearid.get().getExYear(),
			// "timetable");
			String folder = createFolder(academicYearid.get().getExYear(), "Question Papers", "keyAnswer");

			// Fill the report
			JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters, conn);

			// Export the report to a docx file
			Exporter exporter = new JRDocxExporter();
			exporter.setExporterInput(new SimpleExporterInput(jasperPrint));

			String filename = "\\" + courses.get().getExCoursesCode() + " " + "("
					+ courses.get().getCreditHours().getExCreditHourTitle() + ")" + ".pdf";

			JasperExportManager.exportReportToPdfFile(jasperPrint, reportPath + folder + filename);

			File filenew = new File(reportPath + folder + filename);
			if (filenew.exists()) {
				filenew.setExecutable(true, false);
				filenew.setReadable(true, false);
				filenew.setWritable(true, false);
			}
			QuestionPaperLog logs = new QuestionPaperLog();

			if (request.getUser() == null || request.getUser().equals("")) {
				logs.setUser(null);
			} else {
				List<User> user = super.user.findByIdAndExIsDelete(request.getUser(), false);
				if (user.size() <= 0) {
					info.put("status", "2");
					info.put("message", "User id not present");
					return info;
				}

				logs.setUser(user.get(0));

			}
			Date date = new Date();
			logs.setExUrl(folder + filename.replace("\\", "/"));
			logs.setAcademicYear(academicYearid.get());
			logs.setCourses(courses.get());
			logs.setDegree(degree.get());
			logs.setExamAnnouncement(examann.get());
			logs.setExCreateDate(date);
			logs.setExIsActive(true);
			logs.setExIsDelete(false);
			logs.setExFileName(filename);
			logs.setExVersion(request.getExVersion());
			logs.setDepartment(departments.get());
			logs.setProgrammes(examann.get().getProgrammes());
			logs.setExQuestionType(Questionpapercheck.get(0).getQuestionPaperType().getExQpType());

			super.questionPaperLog.save(logs);

			info.put("status", "1");
			info.put("url", folder + filename);
			info.put("message", "Report successfully generated");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> generateHallTicketPdf(SemesterEligibility request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Optional<Colleges> Colleges = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),
					false, true);
			if (!Colleges.isPresent() || !Colleges.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}

			Optional<Programmes> Programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Programmes.isPresent() || !Programmes.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}

			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department not present");
				return info;
			}

			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent() || !academic.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}

			Optional<ProgrammeYear> programmeYear = super.programmeYear
					.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
			if (!programmeYear.isPresent() || !programmeYear.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!sem.isPresent() || !sem.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Semster not present");
				return info;
			}

			List<University> uid = super.university.findAllUnivesity();
			if (uid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "University not present");
				return info;
			}

			String university = uid.get(0).getExName();

			List dataList = new LinkedList();
			Map<String, Object> parameters = new HashMap<>();

			List<ExamTimeTable> examlist = super.examtimetable
					.findByExIsDeleteAndAcademicYearIdAndProgrammesIdAndExamAnnouncementIdAndExExamTypeAndDegreeIdAndDepartmentId(
							false, request.getAcademicYear(), request.getProgrammes(), request.getExamAnnouncement(),
							1L, request.getDegree() , request.getDepartment());
			if (examlist.size() <= 0) {
				info.put("status", "2");
				info.put("message", "EndTerm TimeTable  not found");
				return info;
			}
			List<SemesterRegistration> list = super.semesterRegistration
					.findByExIsDeleteAndExIsActiveAndProgrammesIdAndCollegesIdAndDegreeIdAndAcademicYearIdAndSemesterIdAndDepartmentIdAndProgrammeYearIdAndExIsLibraryApproveAndExIsAccountsApproveAndExIsComputerlabApproveAndExIsDeanApproveAndExIsExaminationApproveAndExIsItDepartmentApproveAndExIsMentorApprove(
							false, true, request.getProgrammes(), request.getColleges(), request.getDegree(),
							request.getAcademicYear(), request.getSemester(), request.getDepartment(),
							request.getProgrammeYear(), true, true, true, true, true, true, true);

			if (list.size() <= 0) {
				info.put("status", "2");
				info.put("message", "None of the student Eligible for hall ticket");
				return info;
			}
			int count = 0;
			for (SemesterRegistration o : list) {
				List<Studentpersonal> student = super.studentpersonal
						.checkExRollNo(o.getStudentadmission().getExRollNo(), true, false);
				if (student.size() <= 0) {
					info.put("status", "2");
					info.put("message", "Student not Present" + o.getStudentadmission().getExRollNo());
					return info;
				}
				Map<Object, Object> namedata = new HashMap<Object, Object>();
				namedata.put("exStudentId", o.getStudentadmission().getExRollNo());
				namedata.put("exEnroll", o.getStudentadmission().getExEnrollementNo());
				namedata.put("father", student.size() <= 0 ? "NA" : student.get(0).getExFatherName().toUpperCase());
				namedata.put("mother", student.size() <= 0 ? "NA" : student.get(0).getExMotherName().toUpperCase());
				namedata.put("exFirstName", student.size() <= 0 ? "NA" : o.getStudentadmission().getExName());
				namedata.put("mobile", student.size() <= 0 ? "NA" : student.get(0).getExContactDetails());
				namedata.put("email", student.size() <= 0 ? "NA" : student.get(0).getExEmailId());
				namedata.put("gender", student.size() <= 0 ? "NA" : student.get(0).getExGender());
				dataList.add(namedata);
	
				List<CoursesRegistration> reco = super.coursesRegistration
						.findByStudentadmissionIdAndAcademicYearIdAndExIsActiveAndExIsDelete(
								o.getStudentadmission().getId(), request.getAcademicYear(), true, false);
				if (reco.size() <= 0) {
					info.put("status", "2");
					info.put("message", "Student not registra for any courses");
					return info;
				}
				int coursesize = 1;
				for (CoursesRegistration f : reco) {
					List<ExamTimeTable> examlistdf = super.examtimetable
							.findByExIsDeleteAndAcademicYearIdAndProgrammesIdAndExamAnnouncementIdAndExExamTypeAndDegreeIdAndCoursesId(
									false, request.getAcademicYear(), request.getProgrammes(),
									request.getExamAnnouncement(), 1L, request.getDegree(), f.getCourses().getId());
					if (examlistdf.size() <= 0) {
						continue;
					}
					SimpleDateFormat Date = new SimpleDateFormat("dd-MM-yyyy");

					SimpleDateFormat formatte = new SimpleDateFormat("EEEE");
					Map<Object, Object> nongradial = new HashMap<Object, Object>();
					// get the details for class atendance
					List<MidTermMarks> midtrm = super.midtermmarksMarks.findByStudentadmissionIdAndCoursesIdAndExIsActiveAndExIsDelete(o.getStudentadmission().getId(), f.getCourses().getId(), true, false); 
					if(midtrm.size() >0) {
						if(midtrm.get(0).getExAttendenceMarks() !=null && midtrm.get(0).getExAttendenceMarks() >=3) {
							nongradial.put("status", "Allowed");
						}else {
							nongradial.put("status", "Debarred");
						}
					}else {
						nongradial.put("status", "Debarred");
					}
					
					
					nongradial.put("exCoursesCode", f.getCourses().getExCoursesCode());
					nongradial.put("exCoursesName", f.getCourses().getExName());
					nongradial.put("date", Date.format(examlistdf.get(0).getExStartDate()));
					nongradial.put("day", formatte.format(examlistdf.get(0).getExStartDate()));
					nongradial.put("slNo", coursesize);
					dataList.add(nongradial);
					coursesize++;

				}

				Map<Object, Object> data = new HashMap<Object, Object>();
				data.put("size", coursesize + 1);
				logger.info("coursesize" + coursesize);
				dataList.add(data);
				
			
			}
	
			count++;
			String serverurl = super.commonHelper.getSettingValue("SERVER_IP");
			// String reportPath = "src/main/resources/";
			String reportPath = super.commonHelper.getSettingValue("DOCUMENT_PATH");

			// Compile the Jasper report from .jrxml to .japser
			String path = "";
			if (request.getSemester() == 1 || request.getSemester() == 3 || request.getSemester() == 5 || request.getSemester() == 7) {
				
				path = resourceLoader.getResource("classpath:bulkhallTicket2.jrxml").getURI().getPath();
				}
	    if (request.getSemester() == 2 || request.getSemester() == 4 || request.getSemester() == 6 || request.getSemester() == 8) {
				
				path = resourceLoader.getResource("classpath:BullEvenHallTicket.jrxml").getURI().getPath();
				}
				JasperReport jasperReport = JasperCompileManager.compileReport(path);

			JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(dataList);

			// Add parameters

			String image = super.commonHelper.getSettingValue("IMAGE_PATH");
			logger.info(image);
			System.out.println("?????????????????????+" + image);
			if (image == null) {
				logger.error("error for image" + image);
			}
			SimpleDateFormat formatDate = new SimpleDateFormat("hh:mm a");

			// parameters.put("university", uid.get(0).getExLocalName());
			parameters.put("logo", image);
			parameters.put("university", university);
			parameters.put("programmes", Programmes.get().getExName());
			parameters.put("programeEng", Programmes.get().getExLocalName());
			parameters.put("department", department.get().getExName());
			parameters.put("departmentEng", department.get().getExLocalName());
			parameters.put("semester", sem.get().getExName());
			parameters.put("programmeYear", programmeYear.get().getExName());
			parameters.put("academicYear", academic.get().getExYear());
			parameters.put("time", formatDate.format(examlist.get(0).getExStartTime()) + " - "
					+ formatDate.format(examlist.get(0).getExEndTime()));

			parameters.put("degree", degree.get().getExName());
			String folder = createFolder(academic.get().getExYear(), Colleges.get().getExIdentifier(), "bulkDegree");

			// Fill the report
			JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,
					jrBeanCollectionDataSource);

			String fileName = "\\" + Programmes.get().getExIdentifier() + ".pdf";

			// Export the report to a PDF file
			JasperExportManager.exportReportToPdfFile(jasperPrint, reportPath + folder + fileName);

			File filenew = new File(reportPath + folder + fileName);
			if (filenew.exists()) {
				filenew.setExecutable(true, false);
				filenew.setReadable(true, false);
				filenew.setWritable(true, false);
			}

			info.put("status", "1");
			info.put("url", folder + fileName);
			info.put("message", "Report successfully generated");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> generateInternalMarksPdf(InternalMarksRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();

		try {

			List<University> uid = super.university.findAllUnivesity();
			if (uid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "University not present");
				return info;
			}
			String university = uid.get(0).getExName();

			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department not present");
				return info;
			}
			Optional<Colleges> collage = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!collage.isPresent() || !collage.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "College not present");
				return info;
			}

			Optional<Programmes> programs = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!programs.isPresent() || !programs.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Programs not present");
				return info;
			}

			Optional<AcademicYear> academicYearid = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getAcademicYear());
			if (!academicYearid.isPresent()) {
				info.put("status", "2");
				info.put("message", "AcademicYear id not present");
				return info;
			}

			Optional<Courses> course = super.courses.findByIdAndExIsDeleteAndExIsActive(request.getCourses(), false,
					true);
			if (!course.isPresent()) {
				info.put("status", "2");
				info.put("message", "Course not present");
				return info;
			}

			Optional<Semster> sem = super.semester.findByIdAndExIsActiveAndExIsDelete(request.getSemester(), true,
					false);
			if (!sem.isPresent()) {
				info.put("status", "2");
				info.put("message", " Semster not present");
				return info;
			}
			List<Staffpersonal> staff = super.staffpersonal.findByIdAndExIsDelete(request.getStaff(), false);
			if (staff.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Staff id not present");
				return info;
			}
			
			boolean ispractical = false ;
			
			boolean isboth = false ;
			
			if(course.get().getCoursesType().size() == 1 && course.get().getCoursesType().get(0).getId() == 2 ) {
				ispractical = true;
				
			}
			if(course.get().getCoursesType().size() == 2) {
				isboth = true;
			}

			Optional<ProgrammeYear> programyear = super.programmeYear
					.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
			if (!programyear.isPresent()) {
				info.put("status", "2");
				info.put("message", "ProgrammeYear not present");
				return info;
			}
			Section sections = null;
			Long Section = null;
			String Sectionsname = "";
			if (request.getSection() == null || request.getSection().equals("")) {
				Section = null;
				sections = null;
			} else {
				Optional<Section> Sections = super.section.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getSection());
				if (!Sections.isPresent()) {
					info.put("status", "2");
					info.put("message", "Section id not present");
					return info;
				}
				sections = Sections.get();
				Section = Sections.get().getId();
				Sectionsname = Sections.get().getExName();
			}

			List dataList = new LinkedList();
			int count = 0;
			List<Object[]> stuid = super.courses.getDetails(request.getDegree(), request.getAcademicYear(),
					request.getProgrammes(), request.getCourses(), request.getProgrammeYear(), request.getSemester(),
					request.getColleges(), Section, request.getDepartment());
			if (stuid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "No record found.");
				return info;
			}
			for (Object[] e : stuid) {
				Map<Object, Object> studentinfo = new HashMap<Object, Object>();
				studentinfo.put("exStudentId", e[0]);
				studentinfo.put("exCoursesName", e[1]);
				studentinfo.put("exFirstName", e[2]);
				// studentinfo.put("exSemester", e[3]);
				studentinfo.put("exSection", e[4]);
				studentinfo.put("exCoursesCode", e[5]);
				studentinfo.put("exCreditHourTitle", e[6]);
				// get Student Internal marks if present
				List<MidTermMarks> getresult = super.midtermmarksMarks
						.findByDegreeIdAndCoursesIdAndExRollNoAndAcademicYearIdAndProgrammesIdAndSemesterIdAndProgrammeYearIdAndCollegesIdAndExIsActiveAndExIsDelete(
								request.getDegree(), request.getCourses(), e[0].toString(), request.getAcademicYear(),
								request.getProgrammes(), request.getSemester(), request.getProgrammeYear(),
								request.getColleges(), true, false);
				if (getresult.size() <= 0) {
					studentinfo.put("exAtt", "");
					studentinfo.put("date", null);
					studentinfo.put("exAss", "");
					studentinfo.put("exmid", "");
					studentinfo.put("exquiz", "");
					studentinfo.put("prac", "");
					studentinfo.put("casestudy", "");
					
					studentinfo.put("practicalrcord", "");
					studentinfo.put("practicallearning", "");
					studentinfo.put("labexpriment", "");
					studentinfo.put("viva", "");

				} else {
					studentinfo.put("exAtt", getresult.get(0).getExAttendenceMarks());
					studentinfo.put("exAss", getresult.get(0).getExAssignmentMarks());
					studentinfo.put("exmid", getresult.get(0).getExMidTermMarks());
					studentinfo.put("exquiz", getresult.get(0).getExQuizMarks());
					studentinfo.put("prac",(getresult.get(0).getExPracticalLearning() == null || getresult.get(0).getExPracticalRecordMarks() == null )  ? "NA": getresult.get(0).getExPracticalLearning()+ (getresult.get(0).getExPracticalRecordMarks()));
					studentinfo.put("casestudy", getresult.get(0).getExCaseStudy());
					studentinfo.put("date", "");
					
					studentinfo.put("practicalrcord", getresult.get(0).getExPracticalRecordMarks());
					studentinfo.put("practicallearning", getresult.get(0).getExPracticalLearning());
					
					// check If courses belong to practical
					if(ispractical || isboth) {
						  List<ExamBarcodes> getdata=super.ExamBarcodes.findByCoursesIdAndAcademicYearIdAndExIsActiveAndExIsDeleteAndCollegesIdAndDegreeIdAndProgrammesIdAndDepartmentIdAndProgrammeYearIdAndSemesterIdAndStudentadmissionId(
								  request.getCourses(), request.getAcademicYear(),
								  true,false,request.getColleges(),request.getDegree(),request.getProgrammes(),
								  request.getDepartment(),request.getProgrammeYear(),request.getSemester(),getresult.get(0).getStudentadmission().getId()); 
						if(getdata.size() <=0) {
							studentinfo.put("labexpriment", "");
							studentinfo.put("viva", "");
						}else {
							studentinfo.put("labexpriment", getdata.get(0).getExLabExperiment());
							studentinfo.put("viva", getdata.get(0).getExViva());
						}
					}else {
						studentinfo.put("labexpriment", "");
						studentinfo.put("viva", "");
					}
				}
				

				dataList.add(studentinfo);
				count++;
			}

			Map<Object, Object> studentcount = new HashMap<Object, Object>();
			studentcount.put("studentcount", count);

			logger.info(">>>>>>>>>studentcount>>>>>>" + count);
			dataList.add(studentcount);

			String serverurl = super.commonHelper.getSettingValue("SERVER_IP");
			// String reportPath = "src/main/resources/";
			String reportPath = super.commonHelper.getSettingValue("DOCUMENT_PATH");
			String image = super.commonHelper.getSettingValue("IMAGE_PATH");
			logger.info(image);

			// Compile the Jasper report from .jrxml to .japser

			String path = "";
				if(request.getDegree() !=1) {
					if(isboth) {
						//path = resourceLoader.getResource("classpath:internalmarksbothpg.jrxml").getURI().getPath();
						path = resourceLoader.getResource("classpath:CourseCoverage.jrxml").getURI().getPath();
					}else {
						if(!ispractical) {
							path = resourceLoader.getResource("classpath:internalMarks.jrxml").getURI().getPath();
						}else {
							path = resourceLoader.getResource("classpath:practicalinternalMarkspg.jrxml").getURI().getPath();
						}
						   
					}				
				}else {
					// Only for Btech 
					if(isboth) {
						path = resourceLoader.getResource("classpath:internalmarksbothug.jrxml").getURI().getPath();
					}else {
						if(!ispractical) {
							path = resourceLoader.getResource("classpath:internalMarksThUG.jrxml").getURI().getPath();
						}else {
							path = resourceLoader.getResource("classpath:practicalinternalMarkUG.jrxml").getURI().getPath();
						}
						   
					}	
					
				}
					
			JasperReport jasperReport = JasperCompileManager.compileReport(path);

			// JasperReport jasperReport = JasperCompileManager.compileReport(reportPath +
			// "\\gradeReport.jrxml");

			// Get your data source

			JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(dataList);

			Map<String, Object> parameters = new HashMap<>();

			List<TeacherCourseMapping> teacher = super.teacherCourseMapping
					.findByCoursesIdAndDepartmentIdAndAcademicYearIdAndCollegesIdAndDegreeIdAndProgrammeYearIdAndSemsterIdAndSectionId(
							request.getCourses(), request.getDepartment(), request.getAcademicYear(),
							request.getColleges(), request.getDegree(), request.getProgrammeYear(),
							request.getSemester(), Section);
			List<String> data = new ArrayList<String>();

			for (int j = 0; j < teacher.size(); j++) {

				String firstname = teacher.get(j).getStaffpersonal().getExName();
				String teachername = firstname;
				logger.info(">>>>>>>>>teachername>>>>>>" + teachername);

				String[] collageid = teachername.split("/");
				for (int i = 0; i < collageid.length; i++) {
					data.add(collageid[i]);
				}
			}
			
			  List<String> listWithoutDuplicates = data.stream()
					     .distinct()
					     .collect(Collectors.toList());

			String teacherslist = listWithoutDuplicates.toString();
			parameters.put("teacherName", teacherslist.replaceAll("\\[", "").replaceAll("\\]", ""));
			logger.info(">>>>>>>>>teacherslist>>>>>>" + teacherslist);

			// Add parameters

			parameters.put("reportTital", "Internal Marks Report");
			parameters.put("department", department.get().getExName());

			parameters.put("studentcount", count);
			parameters.put("university", university);
			parameters.put("logo", image);
			parameters.put("exCoursesCode", course.get().getExCoursesCode());
			parameters.put("college", collage.get().getExName());
			parameters.put("semester", sem.get().getExName());
			parameters.put("academicyear", academicYearid.get().getExYear());
			parameters.put("exCourseName", course.get().getExName());
			parameters.put("excerdithour", course.get().getCreditHours().getExCreditHourTitle());
			parameters.put("programe", programs.get().getExName());
			parameters.put("programeYear", programyear.get().getExName());
			parameters.put("section", Section == null ? null : Sectionsname);

			String folder = createFolder(academicYearid.get().getExYear(), collage.get().getExIdentifier(),
					"internalMarksReport");

			// Fill the report
			JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,
					jrBeanCollectionDataSource);

			String filename = "\\" + course.get().getExCoursesCode() + " " + "("
					+ course.get().getCreditHours().getExCreditHourTitle() + ")" + ".pdf";

			// Export the report to a PDF file
			JasperExportManager.exportReportToPdfFile(jasperPrint, reportPath + folder + filename);

			File filenew = new File(reportPath + folder + filename);
			if (filenew.exists()) {
				filenew.setExecutable(true, false);
				filenew.setReadable(true, false);
				filenew.setWritable(true, false);
			}

			// info.put("gradeReport", dataList);
			info.put("status", "1");
			info.put("url", folder + filename);
			info.put("message", "Report successfully generated");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> generateFeedbackPdf(FeedbackRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();

		try {
			List<Object> datalist = new ArrayList<Object>();
			List<Object> record = new ArrayList<Object>();

			Optional<AcademicYear> academicYearid = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getAcademicYear());
			if (!academicYearid.isPresent()) {
				info.put("status", "2");
				info.put("message", "AcademicYear id not present");
				return info;
			}
			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department id not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByIdAndExIsDeleteAndExIsActive(request.getDegree(), false, true);
			if (!degree.isPresent()) {
				info.put("status", "2");
				info.put("message", "degree not  present");
				return info;

			}
			Optional<ProgrammeYear> ProgrammeYear = super.programmeYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammeYear());
			if (!ProgrammeYear.isPresent()) {
				info.put("status", "2");
				info.put("message", "ProgrammeYear id not present");
				return info;
			}
			Optional<Semster> Semester = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!Semester.isPresent()) {
				info.put("status", "2");
				info.put("message", "Semester id not present");
				return info;
			}
			Optional<Programmes> program = super.programme.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!program.isPresent()) {
				info.put("status", "2");
				info.put("message", "Programme not present");
				return info;
			}

			Optional<StaffEmpDetails> Staffpersonal = super.staffEmpDetails
					.findByStaffpersonalExIsDeleteAndStaffpersonalExIsActiveAndStaffpersonalId(false, true,
							request.getStaff());
			if (!Staffpersonal.isPresent()) {
				info.put("status", "2");
				info.put("message", "Staffpersonal not present");
				return info;
			}
			Optional<Courses> cour = super.courses.findByIdAndExIsDeleteAndExIsActiveAndAcademicYearId(
					request.getCourses(), false, true, request.getAcademicYear());
			if (!cour.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not  present");
				return info;
			}

			List<University> uid = super.university.findAllUnivesity();
			if (uid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "University not present");
				return info;
			}

			List<Object> feedbck = new ArrayList<Object>();

			List<FeedBack> duplicateCheck = super.feedBack
					.findByCoursesIdAndProgrammeYearIdAndAcademicYearIdAndProgrammesIdAndSemesterIdAndStaffIdAndDegreeIdAndDepartmentIdAndFeedbackType(
							request.getCourses(), request.getProgrammeYear(), request.getAcademicYear(),
							request.getProgrammes(), request.getSemester(), request.getStaff(), request.getDegree(),
							request.getDepartment(),request.getFeedbackType());
			if (duplicateCheck.size() <= 0) {
				info.put("status", "2");
				info.put("message", "FeedBack not paresent for particular course and Staff");
				return info;
			}

			for (FeedBack d : duplicateCheck) {
				feedbck.add(d.getId());
			}

			// for course
			String type = "1";
			int tempcourse = 0;
			long tempmaxcourse = 0;
			if (type == "1" || type.equals("1")) {
				int totalcourse = 0;
				long maxscorecourse = 0;
				List<AboutFeedBack> task = super.aboutFeedBack.findByExIsDeleteAndExType(false, type);
				for (AboutFeedBack e : task) {
					System.out.println("feedbck" + feedbck + e.getId());
					List<FeedBackScale> FeedBackScale = super.feedBackScale
							.findByFeedBackIdInAndAboutFeedBackId(feedbck, e.getId());
					Long maxvalue = super.feedBackScale.findByMaxScaleValue();

					if (FeedBackScale.size() <= 0) {
						info.put("status", "1");
						info.put("message", "aboutFeedBack Not sumbited" + e.getExName());
						return info;
					} else {
						int scalevalue = 0;
						for (FeedBackScale f : FeedBackScale) {
							scalevalue = scalevalue + Integer.parseInt(f.getScale().getExScaleValue());
							System.out.println("?????????????????NOU???" + totalcourse);
							// datalist.add(scalevalue);
						}
						totalcourse = totalcourse + scalevalue;
						maxscorecourse = maxscorecourse + maxvalue;

						Map<Object, Object> data = new HashMap<Object, Object>();
						data.put("feedbackname", e.getExName());
						data.put("scale", scalevalue);
						data.put("maxscore", duplicateCheck.size() * maxvalue);
						record.add(data);
					}
				}
				Map<Object, Object> data = new HashMap<Object, Object>();
				data.put("coursescale", totalcourse);
				data.put("maxscorecourse", maxscorecourse * duplicateCheck.size());
				data.put("coursetotal", "Sub Total");
				record.add(data);
				tempcourse = totalcourse;
				tempmaxcourse = maxscorecourse * duplicateCheck.size();
			}
			// for teacher
			type = "2";
			int tempteacher = 0;
			long tempmaxteacher = 0;
			if (type == "2" || type.equals("2")) {
				int totalteacher = 0;
				long maxteacherscore = 0;
				List<AboutFeedBack> task = super.aboutFeedBack.findByExIsDeleteAndExType(false, type);
				for (AboutFeedBack e : task) {
					System.out.println("feedbck" + feedbck + e.getId());
					List<FeedBackScale> FeedBackScale = super.feedBackScale
							.findByFeedBackIdInAndAboutFeedBackId(feedbck, e.getId());
					Long maxvalue = super.feedBackScale.findByMaxScaleValue();

					if (FeedBackScale.size() <= 0) {
						info.put("status", "1");
						info.put("message", "aboutFeedBack Not sumbited" + e.getExName());
						return info;
					} else {
						int scalevalue = 0;
						for (FeedBackScale f : FeedBackScale) {
							scalevalue = scalevalue + Integer.parseInt(f.getScale().getExScaleValue());
						}
						totalteacher = totalteacher + scalevalue;
						maxteacherscore = maxteacherscore + maxvalue;

						Map<Object, Object> data = new HashMap<Object, Object>();
						data.put("tfeedbackname", e.getExName());
						data.put("tscale", scalevalue);
						data.put("tmaxscore", duplicateCheck.size() * maxvalue);
						record.add(data);
					}

				}
				Map<Object, Object> data = new HashMap<Object, Object>();
				data.put("teacherscale", totalteacher);
				data.put("maxteacherscore", maxteacherscore * duplicateCheck.size());
				data.put("teachertotal", "Sub Total");
				record.add(data);
				tempmaxteacher = maxteacherscore * duplicateCheck.size();
				tempteacher = totalteacher;
			}

			String serverurl = super.commonHelper.getSettingValue("SERVER_IP");
			// String reportPath = "src/main/resources/";
			String reportPath = super.commonHelper.getSettingValue("DOCUMENT_PATH");

			// Compile the Jasper report from .jrxml to .japser

			String path = resourceLoader.getResource("classpath:feedbackReport.jrxml").getURI().getPath();
			JasperReport jasperReport = JasperCompileManager.compileReport(path);

			// JasperReport jasperReport = JasperCompileManager.compileReport(reportPath +
			// "\\gradeReport.jrxml");

			// Get your data source

			JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(record);

			String image = super.commonHelper.getSettingValue("IMAGE_PATH");
			logger.info(image);
			System.out.println("?????????????????????+" + image);
			if (image == null) {
				logger.error("error for image" + image);
			}
			// Add parameters
			Map<String, Object> parameters = new HashMap<>();
			parameters.put("logo", image);
			parameters.put("createdBy", "Win.org");
			parameters.put("totalmaxval", tempmaxcourse + tempmaxteacher);
			parameters.put("programmes", program.get().getExName());
			parameters.put("department", department.get().getExName());

			parameters.put("temptotalscale", tempteacher + tempcourse);
			parameters.put("colleges", Staffpersonal.get().getStaffpersonal().getColleges().getExName());
			parameters.put("programmeYear", ProgrammeYear.get().getExName());
			parameters.put("semester", Semester.get().getExName());
			parameters.put("academicYear", academicYearid.get().getExYear());
			parameters.put("university", uid.get(0).getExName());
			parameters.put("staff", Staffpersonal.get().getStaffpersonal().getExName());
			parameters.put("course", cour.get().getExName());
			parameters.put("coursecode", cour.get().getExCoursesCode());
			parameters.put("courcrdthr", cour.get().getCreditHours().getExCreditHourTitle());
			parameters.put("noofstudent", duplicateCheck.size());

			List<String> data = new ArrayList<String>();

			for (int j = 0; j < Staffpersonal.get().getStaffpersonal().getDesignation().size(); j++) {

				String firstname = Staffpersonal.get().getStaffpersonal().getDesignation().get(j).getExName();

				String[] collageid = firstname.split("/");
				for (int i = 0; i < collageid.length; i++) {
					data.add(collageid[i]);
				}
			}

			String teacherslist = data.toString();
			parameters.put("designation", teacherslist.replaceAll("\\[", "").replaceAll("\\]", ""));


			// Fill the report
			JasperPrint print = JasperFillManager.fillReport(jasperReport, parameters, jrBeanCollectionDataSource);
			// Export the report to a PDF file

			String folder = createFolder(academicYearid.get().getExYear(), academicYearid.get().getExYear(), "FEEDBACK");
			JasperExportManager.exportReportToPdfFile(print, reportPath + folder + "/FEEDBACK.pdf");

			File filenew = new File(reportPath + folder + "/FEEDBACK.pdf");
			if (filenew.exists()) {
				filenew.setExecutable(true, false);
				filenew.setReadable(true, false);
				filenew.setWritable(true, false);
			}
			
			info.put("status", "1");
			info.put("url", folder + "/FEEDBACK.pdf");
			info.put("message", "Report successfully generated");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> generateMigTranscriptReportPdf(GradeReportRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List dataList = new LinkedList();
			logger.info("generateMigTranscriptReportPdf Report");

			Optional<Colleges> collage = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!collage.isPresent()) {
				info.put("status", "2");
				info.put("message", "College Id not Present");
				return info;
			}
			Optional<AcademicYear> academicYearid = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getAcademicYear());
			if (!academicYearid.isPresent()) {
				info.put("status", "2");
				info.put("message", "AcademicYear id not present");
				return info;
			}
			Optional<Programmes> Prog = super.programme.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Prog.isPresent()) {
				info.put("status", "2");
				info.put("message", "Programmes not present");
				return info;
			}

			Optional<Department> dept = super.department.findByIdAndExIsDeleteAndExIsActive(request.getDepartment(),
					false, true);
			if (!dept.isPresent()) {
				info.put("status", "2");
				info.put("message", "department not  present");
				return info;

			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}

			Optional<Stream> stream = super.stream.findByIdAndExIsDeleteAndExIsActive(request.getStream(), false, true);
			if (!stream.isPresent()) {
				info.put("status", "2");
				info.put("message", "stream not  present");
				return info;
			}
			Optional<ProgrammeYear> programmeYear = super.programmeYear
					.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
			if (!programmeYear.isPresent()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!sem.isPresent()) {
				info.put("status", "2");
				info.put("message", "Semster not present");
				return info;
			}

			List<University> uid = super.university.findAllUnivesity();
			if (uid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "University not present");
				return info;
			}
			String university = uid.get(0).getExName();

			List<Object> regtype = new ArrayList<Object>();
			Long retypefro = (long) 1;
			regtype.add(1L);
			// regtype.add(5L);

			List<Studentpersonal> studentPersonal = super.studentpersonal.checkExRollNo(request.getExRollNo(), true,
					false);
			if (studentPersonal.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Student not Present");
				return info;
			}

			int count = 0;
			int theory = 0;
			int pract = 0;
			List<GradeReport> gradecourse1stsem = super.gradeReport
					.findByCollegesIdAndProgrammesIdAndDegreeIdAndSemesterIdAndExRollNoAndProgrammeYearIdAndExIsActiveAndExIsDelete(
							request.getColleges(), request.getProgrammes(), request.getDegree(), 1L,
							request.getExRollNo(), request.getProgrammeYear(), true, false);
			for (GradeReport firstgrade : gradecourse1stsem) {
				if (firstgrade.getCourses().getExIsSatisfactory() == false) {
					Map<Object, Object> gradial = new HashMap<Object, Object>();
					List<GradeReport> gradelistfirst = super.gradeReport
							.findByCollegesIdAndProgrammesIdAndDegreeIdAndSemesterIdAndExRollNoAndProgrammeYearIdAndRegistrationTypeIdInAndExIsActiveAndExIsDeleteAndCoursesId(
									request.getColleges(), request.getProgrammes(), request.getDegree(), 1L,
									request.getExRollNo(), request.getProgrammeYear(), regtype, true, false,
									firstgrade.getCourses().getId());
					if (gradelistfirst.size() <= 0) {
						info.put("status", "2");
						info.put("message", "grade report not created for ::" + firstgrade.getCourses().getExName());
						return info;

					} else {
						if (gradelistfirst.get(0).getExRemark() != null
								&& gradelistfirst.get(0).getExRemark().equalsIgnoreCase("Pass")) {
							gradial.put("exGradePoint1", gradelistfirst.get(0).getExLetterGrades());
						} else {
							gradial.put("exGradePoint1", "F");
						}
						gradial.put("exCoursesCode", firstgrade.getCourses().getExCoursesCode());
						gradial.put("exCoursesName", firstgrade.getCourses().getExName());
						gradial.put("exCreditHour",
								"(" + firstgrade.getCourses().getCreditHours().getExCreditHourTitle() + ")");
						theory = theory + (int) ((firstgrade.getCourses().getCreditHours().getExCreditHourTutorials())
								+ (firstgrade.getCourses().getCreditHours().getExCreditHourLecture()));
						pract = pract + (int) (firstgrade.getCourses().getCreditHours().getExCreditHourPractical()
								.intValue());
						dataList.add(gradial);
						count++;
					}
				}
			}

			List<GradeReport> gradecourse2stsem = super.gradeReport
					.findByCollegesIdAndProgrammesIdAndDegreeIdAndSemesterIdAndExRollNoAndProgrammeYearIdAndExIsActiveAndExIsDelete(
							request.getColleges(), request.getProgrammes(), request.getDegree(), 1L,
							request.getExRollNo(), request.getProgrammeYear(), true, false);
			for (GradeReport firstgrade : gradecourse2stsem) {
				if (firstgrade.getCourses().getExIsSatisfactory() == false) {
					Map<Object, Object> gradial = new HashMap<Object, Object>();

					gradial.put("exCoursesCode2", firstgrade.getCourses().getExCoursesCode());
					dataList.add(gradial);

				}
			}

			logger.info(">>>>>>>>>>>>>>>>>>>>" + dataList.size());

			Map<Object, Object> results = new HashMap<Object, Object>();
			results.put("exGradePointAv", "NA");

			if (request.getSemester() == 1) {
				results.put("exCamuGradePointAv", "NA");

			} else {
				results.put("exCamuGradePointAv", "NA");
			}
			dataList.add(results);

			System.out.println(">>>>>>>>>>>>>>>dataList>>>>>>>>" + dataList);
			String serverurl = super.commonHelper.getSettingValue("SERVER_IP");
			String reportPath = super.commonHelper.getSettingValue("DOCUMENT_PATH"); // "src/main/resources/";
			String image = super.commonHelper.getSettingValue("IMAGE_PATH");
			String mofpi = super.commonHelper.getSettingValue("MOFPI_IMAGE");

			logger.info(image);
			// Compile the Jasper report from .jrxml to .japser

			String path = resourceLoader.getResource("classpath:mainReport.jrxml").getURI().getPath();
			JasperReport jasperReport = JasperCompileManager.compileReport(path);
			// Get your data source
			JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(dataList);
			// String mofpi ="https://kj1bcdn.b-cdn.net/media/27623/mofpi2.png?format=webp";
			String symbol = "https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRQxqWdvAyd99Sm245IuJzQM6KM8XN607ePDg&usqp=CAU";

			// Add parameters
			Map<String, Object> parameters = new HashMap<>();

			parameters.put("logo", image);
			parameters.put("symbol", symbol);
			parameters.put("mofpi", mofpi);

			parameters.put("exFirstName", studentPersonal.get(0).getStudentadmission().getExName());
			parameters.put("exRollNo", "5555555");
			parameters.put("enrollementNo", "rrrrrrrrrr");
			parameters.put("father", studentPersonal.get(0).getExFatherName().toUpperCase());
			parameters.put("mother", studentPersonal.get(0).getExMotherName().toUpperCase());
			parameters.put("mother", studentPersonal.get(0).getExMotherName());

			parameters.put("fathernamek", degree.get().getExName());
			parameters.put("programmes", Prog.get().getExName().toUpperCase());
			parameters.put("examAnnouncement", null);
			parameters.put("colleges", uid.get(0).getExDescription());
			parameters.put("collegesaddress", collage.get().getExDescription() + collage.get().getExAddress());
			parameters.put("programmeYear", programmeYear.get().getExName());
			parameters.put("semester", sem.get().getExDescription().toUpperCase());
			parameters.put("academicYear", academicYearid.get().getExYear());
			parameters.put("university", university);
			parameters.put("dateofdeclaration", request.getDateOfDeclaration());
			parameters.put("randnuber", getRandomNumberString());
			parameters.put("totalCreditHour", "(" + theory + "+" + pract + ")");
			parameters.put("dept", "(" + dept.get().getExName() + ")");

			String folder = createFolder(academicYearid.get().getExYear(), collage.get().getExIdentifier(),
					"semesterReport");
			String fileName = "\\" + request.getExRollNo() + ".pdf";
			// Fill the report
			JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,
					jrBeanCollectionDataSource);

			// Export the report to a PDF file
			JasperExportManager.exportReportToPdfFile(jasperPrint, reportPath + folder + fileName);

			File filenew = new File(reportPath + folder + fileName);
			if (filenew.exists()) {
				filenew.setExecutable(true, false);
				filenew.setReadable(true, false);
				filenew.setWritable(true, false);
			}

			GradeReportLog logs = new GradeReportLog();

			if (request.getUser() == null || request.getUser().equals("")) {
				logs.setUser(null);
			} else {
				List<User> user = super.user.findByIdAndExIsDelete(request.getUser(), false);
				if (user.size() <= 0) {
					info.put("status", "2");
					info.put("message", "User id not present");
					return info;
				}

				logs.setUser(user.get(0));

			}
			Date date = new Date();
			logs.setExamAnnouncement(null);
			logs.setAcademicYear(academicYearid.get());
			logs.setExUrl(folder + fileName.replace("\\", "/"));
			logs.setExCreateDate(date);
			logs.setColleges(collage.get());
			logs.setDegree(degree.get());
			logs.setProgrammes(Prog.get());
			logs.setSemester(sem.get());
			logs.setExReportType("SemesterReport");
			logs.setDepartment(dept.get());
			logs.setProgrammeYear(programmeYear.get());
			logs.setExReportCategory("PDFDownload");
			logs.setExIsActive(true);
			logs.setExIsDelete(false);
			super.GradeReportLog.save(logs);

			// info.put("gradeReport", dataList);
			info.put("status", "1");
			info.put("url", folder + fileName);
			info.put("message", "Report successfully generated");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}
	}

//eligibelist
	@Override
	public Map<String, Object> generateEligibleListPdf(SemesterEligibility request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<University> uid = super.university.findAllUnivesity();
			if (uid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "University not present");
				return info;
			}
			String university = uid.get(0).getExName();
			System.out.println(">>>>>>>..university" + university);
			Optional<Colleges> Colleges = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),
					false, true);
			if (!Colleges.isPresent() || !Colleges.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}

			Optional<Programmes> Programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Programmes.isPresent() || !Programmes.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}

			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department not present");
				return info;
			}

			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent() || !academic.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}

			Optional<ProgrammeYear> programmeYear = super.programmeYear
					.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
			if (!programmeYear.isPresent() || !programmeYear.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!sem.isPresent() || !sem.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Semster not present");
				return info;
			}
		int count = 0;
			
			
			List<NoDuesConfiguration> list123  = nodues.findByExIsDeleteAndExIsActiveAndAcademicYearIdAndBatchIdAndDepartmentIdAndProgrammeYearIdAndSemesterId(false ,true ,request.getAcademicYear(),request.getBatch() ,request.getDepartment() ,request.getProgrammeYear() ,request.getSemester());
			if(list123.size() <=0) {
				info.put("status", "2");
				info.put("message", "NoDues not configured");
				return info;
			}
						
			List<String> approve = new ArrayList<String>();
					for(int i = 0 ; i<list123.get(0).getApprovetype().size() ; i++ ) {
						approve.add(list123.get(0).getApprovetype().get(i).getExIdentifier());
					}
			System.out.println(">>>>>>>>>>>"+approve);

			List<SemesterRegistration> list  = super.semesterRegistration.findByExIsDeleteAndExIsActiveAndProgrammesIdAndCollegesIdAndDegreeIdAndAcademicYearIdAndSemesterIdAndDepartmentIdAndProgrammeYearIdOrderByStudentadmissionId(
								false, true, request.getProgrammes(), request.getColleges(), request.getDegree(),
								request.getAcademicYear(), request.getSemester(), request.getDepartment() , request.getProgrammeYear());

			List dataList = new LinkedList();		
			for (SemesterRegistration e : list) {
				if(noDuePenalty.findByRegistrationIdAndApproveTypeInAndIsApprove(e.getId(), approve, true).size() == approve.size()) {
					// check the student approved or not from all the department
					Map<Object, Object> student = new HashMap<Object, Object>();
					student.put("id", e.getId());		
					student.put("exName", e.getStudentadmission().getExName());		
					student.put("exEnrollmentNo" , e.getStudentadmission().getExEnrollementNo());
					student.put("exRollNo",e.getStudentadmission().getExRollNo());		
					dataList.add(student);
				
					count++;
				}		
			}
		
			String serverurl = super.commonHelper.getSettingValue("SERVER_IP");
			// String reportPath = "src/main/resources/";
			String reportPath = super.commonHelper.getSettingValue("DOCUMENT_PATH");
			String image = super.commonHelper.getSettingValue("IMAGE_PATH");
			logger.info(image);

			// Compile the Jasper report from .jrxml to .japser

			String path = resourceLoader.getResource("classpath:eligiblelist.jrxml").getURI().getPath();
			JasperReport jasperReport = JasperCompileManager.compileReport(path);

			// JasperReport jasperReport = JasperCompileManager.compileReport(reportPath +
			// "\\gradeReport.jrxml");

			// Get your data source

			JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(dataList);

			Map<String, Object> parameters = new HashMap<>();
			// Add parameters

			parameters.put("reportTital", "Eligible List Report");
			parameters.put("studentcount", count);

			parameters.put("department", department.get().getExName());
			parameters.put("studentcount", count);
			parameters.put("university", university);
			parameters.put("logo", image);
			parameters.put("department", department.get().getExName());
			parameters.put("colleges", Colleges.get().getExName());
			parameters.put("semester", sem.get().getExName());
			parameters.put("academicyear", academic.get().getExYear());
			parameters.put("teacherName", degree.get().getExName());
			parameters.put("programe", Programmes.get().getExName());
			parameters.put("programeYear", programmeYear.get().getExName());
			System.out.println(">>>>>>>..parameters." + parameters);

			String folder = createFolder(academic.get().getExYear(), Colleges.get().getExIdentifier(),
					"EligibleListReport");

			// Fill the report
			JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,
					jrBeanCollectionDataSource);

			String filename = "\\" + degree.get().getExName() + " " + "(" + sem.get().getExName() + ")" + ".pdf";

			// Export the report to a PDF file
			JasperExportManager.exportReportToPdfFile(jasperPrint, reportPath + folder + filename);

			File filenew = new File(reportPath + folder + filename);
			if (filenew.exists()) {
				filenew.setExecutable(true, false);
				filenew.setReadable(true, false);
				filenew.setWritable(true, false);
			}

			// info.put("gradeReport", dataList);
			info.put("status", "1");
			info.put("url", folder + filename);
			info.put("message", "Report successfully generated");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}
	}

	/*
	 * int count = 0; List<SemesterRegistration> list = super.semesterRegistration.
	 * findByExIsDeleteAndExIsActiveAndProgrammesIdAndCollegesIdAndDegreeIdAndAcademicYearIdAndSemesterIdAndDepartmentIdAndProgrammeYearIdAndExIsLibraryApproveAndExIsAccountsApproveAndExIsComputerlabApproveAndExIsDeanApproveAndExIsExaminationApproveAndExIsItDepartmentApproveAndExIsMentorApprove(
	 * false, true, request.getProgrammes(), request.getColleges(),
	 * request.getDegree(), request.getAcademicYear(), request.getSemester(),
	 * request.getDepartment() ,
	 * request.getProgrammeYear(),true,true,true,true,true,true,true);
	 * 
	 * List dataList = new LinkedList(); for (SemesterRegistration e : list) {
	 * Map<Object, Object> student = new HashMap<Object, Object>();
	 * student.put("exName", e.getStudentadmission().getExName()); //
	 * student.put("enrollementNo" , e.getStudentadmission().getExEnrollementNo());
	 * student.put("rollNo",e.getStudentadmission().getExRollNo());
	 * dataList.add(student); System.out.println(">>>student>>>"+student);
	 * System.out.println(">>>list>>>"+list); }
	 * 
	 * 
	 * dataList.add(list); count++;
	 * 
	 * 
	 * Map<Object, Object> studentcount = new HashMap<Object, Object>();
	 * studentcount.put("studentcount",count);
	 * 
	 * logger.info(">>>>>>>>>studentcount>>>>>>"+count); dataList.add(studentcount);
	 * 
	 * String serverurl = super.commonHelper.getSettingValue("SERVER_IP"); // String
	 * reportPath = "src/main/resources/"; String reportPath =
	 * super.commonHelper.getSettingValue("DOCUMENT_PATH"); String image =
	 * super.commonHelper.getSettingValue("IMAGE_PATH"); logger.info(image);
	 * 
	 * // Compile the Jasper report from .jrxml to .japser
	 * 
	 * String path =
	 * resourceLoader.getResource("classpath:eligiblelist.jrxml").getURI().getPath()
	 * ; System.out.println(">>>>>>>>path"+path); JasperReport jasperReport =
	 * JasperCompileManager.compileReport(path);
	 * System.out.println(">>>>>>>>jasperReport"+jasperReport); // Get your data
	 * source
	 * 
	 * JRBeanCollectionDataSource jrBeanCollectionDataSource = new
	 * JRBeanCollectionDataSource(dataList);
	 * 
	 * Map<String, Object> parameters = new HashMap<>();
	 * 
	 * // Add parameters
	 * 
	 * parameters.put("reportTital", "Eligible List Report");
	 * parameters.put("department", department.get().getExName());
	 * 
	 * parameters.put("studentcount", count); parameters.put("university",
	 * university); parameters.put("logo", image);
	 * 
	 * parameters.put("department", department.get().getExName());
	 * parameters.put("colleges", Colleges.get().getExName());
	 * parameters.put("semester", sem.get().getExName());
	 * parameters.put("academicyear", academic.get().getExYear());
	 * parameters.put("degree", degree.get().getExName());
	 * parameters.put("programe",Programmes.get().getExName());
	 * parameters.put("programeYear", programmeYear.get().getExName());
	 * 
	 * String folder =
	 * createFolder(academic.get().getExYear(),Colleges.get().getExIdentifier(),
	 * "EligibleListReport");
	 * 
	 * // Fill the report JasperPrint jasperPrint =
	 * JasperFillManager.fillReport(jasperReport,
	 * parameters,jrBeanCollectionDataSource);
	 * 
	 * String filename ="\\"+degree.get().getExName()+"
	 * " +"("+sem.get().getExName()+")"+".pdf";
	 * 
	 * 
	 * // Export the report to a PDF file
	 * JasperExportManager.exportReportToPdfFile(jasperPrint, reportPath + folder +
	 * filename);
	 * 
	 * File filenew = new File(reportPath + folder + filename); if
	 * (filenew.exists()) { filenew.setExecutable(true, false);
	 * filenew.setReadable(true, false); filenew.setWritable(true, false); }
	 * 
	 * 
	 * 
	 * // info.put("gradeReport", dataList); info.put("status", "1");
	 * info.put("url", folder + filename); info.put("message",
	 * "Report successfully generated"); return info;
	 * 
	 * } catch (Exception e) { e.printStackTrace(); logger.error("Exception occured"
	 * + e); StringWriter errors = new StringWriter(); e.printStackTrace(new
	 * PrintWriter(errors)); logger.error(errors.toString()); info.put("status",
	 * "0"); info.put("message", "something went wrong"); return info; } }
	 */

	@Override
	public Map<String, Object> generateMarksPdf(String barcode) {
		Map<String, Object> info = new LinkedHashMap<>();

		try {

			if (barcode == null || barcode.equals("")) {
				info.put("status", "2");
				info.put("message", "barcode is required");
				return info;
			}
			List<University> uid = super.university.findAllUnivesity();
			if (uid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "University not present");
				return info;
			}
			String university = uid.get(0).getExName();
			System.out.println("ssssssssssssssssssssssssssssssssssss" + barcode);
			List<ExternalMarks> data = super.externalMarksRepository.findByExBarcode(barcode);

			if (data.size() <= 0) {
				info.put("status", "2");
				info.put("message", "No records found.");
				return info;
			}
			List dataList = new LinkedList();

			String type = "2";
			Map<Object, Object> list = new HashMap<Object, Object>();
			list.put("barcode", data.get(0).getExBarcode());
			list.put("firstQMarks", data.get(0).getFirstQMarks());
			list.put("secondQMarks", data.get(0).getSecondQMarks());
			list.put("thirdQMarks", data.get(0).getThirdQMarks());
			list.put("fiveQMarks", data.get(0).getFiveQMarks());
			list.put("fourQMarks", data.get(0).getFourQMarks());
			list.put("sixQMarks", data.get(0).getSixQMarks());
			list.put("sevenQMarks", data.get(0).getSevenQMarks());
			list.put("eightQMarks", data.get(0).getEightQMarks());
			list.put("nineQMarks", data.get(0).getNineQMarks());
			list.put("tenQMarks", data.get(0).getTenQMarks());
			list.put("elevenQMarks", data.get(0).getElevenQMarks());
			list.put("twelveQMarks", data.get(0).getTwelveQMarks());

			list.put("13", data.get(0).getThirteenQMarks());
			list.put("14", data.get(0).getFourteenQMarks());
			list.put("15", data.get(0).getFifteenQMarks());
			list.put("16", data.get(0).getSixteenQMarks());
			list.put("17", data.get(0).getSeventeenQMarks());
			list.put("18", data.get(0).getEighteenQMarks());
			list.put("19", data.get(0).getNinteenQMarks());
			list.put("20", data.get(0).getTwentyQMarks());
			list.put("21", data.get(0).getTwentyoneQMarks());
			list.put("22", data.get(0).getTwentytwoQMarks());
			list.put("23", data.get(0).getTwentythreeQMarks());
			list.put("24", data.get(0).getTwentyfourQMarks());

			list.put("25", data.get(0).getTwentyfiveQMarks());
			list.put("26", data.get(0).getTwentysixQMarks());
			list.put("27", data.get(0).getTwentysevenQMarks());
			list.put("28", data.get(0).getTwentyeightQMarks());
			list.put("29", data.get(0).getTwentynineQMarks());
			list.put("30", data.get(0).getThirtyQMarks());

			list.put("31", data.get(0).getThirtyoneQMarks());
			list.put("32", data.get(0).getThirtytwoQMarks());
			list.put("33", data.get(0).getThirtythreeQMarks());
			list.put("34", data.get(0).getThirtyfourQMarks());
			list.put("35", data.get(0).getThirtyfiveQMarks());
			list.put("36", data.get(0).getThirtysixQMarks());

			list.put("37", data.get(0).getThirtysevenQMarks());
			list.put("38", data.get(0).getThirtyeightQMarks());
			list.put("39", data.get(0).getThirtynineQMarks());
			list.put("40", data.get(0).getFortyQMarks());

			list.put("externalMArks", data.get(0).getExambarcode().getExEndTermMarks());

			dataList.add(list);

			String serverurl = super.commonHelper.getSettingValue("SERVER_IP");
			String reportPath = super.commonHelper.getSettingValue("DOCUMENT_PATH"); // "src/main/resources/";
			String image = super.commonHelper.getSettingValue("IMAGE_PATH");
			logger.info(image);

			// Compile the Jasper report from .jrxml to .japser

			String path = resourceLoader.getResource("classpath:marks.jrxml").getURI().getPath();
			JasperReport jasperReport = JasperCompileManager.compileReport(path);

			JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(dataList);

			// Add parameters
			Map<String, Object> parameters = new HashMap<>();
			parameters.put("logo", image);
			parameters.put("EXbarcode", data.get(0).getExBarcode());
			parameters.put("university", university);
			parameters.put("course", data.get(0).getExambarcode().getCourses().getExName());
			parameters.put("courseCode", data.get(0).getExambarcode().getCourses().getExCoursesCode());
			parameters.put("courseCdhr",
					"(" + data.get(0).getExambarcode().getCourses().getCreditHours().getExCreditHourTitle() + ")");
			parameters.put("staff", data.get(0).getExpert().getExFullName());

			parameters.put("academicYear", data.get(0).getExambarcode().getAcademicYear().getExYear());
			parameters.put("programmes", data.get(0).getExambarcode().getProgrammes().getExName());
			parameters.put("programmeYear", data.get(0).getExambarcode().getProgrammeYear().getExName());
			parameters.put("semester", data.get(0).getExambarcode().getSemester().getExName());
			// Fill the report
			JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,
					jrBeanCollectionDataSource);

			// Export the report to a PDF file
			JasperExportManager.exportReportToPdfFile(jasperPrint, reportPath
					+ data.get(0).getExambarcode().getExAnsBookletPath() + "/VerifiedAnswerSheet" + "/Marks.pdf");

			File filenew = new File(reportPath + data.get(0).getExambarcode().getExAnsBookletPath()
					+ "/VerifiedAnswerSheet" + "/Marks.pdf");
			if (filenew.exists()) {
				filenew.setExecutable(true, false);
				filenew.setReadable(true, false);
				filenew.setWritable(true, false);
			}
			// User userid =CommonHelper.getuser(user) ;
			//// String Description= folder + "/FeeReceipt.pdf";
			// Boolean audit =CommonHelper.saveauditlogdetails(false , Description
			// ,userid,80L);
			// info.put("gradeReport", dataList);
			info.put("status", "1");
			info.put("file", filenew);
			info.put("url", data.get(0).getExambarcode().getExAnsBookletPath() + "/VerifiedAnswerSheet" + "/Marks.pdf");
			info.put("message", "Report successfully generated");
			return info;
			// supply,photocopy,revaluation

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}
	}

//Pdc
	@Override
	public Map<String, Object> generatePdcPdf(CertificatesRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();

		try {

			if (request.getExRollNo() == null || request.getExRollNo().equals("")) {
				info.put("status", "2");
				info.put("message", "roll no  is required");
				return info;
			}

			if (request.getDegree() == null || request.getDegree().equals("")) {
				info.put("status", "2");
				info.put("message", "degree is required");
				return info;
			}

			if (request.getColleges() == null || request.getColleges().equals("")) {
				info.put("status", "2");
				info.put("message", "college  is required");
				return info;
			}

			if (request.getProgrammes() == null || request.getProgrammes().equals("")) {
				info.put("status", "2");
				info.put("message", "programme  is required");
				return info;
			}
			if (request.getDateOfDeclaration() == null || request.getDateOfDeclaration().equals("")) {
				info.put("status", "2");
				info.put("message", "DateOfDeclaration is required ");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<Colleges> collage = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!collage.isPresent() || !collage.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "College not present");
				return info;
			}

			Optional<Programmes> programs = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!programs.isPresent() || !programs.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Programs not present");
				return info;
			}

			Optional<AcademicYear> academicYearid = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getEnrollmentYear());
			if (!academicYearid.isPresent()) {
				info.put("status", "2");
				info.put("message", "Student AcademicYear id not present");
				return info;
			}

			List<University> uid = super.university.findAllUnivesity();
			if (uid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "University not present");
				return info;

			}
			
			
			
			return generateallpdc(request);
	

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}
	}

	private Map<String, Object> generateallpdc(CertificatesRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();

		try {
			if(request.getDegree()== 1 && request.getProgrammes() == 1|| request.getDegree() == 2 && request.getProgrammes() == 2) {
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<Colleges> collage = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!collage.isPresent() || !collage.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "College not present");
				return info;
			}

			Optional<Programmes> programs = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!programs.isPresent() || !programs.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Programs not present");
				return info;
			}

			Optional<AcademicYear> academicYearid = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getEnrollmentYear());
			if (!academicYearid.isPresent()) {
				info.put("status", "2");
				info.put("message", "Student AcademicYear id not present");
				return info;
			}

			List<University> uid = super.university.findAllUnivesity();
			if (uid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "University not present");
				return info;

			}
			String university = uid.get(0).getExName();
			String universityk = uid.get(0).getExLocalName();
			List dataList = new LinkedList();
			Map<String, Object> parameters = new HashMap<>();

			Long scrt = (long) 1;
			List<OGPA> ogparecord =super.ogpa.findByExRollNoAndCollegesIdAndProgrammesIdAndDegreeIdAndAcademicYearIdAndExIsReGeneratedAndScrutinize(request.getExRollNo(),
					request.getColleges(), request.getProgrammes(), request.getDegree(),
					request.getEnrollmentYear(),true, scrt);		
			if (ogparecord.size() <= 0) {
				info.put("status", "2");
				info.put("message", "OGPA is not generated. ");
				return info;
			}

			List<Studentadmission> data = super.studentadmission
					.findByExRollNoAndExIsActiveAndExIsDelete(request.getExRollNo(), true, false);

			if (data.size() <= 0) {
				info.put("status", "2");
				info.put("message", "No records found..");
				return info;
			}

			for (Studentadmission e : data) {
				Map<Object, Object> list = new HashMap<Object, Object>();
				String pro = e.getProgrammes().getExName().trim();

				list.put("id", e.getId());
				list.put("programe", pro);
				list.put("programek", e.getProgrammes().getExLocalName());
				list.put("college", e.getColleges().getExName().toUpperCase());
				list.put("collegek", e.getColleges().getExLocalName());
				list.put("studentId", e.getExRollNo());
				list.put("name", e.getExName());
				list.put("enrollmentno", e.getExEnrollementNo());
				list.put("academicyear", e.getAcademicYear().getExYear());
				list.put("department", e.getDepartment().getExName());

				dataList.add(list);
			}

			String serverurl = super.commonHelper.getSettingValue("SERVER_IP");
			String reportPath = super.commonHelper.getSettingValue("DOCUMENT_PATH"); // "src/main/resources/";
			String image = super.commonHelper.getSettingValue("IMAGE_PATH");
			logger.info(image);
			// Compile the Jasper report from .jrxml to .japser

			String path = resourceLoader.getResource("classpath:pdc.jrxml").getURI().getPath();
			JasperReport jasperReport = JasperCompileManager.compileReport(path);

			// JasperReport jasperReport = JasperCompileManager.compileReport(reportPath +
			// "\\gradeReport.jrxml");
			// Get your data source

			JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(dataList);
			// Add parameters

		/*	List<Object[]> stuid = super.semesterProgressReport.getOgpa(request.getExRollNo());
			if (stuid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "No record found.");
				return info;
			}
			String marks = stuid.toString();*/
			/*
			 * List<SemesterProgressReport> sem =
			 * super.semesterProgressReport.checkogpa(request.getStudentid());
			 * System.out.println("_______________________-"+sem);
			 */ List<Studentpersonal> student = super.studentpersonal.checkStudentId(data.get(0).getExRollNo(), true,
					false);
			if (student.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Student not Present" + data.get(0).getExRollNo());
				return info;
			}

			if (student.get(0).getExGender() == null || student.get(0).getExGender().trim().isEmpty()) {
				info.put("status", "2");
				info.put("message", "missing personal details" + data.get(0).getExRollNo());
				return info;
			}

			String geneder = "", pernoun = "", adjective = "", con = "", conk = "";
			if (student.get(0).getExGender().equalsIgnoreCase("male")) {

				geneder = "son";
				pernoun = "He";
				adjective = "his";
			}
			if (student.get(0).getExGender().equalsIgnoreCase("female")) {

				geneder = "daughter";
				pernoun = "She";
				adjective = "her";
			}

			System.out.println("????????????bbbbb?????????+" + image);
			if (image == null) {
				logger.error("error for image" + image);
			}

		
			parameters.put("con", con);
			parameters.put("logo", image);
			parameters.put("joinedyear", data.get(0).getAcademicYear().getExYear());
			parameters.put("dateOfDeclaration", request.getDateOfDeclaration());
		
			parameters.put("pernoun", pernoun);
			parameters.put("ogpa", super.commonHelper.doubledigit(ogparecord.get(ogparecord.size() - 1).getOverallGradePoint()));
			parameters.put("dateOfDeclaration", request.getDateOfDeclaration());
			parameters.put("adjective", adjective);
	
			parameters.put("studentId", data.get(0).getExRollNo());
			parameters.put("university", university.toUpperCase());
			parameters.put("universityk", universityk);
			parameters.put("batch", data.get(0).getBatch().getExIdentifier());
			parameters.put("name", data.get(0).getExName());

			parameters.put("father", student.get(0).getExFatherName());
			parameters.put("mother", student.get(0).getExMotherName());

			parameters.put("geneder", geneder);

		
			parameters.put("conk", conk);

			String folder = createFolder(academicYearid.get().getExYear(), collage.get().getExIdentifier(), "pdc");

			String filename = "\\" + data.get(0).getExRollNo() + ".pdf";

			// Fill the report
			JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,
					jrBeanCollectionDataSource);

			// Export the report to a PDF file
			JasperExportManager.exportReportToPdfFile(jasperPrint, reportPath + folder + filename);

			File filenew = new File(reportPath + folder + filename);
			if (filenew.exists()) {
				filenew.setExecutable(true, false);
				filenew.setReadable(true, false);
				filenew.setWritable(true, false);
			}
			CertificatesLog logs = new CertificatesLog();

			if (request.getUser() == null || request.getUser().equals("")) {
				logs.setUser(null);
			} else {
				List<User> userresult = super.user.findByIdAndExIsDelete(request.getUser(), false);
				if (userresult.size() <= 0) {
					info.put("status", "2");
					info.put("message", "User id not present");
					return info;
				}

				logs.setUser(userresult.get(0));

			}
			Date date = new Date();
			logs.setExUrl(folder + filename.replace("\\", "/"));
			logs.setExCreateDate(date);
			logs.setExFileName(filename);
			logs.setColleges(collage.get());
			logs.setProgrammes(programs.get());
			logs.setDegree(degree.get());
			logs.setStudentadmission(data.get(0));
		
			logs.setExRollNo(request.getExRollNo());
			//logs.setScrutinize(request.getScrutinize());
			logs.setAcademicyear(academicYearid.get());
			super.certificatelog.save(logs);
			
			
			info.put("status", "1");
			info.put("url", folder + filename);
			info.put("message", "Report successfully generated");

			return info;
			}
			if( request.getDegree() == 2 && request.getProgrammes() == 3) {
				Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
				if (!degree.isPresent() || !degree.get().getExIsActive()) {
					info.put("status", "2");
					info.put("message", "Degree not present");
					return info;
				}
				Optional<Colleges> collage = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
						true);
				if (!collage.isPresent() || !collage.get().getExIsActive()) {
					info.put("status", "2");
					info.put("message", "College not present");
					return info;
				}

				Optional<Programmes> programs = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getProgrammes());
				if (!programs.isPresent() || !programs.get().getExIsActive()) {
					info.put("status", "2");
					info.put("message", "Programs not present");
					return info;
				}

				Optional<AcademicYear> academicYearid = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getEnrollmentYear());
				if (!academicYearid.isPresent()) {
					info.put("status", "2");
					info.put("message", "Student AcademicYear id not present");
					return info;
				}

				List<University> uid = super.university.findAllUnivesity();
				if (uid.size() <= 0) {
					info.put("status", "2");
					info.put("message", "University not present");
					return info;

				}
				String university = uid.get(0).getExName();
				String universityk = uid.get(0).getExLocalName();
				List dataList = new LinkedList();
				Map<String, Object> parameters = new HashMap<>();

				Long scrt = (long) 1;
				List<OGPA> ogparecord =super.ogpa.findByExRollNoAndCollegesIdAndProgrammesIdAndDegreeIdAndAcademicYearIdAndExIsReGeneratedAndScrutinize(request.getExRollNo(),
						request.getColleges(), request.getProgrammes(), request.getDegree(),
						request.getEnrollmentYear(),true, scrt);		
				if (ogparecord.size() <= 0) {
					info.put("status", "2");
					info.put("message", "OGPA is not generated. ");
					return info;
				}

				List<Studentadmission> data = super.studentadmission
						.findByExRollNoAndExIsActiveAndExIsDelete(request.getExRollNo(), true, false);

				if (data.size() <= 0) {
					info.put("status", "2");
					info.put("message", "No records found..");
					return info;
				}

				for (Studentadmission e : data) {
					Map<Object, Object> list = new HashMap<Object, Object>();
					String pro = e.getProgrammes().getExName().trim();

					list.put("id", e.getId());
					list.put("programe", pro);
					list.put("programek", e.getProgrammes().getExLocalName());
					list.put("college", e.getColleges().getExName().toUpperCase());
					list.put("collegek", e.getColleges().getExLocalName());
					list.put("studentId", e.getExRollNo());
					list.put("name", e.getExName());
					list.put("enrollmentno", e.getExEnrollementNo());
					list.put("academicyear", e.getAcademicYear().getExYear());
					list.put("department", e.getDepartment().getExName());

					dataList.add(list);
				}

				String serverurl = super.commonHelper.getSettingValue("SERVER_IP");
				String reportPath = super.commonHelper.getSettingValue("DOCUMENT_PATH"); // "src/main/resources/";
				String image = super.commonHelper.getSettingValue("IMAGE_PATH");
				logger.info(image);
				// Compile the Jasper report from .jrxml to .japser

				String path = resourceLoader.getResource("classpath:mbaPdc.jrxml").getURI().getPath();
				JasperReport jasperReport = JasperCompileManager.compileReport(path);

				// JasperReport jasperReport = JasperCompileManager.compileReport(reportPath +
				// "\\gradeReport.jrxml");
				// Get your data source

				JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(dataList);
				// Add parameters

			/*	List<Object[]> stuid = super.semesterProgressReport.getOgpa(request.getExRollNo());
				if (stuid.size() <= 0) {
					info.put("status", "2");
					info.put("message", "No record found.");
					return info;
				}
				String marks = stuid.toString();*/
				/*
				 * List<SemesterProgressReport> sem =
				 * super.semesterProgressReport.checkogpa(request.getStudentid());
				 * System.out.println("_______________________-"+sem);
				 */ List<Studentpersonal> student = super.studentpersonal.checkStudentId(data.get(0).getExRollNo(), true,
						false);
				if (student.size() <= 0) {
					info.put("status", "2");
					info.put("message", "Student not Present" + data.get(0).getExRollNo());
					return info;
				}

				if (student.get(0).getExGender() == null || student.get(0).getExGender().trim().isEmpty()) {
					info.put("status", "2");
					info.put("message", "missing personal details" + data.get(0).getExRollNo());
					return info;
				}

				String geneder = "", pernoun = "", adjective = "", con = "", conk = "";
				if (student.get(0).getExGender().equalsIgnoreCase("male")) {

					geneder = "son";
					pernoun = "He";
					adjective = "his";
				}
				if (student.get(0).getExGender().equalsIgnoreCase("female")) {

					geneder = "daughter";
					pernoun = "She";
					adjective = "her";
				}

				System.out.println("????????????bbbbb?????????+" + image);
				if (image == null) {
					logger.error("error for image" + image);
				}

			
				parameters.put("con", con);
				parameters.put("logo", image);
				parameters.put("joinedyear", data.get(0).getAcademicYear().getExYear());
				parameters.put("dateOfDeclaration", request.getDateOfDeclaration());
			
				parameters.put("pernoun", pernoun);
				parameters.put("ogpa", super.commonHelper.doubledigit(ogparecord.get(ogparecord.size() - 1).getOverallGradePoint()));
				parameters.put("dateOfDeclaration", request.getDateOfDeclaration());
				parameters.put("adjective", adjective);
		
				parameters.put("studentId", data.get(0).getExRollNo());
				parameters.put("university", university.toUpperCase());
				parameters.put("universityk", universityk);
				parameters.put("batch", data.get(0).getBatch().getExIdentifier());
				parameters.put("name", data.get(0).getExName());

				parameters.put("father", student.get(0).getExFatherName());
				parameters.put("mother", student.get(0).getExMotherName());

				parameters.put("geneder", geneder);

			
				parameters.put("conk", conk);

				String folder = createFolder(academicYearid.get().getExYear(), collage.get().getExIdentifier(), "pdc");

				String filename = "\\" + data.get(0).getExRollNo() + ".pdf";

				// Fill the report
				JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,
						jrBeanCollectionDataSource);

				// Export the report to a PDF file
				JasperExportManager.exportReportToPdfFile(jasperPrint, reportPath + folder + filename);

				File filenew = new File(reportPath + folder + filename);
				if (filenew.exists()) {
					filenew.setExecutable(true, false);
					filenew.setReadable(true, false);
					filenew.setWritable(true, false);
				}
				CertificatesLog logs = new CertificatesLog();

				if (request.getUser() == null || request.getUser().equals("")) {
					logs.setUser(null);
				} else {
					List<User> userresult = super.user.findByIdAndExIsDelete(request.getUser(), false);
					if (userresult.size() <= 0) {
						info.put("status", "2");
						info.put("message", "User id not present");
						return info;
					}

					logs.setUser(userresult.get(0));

				}
				Date date = new Date();
				logs.setExUrl(folder + filename.replace("\\", "/"));
				logs.setExCreateDate(date);
				logs.setExFileName(filename);
				logs.setColleges(collage.get());
				logs.setProgrammes(programs.get());
				logs.setDegree(degree.get());
				logs.setStudentadmission(data.get(0));
			
				logs.setExRollNo(request.getExRollNo());
				//logs.setScrutinize(request.getScrutinize());
				logs.setAcademicyear(academicYearid.get());
				super.certificatelog.save(logs);
				
				
				info.put("status", "1");
				info.put("url", folder + filename);
				info.put("message", "Report successfully generated");

				return info;
				}
			if(request.getDegree()== 3) {
				Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
				if (!degree.isPresent() || !degree.get().getExIsActive()) {
					info.put("status", "2");
					info.put("message", "Degree not present");
					return info;
				}
				Optional<Colleges> collage = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
						true);
				if (!collage.isPresent() || !collage.get().getExIsActive()) {
					info.put("status", "2");
					info.put("message", "College not present");
					return info;
				}

				Optional<Programmes> programs = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getProgrammes());
				if (!programs.isPresent() || !programs.get().getExIsActive()) {
					info.put("status", "2");
					info.put("message", "Programs not present");
					return info;
				}

				Optional<AcademicYear> academicYearid = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getEnrollmentYear());
				if (!academicYearid.isPresent()) {
					info.put("status", "2");
					info.put("message", "Student AcademicYear id not present");
					return info;
				}

				List<University> uid = super.university.findAllUnivesity();
				if (uid.size() <= 0) {
					info.put("status", "2");
					info.put("message", "University not present");
					return info;

				}
				String university = uid.get(0).getExName();
				String universityk = uid.get(0).getExLocalName();
				List dataList = new LinkedList();
				Map<String, Object> parameters = new HashMap<>();

				Long scrt = (long) 1;
			

				List<Studentadmission> data = super.studentadmission
						.findByExRollNoAndExIsActiveAndExIsDelete(request.getExRollNo(), true, false);

				if (data.size() <= 0) {
					info.put("status", "2");
					info.put("message", "No records found..");
					return info;
				}
				
				for (Studentadmission e : data) {
					Map<Object, Object> list = new HashMap<Object, Object>();
					String pro = e.getProgrammes().getExName().trim();

					list.put("id", e.getId());
					list.put("programe", pro);
					list.put("programek", e.getProgrammes().getExLocalName());
					list.put("college", e.getColleges().getExName());
					list.put("degree", e.getDegree().getExDescription().trim());
					list.put("collegek", e.getColleges().getExLocalName());
					list.put("studentId", e.getExRollNo());
					list.put("name", e.getExName());
					list.put("enrollmentno", e.getExEnrollementNo());
					list.put("academicyear", e.getAcademicYear().getExYear());
					list.put("department", e.getDepartment().getExName());
				

					dataList.add(list);
				}

				String serverurl = super.commonHelper.getSettingValue("SERVER_IP");
				String reportPath = super.commonHelper.getSettingValue("DOCUMENT_PATH"); // "src/main/resources/";
				String image = super.commonHelper.getSettingValue("IMAGE_PATH");
				
				String image1 = super.commonHelper.getSettingValue("MOFPI_PATH");
				String image2 = super.commonHelper.getSettingValue("EMBLEM_PATH");
				logger.info(image);
				// Compile the Jasper report from .jrxml to .japser

				String path = resourceLoader.getResource("classpath:PhdPdc.jrxml").getURI().getPath();
				JasperReport jasperReport = JasperCompileManager.compileReport(path);

				// JasperReport jasperReport = JasperCompileManager.compileReport(reportPath +
				// "\\gradeReport.jrxml");
				// Get your data source

				JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(dataList);
				// Add parameters

			/*	List<Object[]> stuid = super.semesterProgressReport.getOgpa(request.getExRollNo());
				if (stuid.size() <= 0) {
					info.put("status", "2");
					info.put("message", "No record found.");
					return info;
				}
				String marks = stuid.toString();*/
				/*
				 * List<SemesterProgressReport> sem =
				 * super.semesterProgressReport.checkogpa(request.getStudentid());
				 * System.out.println("_______________________-"+sem);
				 */ List<Studentpersonal> student = super.studentpersonal.checkStudentId(data.get(0).getExRollNo(), true,
						false);
				if (student.size() <= 0) {
					info.put("status", "2");
					info.put("message", "Student not Present" + data.get(0).getExRollNo());
					return info;
				}

				if (student.get(0).getExGender() == null || student.get(0).getExGender().trim().isEmpty()) {
					info.put("status", "2");
					info.put("message", "missing personal details" + data.get(0).getExRollNo());
					return info;
				}

				String geneder = "", pernoun = "", adjective = "", con = "", conk = "";
				if (student.get(0).getExGender().equalsIgnoreCase("male")) {

					geneder = "son";
					pernoun = "He";
					adjective = "his";
				}
				if (student.get(0).getExGender().equalsIgnoreCase("female")) {

					geneder = "daughter";
					pernoun = "She";
					adjective = "her";
				}

				System.out.println("????????????bbbbb?????????+" + image);
				if (image == null) {
					logger.error("error for image" + image);
				}

				// double precentage = ogparecord.get(ogparecord.size() -
				// 1).getOverallGradePoint() * 10;
				// double prevalue = CommonHelper.changeDecimal(precentage);
				parameters.put("con", con);
				parameters.put("logo", image);
			
				parameters.put("emblem", image1);
				parameters.put("photo", image2);
				parameters.put("joinedyear", data.get(0).getAcademicYear().getExYear());
				parameters.put("dateOfDeclaration", request.getDateOfDeclaration());
				// parameters.put("studentIdk", CommonHelper.kannadaid(request.getStudentid(),
				// request.getCollegesid(), request.getProgrammesid(),
				// request.getEnrollmentYear()));

				// parameters.put("passoutyear", data.get(0).getPassedOutYear());
		//		parameters.put("ogpa", marks);
		//		parameters.put("ogpa", stuid);
				parameters.put("pernoun", pernoun);
				
				parameters.put("adjective", adjective);

				parameters.put("university", university.toUpperCase());
				parameters.put("universityk", universityk);
				parameters.put("studentId", data.get(0).getExRollNo());
				parameters.put("name", data.get(0).getExName());

				parameters.put("father", student.get(0).getExFatherName());
				parameters.put("mother", student.get(0).getExMotherName());

				parameters.put("geneder", geneder);

			
				parameters.put("conk", conk);

				String folder = createFolder(academicYearid.get().getExYear(), collage.get().getExIdentifier(), "pdc");

				String filename = "\\" + data.get(0).getExRollNo() + ".pdf";

				// Fill the report
				JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,
						jrBeanCollectionDataSource);

				// Export the report to a PDF file
				JasperExportManager.exportReportToPdfFile(jasperPrint, reportPath + folder + filename);

				File filenew = new File(reportPath + folder + filename);
				if (filenew.exists()) {
					filenew.setExecutable(true, false);
					filenew.setReadable(true, false);
					filenew.setWritable(true, false);
				}

				CertificatesLog logs = new CertificatesLog();

				if (request.getUser() == null || request.getUser().equals("")) {
					logs.setUser(null);
				} else {
					List<User> userresult = super.user.findByIdAndExIsDelete(request.getUser(), false);
					if (userresult.size() <= 0) {
						info.put("status", "2");
						info.put("message", "User id not present");
						return info;
					}

					logs.setUser(userresult.get(0));

				}
				Date date = new Date();
				logs.setExUrl(folder + filename.replace("\\", "/"));
				logs.setExCreateDate(date);
				logs.setExFileName(filename);
				logs.setColleges(collage.get());
				logs.setProgrammes(programs.get());
				logs.setDegree(degree.get());
				logs.setStudentadmission(data.get(0));
			
				logs.setExRollNo(request.getExRollNo());
				//logs.setScrutinize(request.getScrutinize());
				logs.setAcademicyear(academicYearid.get());
				super.certificatelog.save(logs);
				
				info.put("status", "1");
				info.put("url", folder + filename);
				info.put("message", "Report successfully generated");

				return info;
				}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}
		return info;
	}
			

	@Override
	public Map<String, Object> generateTRancriptOgpaPdf(CertificatesRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();

		try {

			if (request.getExRollNo() == null || request.getExRollNo().equals("")) {
				info.put("status", "2");
				info.put("message", "studentid is required");
				return info;
			}

			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<Colleges> collage = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!collage.isPresent() || !collage.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "College not present");
				return info;
			}

			Optional<Programmes> programs = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!programs.isPresent() || !programs.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Programs not present");
				return info;
			}
			Optional<Department> dept = super.department.findByIdAndExIsDeleteAndExIsActive(request.getDepartment(),
					false, true);
			if (!dept.isPresent()) {
				info.put("status", "2");
				info.put("message", "department not  present");
				return info;

			}

			List<University> uid = super.university.findAllUnivesity();
			if (uid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "University not present");
				return info;

			}
			String university = uid.get(0).getExName();

			List<Studentadmission> student = super.studentadmission
					.findByExRollNoAndExIsActiveAndExIsDelete(request.getExRollNo(), true, false);

			if (student.size() <= 0) {
				info.put("status", "2");
				info.put("message", "No records found.vv");
				return info;
			}
			List<Studentpersonal> studentPersonal = super.studentpersonal.checkExRollNo(request.getExRollNo(), true,
					false);
			if (studentPersonal.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Student not Present");
				return info;
			}
			List<SemesterProgressReport> semesterreport = super.semesterProgressReport
					.findByCollegesIdAndDegreeIdAndProgrammesIdAndExRollNo(request.getColleges(), request.getDegree(),
							request.getProgrammes(), request.getExRollNo());
			logger.info("semseter report count" + semesterreport.size());
		
		return generateogpa(request);
		
		
			// OGPA Log

		

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}
	}


	private Map<String, Object>  generateogpa(CertificatesRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();

		try {
		
		////long programs = 0;
	if(request.getProgrammes() == 1) {
		Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
		if (!degree.isPresent() || !degree.get().getExIsActive()) {
			info.put("status", "2");
			info.put("message", "Degree not present");
			return info;
		}
		Optional<Colleges> collage = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
				true);
		if (!collage.isPresent() || !collage.get().getExIsActive()) {
			info.put("status", "2");
			info.put("message", "College not present");
			return info;
		}

		Optional<Programmes> programs1 = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
				request.getProgrammes());
		if (!programs1.isPresent() || !programs1.get().getExIsActive()) {
			info.put("status", "2");
			info.put("message", "Programs not present");
			return info;
		}
		Optional<Department> dept = super.department.findByIdAndExIsDeleteAndExIsActive(request.getDepartment(),
				false, true);
		if (!dept.isPresent()) {
			info.put("status", "2");
			info.put("message", "department not  present");
			return info;

		}

		List<University> uid = super.university.findAllUnivesity();
		if (uid.size() <= 0) {
			info.put("status", "2");
			info.put("message", "University not present");
			return info;

		}
		String university = uid.get(0).getExName();

		List<Studentadmission> student = super.studentadmission
				.findByExRollNoAndExIsActiveAndExIsDelete(request.getExRollNo(), true, false);

		if (student.size() <= 0) {
			info.put("status", "2");
			info.put("message", "No records found.vv");
			return info;
		}
		List<Studentpersonal> studentPersonal = super.studentpersonal.checkExRollNo(request.getExRollNo(), true,
				false);
		if (studentPersonal.size() <= 0) {
			info.put("status", "2");
			info.put("message", "Student not Present");
			return info;
		}
		List<SemesterProgressReport> semesterreport = super.semesterProgressReport
				.findByCollegesIdAndDegreeIdAndProgrammesIdAndExRollNo(request.getColleges(), request.getDegree(),
						request.getProgrammes(), request.getExRollNo());
		logger.info("semseter report count" + semesterreport.size());
	
		List dataListsem = new LinkedList();
		List<SemesterProgressReport> semesterreportchcek = super.semesterProgressReport
				.findByCollegesIdAndDegreeIdAndProgrammesIdAndExRollNoAndSemesterId(request.getColleges(),
						request.getDegree(), request.getProgrammes(), request.getExRollNo(), 1L);
		logger.info("semseter report count" + semesterreportchcek.size());
		List<SemesterProgressReport> semesterreportchcek1 = super.semesterProgressReport
				.findByCollegesIdAndDegreeIdAndProgrammesIdAndExRollNoAndSemesterId(request.getColleges(),
						request.getDegree(), request.getProgrammes(), request.getExRollNo(), 2L);
		logger.info("semseter report count" + semesterreportchcek.size());
		List<SemesterProgressReport> semesterreportchcek2 = super.semesterProgressReport
				.findByCollegesIdAndDegreeIdAndProgrammesIdAndExRollNoAndSemesterId(request.getColleges(),
						request.getDegree(), request.getProgrammes(), request.getExRollNo(), 3L);
		logger.info("semseter report count" + semesterreportchcek.size());
		List<SemesterProgressReport> semesterreportchcek3 = super.semesterProgressReport
				.findByCollegesIdAndDegreeIdAndProgrammesIdAndExRollNoAndSemesterId(request.getColleges(),
						request.getDegree(), request.getProgrammes(), request.getExRollNo(), 4L);
		logger.info("semseter report count" + semesterreportchcek.size());
		List<SemesterProgressReport> semesterreportchcek4 = super.semesterProgressReport
				.findByCollegesIdAndDegreeIdAndProgrammesIdAndExRollNoAndSemesterId(request.getColleges(),
						request.getDegree(), request.getProgrammes(), request.getExRollNo(), 5L);
		logger.info("semseter report count" + semesterreportchcek.size());
		List<SemesterProgressReport> semesterreportchcek5 = super.semesterProgressReport
				.findByCollegesIdAndDegreeIdAndProgrammesIdAndExRollNoAndSemesterId(request.getColleges(),
						request.getDegree(), request.getProgrammes(), request.getExRollNo(), 6L);
		logger.info("semseter report count" + semesterreportchcek.size());
		List<SemesterProgressReport> semesterreportchcek6 = super.semesterProgressReport
				.findByCollegesIdAndDegreeIdAndProgrammesIdAndExRollNoAndSemesterId(request.getColleges(),
						request.getDegree(), request.getProgrammes(), request.getExRollNo(), 7L);
		logger.info("semseter report count" + semesterreportchcek.size());
		List<SemesterProgressReport> semesterreportchcek7 = super.semesterProgressReport
				.findByCollegesIdAndDegreeIdAndProgrammesIdAndExRollNoAndSemesterId(request.getColleges(),
						request.getDegree(), request.getProgrammes(), request.getExRollNo(), 8L);
		logger.info("semseter report count" + semesterreportchcek.size());

		

		List<Object[]> stuid = super.semesterProgressReport.getOgpa(request.getExRollNo());
		if (stuid.size() <= 0) {
			info.put("status", "2");
			info.put("message", "No record found.");
			
		}
		String marks1 = stuid.toString();
		
		String marks =marks1.replace("[", " ").replace("]", " "); 
		String sub = student.get(0).getBatch().getExName();
		CharSequence substring = sub.subSequence(0, 4);

		System.out.println("Niftem check " + marks);
		System.out.println("Niftem check1234 " + marks1);
		
		
		List dataList = new LinkedList();

		List<Object[]> data = super.gradeReport.getSemesterResult(request.getExRollNo(), 1L);
		
		List<Object[]> data1 = super.gradeReport.getSemesterResult(request.getExRollNo(), 2L);
		
		List<Object[]> data2 = super.gradeReport.getSemesterResult(request.getExRollNo(), 3L);
		
		List<Object[]> data3 = super.gradeReport.getSemesterResult(request.getExRollNo(), 4L);
		
		List<Object[]> data4 = super.gradeReport.getSemesterResult(request.getExRollNo(), 5L);
		
		List<Object[]> data5 = super.gradeReport.getSemesterResult(request.getExRollNo(), 6L);
		
		List<Object[]> data6 = super.gradeReport.getSemesterResult(request.getExRollNo(), 7L);
		
		List<Object[]> data7 = super.gradeReport.getSemesterResult(request.getExRollNo(), 8L);
		
		int count = 0;
		for (Object[] e : data) {
		
			Map<Object, Object> studentinfo = new HashMap<Object, Object>();
			studentinfo.put("code", e[0]);
			studentinfo.put("title", e[1]);
			studentinfo.put("credit ", e[2]);
			studentinfo.put("lettergrade", e[3]);
			System.out.println(">>>>>code" + studentinfo);

			dataList.add(studentinfo);
			count++;
		}
		List dataList1 = new LinkedList();
		for (Object[] e : data1) {
			Map<Object, Object> studentinfo1 = new HashMap<Object, Object>();
			studentinfo1.put("code", e[0]);
			studentinfo1.put("title", e[1]);
			studentinfo1.put("credit ", e[2]);
			studentinfo1.put("lettergrade", e[3]);
			System.out.println(">>>>>code" + studentinfo1);

			dataList1.add(studentinfo1);
			count++;
		}
		List dataList2 = new LinkedList();
		for (Object[] e : data2) {
			Map<Object, Object> studentinfo2 = new HashMap<Object, Object>();
			studentinfo2.put("code", e[0]);
			studentinfo2.put("title", e[1]);
			studentinfo2.put("credit ", e[2]);
			studentinfo2.put("lettergrade", e[3]);
			System.out.println(">>>>>code" + studentinfo2);

			dataList2.add(studentinfo2);
			count++;
		}
		List dataList3 = new LinkedList();
		for (Object[] e : data3) {
			Map<Object, Object> studentinfo3 = new HashMap<Object, Object>();
			studentinfo3.put("code", e[0]);
			studentinfo3.put("title", e[1]);
			studentinfo3.put("credit ", e[2]);
			studentinfo3.put("lettergrade", e[3]);
			System.out.println(">>>>>code" + studentinfo3);

			dataList3.add(studentinfo3);
			count++;
		}
		List dataList4 = new LinkedList();
		for (Object[] e : data4) {
			Map<Object, Object> studentinfo4 = new HashMap<Object, Object>();
			studentinfo4.put("code", e[0]);
			studentinfo4.put("title", e[1]);
			studentinfo4.put("credit ", e[2]);
			studentinfo4.put("lettergrade", e[3]);
			System.out.println(">>>>>code" + studentinfo4);

			dataList4.add(studentinfo4);
			count++;
		}
		List dataList5 = new LinkedList();
		for (Object[] e : data5) {
			Map<Object, Object> studentinfo5 = new HashMap<Object, Object>();
			studentinfo5.put("code", e[0]);
			studentinfo5.put("title", e[1]);
			studentinfo5.put("credit ", e[2]);
			studentinfo5.put("lettergrade", e[3]);
			System.out.println(">>>>>code" + studentinfo5);

			dataList5.add(studentinfo5);
			count++;
		}
		List dataList6 = new LinkedList();
		for (Object[] e : data6) {
			Map<Object, Object> studentinfo6 = new HashMap<Object, Object>();
			studentinfo6.put("code", e[0]);
			studentinfo6.put("title", e[1]);
			studentinfo6.put("credit ", e[2]);
			studentinfo6.put("lettergrade", e[3]);
			System.out.println(">>>>>code" + studentinfo6);

			dataList6.add(studentinfo6);
			count++;
		}
		List dataList7 = new LinkedList();
		for (Object[] e : data7) {
			Map<Object, Object> studentinfo7 = new HashMap<Object, Object>();
			studentinfo7.put("code", e[0]);
			studentinfo7.put("title", e[1]);
			studentinfo7.put("credit ", e[2]);
			studentinfo7.put("lettergrade", e[3]);
			System.out.println(">>>>>code" + studentinfo7);

			dataList7.add(studentinfo7);
			count++;
		}
		System.out.println(">>>.studeny" + data);
		String serverurl = super.commonHelper.getSettingValue("SERVER_IP");

		String reportPath = super.commonHelper.getSettingValue("DOCUMENT_PATH");
		String image = super.commonHelper.getSettingValue("IMAGE_PATH");
		String image1 = super.commonHelper.getSettingValue("MOFPI_PATH");
		String image2 = super.commonHelper.getSettingValue("EMBLEM_PATH");

		logger.info(image);
		logger.info(image1);
		logger.info(image2);

		// Compile the Jasper report from .jrxml to .japser
		String studentphoto = student.get(0).getExPhoto();
		String formula = "images/DAS_5641.JPG";
		
		String phoy = serverurl + studentphoto;
		System.out.println(">check photo" + phoy);
		logger.info("student Photo Path>>>>>>>" + phoy);
		String path = "";
		if (student.get(0).getBatch().getId()==5 && request.getDegree() == 1) {
			
			path = resourceLoader.getResource("classpath:16-20Transcript.jrxml").getURI().getPath();
			}
			
		else if (student.get(0).getBatch().getId()==1 && request.getDegree() == 1) {
			
			 path = resourceLoader.getResource("classpath:btechOgpa.jrxml").getURI().getPath();	
			}
		else if (student.get(0).getBatch().getId()==4 && request.getDegree() == 1) {
			
			 path = resourceLoader.getResource("classpath:15-19Transcript.jrxml").getURI().getPath();	
			}
		else if (student.get(0).getBatch().getId()==3 && request.getDegree() == 1) {
			
			 path = resourceLoader.getResource("classpath:14-18Transcript.jrxml").getURI().getPath();	
			}
		else if (student.get(0).getBatch().getId()==2 && request.getDegree() == 1) {
			
			 path = resourceLoader.getResource("classpath:13-17Transcript.jrxml").getURI().getPath();	
			}
	
		else {
			
			 path = resourceLoader.getResource("classpath:16-20Transcript2.jrxml").getURI().getPath();	
			}
		
		JasperReport jasperReport = JasperCompileManager.compileReport(path);

		JRBeanCollectionDataSource datasource = new JRBeanCollectionDataSource(dataList);
		JRBeanCollectionDataSource datasource1 = new JRBeanCollectionDataSource(dataList1);
		JRBeanCollectionDataSource datasource2 = new JRBeanCollectionDataSource(dataList2);
		JRBeanCollectionDataSource datasource3 = new JRBeanCollectionDataSource(dataList3);
		JRBeanCollectionDataSource datasource4 = new JRBeanCollectionDataSource(dataList4);
		JRBeanCollectionDataSource datasource5 = new JRBeanCollectionDataSource(dataList5);
		JRBeanCollectionDataSource datasource6 = new JRBeanCollectionDataSource(dataList6);
		JRBeanCollectionDataSource datasource7 = new JRBeanCollectionDataSource(dataList7);
		System.out.println(">>>>>>>>>>>ds" + datasource);
		Map<String, Object> parameters = new HashMap<>();
		// Add parameters
		parameters.put("ds", datasource);
		parameters.put("ds1", datasource1);
		parameters.put("ds3", datasource2);
		parameters.put("ds4", datasource3);
		parameters.put("ds5", datasource4);
		parameters.put("ds6", datasource5);
		parameters.put("ds7", datasource6);
		parameters.put("ds8", datasource7);
		parameters.put("logo", image);
		parameters.put("emblem", image1);
		parameters.put("logo1", image2);
		parameters.put("studentphoto", phoy);
		parameters.put("university", university);
		parameters.put("exRollNo", student.get(0).getExRollNo());

		parameters.put("exFirstName", studentPersonal.get(0).getStudentadmission().getExName());
		//parameters.put("studentphoto", phoy);
		parameters.put("formula", formula);
		System.out.println(">>>>>..check studentb phot " + serverurl + studentphoto);
		System.out.println(">>>>>..cparameters " + parameters);
		// parameters.put("enrollementNo",
		// studentPersonal.get(0).getStudentadmission().getExEnrollementNo());
		parameters.put("father", studentPersonal.get(0).getExFatherName());
		parameters.put("mother", studentPersonal.get(0).getExMotherName());
		parameters.put("exEnrollementNo", student.get(0).getExEnrollementNo());
		parameters.put("degree", degree.get().getExName());
		parameters.put("programmes", programs1.get().getExName().toUpperCase());
		parameters.put("dept", "(" + dept.get().getExName() + ")");
		
		DecimalFormat df2 = new DecimalFormat("####0.00");
				//String ogpa = df2.format(marks);
				
				//double firstcamugrade = semesterreportchcek.get(0).getExCamuGradePointAv();
				
				String camgradepointav = df2.format(semesterreportchcek.get(0).getExCamuGradePointAv());
				String gradepointav = df2.format(semesterreportchcek.get(0).getExGradePointAv());
				String camgradepointav1 = df2.format(semesterreportchcek1.get(0).getExCamuGradePointAv());
				String gradepointav1 = df2.format(semesterreportchcek1.get(0).getExGradePointAv());
				String camgradepointav2 = df2.format(semesterreportchcek2.get(0).getExCamuGradePointAv());
				String gradepointav2 = df2.format(semesterreportchcek2.get(0).getExGradePointAv());
				String camgradepointav3 = df2.format(semesterreportchcek3.get(0).getExCamuGradePointAv());
				String gradepointav3 = df2.format(semesterreportchcek3.get(0).getExGradePointAv());
				String camgradepointav4 = df2.format(semesterreportchcek4.get(0).getExCamuGradePointAv());
				String gradepointav4 = df2.format(semesterreportchcek4.get(0).getExGradePointAv());
				String camgradepointav5 = df2.format(semesterreportchcek5.get(0).getExCamuGradePointAv());
				String gradepointav5 = df2.format(semesterreportchcek5.get(0).getExGradePointAv());
				String camgradepointav6 = df2.format(semesterreportchcek6.get(0).getExCamuGradePointAv());
				String gradepointav6 = df2.format(semesterreportchcek6.get(0).getExGradePointAv());
				String camgradepointav7 = df2.format( semesterreportchcek7.get(0).getExCamuGradePointAv());
				String gradepointav7 = df2.format(semesterreportchcek7.get(0).getExGradePointAv());
		
				parameters.put("ogpa", marks);
				parameters.put("camgradepointav",camgradepointav );
				parameters.put("gradepointav", gradepointav);
				parameters.put("camgradepointav1",camgradepointav1 );
				parameters.put("gradepointav1",gradepointav1 );
				parameters.put("camgradepointav2",camgradepointav2 );
				parameters.put("gradepointav2",gradepointav2 );
				parameters.put("camgradepointav3", camgradepointav3);
				parameters.put("gradepointav3",gradepointav3 );
				parameters.put("camgradepointav4",camgradepointav4);
				parameters.put("gradepointav4", gradepointav4);
				parameters.put("camgradepointav5", camgradepointav5);
				parameters.put("gradepointav5",gradepointav5 );
				parameters.put("camgradepointav6", camgradepointav6);
				parameters.put("gradepointav6", gradepointav6);
				parameters.put("camgradepointav7",camgradepointav7);
				parameters.put("gradepointav7", gradepointav7);
		
				
	/*	parameters.put("ogpa", ogpa);
		parameters.put("camgradepointav", semesterreportchcek.get(0).getExCamuGradePointAv());
		parameters.put("gradepointav", semesterreportchcek.get(0).getExGradePointAv());
		parameters.put("camgradepointav1", semesterreportchcek1.get(0).getExCamuGradePointAv());
		parameters.put("gradepointav1", semesterreportchcek1.get(0).getExGradePointAv());
		parameters.put("camgradepointav2", semesterreportchcek2.get(0).getExCamuGradePointAv());
		parameters.put("gradepointav2", semesterreportchcek2.get(0).getExGradePointAv());
		parameters.put("camgradepointav3", semesterreportchcek3.get(0).getExCamuGradePointAv());
		parameters.put("gradepointav3", semesterreportchcek3.get(0).getExGradePointAv());
		parameters.put("camgradepointav4", semesterreportchcek4.get(0).getExCamuGradePointAv());
		parameters.put("gradepointav4", semesterreportchcek4.get(0).getExGradePointAv());
		parameters.put("camgradepointav5", semesterreportchcek5.get(0).getExCamuGradePointAv());
		parameters.put("gradepointav5", semesterreportchcek5.get(0).getExGradePointAv());
		parameters.put("camgradepointav6", semesterreportchcek6.get(0).getExCamuGradePointAv());
		parameters.put("gradepointav6", semesterreportchcek6.get(0).getExGradePointAv());
		parameters.put("camgradepointav7", semesterreportchcek7.get(0).getExCamuGradePointAv());
		parameters.put("gradepointav7", semesterreportchcek7.get(0).getExGradePointAv());*/
		System.out.println(">>>>>>>..parameters." + parameters);
		parameters.put("dateOfDeclaration", request.getDateOfDeclaration());
		parameters.put("migrationserialnumber",student.get(0).getDegree().getExName()+"/"+substring+"/"+student.get(0).getExRollNo());
		
		parameters.put("dateofbirth", studentPersonal.get(0).getExDateOfBirth());
		parameters.put("batch", student.get(0).getBatch().getExIdentifier());
		String folder = createFolder(degree.get().getExName(), programs1.get().getExName(), "ogpaReport");

		// Fill the report
		JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters, new JREmptyDataSource());
		System.out.println("?d" + jasperPrint);
		System.out.println("?jasperPrintjasperPrint" + jasperReport);
		System.out.println("?parameters" + parameters);
		System.out.println("?jrBeanCollectionDataSource" + datasource);
		String filename = "\\" + degree.get().getExName() + " " + "(" + programs1.get().getExName() + ")" + ".pdf";

		// Export the report to a PDF file
		JasperExportManager.exportReportToPdfFile(jasperPrint, reportPath + folder + filename);
		System.out.println("?jasperexport" + jasperPrint);
		File filenew = new File(reportPath + folder + filename);
		if (filenew.exists()) {
			filenew.setExecutable(true, false);
			filenew.setReadable(true, false);
			filenew.setWritable(true, false);
		}
		Long scrt = (long) 1;
		Date date = new Date();
		OGPA OGPA = new OGPA();
		
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(student.get(0).getAcademicYear().getExEnddate());
		char firstval = student.get(0).getId().toString().charAt(0);
		char secondval = student.get(0).getId().toString().charAt(1);
		char third = student.get(0).getId().toString().charAt(2);		
		//OGPA.setMaigrationSrNo("N/EX/R&/"+calendar.get(Calendar.YEAR)+"/"+firstval+""+secondval+"/"+firstval+""+secondval+""+third);
		System.out.println("migration serialnumber " +student.get(0).getDegree().getExName()+"/"+substring+"/"+student.get(0).getExRollNo());
		OGPA.setMaigrationSrNo(student.get(0).getDegree().getExName()+"/"+substring+"/"+student.get(0).getExRollNo()); 
		OGPA.setColleges(collage.get());
		OGPA.setDegree(degree.get());
		OGPA.setProgrammes(programs1.get());
		OGPA.setExRollNo(request.getExRollNo());
		OGPA.setExCreateDate(date);
    	OGPA.setAcademicYear(semesterreportchcek7.get(0).getAcademicYear());
		OGPA.setStudentadmission(student.get(0));
		OGPA.setDateOfDeclaration(request.getDateOfDeclaration());
		OGPA.setDepartment(dept.get());
		OGPA.setOverallGradePoint(semesterreport.get(semesterreport.size() - 1).getExCamuGradePointAv());
		// OGPA.setAdmittedDate( admitteddate);
		OGPA.setDateOfDeclaration(request.getDateOfDeclaration());
		OGPA.setExIsReGenerated(true);
		OGPA.setScrutinize(scrt);
		
		// OGPA.setPassoutyear(studentid.get(0).getAdmission().getPassedOutYear());
		super.ogpa.save(OGPA);
		
		// OGPA Log

		CertificatesLog logs = new CertificatesLog();
		if (request.getUser() == null || request.getUser().equals("")) {
			logs.setUser(null);
		} else {
			List<User> user = super.user.findByIdAndExIsDelete(request.getUser(), false);
			if (user.size() <= 0) {
				info.put("status", "2");
				info.put("message", "User id not present");
				return info;
			}

			logs.setUser(user.get(0));

		}
		logs.setExUrl(folder + filename);
		logs.setExCreateDate(date);
		logs.setExFileName(studentPersonal.get(0).getStudentadmission().getExRollNo() + ".pdf");
		logs.setColleges(collage.get());
		logs.setProgrammes(programs1.get());
		logs.setDegree(degree.get());
		logs.setStudentadmission(studentPersonal.get(0).getStudentadmission());
		logs.setExRollNo(request.getExRollNo());
		//logs.setScrutinize(request.getScrutinize());
		super.certificatelog.save(logs);

		info.put("status", "1");
		info.put("url", folder + filename);
		info.put("message", "Report successfully generated");
		return info;

	}
	////long programs = 2;
	if(request.getProgrammes() == 2) {
		Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
		if (!degree.isPresent() || !degree.get().getExIsActive()) {
			info.put("status", "2");
			info.put("message", "Degree not present");
			return info;
		}
		Optional<Colleges> collage = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
				true);
		if (!collage.isPresent() || !collage.get().getExIsActive()) {
			info.put("status", "2");
			info.put("message", "College not present");
			return info;
		}

		Optional<Programmes> programs1 = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
				request.getProgrammes());
		if (!programs1.isPresent() || !programs1.get().getExIsActive()) {
			info.put("status", "2");
			info.put("message", "Programs not present");
			return info;
		}
		Optional<Department> dept = super.department.findByIdAndExIsDeleteAndExIsActive(request.getDepartment(),
				false, true);
		if (!dept.isPresent()) {
			info.put("status", "2");
			info.put("message", "department not  present");
			return info;

		}

		List<University> uid = super.university.findAllUnivesity();
		if (uid.size() <= 0) {
			info.put("status", "2");
			info.put("message", "University not present");
			return info;

		}
		String university = uid.get(0).getExName();

		List<Studentadmission> student = super.studentadmission
				.findByExRollNoAndExIsActiveAndExIsDelete(request.getExRollNo(), true, false);

		if (student.size() <= 0) {
			info.put("status", "2");
			info.put("message", "No records found.vv");
			return info;
		}
		List<Studentpersonal> studentPersonal = super.studentpersonal.checkExRollNo(request.getExRollNo(), true,
				false);
		if (studentPersonal.size() <= 0) {
			info.put("status", "2");
			info.put("message", "Student not Present");
			return info;
		}
		List<SemesterProgressReport> semesterreport = super.semesterProgressReport
				.findByCollegesIdAndDegreeIdAndProgrammesIdAndExRollNo(request.getColleges(), request.getDegree(),
						request.getProgrammes(), request.getExRollNo());
		logger.info("semseter report count" + semesterreport.size());
	
		List dataListsem = new LinkedList();
		List<SemesterProgressReport> semesterreportchcek = super.semesterProgressReport
				.findByCollegesIdAndDegreeIdAndProgrammesIdAndExRollNoAndSemesterId(request.getColleges(),
						request.getDegree(), request.getProgrammes(), request.getExRollNo(), 1L);
		logger.info("semseter report count" + semesterreportchcek.size());
		List<SemesterProgressReport> semesterreportchcek1 = super.semesterProgressReport
				.findByCollegesIdAndDegreeIdAndProgrammesIdAndExRollNoAndSemesterId(request.getColleges(),
						request.getDegree(), request.getProgrammes(), request.getExRollNo(), 2L);
		logger.info("semseter report count" + semesterreportchcek.size());
		List<SemesterProgressReport> semesterreportchcek2 = super.semesterProgressReport
				.findByCollegesIdAndDegreeIdAndProgrammesIdAndExRollNoAndSemesterId(request.getColleges(),
						request.getDegree(), request.getProgrammes(), request.getExRollNo(), 3L);
		logger.info("semseter report count" + semesterreportchcek.size());
		List<SemesterProgressReport> semesterreportchcek3 = super.semesterProgressReport
				.findByCollegesIdAndDegreeIdAndProgrammesIdAndExRollNoAndSemesterId(request.getColleges(),
						request.getDegree(), request.getProgrammes(), request.getExRollNo(), 4L);
		logger.info("semseter report count" + semesterreportchcek.size());
		

		List<Object[]> stuid = super.semesterProgressReport.getmtechOgpa(request.getExRollNo());
		if (stuid.size() <= 0) {
			info.put("status", "2");
			info.put("message", "No record found.");
			
		}
		String marks = stuid.toString();

		List dataList = new LinkedList();

		List<Object[]> data = super.gradeReport.getSemesterResult(request.getExRollNo(), 1L);
		
		List<Object[]> data1 = super.gradeReport.getSemesterResult(request.getExRollNo(), 2L);
		
		List<Object[]> data2 = super.gradeReport.getSemesterResult(request.getExRollNo(), 3L);
		
		List<Object[]> data3 = super.gradeReport.getSemesterResult(request.getExRollNo(), 4L);
		
	
		
		int count = 0;
		for (Object[] e : data) {
		
			Map<Object, Object> studentinfo = new HashMap<Object, Object>();
			studentinfo.put("code", e[0]);
			studentinfo.put("title", e[1]);
			studentinfo.put("credit ", e[2]);
			studentinfo.put("lettergrade", e[3]);
			System.out.println(">>>>>code" + studentinfo);

			dataList.add(studentinfo);
			count++;
		}
		List dataList1 = new LinkedList();
		for (Object[] e : data1) {
			Map<Object, Object> studentinfo1 = new HashMap<Object, Object>();
			studentinfo1.put("code", e[0]);
			studentinfo1.put("title", e[1]);
			studentinfo1.put("credit ", e[2]);
			studentinfo1.put("lettergrade", e[3]);
			System.out.println(">>>>>code" + studentinfo1);

			dataList1.add(studentinfo1);
			count++;
		}
		List dataList2 = new LinkedList();
		for (Object[] e : data2) {
			Map<Object, Object> studentinfo2 = new HashMap<Object, Object>();
			studentinfo2.put("code", e[0]);
			studentinfo2.put("title", e[1]);
			studentinfo2.put("credit ", e[2]);
			studentinfo2.put("lettergrade", e[3]);
			System.out.println(">>>>>code" + studentinfo2);

			dataList2.add(studentinfo2);
			count++;
		}
		List dataList3 = new LinkedList();
		for (Object[] e : data3) {
			Map<Object, Object> studentinfo3 = new HashMap<Object, Object>();
			studentinfo3.put("code", e[0]);
			studentinfo3.put("title", e[1]);
			studentinfo3.put("credit ", e[2]);
			studentinfo3.put("lettergrade", e[3]);
			System.out.println(">>>>>code" + studentinfo3);

			dataList3.add(studentinfo3);
			count++;
		}
		
		System.out.println(">>>.studeny" + data);
		String serverurl = super.commonHelper.getSettingValue("SERVER_IP");

		String reportPath = super.commonHelper.getSettingValue("DOCUMENT_PATH");
		String image = super.commonHelper.getSettingValue("IMAGE_PATH");
		String image1 = super.commonHelper.getSettingValue("MOFPI_PATH");
		String image2 = super.commonHelper.getSettingValue("EMBLEM_PATH");

		logger.info(image);
		logger.info(image1);

		// Compile the Jasper report from .jrxml to .japser
		String studentphoto = student.get(0).getExPhoto();

		String phoy = serverurl + studentphoto;
		System.out.println(">check photo" + phoy);
		logger.info("student Photo Path>>>>>>>" + phoy);
		String path = "";
		
		if (request.getDegree() == 2) {
			
			 path = resourceLoader.getResource("classpath:MtechTranscript3.jrxml").getURI().getPath();	
			}
		
		JasperReport jasperReport = JasperCompileManager.compileReport(path);
		JRBeanCollectionDataSource datasource = new JRBeanCollectionDataSource(dataList);
		JRBeanCollectionDataSource datasource1 = new JRBeanCollectionDataSource(dataList1);
		JRBeanCollectionDataSource datasource2 = new JRBeanCollectionDataSource(dataList2);
		JRBeanCollectionDataSource datasource3 = new JRBeanCollectionDataSource(dataList3);
		
		System.out.println(">>>>>>>>>>>ds" + datasource);
		Map<String, Object> parameters = new HashMap<>();
		// Add parameters
		parameters.put("ds", datasource);
		parameters.put("ds1", datasource1);
		parameters.put("ds3", datasource2);
		parameters.put("ds4", datasource3);
		parameters.put("logo", image);
		parameters.put("emblem", image1);
		parameters.put("photo", image2);
		parameters.put("university", university);
		parameters.put("exRollNo", student.get(0).getExRollNo());

		parameters.put("exFirstName", studentPersonal.get(0).getStudentadmission().getExName());
		parameters.put("studentphoto", serverurl + studentphoto);
		System.out.println(">>>>>..check studentb phot " + serverurl + studentphoto);
		System.out.println(">>>>>..cparameters " + parameters);
		// parameters.put("enrollementNo",
		// studentPersonal.get(0).getStudentadmission().getExEnrollementNo());
		parameters.put("father", studentPersonal.get(0).getExFatherName());
		parameters.put("mother", studentPersonal.get(0).getExMotherName());
		parameters.put("exEnrollementNo", student.get(0).getExEnrollementNo());
		parameters.put("degree", degree.get().getExName());
		parameters.put("programmes", programs1.get().getExName().toUpperCase());
		parameters.put("dept", "(" + dept.get().getExName() + ")");
		parameters.put("ogpa", marks);
		parameters.put("camgradepointav", semesterreportchcek.get(0).getExCamuGradePointAv());
		parameters.put("gradepointav", semesterreportchcek.get(0).getExGradePointAv());
		parameters.put("camgradepointav1", semesterreportchcek1.get(0).getExCamuGradePointAv());
		parameters.put("gradepointav1", semesterreportchcek1.get(0).getExGradePointAv());
		parameters.put("camgradepointav2", semesterreportchcek2.get(0).getExCamuGradePointAv());
		parameters.put("gradepointav2", semesterreportchcek2.get(0).getExGradePointAv());
		parameters.put("camgradepointav3", semesterreportchcek3.get(0).getExCamuGradePointAv());
		parameters.put("gradepointav3", semesterreportchcek3.get(0).getExGradePointAv());

		System.out.println(">>>>>>>..parameters." + parameters);
	//	parameters.put("dateofdeclaration", request.getDateOfDeclaration());
		parameters.put("dateofbirth", studentPersonal.get(0).getExDateOfBirth());
		parameters.put("dateOfDeclaration", request.getDateOfDeclaration());
		
		parameters.put("batch", student.get(0).getBatch().getExIdentifier());
		String folder = createFolder(degree.get().getExName(), programs1.get().getExName(), "ogpaReport");

		// Fill the report
		JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters, new JREmptyDataSource());
		System.out.println("?d" + jasperPrint);
		System.out.println("?jasperPrintjasperPrint" + jasperReport);
		System.out.println("?parameters" + parameters);
		System.out.println("?jrBeanCollectionDataSource" + datasource);
		String filename = "\\" + degree.get().getExName() + " " + "(" + programs1.get().getExName() + ")" + ".pdf";

		// Export the report to a PDF file
		JasperExportManager.exportReportToPdfFile(jasperPrint, reportPath + folder + filename);
		System.out.println("?jasperexport" + jasperPrint);
		File filenew = new File(reportPath + folder + filename);
		if (filenew.exists()) {
			filenew.setExecutable(true, false);
			filenew.setReadable(true, false);
			filenew.setWritable(true, false);
		}
		Long scrt = (long) 1;
		Date date = new Date();
		OGPA OGPA = new OGPA();
		OGPA.setColleges(collage.get());
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(student.get(0).getAcademicYear().getExEnddate());
		char firstval = student.get(0).getId().toString().charAt(0);
		char secondval = student.get(0).getId().toString().charAt(1);
		char third = student.get(0).getId().toString().charAt(2);		
		OGPA.setMaigrationSrNo("N/EX/R&/"+calendar.get(Calendar.YEAR)+"/"+firstval+""+secondval+"/"+firstval+""+secondval+""+third);				

		OGPA.setDegree(degree.get());
		OGPA.setProgrammes(programs1.get());
		OGPA.setExRollNo(request.getExRollNo());
		OGPA.setExCreateDate(date);
     	 OGPA.setAcademicYear(semesterreportchcek3.get(0).getAcademicYear());
		OGPA.setStudentadmission(student.get(0));
		OGPA.setDateOfDeclaration(request.getDateOfDeclaration());
		OGPA.setDepartment(dept.get());
				OGPA.setOverallGradePoint(semesterreport.get(semesterreport.size() - 1).getExCamuGradePointAv());
		// OGPA.setAdmittedDate( admitteddate);
		OGPA.setDateOfDeclaration(request.getDateOfDeclaration());
		OGPA.setExIsReGenerated(true);
		OGPA.setScrutinize(scrt);
		// OGPA.setPassoutyear(studentid.get(0).getAdmission().getPassedOutYear());
		super.ogpa.save(OGPA);
		
		// OGPA Log

		CertificatesLog logs = new CertificatesLog();
		if (request.getUser() == null || request.getUser().equals("")) {
			logs.setUser(null);
		} else {
			List<User> user = super.user.findByIdAndExIsDelete(request.getUser(), false);
			if (user.size() <= 0) {
				info.put("status", "2");
				info.put("message", "User id not present");
				return info;
			}

			logs.setUser(user.get(0));

		}
		logs.setExUrl(folder + filename);
		logs.setExCreateDate(date);
		logs.setExFileName(studentPersonal.get(0).getStudentadmission().getExRollNo() + ".pdf");
		logs.setColleges(collage.get());
		logs.setProgrammes(programs1.get());
		logs.setDegree(degree.get());
		logs.setStudentadmission(studentPersonal.get(0).getStudentadmission());
		logs.setExRollNo(request.getExRollNo());

		super.certificatelog.save(logs);

		info.put("status", "1");
		info.put("url", folder + filename);
		info.put("message", "Report successfully generated");
		return info;

	}
////long programs = 3;
	if(request.getProgrammes() == 3) {
		Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
		if (!degree.isPresent() || !degree.get().getExIsActive()) {
			info.put("status", "2");
			info.put("message", "Degree not present");
			return info;
		}
		Optional<Colleges> collage = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
				true);
		if (!collage.isPresent() || !collage.get().getExIsActive()) {
			info.put("status", "2");
			info.put("message", "College not present");
			return info;
		}

		Optional<Programmes> programs1 = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
				request.getProgrammes());
		if (!programs1.isPresent() || !programs1.get().getExIsActive()) {
			info.put("status", "2");
			info.put("message", "Programs not present");
			return info;
		}
		Optional<Department> dept = super.department.findByIdAndExIsDeleteAndExIsActive(request.getDepartment(),
				false, true);
		if (!dept.isPresent()) {
			info.put("status", "2");
			info.put("message", "department not  present");
			return info;

		}

		List<University> uid = super.university.findAllUnivesity();
		if (uid.size() <= 0) {
			info.put("status", "2");
			info.put("message", "University not present");
			return info;

		}
		String university = uid.get(0).getExName();

		List<Studentadmission> student = super.studentadmission
				.findByExRollNoAndExIsActiveAndExIsDelete(request.getExRollNo(), true, false);

		if (student.size() <= 0) {
			info.put("status", "2");
			info.put("message", "No records found.vv");
			return info;
		}
		List<Studentpersonal> studentPersonal = super.studentpersonal.checkExRollNo(request.getExRollNo(), true,
				false);
		if (studentPersonal.size() <= 0) {
			info.put("status", "2");
			info.put("message", "Student not Present");
			return info;
		}
		List<SemesterProgressReport> semesterreport = super.semesterProgressReport
				.findByCollegesIdAndDegreeIdAndProgrammesIdAndExRollNo(request.getColleges(), request.getDegree(),
						request.getProgrammes(), request.getExRollNo());
		logger.info("semseter report count" + semesterreport.size());
	
		List dataListsem = new LinkedList();
		List<SemesterProgressReport> semesterreportchcek = super.semesterProgressReport
				.findByCollegesIdAndDegreeIdAndProgrammesIdAndExRollNoAndSemesterId(request.getColleges(),
						request.getDegree(), request.getProgrammes(), request.getExRollNo(), 1L);
		logger.info("semseter report count" + semesterreportchcek.size());
		List<SemesterProgressReport> semesterreportchcek1 = super.semesterProgressReport
				.findByCollegesIdAndDegreeIdAndProgrammesIdAndExRollNoAndSemesterId(request.getColleges(),
						request.getDegree(), request.getProgrammes(), request.getExRollNo(), 2L);
		logger.info("semseter report count" + semesterreportchcek.size());
		List<SemesterProgressReport> semesterreportchcek2 = super.semesterProgressReport
				.findByCollegesIdAndDegreeIdAndProgrammesIdAndExRollNoAndSemesterId(request.getColleges(),
						request.getDegree(), request.getProgrammes(), request.getExRollNo(), 3L);
		logger.info("semseter report count" + semesterreportchcek.size());
		List<SemesterProgressReport> semesterreportchcek3 = super.semesterProgressReport
				.findByCollegesIdAndDegreeIdAndProgrammesIdAndExRollNoAndSemesterId(request.getColleges(),
						request.getDegree(), request.getProgrammes(), request.getExRollNo(), 4L);
		logger.info("semseter report count" + semesterreportchcek.size());
		

		List<Object[]> stuid = super.semesterProgressReport.getmtechOgpa(request.getExRollNo());
		if (stuid.size() <= 0) {
			info.put("status", "2");
			info.put("message", "No record found.");
			
		}
		String marks = stuid.toString();

		List dataList = new LinkedList();

		List<Object[]> data = super.gradeReport.getSemesterResult(request.getExRollNo(), 1L);
		
		List<Object[]> data1 = super.gradeReport.getSemesterResult(request.getExRollNo(), 2L);
		
		List<Object[]> data2 = super.gradeReport.getSemesterResult(request.getExRollNo(), 3L);
		
		List<Object[]> data3 = super.gradeReport.getSemesterResult(request.getExRollNo(), 4L);
		
	
		
		int count = 0;
		for (Object[] e : data) {
		
			Map<Object, Object> studentinfo = new HashMap<Object, Object>();
			studentinfo.put("code", e[0]);
			studentinfo.put("title", e[1]);
			studentinfo.put("credit ", e[2]);
			studentinfo.put("lettergrade", e[3]);
			System.out.println(">>>>>code" + studentinfo);

			dataList.add(studentinfo);
			count++;
		}
		List dataList1 = new LinkedList();
		for (Object[] e : data1) {
			Map<Object, Object> studentinfo1 = new HashMap<Object, Object>();
			studentinfo1.put("code", e[0]);
			studentinfo1.put("title", e[1]);
			studentinfo1.put("credit ", e[2]);
			studentinfo1.put("lettergrade", e[3]);
			System.out.println(">>>>>code" + studentinfo1);

			dataList1.add(studentinfo1);
			count++;
		}
		List dataList2 = new LinkedList();
		for (Object[] e : data2) {
			Map<Object, Object> studentinfo2 = new HashMap<Object, Object>();
			studentinfo2.put("code", e[0]);
			studentinfo2.put("title", e[1]);
			studentinfo2.put("credit ", e[2]);
			studentinfo2.put("lettergrade", e[3]);
			System.out.println(">>>>>code" + studentinfo2);

			dataList2.add(studentinfo2);
			count++;
		}
		List dataList3 = new LinkedList();
		for (Object[] e : data3) {
			Map<Object, Object> studentinfo3 = new HashMap<Object, Object>();
			studentinfo3.put("code", e[0]);
			studentinfo3.put("title", e[1]);
			studentinfo3.put("credit ", e[2]);
			studentinfo3.put("lettergrade", e[3]);
			System.out.println(">>>>>code" + studentinfo3);

			dataList3.add(studentinfo3);
			count++;
		}
		
		System.out.println(">>>.studeny" + data);
		String serverurl = super.commonHelper.getSettingValue("SERVER_IP");

		String reportPath = super.commonHelper.getSettingValue("DOCUMENT_PATH");
		String image = super.commonHelper.getSettingValue("IMAGE_PATH");
		String image1 = super.commonHelper.getSettingValue("MOFPI_PATH");
		String image2 = super.commonHelper.getSettingValue("EMBLEM_PATH");

		logger.info(image);
		logger.info(image1);

		// Compile the Jasper report from .jrxml to .japser
		String studentphoto = student.get(0).getExPhoto();

		String phoy = serverurl + studentphoto;
		System.out.println(">check photo" + phoy);
		logger.info("student Photo Path>>>>>>>" + phoy);
		String path = "";
		
		if (request.getDegree() == 2) {
			
			 path = resourceLoader.getResource("classpath:mbaTranscrpt.jrxml").getURI().getPath();	
			}
		
		JasperReport jasperReport = JasperCompileManager.compileReport(path);
		JRBeanCollectionDataSource datasource = new JRBeanCollectionDataSource(dataList);
		JRBeanCollectionDataSource datasource1 = new JRBeanCollectionDataSource(dataList1);
		JRBeanCollectionDataSource datasource2 = new JRBeanCollectionDataSource(dataList2);
		JRBeanCollectionDataSource datasource3 = new JRBeanCollectionDataSource(dataList3);
		
		System.out.println(">>>>>>>>>>>ds" + datasource);
		Map<String, Object> parameters = new HashMap<>();
		// Add parameters
		parameters.put("ds", datasource);
		parameters.put("ds1", datasource1);
		parameters.put("ds3", datasource2);
		parameters.put("ds4", datasource3);
		parameters.put("logo", image);
		parameters.put("emblem", image1);
		parameters.put("photo", image2);
		parameters.put("university", university);
		parameters.put("exRollNo", student.get(0).getExRollNo());

		parameters.put("exFirstName", studentPersonal.get(0).getStudentadmission().getExName());
		parameters.put("studentphoto", serverurl + studentphoto);
		System.out.println(">>>>>..check studentb phot " + serverurl + studentphoto);
		System.out.println(">>>>>..cparameters " + parameters);
		// parameters.put("enrollementNo",
		// studentPersonal.get(0).getStudentadmission().getExEnrollementNo());
		parameters.put("father", studentPersonal.get(0).getExFatherName());
		parameters.put("mother", studentPersonal.get(0).getExMotherName());
		parameters.put("exEnrollementNo", student.get(0).getExEnrollementNo());
		parameters.put("degree", degree.get().getExName());
		parameters.put("programmes", programs1.get().getExName().toUpperCase());
		parameters.put("dept", "(" + dept.get().getExName() + ")");
		parameters.put("ogpa", marks);
		parameters.put("camgradepointav", semesterreportchcek.get(0).getExCamuGradePointAv());
		parameters.put("gradepointav", semesterreportchcek.get(0).getExGradePointAv());
		parameters.put("camgradepointav1", semesterreportchcek1.get(0).getExCamuGradePointAv());
		parameters.put("gradepointav1", semesterreportchcek1.get(0).getExGradePointAv());
		parameters.put("camgradepointav2", semesterreportchcek2.get(0).getExCamuGradePointAv());
		parameters.put("gradepointav2", semesterreportchcek2.get(0).getExGradePointAv());
		parameters.put("camgradepointav3", semesterreportchcek3.get(0).getExCamuGradePointAv());
		parameters.put("gradepointav3", semesterreportchcek3.get(0).getExGradePointAv());

		System.out.println(">>>>>>>..parameters." + parameters);
	//	parameters.put("dateofdeclaration", request.getDateOfDeclaration());
		parameters.put("dateofbirth", studentPersonal.get(0).getExDateOfBirth());
		parameters.put("dateOfDeclaration", request.getDateOfDeclaration());
		
		parameters.put("batch", student.get(0).getBatch().getExIdentifier());
		String folder = createFolder(degree.get().getExName(), programs1.get().getExName(), "ogpaReport");

		// Fill the report
		JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters, new JREmptyDataSource());
		System.out.println("?d" + jasperPrint);
		System.out.println("?jasperPrintjasperPrint" + jasperReport);
		System.out.println("?parameters" + parameters);
		System.out.println("?jrBeanCollectionDataSource" + datasource);
		String filename = "\\" + degree.get().getExName() + " " + "(" + programs1.get().getExName() + ")" + ".pdf";

		// Export the report to a PDF file
		JasperExportManager.exportReportToPdfFile(jasperPrint, reportPath + folder + filename);
		System.out.println("?jasperexport" + jasperPrint);
		File filenew = new File(reportPath + folder + filename);
		if (filenew.exists()) {
			filenew.setExecutable(true, false);
			filenew.setReadable(true, false);
			filenew.setWritable(true, false);
		}
		Long scrt = (long) 1;
		Date date = new Date();
		OGPA OGPA = new OGPA();
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(student.get(0).getAcademicYear().getExEnddate());
		char firstval = student.get(0).getId().toString().charAt(0);
		char secondval = student.get(0).getId().toString().charAt(1);
		char third = student.get(0).getId().toString().charAt(2);		
		OGPA.setMaigrationSrNo("N/EX/R&/"+calendar.get(Calendar.YEAR)+"/"+firstval+""+secondval+"/"+firstval+""+secondval+""+third);				

		OGPA.setColleges(collage.get());
		OGPA.setDegree(degree.get());
		OGPA.setProgrammes(programs1.get());
		OGPA.setExRollNo(request.getExRollNo());
		OGPA.setExCreateDate(date);
     	 OGPA.setAcademicYear(semesterreportchcek3.get(0).getAcademicYear());
		OGPA.setStudentadmission(student.get(0));
		OGPA.setDateOfDeclaration(request.getDateOfDeclaration());
		OGPA.setDepartment(dept.get());
				OGPA.setOverallGradePoint(semesterreport.get(semesterreport.size() - 1).getExCamuGradePointAv());
		// OGPA.setAdmittedDate( admitteddate);
		OGPA.setDateOfDeclaration(request.getDateOfDeclaration());
		OGPA.setExIsReGenerated(true);
		OGPA.setScrutinize(scrt);
		// OGPA.setPassoutyear(studentid.get(0).getAdmission().getPassedOutYear());
		super.ogpa.save(OGPA);
		
		// OGPA Log

		CertificatesLog logs = new CertificatesLog();
		if (request.getUser() == null || request.getUser().equals("")) {
			logs.setUser(null);
		} else {
			List<User> user = super.user.findByIdAndExIsDelete(request.getUser(), false);
			if (user.size() <= 0) {
				info.put("status", "2");
				info.put("message", "User id not present");
				return info;
			}

			logs.setUser(user.get(0));

		}
		logs.setExUrl(folder + filename);
		logs.setExCreateDate(date);
		logs.setExFileName(studentPersonal.get(0).getStudentadmission().getExRollNo() + ".pdf");
		logs.setColleges(collage.get());
		logs.setProgrammes(programs1.get());
		logs.setDegree(degree.get());
		logs.setStudentadmission(studentPersonal.get(0).getStudentadmission());
		logs.setExRollNo(request.getExRollNo());

		super.certificatelog.save(logs);

		info.put("status", "1");
		info.put("url", folder + filename);
		info.put("message", "Report successfully generated");
		return info;

	}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
		
		}
		return info;
	
	}

	@Override
	public Map<String, Object> generateBulkSemesterReportPdf(GradeReportRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List dataList = new LinkedList();
			logger.info("getSemesterReports Report");

			Optional<Colleges> collage = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!collage.isPresent()) {
				info.put("status", "2");
				info.put("message", "College Id not Present");
				return info;
			}
			Optional<AcademicYear> academicYearid = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getAcademicYear());
			if (!academicYearid.isPresent()) {
				info.put("status", "2");
				info.put("message", "AcademicYear id not present");
				return info;
			}
			Optional<Programmes> Prog = super.programme.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Prog.isPresent()) {
				info.put("status", "2");
				info.put("message", "Programmes not present");
				return info;
			}

			Optional<Department> dept = super.department.findByIdAndExIsDeleteAndExIsActive(request.getDepartment(),
					false, true);
			if (!dept.isPresent()) {
				info.put("status", "2");
				info.put("message", "department not  present");
				return info;

			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}

			Optional<Stream> stream = super.stream.findByIdAndExIsDeleteAndExIsActive(request.getStream(), false, true);
			if (!stream.isPresent()) {
				info.put("status", "2");
				info.put("message", "stream not  present");
				return info;
			}
			Optional<ProgrammeYear> programmeYear = super.programmeYear
					.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
			if (!programmeYear.isPresent()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!sem.isPresent()) {
				info.put("status", "2");
				info.put("message", "Semster not present");
				return info;
			}
			if (request.getExamAnnouncement() == null || request.getExamAnnouncement().equals("NA")) {
				return generateMigSemesterReportPdf(request);
			}
			Optional<ExamAnnouncement> result = super.examAnnouncement.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getExamAnnouncement());
			if (!result.isPresent()) {
				info.put("status", "2");
				info.put("message", "Examannouncement  not present");
				return info;
			}

			List<University> uid = super.university.findAllUnivesity();
			if (uid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "University not present");
				return info;
			}
			String university = uid.get(0).getExName();

			List<Object> regtype = new ArrayList<Object>();
			Long retypefro = (long) 1;
			regtype.add(1L);
			regtype.add(2L);

			// regtype.add(5L);
			List<SemesterProgressReport> semesterreportall = super.semesterProgressReport
					.findByCollegesIdAndDegreeIdAndProgrammesIdAndProgrammeYearIdAndExamAnnouncementIdAndAcademicYearIdAndSemesterIdOrderByExRollNo(
							request.getColleges(), request.getDegree(), request.getProgrammes(),
							request.getProgrammeYear(), request.getExamAnnouncement(), request.getAcademicYear(),
							request.getSemester());

			System.out.println(">>..watt" + semesterreportall);
			if (semesterreportall.size() <= 0) {
				info.put("status", "2");
				info.put("message", "semester progress report not Generated");
				return info;
			}

			for (SemesterProgressReport studdent : semesterreportall) {
				logger.info("Student ID  :: " + studdent.getExRollNo());
				int breakpoint = 1;
				int nongradialcount = 0;
				Map<Object, Object> student = new HashMap<Object, Object>();
				List<Studentpersonal> studentid = super.studentpersonal.checkStudentId(studdent.getExRollNo(), true,
						false);
				if (studentid.size() <= 0) {
					info.put("status", "2");
					info.put("message", "Student not Present");
					return info;
				}

				student.put("exFirstName", studentid.get(0).getStudentadmission().getExName());
				student.put("exRollNo", studentid.get(0).getStudentadmission().getExRollNo());
				student.put("enrollementNo", studentid.get(0).getStudentadmission().getExEnrollementNo());
				student.put("father", studentid.get(0).getExFatherName());
				student.put("mother", studentid.get(0).getExMotherName());
				student.put("break", breakpoint);
				logger.info("Student chech :: " + student);
				dataList.add(student);

				nongradialcount++;
				logger.info("StudendataListt ID  :: " + dataList);
				System.out.println(">.studentid." + studentid);
				int count = 0;
				int theory = 0;
				int pract = 0;
				List<CoursesRegistration> gradecourse = super.coursesRegistration
						.findByStudentadmissionIdAndProgrammesIdAndExIsActiveAndExIsDeleteAndRegistrationIdAndSemesterIdAndProgrammeYearIdAndAcademicYearIdAndDepartmentId(
								studentid.get(0).getStudentadmission().getId(), request.getProgrammes(), true, false,
								retypefro, request.getSemester(), request.getProgrammeYear(), request.getAcademicYear(),
								request.getDepartment());
				/*
				 * for (CoursesRegistration grade : gradecourse) { if
				 * (grade.getCourses().getExIsSatisfactory() == false) {
				 * 
				 * Map<Object, Object> gradial = new HashMap<Object, Object>();
				 * 
				 * List<GradeReport> gradelist = super.gradeReport
				 * .findByCollegesIdAndProgrammesIdAndDegreeIdAndSemesterIdAndExRollNoAndProgrammeYearIdAndRegistrationTypeIdInAndExIsActiveAndExIsDeleteAndCoursesId(
				 * request.getColleges(), request.getProgrammes(), request.getDegree(),
				 * request.getSemester(), studentid.get(0).getStudentadmission().getExRollNo(),
				 * request.getProgrammeYear(), regtype, true, false,
				 * grade.getCourses().getId());
				 * 
				 * if (gradelist.size() <= 0) { info.put("status", "2"); info.put("message",
				 * "grade report not created for ::" + grade.getCourses().getExName()); return
				 * info;
				 * 
				 * } else { if (gradelist.get(0).getExRemark() != null &&
				 * gradelist.get(0).getExRemark().equalsIgnoreCase("Pass")) {
				 * gradial.put("exGradePoint", gradelist.get(0).getExLetterGrades()); } else {
				 * gradial.put("exGradePoint", "F"); } System.out.println("??" + gradial);
				 * gradial.put("exCoursesCode", grade.getCourses().getExCoursesCode());
				 * gradial.put("exCoursesName", grade.getCourses().getExName());
				 * gradial.put("exCreditHour", "(" +
				 * grade.getCourses().getCreditHours().getExCreditHourTitle() + ")"); theory =
				 * theory + (int)
				 * ((grade.getCourses().getCreditHours().getExCreditHourTutorials()) +
				 * (grade.getCourses().getCreditHours().getExCreditHourLecture())); pract =
				 * pract + (int)
				 * (grade.getCourses().getCreditHours().getExCreditHourPractical().intValue());
				 * 
				 * dataList.add(gradial); logger.info("StudendataLigradialstt ID  :: " +
				 * gradial); System.out.println(">>>gradial" + gradial);
				 * System.out.println(">>>dataList" + dataList);
				 * 
				 * System.out.println(">>>count" + count);
				 * 
				 * nongradialcount++; } } }
				 */
				// check from semester progress report

				Map<Object, Object> results = new HashMap<Object, Object>();
				results.put("exGradePointAv", super.commonHelper.doubledigit(studdent.getExGradePointAv()));

				if (request.getSemester() == 1) {
					results.put("exCamuGradePointAv", "NA");

				} else {
					results.put("exCamuGradePointAv", super.commonHelper.doubledigit(studdent.getExCamuGradePointAv()));
				}
				int total = nongradialcount + 1;
				results.put("break", breakpoint);
				dataList.add(results);
				nongradialcount++;
//
//				List<CoursesRegistration> gradecourses = super.coursesRegistration
//						.findByStudentadmissionIdAndProgrammesIdAndExIsActiveAndExIsDeleteAndRegistrationIdAndSemesterIdAndProgrammeYearIdAndAcademicYearIdAndDepartmentId(
//								studentid.get(0).getStudentadmission().getId(), request.getProgrammes(), true, false,
//								retypefro, request.getSemester(), request.getProgrammeYear(), request.getAcademicYear(),
//								request.getDepartment());
//				for (CoursesRegistration grade : gradecourses) {
//					if (grade.getCourses().getExIsSatisfactory() == true) {
//						Map<Object, Object> gradial122 = new HashMap<Object, Object>();
//
//						List<GradeReport> gradelist = super.gradeReport
//								.findByCollegesIdAndProgrammesIdAndDegreeIdAndSemesterIdAndExRollNoAndProgrammeYearIdAndRegistrationTypeIdInAndExIsActiveAndExIsDeleteAndCoursesId(
//										request.getColleges(), request.getProgrammes(), request.getDegree(),
//										request.getSemester(), studentid.get(0).getStudentadmission().getExRollNo(),
//										request.getProgrammeYear(), regtype, true, false, grade.getCourses().getId());
//
//						if (gradelist.size() <= 0) {
//							info.put("status", "2");
//							info.put("message", "grade report not created for ::" + grade.getCourses().getExName());
//
//							return info;
//
//						} else {
//
//							gradial122.put("satacourse",
//									grade.getCourses().getExCoursesCode() + "(" + grade.getCourses().getExName() + ")");
//							gradial122.put("satgradeletter", gradelist.get(0).getExLetterGrades());
//
//							dataList.add(gradial122);
//							nongradialcount++;
//
//							logger.info("Sgradial122D  :: " + gradial122);
//						}
//					}
//
//				}
			}

			System.out.println(">>>>>>>>>>>>>>>dataList>>>>>>>>" + dataList);

			String serverurl = super.commonHelper.getSettingValue("SERVER_IP");
			String reportPath = super.commonHelper.getSettingValue("DOCUMENT_PATH"); // "src/main/resources/";
			String image = super.commonHelper.getSettingValue("IMAGE_PATH");
			logger.info(image);

			// Compile the Jasper report from .jrxml to .japser

			String path = resourceLoader.getResource("classpath:Bulksemesterreport.jrxml").getURI().getPath();
			logger.info(path);
			JasperReport jasperReport = JasperCompileManager.compileReport(path);
			JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(dataList);
			logger.info("dataList  :: " + dataList);

			// Add parameters
			Map<String, Object> parameters = new HashMap<>();

		
			parameters.put("logo", image);
	
			parameters.put("degree", degree.get().getExName());
			parameters.put("programmes", Prog.get().getExName().toUpperCase());
			parameters.put("examAnnouncement", result.get().getExName());
			parameters.put("colleges", uid.get(0).getExDescription());
			parameters.put("programmeYear", programmeYear.get().getExName());
			parameters.put("semester", sem.get().getExDescription().toUpperCase());
			parameters.put("academicYear", academicYearid.get().getExYear());
			parameters.put("university", university.toUpperCase());
			parameters.put("dateofdeclaration", request.getDateOfDeclaration());
			parameters.put("dept", "(" + dept.get().getExName() + ")");

			// logger.info(parameters);
			String folder = createFolder(academicYearid.get().getExYear(), collage.get().getExIdentifier(),
					"semesterReport");
			logger.info("folder  :: " + folder);

			// String fileName ="\\"+
			// studentid1.get(0).getStudentadmission().getExRollNo()+".pdf";

			// Fill the report
			JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,
					jrBeanCollectionDataSource);

			// Export the report to a PDF file
			logger.info("jasperPrint  :: " + jasperPrint);

			JasperExportManager.exportReportToPdfFile(jasperPrint, reportPath + folder + "/bulkSemesterProgress.pdf");

			File filenew = new File(reportPath + folder + "/bulkSemesterProgress.pdf");
			if (filenew.exists()) {
				filenew.setExecutable(true, false);
				filenew.setReadable(true, false);
				filenew.setWritable(true, false);
			}

			logger.info("filenew  :: " + filenew);

			GradeReportLog logs = new GradeReportLog();

			if (request.getUser() == null || request.getUser().equals("")) {
				logs.setUser(null);
			} else {
				List<User> user = super.user.findByIdAndExIsDelete(request.getUser(), false);
				if (user.size() <= 0) {
					info.put("status", "2");
					info.put("message", "User id not present");
					return info;
				}

				logs.setUser(user.get(0));

				
			}
			Date date = new Date();
			logs.setExamAnnouncement(result.get());
			logs.setAcademicYear(academicYearid.get());
			// logs.setExUrl(folder + fileName.replace("\\","/"));
			logs.setExCreateDate(date);
			logs.setColleges(collage.get());
			logs.setDegree(degree.get());
			logs.setProgrammes(Prog.get());
			logs.setSemester(result.get().getSemester());
			logs.setExReportType("SemesterReport");
			logs.setDepartment(dept.get());
			logs.setProgrammeYear(result.get().getProgrammeYear());
			logs.setExReportCategory("PDFDownload");
			logs.setExIsActive(true);
			logs.setExIsDelete(false);
			super.GradeReportLog.save(logs);

			// info.put("gradeReport", dataList);
			info.put("status", "1");
			info.put("url", folder + "/bulkSemesterProgress.pdf");
			info.put("message", "Report successfully generated");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}

	}

//MIGRATION
	@Override
	public Map<String, Object> generateMigrationPdf(CertificatesRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();

		try {

			if (request.getExRollNo() == null || request.getExRollNo().equals("")) {
				info.put("status", "2");
				info.put("message", "roll no  is required");
				return info;
			}

			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<Colleges> collage = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!collage.isPresent() || !collage.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "College not present");
				return info;
			}

			Optional<Programmes> programs = super.programme.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!programs.isPresent() || !programs.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Programs not present");
				return info;
			}

			Optional<AcademicYear> academicYearid = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getEnrollmentYear());
			if (!academicYearid.isPresent()) {
				info.put("status", "2");
				info.put("message", "Student AcademicYear id not present");
				return info;
			}

			List<University> uid = super.university.findAllUnivesity();
			if (uid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "University not present");
				return info;
			}

			String university = uid.get(0).getExName();
			String universityh = uid.get(0).getExLocalName();
			List dataList = new LinkedList();
			Map<String, Object> parameters = new HashMap<>();

			Long scrt = (long) 1;
			
			List<Studentadmission> data = super.studentadmission
					.findByExRollNoAndExIsActiveAndExIsDelete(request.getExRollNo(), true, false);
			System.out.println("data>>>>>." + data);
			if (data.size() <= 0) {
				info.put("status", "2");
				info.put("message", "No records found.");
				return info;
			}

			for (Studentadmission e : data) {
				Map<Object, Object> list = new HashMap<Object, Object>();
				String pro = e.getProgrammes().getExName().trim();

				list.put("id", e.getId());
				list.put("name", e.getExName());
				list.put("programe", pro);
				list.put("academicyear", e.getAcademicYear().getExIdentifier());
				list.put("college", e.getColleges().getExName());
				list.put("exRollNo", e.getExRollNo());
				dataList.add(list);
			}

			String serverurl = super.commonHelper.getSettingValue("SERVER_IP");
			// String reportPath = "src/main/resources/";
			String reportPath = super.commonHelper.getSettingValue("DOCUMENT_PATH");
			String image2 = super.commonHelper.getSettingValue("EMBLEM_PATH");
			String image = super.commonHelper.getSettingValue("IMAGE_PATH");
			String image3 = super.commonHelper.getSettingValue("SWACHBHARATH_PATH");
			// Compile the Jasper report from .jrxml to .japser

			String path = resourceLoader.getResource("classpath:migrationcancellation.jrxml").getURI().getPath();
			JasperReport jasperReport = JasperCompileManager.compileReport(path);

			// JasperReport jasperReport = JasperCompileManager.compileReport(reportPath +
			// "\\gradeReport.jrxml");

			// Get your data source

			JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(dataList);

			// Add parameters

			List<Studentpersonal> student = super.studentpersonal.checkStudentId(data.get(0).getExRollNo(), true,
					false);
			if (student.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Student not Present" + data.get(0).getExRollNo());
				return info;
			}

			String geneder = "", pernoun = "", adjective = "";
			if (student.get(0).getExGender() == null || student.get(0).getExGender().trim().isEmpty()) {
				info.put("status", "2");
				info.put("message", "missing personal details" + data.get(0).getExRollNo());
				return info;
			}
			if (student.get(0).getExGender().equalsIgnoreCase("male")) {
				geneder = "Mr.";
				pernoun = "He";
				adjective = "his";
			}
			if (student.get(0).getExGender().equalsIgnoreCase("female")) {
				geneder = "Ms.";
				pernoun = "She";
				adjective = "her";
			}
			parameters.put("logo", image);
		
			parameters.put("joinedyear", data.get(0).getAcademicYear().getExYear());
			parameters.put("university", university);
			parameters.put("universityh", universityh);
			
			parameters.put("adjective", adjective);
			parameters.put("father", student.get(0).getExFatherName());
			parameters.put("studentId", data.get(0).getExRollNo());
			parameters.put("enrollmentno", data.get(0).getExEnrollementNo());
			parameters.put("mother", student.get(0).getExMotherName());
			parameters.put("exRollNo", data.get(0).getExRollNo());
			parameters.put("department", data.get(0).getDepartment().getExName());
			parameters.put("batch", data.get(0).getBatch().getExIdentifier());
			parameters.put("dateOfDeclaration", request.getDateOfDeclaration());
			parameters.put("geneder", geneder);
			// parameters.put("scrutinize", request.getScrutinize().intValue());
			parameters.put("photo", image2);
			parameters.put("emblem", image2);
			parameters.put("swatch", image3);
			parameters.put("programe", programs.get().getExIdentifier());
	

			String folder = createFolder(academicYearid.get().getExYear(), collage.get().getExIdentifier(),
					"migration");

			// Fill the report
			JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,
					jrBeanCollectionDataSource);

			String filename = "\\" + student.get(0).getStudentadmission().getExRollNo() + ".pdf";

			// Export the report to a PDF file
			JasperExportManager.exportReportToPdfFile(jasperPrint, reportPath + folder + filename);

			File filenew = new File(reportPath + folder + filename);
			if (filenew.exists()) {
				filenew.setExecutable(true, false);
				filenew.setReadable(true, false);
				filenew.setWritable(true, false);
			}
			CertificatesLog logs = new CertificatesLog();

			if (request.getUser() == null || request.getUser().equals("")) {
				logs.setUser(null);
			} else {
				List<User> userresult = super.user.findByIdAndExIsDelete(request.getUser(), false);
				if (userresult.size() <= 0) {
					info.put("status", "2");
					info.put("message", "User id not present");
					return info;
				}

				logs.setUser(userresult.get(0));

			}
			Date date = new Date();
			logs.setExUrl(folder + filename.replace("\\", "/"));
			logs.setExCreateDate(date);
			logs.setExFileName(filename);
			logs.setColleges(collage.get());
			logs.setProgrammes(programs.get());
			logs.setDegree(degree.get());
			logs.setStudentadmission(data.get(0));
		
			logs.setExRollNo(request.getExRollNo());
			// logs.setScrutinize(request.getScrutinize());
			logs.setAcademicyear(academicYearid.get());
			super.certificatelog.save(logs);

			// info.put("gradeReport", dataList);
			info.put("status", "1");
			info.put("url", folder + filename);
			info.put("message", "Report successfully generated");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}

	}

	@Override
	public File downloadgradeReport(String url) {
		try {
			// String fileName = "gradeReport.pdf";
			String DIRECTORY = super.commonHelper.getSettingValue("DOCUMENT_PATH");
			File file = new File(DIRECTORY + url);
			return file;
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			return null;
		}
	}

	@Override
	public String allowallspecialcharcter(String name) {
		try {
			String fileName = name;
			String userAgent = "user-agent";
			boolean isInternetExplorer = (userAgent.indexOf("MSIE") > -1);
			byte[] fileNameBytes = fileName.getBytes((isInternetExplorer) ? ("windows-1250") : ("utf-8"));
			String dispositionFileName = "";
			for (byte b : fileNameBytes)
				dispositionFileName += (char) (b & 0xff);

			String disposition = "attachment; filename=\"" + dispositionFileName + "\"";
			return disposition;
		}

		catch (Exception e) {
			e.printStackTrace();

		}
		return name;
	}

	@Override
	public Map<String, Object> generateBulkPDCPdf(CertificatesRequest request) {
		// TODO Auto-generated method stub
		Map<String, Object> info = new LinkedHashMap<>();

		try {

			if (request.getDegree() == null || request.getDegree().equals("")) {
				info.put("status", "2");
				info.put("message", "degree is required");
				return info;
			}

			if (request.getColleges() == null || request.getColleges().equals("")) {
				info.put("status", "2");
				info.put("message", "college  is required");
				return info;
			}

			if (request.getProgrammes() == null || request.getProgrammes().equals("")) {
				info.put("status", "2");
				info.put("message", "programme  is required");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<Colleges> collage = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!collage.isPresent() || !collage.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "College not present");
				return info;
			}

			Optional<Programmes> programs = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!programs.isPresent() || !programs.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Programs not present");
				return info;
			}

			Optional<AcademicYear> academicYearid = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getEnrollmentYear());
			if (!academicYearid.isPresent()) {
				info.put("status", "2");
				info.put("message", "Student AcademicYear id not present");
				return info;
			}

			List<University> uid = super.university.findAllUnivesity();
			if (uid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "University not present");
				return info;

			}
			List dataList = new LinkedList();
			Map<String, Object> parameters = new HashMap<>();

			String university = uid.get(0).getExName();
			String universityk = uid.get(0).getExLocalName();
			Long scrt = (long) 1;

			// Long scrt=(long) 1;
			List<OGPA> ogparecord = super.ogpa
					.findByCollegesIdAndProgrammesIdAndDegreeIdAndAcademicYearIdAndExIsReGeneratedAndScrutinizeOrderByExRollNo(
							request.getColleges(), request.getProgrammes(), request.getDegree(),
							request.getEnrollmentYear(), true, scrt);
			if (ogparecord.size() <= 0) {
				info.put("status", "2");
				info.put("message", "OGPA is not generated.");
				return info;
			}
		
			for (OGPA o : ogparecord) {

				List<Studentpersonal> student = null;//super.studentpersonal.checkStudentExRollNo(o.getExRollNo());
				System.out.println(">>>>>student>>>>>>>"+student);
				System.out.println(">>>>o.getExRollNo()>>>>>>>>>"+o.getExRollNo());
				System.out.println(">>>>>>>>>>>>>"+student);
				
				if (student.size() <= 0) {
					info.put("status", "2");
					info.put("message", "Student not Present" + o.getExRollNo());
					return info;
				}

				if (student.get(0).getExGender() == null || student.get(0).getExGender().trim().isEmpty()) {
					info.put("status", "2");
					info.put("message",
							"missing personal details" + student.get(0).getStudentadmission().getExRollNo());
					return info;
				}
				String geneder = "", pernoun = "", adjective = "", con = "";
				if (student.get(0).getExGender().equalsIgnoreCase("male")) {
					con = "Mr.";
					geneder = "Son";
					pernoun = "He";
					adjective = "his";
				}
				if (student.get(0).getExGender().equalsIgnoreCase("female")) {
					con = "Ms.";
					geneder = "Daughter";
					pernoun = "She";
					adjective = "her";
				}

				Map<Object, Object> list = new HashMap<Object, Object>();
				double precentage = o.getOverallGradePoint() * 10;
				double prevalue = super.commonHelper.changeDecimal(precentage);
				String pro = programs.get().getExName().trim();

				list.put("exRollNo", o.getExRollNo());
				System.out.println(">>o.getExRollNo()>>>>" + o.getExRollNo());
				list.put("con", con);
				list.put("pernoun", pernoun);

				list.put("joinedyear", student.get(0).getStudentadmission().getAcademicYear().getExYear());
				// list.put("passoutyear", student.get(0).getStudentadmission().get);
				// list.put("finalyear",
				// student.get(0).getStudentadmission().getPassedOutYear().substring(5, 9));
				list.put("adjective", adjective);
				list.put("geneder", geneder);
				list.put("college", collage.get().getExName());
				list.put("father", student.get(0).getExFatherName().toUpperCase());
				list.put("mother", student.get(0).getExMotherName().toUpperCase());
				list.put("programe", pro);
				list.put("department", student.get(0).getStudentadmission().getDepartment().getExName());
				list.put("batch", student.get(0).getStudentadmission().getBatch().getExIdentifier());

				list.put("fullname", student.get(0).getStudentadmission().getExName().toUpperCase());
				list.put("enrollmentno", student.get(0).getStudentadmission().getExEnrollementNo());
				list.put("ogpa", super.commonHelper.doubledigit(o.getOverallGradePoint()));
				list.put("ogpaprecentage", "(" + super.commonHelper.doubledigit(prevalue) + "%).");
				System.out.println(">..list" + list);
				dataList.add(list);
				System.out.println(">..dataList" + dataList);
			}

			String serverurl = super.commonHelper.getSettingValue("SERVER_IP");
			String reportPath = super.commonHelper.getSettingValue("DOCUMENT_PATH");

			// Compile the Jasper report from .jrxml to .japser

			String path = resourceLoader.getResource("classpath:bulkPDC.jrxml").getURI().getPath();
			JasperReport jasperReport = JasperCompileManager.compileReport(path);

			// Get your data source

			JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(dataList);

			// Add parameters

			String image = super.commonHelper.getSettingValue("IMAGE_PATH");
			logger.info(image);
			System.out.println("?????????????????????+" + image);
			if (image == null) {
				logger.error("error for image" + image);
			}

			parameters.put("logo", image);
			parameters.put("university", university.toUpperCase());
			parameters.put("refNo", "COA" + collage.get().getExIdentifier() + "/" + "PDC");
			parameters.put("college", collage.get().getExName());
			parameters.put("program", programs.get().getExName());

			parameters.put("degree", degree.get().getExName());
			parameters.put("academicyear", academicYearid.get().getExIdentifier());
			// parameters.put("scrutinize", request.getScrutinize().intValue());
			System.out.println("parameters>" + parameters);
			String folder = createFolder(academicYearid.get().getExYear(), collage.get().getExIdentifier(), "bulkPDC");

			// Fill the report
			JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,
					jrBeanCollectionDataSource);

			String fileName = "\\" + programs.get().getExName() + ".pdf";

			// Export the report to a PDF file
			JasperExportManager.exportReportToPdfFile(jasperPrint, reportPath + folder + fileName);

			File filenew = new File(reportPath + folder + fileName);
			if (filenew.exists()) {
				filenew.setExecutable(true, false);
				filenew.setReadable(true, false);
				filenew.setWritable(true, false);
			}
			CertificatesLog logs = new CertificatesLog();

			if (request.getUser() == null || request.getUser().equals("")) {
				logs.setUser(null);
			} else {
				List<User> userresult = super.user.findByIdAndExIsDelete(request.getUser(), false);
				if (userresult.size() <= 0) {
					info.put("status", "2");
					info.put("message", "User id not present");
					return info;
				}

				logs.setUser(userresult.get(0));

			}
			Date date = new Date();
			logs.setExUrl(folder + fileName.replace("\\", "/"));
			logs.setExCreateDate(date);
			logs.setExFileName(fileName);
			logs.setColleges(collage.get());
			logs.setProgrammes(programs.get());
			logs.setDegree(degree.get());
			// logs.setStudentadmission(data.get(0));
			// logs.setScrutinize(request.getScrutinize());
			// logs.setRefno(request.getRefNo());
			// logs.setExRollNo( o.getExRollNo());
			logs.setAcademicyear(academicYearid.get());
			super.certificatelog.save(logs);

			// info.put("gradeReport", dataList);
			info.put("status", "1");
			info.put("url", folder + fileName);
			info.put("message", "Report successfully generated");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}
	}

//bulk migration
	@Override
	public Map<String, Object> generateBulkMigrationPdf(CertificatesRequest request) {
		// TODO Auto-generated method stub
		Map<String, Object> info = new LinkedHashMap<>();

		try {

			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<Colleges> collage = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!collage.isPresent() || !collage.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "College not present");
				return info;
			}

			Optional<Programmes> programs = super.programme.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!programs.isPresent() || !programs.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Programs not present");
				return info;
			}

			Optional<AcademicYear> academicYearid = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getEnrollmentYear());
			if (!academicYearid.isPresent()) {
				info.put("status", "2");
				info.put("message", "Student AcademicYear id not present");
				return info;
			}

			List<University> uid = super.university.findAllUnivesity();
			if (uid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "University not present");
				return info;
			}

			String university = uid.get(0).getExName();

			List dataList = new LinkedList();
			Map<String, Object> parameters = new HashMap<>();

			Long scrt = (long) 1;
			List<OGPA> ogparecord = super.ogpa
					.findByCollegesIdAndProgrammesIdAndDegreeIdAndAcademicYearIdAndExIsReGeneratedAndScrutinizeOrderByExRollNo(
							request.getColleges(), request.getProgrammes(), request.getDegree(),
							request.getEnrollmentYear(), true, scrt);
			if (ogparecord.size() <= 0) {
				info.put("status", "2");
				info.put("message", "OGPA is not generated.");
				return info;
			}
			for (OGPA o : ogparecord) {

				List<Studentpersonal> student = super.studentpersonal.checkStudentId(o.getExRollNo(), true, false);
				if (student.size() <= 0) {
					info.put("status", "2");
					info.put("message", "Student not Present" + o.getExRollNo());
					return info;
				}

				String geneder = "", pernoun = "", adjective = "";
				if (student.get(0).getExGender() == null || student.get(0).getExGender().trim().isEmpty()) {
					info.put("status", "2");
					info.put("message", "missing personal details" + o.getExRollNo());
					return info;
				}
				if (student.get(0).getExGender().equalsIgnoreCase("male")) {
					geneder = "Mr.";
					pernoun = "He";
					adjective = "his";
				}
				if (student.get(0).getExGender().equalsIgnoreCase("female")) {
					geneder = "Ms.";
					pernoun = "She";
					adjective = "her";
				}

				Map<Object, Object> list = new HashMap<Object, Object>();
				String pro = programs.get().getExName().trim();

				list.put("exRollNo", o.getExRollNo());
				list.put("pernoun", pernoun);
				list.put("joinedyear", student.get(0).getStudentadmission().getAcademicYear().getExYear());
				// list.put("passoutyear",
				// student.get(0).getStudentadmission().getPassedOutYear());
				// list.put("finalyear",
				// student.get(0).getStudentadmission().getPassedOutYear().substring(5, 9));
				list.put("adjective", adjective);
				list.put("geneder", geneder);
				list.put("programe", pro);
				list.put("fullname", o.getStudentadmission().getExName());
				list.put("father", student.get(0).getExFatherName());
				list.put("exEnrollmentNo", student.get(0).getStudentadmission().getExEnrollementNo());
				list.put("mother", student.get(0).getExMotherName());

				list.put("department", o.getDepartment().getExName());
				list.put("batch", o.getStudentadmission().getBatch().getExIdentifier());
				dataList.add(list);
			}

			String serverurl = super.commonHelper.getSettingValue("SERVER_IP");
			String reportPath = super.commonHelper.getSettingValue("DOCUMENT_PATH");
			String image2 = super.commonHelper.getSettingValue("EMBLEM_PATH");
			String swachhbarathlogo = super.commonHelper.getSettingValue("SWATCHHBHARAT_PATH");
			// Compile the Jasper report from .jrxml to .japser

			String path = resourceLoader.getResource("classpath:bulkMigration.jrxml").getURI().getPath();
			JasperReport jasperReport = JasperCompileManager.compileReport(path);

			// Get your data source

			JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(dataList);

			// Add parameters

			String image = super.commonHelper.getSettingValue("IMAGE_PATH");
			logger.info(image);
			System.out.println("?????????????????????+" + image);
			if (image == null) {
				logger.error("error for image" + image);
			}
			parameters.put("logo", image);
			parameters.put("emblem", image2);
			parameters.put("swachhbarathlogo", swachhbarathlogo);
			parameters.put("universitylocalname", uid.get(0).getExLocalName());
			System.out.println(">>>>>>>.local name" + uid.get(0).getExLocalName());
			parameters.put("university", university);
			// parameters.put("refNo", "R/" +"COA"+collage.get().getExIdentifier() + "/" +
			// "MIG");
			parameters.put("college", collage.get().getExName());
			parameters.put("program", programs.get().getExName());
			parameters.put("degree", degree.get().getExName());
			// parameters.put("scrutinize", request.getScrutinize().intValue());

			String folder = createFolder(academicYearid.get().getExYear(), collage.get().getExIdentifier(),
					"bulkmigration");

			// Fill the report
			JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,
					jrBeanCollectionDataSource);
			String fileName = "\\" + programs.get().getExName() + ".pdf";

			// Export the report to a PDF file
			JasperExportManager.exportReportToPdfFile(jasperPrint, reportPath + folder + fileName);

			File filenew = new File(reportPath + folder + fileName);
			if (filenew.exists()) {
				filenew.setExecutable(true, false);
				filenew.setReadable(true, false);
				filenew.setWritable(true, false);
			}
			CertificatesLog logs = new CertificatesLog();

			if (request.getUser() == null || request.getUser().equals("")) {
				logs.setUser(null);
			} else {
				List<User> userresult = super.user.findByIdAndExIsDelete(request.getUser(), false);
				if (userresult.size() <= 0) {
					info.put("status", "2");
					info.put("message", "User id not present");
					return info;
				}

				logs.setUser(userresult.get(0));

			}
			Date date = new Date();
			logs.setExUrl(folder + fileName.replace("\\", "/"));
			logs.setExCreateDate(date);
			logs.setExFileName(fileName);
			logs.setColleges(collage.get());
			logs.setProgrammes(programs.get());
			logs.setDegree(degree.get());
			// logs.setStudentadmission(data.get(0));
			// logs.setScrutinize(request.getScrutinize());
			// logs.setRefno(collage.get().getExIdentifier()+"/"+"PDC"+"/"+request.getStudentid()+"/"+data.get(0).getPassedOutYear().substring(5,
			// 9));

			logs.setAcademicyear(academicYearid.get());
			super.certificatelog.save(logs);

			// info.put("gradeReport", dataList);
			info.put("status", "1");
			info.put("url", folder + fileName);
			info.put("message", "Report successfully generated");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> generateBulkFeedbackPdf(FeedbackRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();

		try {
			List<Object> datalist = new ArrayList<Object>();
			List<Object> record = new ArrayList<Object>();
	
			if (info.size() > 0) {
				return info;
			}

			Optional<AcademicYear> academicYearid = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getAcademicYear());
			if (!academicYearid.isPresent()) {
				info.put("status", "2");
				info.put("message", "AcademicYear id not present");
				return info;
			}
			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department id not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByIdAndExIsDeleteAndExIsActive(request.getDegree(), false, true);
			if (!degree.isPresent()) {
				info.put("status", "2");
				info.put("message", "degree not  present");
				return info;

			}
			Optional<ProgrammeYear> ProgrammeYear = super.programmeYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammeYear());
			if (!ProgrammeYear.isPresent()) {
				info.put("status", "2");
				info.put("message", "ProgrammeYear id not present");
				return info;
			}
			Optional<Semster> Semester = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!Semester.isPresent()) {
				info.put("status", "2");
				info.put("message", "Semester id not present");
				return info;
			}
			Optional<Programmes> program = super.programme.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!program.isPresent()) {
				info.put("status", "2");
				info.put("message", "Programme not present");
				return info;
			}

			Optional<StaffEmpDetails> Staffpersonal = super.staffEmpDetails
					.findByStaffpersonalExIsDeleteAndStaffpersonalExIsActiveAndStaffpersonalId(false, true,
							request.getStaff());
			if (!Staffpersonal.isPresent()) {
				info.put("status", "2");
				info.put("message", "Staffpersonal not present");
				return info;
			}
			Optional<Courses> cour = super.courses.findByIdAndExIsDeleteAndExIsActiveAndAcademicYearId(
					request.getCourses(), false, true, request.getAcademicYear());
			if (!cour.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not  present");
				return info;
			}

			List<University> uid = super.university.findAllUnivesity();
			if (uid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "University not present");
				return info;
			}
		
			

			List<Object> feedbck = new ArrayList<Object>();
			List<FeedBack> duplicateCheck = super.feedBack
					.findByCoursesIdAndProgrammeYearIdAndAcademicYearIdAndProgrammesIdAndSemesterIdAndStaffIdAndDegreeIdAndDepartmentIdAndFeedbackType(
							request.getCourses(), request.getProgrammeYear(), request.getAcademicYear(),
							request.getProgrammes(), request.getSemester(), request.getStaff(), request.getDegree(),
							request.getDepartment(),request.getFeedbackType());
			if (duplicateCheck.size() <= 0) {
				info.put("status", "2");
				info.put("message", "FeedBack not paresent for particular course and Staff");
				return info;
			}
			

			for (FeedBack d : duplicateCheck) {
				feedbck.add(d.getId());
			

			// for course
			String type = "1";
			int tempcourse = 0;
			long tempmaxcourse = 0;
			if (type == "1" || type.equals("1")) {
				int totalcourse = 0;
				long maxscorecourse = 0;
				List<AboutFeedBack> task = super.aboutFeedBack.findByExIsDeleteAndExType(false, type);
				
				for (AboutFeedBack e : task) {
					System.out.println("feedbck" + feedbck + e.getId());
					List<FeedBackScale> FeedBackScale = super.feedBackScale	.findByFeedBackIdInAndAboutFeedBackId(feedbck, e.getId());
					Long maxvalue = super.feedBackScale	.findByMaxScaleValue();

					if (FeedBackScale.size() <= 0) {
						info.put("status", "1");
						info.put("message", "aboutFeedBack Not sumbited" + e.getExName());
						return info;
					} else {
						int scalevalue = 0;
						String scalename="";

						for (FeedBackScale f : FeedBackScale) {
							scalevalue =  Integer.parseInt(f.getScale().getExScaleValue());
							scalename=f.getScale().getExName();

							System.out.println("?????????????????scalename???" + scalename);
							// datalist.add(scalevalue);
						}
						totalcourse = totalcourse + scalevalue;
						maxscorecourse = maxscorecourse + maxvalue;

						Map<Object, Object> data = new HashMap<Object, Object>();
						data.put("feedbackname", e.getExName());
						data.put("scale", scalevalue);
						data.put("scalename", scalename);

						data.put("maxscore", maxvalue);
						record.add(data);
					}
				}
				Map<Object, Object> data = new HashMap<Object, Object>();
				data.put("coursescale", totalcourse);
				data.put("maxscorecourse", maxscorecourse );
				data.put("coursetotal", "Sub Total");
				record.add(data);
				tempcourse = totalcourse;
				tempmaxcourse = maxscorecourse * duplicateCheck.size();
			}
			// for teacher
			type = "2";
			int tempteacher = 0;
			long tempmaxteacher = 0;
			if (type == "2" || type.equals("2")) {
				int totalteacher = 0;
				long maxteacherscore = 0;
				List<AboutFeedBack> task = super.aboutFeedBack.findByExIsDeleteAndExType(false, type);
				for (AboutFeedBack e : task) {
					System.out.println("feedbck" + feedbck + e.getId());
					List<FeedBackScale> FeedBackScale = super.feedBackScale
							.findByFeedBackIdInAndAboutFeedBackId(feedbck, e.getId());
					Long maxvalue = super.feedBackScale.findByMaxScaleValue();

					
					if (FeedBackScale.size() <= 0) {
						info.put("status", "1");
						info.put("message", "aboutFeedBack Not sumbited" + e.getExName());
						return info;
					} else {
						int scalevalue = 0;
						String scalename="";
						for (FeedBackScale f : FeedBackScale) {
							scalevalue =  Integer.parseInt(f.getScale().getExScaleValue());
							scalename=f.getScale().getExName();
						}
						totalteacher = totalteacher + scalevalue;
						maxteacherscore = maxteacherscore + maxvalue;

						Map<Object, Object> data = new HashMap<Object, Object>();
						data.put("tfeedbackname", e.getExName());
						data.put("tscalename", scalename);

						data.put("tscale", scalevalue);
						data.put("tmaxscore", maxvalue);
						record.add(data);
					}

				}
				
				tempmaxteacher = maxteacherscore ;
		       	tempteacher = totalteacher;
				Map<Object, Object> data = new HashMap<Object, Object>();
				data.put("teacherscale", totalteacher);
				data.put("maxteacherscore", maxteacherscore );
				data.put("teachertotal", "Sub Total");
				data.put("totalmaxval", tempmaxcourse + tempmaxteacher);
				data.put("temptotalscale", tempteacher + tempcourse);	
				record.add(data);
				
			}
			}

			String serverurl = super.commonHelper.getSettingValue("SERVER_IP");
			// String reportPath = "src/main/resources/";
			String reportPath = super.commonHelper.getSettingValue("DOCUMENT_PATH");

			// Compile the Jasper report from .jrxml to .japser

			String path = resourceLoader.getResource("classpath:bulkfeedbackReport.jrxml").getURI().getPath();
			JasperReport jasperReport = JasperCompileManager.compileReport(path);

			// JasperReport jasperReport = JasperCompileManager.compileReport(reportPath +
			// "\\gradeReport.jrxml");

			
			// Get your data source

			JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(record);

			String image = super.commonHelper.getSettingValue("IMAGE_PATH");
			logger.info(image);
			System.out.println("?????????????????????+" + image);
			if (image == null) {
				logger.error("error for image" + image);
			}
			// Add parameters
			Map<String, Object> parameters = new HashMap<>();
			parameters.put("logo", image);
			parameters.put("createdBy", "Win.org");
			parameters.put("department", department.get().getExName());

			parameters.put("programmes", program.get().getExName());
			parameters.put("colleges",  Staffpersonal.get().getStaffpersonal().getColleges().getExName());
			parameters.put("programmeYear", ProgrammeYear.get().getExName());
			parameters.put("semester", Semester.get().getExName());
			parameters.put("academicYear", academicYearid.get().getExYear());
			parameters.put("university", uid.get(0).getExName());
			parameters.put("staff", Staffpersonal.get().getStaffpersonal().getExName());
			parameters.put("course", cour.get().getExName());
			parameters.put("coursecode", cour.get().getExCoursesCode());
			parameters.put("courcrdthr", cour.get().getCreditHours().getExCreditHourTitle());
			parameters.put("noofstudent", duplicateCheck.size());
			parameters.put("designation",Staffpersonal.get().getStaffpersonal().getDesignation()==null?null:Staffpersonal.get().getStaffpersonal().getDesignation().get(0).getExName());
		//	parameters.put("disciple", cour.get().get.getExName());

			String folder = createFolder(academicYearid.get().getExYear(),
					 Staffpersonal.get().getStaffpersonal().getColleges().getExIdentifier(), "bulkfeedbackReport");

			// Fill the report
			JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,
					jrBeanCollectionDataSource);

			
			String filename ="\\"+cour.get().getExCoursesCode()+" " +"("+cour.get().getCreditHours().getExCreditHourTitle()+")"+".pdf";

			// Export the report to a PDF file
			JasperExportManager.exportReportToPdfFile(jasperPrint,
					reportPath + folder +filename);

			File filenew = new File(reportPath + folder + filename);
			if (filenew.exists()) {
				filenew.setExecutable(true, false);
				filenew.setReadable(true, false);
				filenew.setWritable(true, false);
			}

			// info.put("gradeReport", dataList);
			info.put("status", "1");
			info.put("url", folder + filename);
			info.put("message", "Report successfully generated");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> generateDegreePdf(CertificatesRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();

		try {

			if (request.getExRollNo() == null || request.getExRollNo().equals("")) {
				info.put("status", "2");
				info.put("message", "RollNo is required");
				return info;
			}

		

		
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<Colleges> collage = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),
					false, true);
			if (!collage.isPresent() || !collage.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "College not present");
				return info;
			}

			Optional<Programmes> programs = super.programme.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!programs.isPresent() || !programs.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Programs not present");
				return info;
			}

			Optional<AcademicYear> academicYearid = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false,
					true, request.getEnrollmentYear());
			if (!academicYearid.isPresent()) {
				info.put("status", "2");
				info.put("message", "Student AcademicYear id not present");
				return info;
			}

			List<University> uid = super.university.findAllUnivesity();
			if (uid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "University not present");
				return info;
			}

			String university = uid.get(0).getExName();


			Long scrt=(long) 1;	
			
			 List<OGPA> ogparecord =super.ogpa.	 findByExRollNoAndCollegesIdAndProgrammesIdAndDegreeIdAndAcademicYearIdAndExIsReGeneratedAndScrutinize (request.getExRollNo(), request.getColleges(), request.getProgrammes(), request.getDegree(), request.getEnrollmentYear(),true, scrt); 
			 if (ogparecord.size() <= 0)
			 { 
				 info.put("status", "2");
				 info.put("message","OGPA is not generated. ");
				 return info; 
				 }
			
			
			List<Studentadmission> data = super.studentadmission
					.findByExRollNoAndExIsActiveAndExIsDelete(request.getExRollNo(), true, false);
			List dataList = new LinkedList();

			if (data.size() <= 0) {
				info.put("status", "2");
				info.put("message", "No records found.");
				return info;
			}
			List<Studentpersonal> studentdetail = super.studentpersonal.checkStudentId(request.getExRollNo(), true,
					false);
			if (studentdetail.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Student not Present");
				return info;
			}

		

			Map<Object, Object> list = new HashMap<Object, Object>();
			


			
			
			list.put("id", data.get(0).getId());
	//		list.put("programe", Faculty);
			list.put("college", data.get(0).getColleges().getExLocalName());
			list.put("programe", data.get(0).getProgrammes().getExName());
			list.put("programehindi", data.get(0).getProgrammes().getExLocalName());
			list.put("department", data.get(0).getDepartment().getExName());
			list.put("academicyear", ogparecord.get(0).getAcademicYear().getExYear());
			list.put("cgpa", ogparecord.get(0).getOverallGradePoint());
			list.put("collegeEng", data.get(0).getColleges().getExName());
			list.put("name", data.get(0).getExName());
			list.put("namehindi", data.get(0).getExNameInHindi());
			list.put("father", studentdetail.get(0).getExFatherName());
			list.put("fatherhindi", studentdetail.get(0).getExFatherNameInHindi());
		//	list.put("exStudentName", studentdetail.size() <= 0 ? "NA" : studentdetail.get(0).get);
			dataList.add(list);

			System.out.println("???????dataList?????????" + dataList);
			String serverurl = super.commonHelper.getSettingValue("SERVER_IP");
			// String reportPath = "src/main/resources/";
			String reportPath =  super.commonHelper.getSettingValue("DOCUMENT_PATH");

			// Compile the Jasper report from .jrxml to .japser

			String path = resourceLoader.getResource("classpath:degree.jrxml").getURI().getPath();
			JasperReport jasperReport = JasperCompileManager.compileReport(path);

			// JasperReport jasperReport = JasperCompileManager.compileReport(reportPath +
			// "\\gradeReport.jrxml");

			// Get your data source

			
			JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(dataList);

			// Add parameters
			Map<String, Object> parameters = new HashMap<>();

			List<Studentpersonal> student = super.studentpersonal.checkStudentId(data.get(0).getExRollNo(), true,
					false);
			if (student.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Student not Present" + data.get(0).getExRollNo());
				return info;
			}

			String image = super.commonHelper.getSettingValue("IMAGE_PATH");
			logger.info(image);
			System.out.println("?????????????????????+" + image);
			if (image == null) {
				logger.error("error for image" + image);
			}
			
			
			String studentphoto =student.get(0).getStudentadmission().getExPhoto();

			String phoy =	serverurl+studentphoto;

			logger.info("student Photo Path>>>>>>>"+phoy);
			
			String icon ="images/icon.png";

			
			
			parameters.put("studentphoto", serverurl+studentphoto);
			parameters.put("universityhindi", uid.get(0).getExLocalName());
			parameters.put("university", uid.get(0).getExName());
			parameters.put("icon", icon);
			parameters.put("logo", image);
System.out.println(">."+parameters);
			parameters.put("studentId", data.get(0).getExRollNo());
			String folder = createFolder(academicYearid.get().getExYear(), collage.get().getExIdentifier(), "degree");

			// Fill the report
			JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,
					jrBeanCollectionDataSource);
			
			
			String filename  ="\\"+studentdetail.get(0).getStudentadmission().getExRollNo()+".pdf";


			// Export the report to a PDF file
			JasperExportManager.exportReportToPdfFile(jasperPrint, reportPath + folder + filename);

			File filenew = new File(reportPath + folder + filename);
			if (filenew.exists()) {
				filenew.setExecutable(true, false);
				filenew.setReadable(true, false);
				filenew.setWritable(true, false);
			}

			CertificatesLog logs = new CertificatesLog();

			if (request.getUser() == null || request.getUser().equals("")) {
				logs.setUser(null);
			} else {
				List<User> userresult = super.user.findByIdAndExIsDelete(request.getUser(), false);
				if (userresult.size() <= 0) {
					info.put("status", "2");
					info.put("message", "User id not present");
					return info;
				}

				logs.setUser(userresult.get(0));

			}
			Date date = new Date();
			logs.setExUrl(folder + filename.replace("\\", "/"));
			logs.setExCreateDate(date);
			logs.setExFileName(filename.replace("/", ""));
			logs.setColleges(collage.get());
			logs.setProgrammes(programs.get());
			logs.setDegree(degree.get());
			logs.setStudentadmission(data.get(0));

			logs.setExRollNo(request.getExRollNo());
			logs.setAcademicyear(academicYearid.get());
			super.certificatelog.save(logs);

		
			info.put("status", "1");
			info.put("url", folder + filename);
			info.put("message", "Report successfully generated");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> generateCourseWisePdf(CertificatesRequest request) {
		// TODO Auto-generated method stub
		Map<String, Object> info = new LinkedHashMap<>();

		try {

			if (request.getExRollNo() == null || request.getExRollNo().equals("")) {
				info.put("status", "2");
				info.put("message", "roll no  is required");
				return info;
			}

			if (request.getDegree() == null || request.getDegree().equals("")) {
				info.put("status", "2");
				info.put("message", "degree is required");
				return info;
			}

			if (request.getColleges() == null || request.getColleges().equals("")) {
				info.put("status", "2");
				info.put("message", "college  is required");
				return info;
			}

			if (request.getProgrammes() == null || request.getProgrammes().equals("")) {
				info.put("status", "2");
				info.put("message", "programme  is required");
				return info;
			}
			if (request.getDateOfDeclaration() == null || request.getDateOfDeclaration().equals("")) {
				info.put("status", "2");
				info.put("message", "DateOfDeclaration is required ");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<Colleges> collage = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!collage.isPresent() || !collage.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "College not present");
				return info;
			}

			Optional<Programmes> programs = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!programs.isPresent() || !programs.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Programs not present");
				return info;
			}

			Optional<AcademicYear> academicYearid = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getEnrollmentYear());
			if (!academicYearid.isPresent()) {
				info.put("status", "2");
				info.put("message", "Student AcademicYear id not present");
				return info;
			}

			List<University> uid = super.university.findAllUnivesity();
			if (uid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "University not present");
				return info;

			}
			String university = uid.get(0).getExName();
			String universityk = uid.get(0).getExLocalName();
			List dataList = new LinkedList();
			Map<String, Object> parameters = new HashMap<>();

			Long scrt = (long) 1;
		
			List<Object[]> ogparecord = super.semesterProgressReport.getphdOgpa(request.getExRollNo());
			if (ogparecord.size() <= 0) {
				info.put("status", "2");
				info.put("message", "ogpa not generated ");
				
			}
			List<Studentadmission> data = super.studentadmission
					.findByExRollNoAndExIsActiveAndExIsDelete(request.getExRollNo(), true, false);

			if (data.size() <= 0) {
				info.put("status", "2");
				info.put("message", "No records found.");
				return info;
			}

			for (Studentadmission e : data) {
				Map<Object, Object> list = new HashMap<Object, Object>();
				String pro = e.getProgrammes().getExName().trim();

				list.put("id", e.getId());
				list.put("programe", pro);
				list.put("programek", e.getProgrammes().getExLocalName());
				list.put("college", e.getColleges().getExName());
				list.put("collegek", e.getColleges().getExLocalName());
				list.put("studentId", e.getExRollNo());
				list.put("name", e.getExName());
				list.put("enrollmentno", e.getExEnrollementNo());
				list.put("academicyear", e.getAcademicYear().getExYear());
				list.put("department", e.getDepartment().getExName());

				dataList.add(list);
			}

			String serverurl = super.commonHelper.getSettingValue("SERVER_IP");
			String reportPath = super.commonHelper.getSettingValue("DOCUMENT_PATH"); // "src/main/resources/";
			String image = super.commonHelper.getSettingValue("IMAGE_PATH");
			logger.info(image);
			// Compile the Jasper report from .jrxml to .japser

			String path = resourceLoader.getResource("classpath:CourseWork.jrxml").getURI().getPath();
			JasperReport jasperReport = JasperCompileManager.compileReport(path);

			JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(dataList);
			// Add parameters

			List<Object[]> stuid = super.semesterProgressReport.getphdOgpa(request.getExRollNo());
			if (stuid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "No record found.");
				return info;
			}
			String marks = stuid.toString();
			 List<Studentpersonal> student = super.studentpersonal.checkStudentId(data.get(0).getExRollNo(), true,
					false);
			if (student.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Student not Present" + data.get(0).getExRollNo());
				return info;
			}

			if (student.get(0).getExGender() == null || student.get(0).getExGender().trim().isEmpty()) {
				info.put("status", "2");
				info.put("message", "missing personal details" + data.get(0).getExRollNo());
				return info;
			}

			String geneder = "", pernoun = "", adjective = "", con = "", conk = "";
			if (student.get(0).getExGender().equalsIgnoreCase("male")) {

				geneder = "son";
				pernoun = "He";
				adjective = "his";
			}
			if (student.get(0).getExGender().equalsIgnoreCase("female")) {

				geneder = "daughter";
				pernoun = "She";
				adjective = "her";
			}

			System.out.println("????????????bbbbb?????????+" + image);
			if (image == null) {
				logger.error("error for image" + image);
			}

		
			parameters.put("con", con);
			parameters.put("logo", image);
			parameters.put("joinedyear", data.get(0).getAcademicYear().getExYear());
			parameters.put("dateOfDeclaration", request.getDateOfDeclaration());
			
			parameters.put("ogpa", marks);
			parameters.put("pernoun", pernoun);

			parameters.put("adjective", adjective);

			parameters.put("university", university.toUpperCase());
			parameters.put("universityk", universityk);
			parameters.put("studentId", data.get(0).getExRollNo());
			parameters.put("name", data.get(0).getExName());

			parameters.put("father", student.get(0).getExFatherName());
			parameters.put("mother", student.get(0).getExMotherName());

			parameters.put("geneder", geneder);

			parameters.put("conk", conk);

			String folder = createFolder(academicYearid.get().getExYear(), collage.get().getExIdentifier(), "pdc");

			String filename = "\\" + data.get(0).getExRollNo() + ".pdf";

			// Fill the report
			JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,
					jrBeanCollectionDataSource);

			// Export the report to a PDF file
			JasperExportManager.exportReportToPdfFile(jasperPrint, reportPath + folder + filename);

			File filenew = new File(reportPath + folder + filename);
			if (filenew.exists()) {
				filenew.setExecutable(true, false);
				filenew.setReadable(true, false);
				filenew.setWritable(true, false);
			}

			
			info.put("status", "1");
			info.put("url", folder + filename);
			info.put("message", "Report successfully generated");

			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> generateMigrationCompletionPdf(CertificatesRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();

		try {

			if (request.getExRollNo() == null || request.getExRollNo().equals("")) {
				info.put("status", "2");
				info.put("message", "roll no  is required");
				return info;
			}

			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<Colleges> collage = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!collage.isPresent() || !collage.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "College not present");
				return info;
			}

			Optional<Programmes> programs = super.programme.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!programs.isPresent() || !programs.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Programs not present");
				return info;
			}

			Optional<AcademicYear> academicYearid = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getEnrollmentYear());
			if (!academicYearid.isPresent()) {
				info.put("status", "2");
				info.put("message", "Student AcademicYear id not present");
				return info;
			}

			List<University> uid = super.university.findAllUnivesity();
			if (uid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "University not present");
				return info;
			}

			String university = uid.get(0).getExName();
			String universityh = uid.get(0).getExLocalName();
			List dataList = new LinkedList();
			Map<String, Object> parameters = new HashMap<>();

			Long scrt = (long) 1;
			List<OGPA> ogparecord = super.ogpa
					.findByExRollNoAndCollegesIdAndProgrammesIdAndDegreeIdAndAcademicYearIdAndExIsReGeneratedAndScrutinize(
							request.getExRollNo(), request.getColleges(), request.getProgrammes(), request.getDegree(),
							request.getEnrollmentYear(), true, scrt );
			System.out.println(">>>>>>>>>>>>>"+ogparecord);
			if (ogparecord.size() <= 0) {
				info.put("status", "2");
				info.put("message", "OGPA is not generated. ");
				return info;
			}
			
			List<Studentadmission> data = super.studentadmission.findByExRollNoAndExIsActiveAndExIsDelete(request.getExRollNo(), true, false);
			System.out.println("data>>>>>." + data);
			if (data.size() <= 0) {
				info.put("status", "2");
				info.put("message", "No records found.");
				return info;
			}

			for (Studentadmission e : data) {
				Map<Object, Object> list = new HashMap<Object, Object>();
				String pro = e.getProgrammes().getExName().trim();

				list.put("id", e.getId());
				list.put("name", e.getExName());
				list.put("programe", pro);
				list.put("college", e.getColleges().getExName());
				list.put("exRollNo", e.getExRollNo());
				dataList.add(list);
			}
			

			String serverurl = super.commonHelper.getSettingValue("SERVER_IP");
			// String reportPath = "src/main/resources/";
			String reportPath = super.commonHelper.getSettingValue("DOCUMENT_PATH");
			String image2 = super.commonHelper.getSettingValue("EMBLEM_PATH");
			String image = super.commonHelper.getSettingValue("IMAGE_PATH");
			String image3 = "images/Migation_Certificate.jpg";
			String srNumber = ogparecord.get(0).getMaigrationSrNo() == null ?"NA":ogparecord.get(0).getMaigrationSrNo();
			// Compile the Jasper report from .jrxml to .japser

			String path = resourceLoader.getResource("classpath:migration.jrxml").getURI().getPath();
			JasperReport jasperReport = JasperCompileManager.compileReport(path);

			// JasperReport jasperReport = JasperCompileManager.compileReport(reportPath +
			// "\\gradeReport.jrxml");

			// Get your data source

			JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(dataList);

			// Add parameters

			List<Studentpersonal> student = super.studentpersonal.checkStudentId(data.get(0).getExRollNo(), true,
					false);
			if (student.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Student not Present" + data.get(0).getExRollNo());
				return info;
			}

			String geneder = "", pernoun = "", adjective = "";
			if (student.get(0).getExGender() == null || student.get(0).getExGender().trim().isEmpty()) {
				info.put("status", "2");
				info.put("message", "missing personal details" + data.get(0).getExRollNo());
				return info;
			}
			if (student.get(0).getExGender().equalsIgnoreCase("male")) {
				geneder = "Mr.";
				pernoun = "He";
				adjective = "his";
			}
			if (student.get(0).getExGender().equalsIgnoreCase("female")) {
				geneder = "Ms.";
				pernoun = "She";
				adjective = "her";
			}
			parameters.put("logo", image);
			parameters.put("srNumber", srNumber);
			parameters.put("joinedyear", data.get(0).getAcademicYear().getExYear());
			parameters.put("university", university);
			parameters.put("universityh", universityh.trim());
			parameters.put("adjective", adjective);
			parameters.put("father", student.get(0).getExFatherName());
			parameters.put("studentId", data.get(0).getExRollNo());
			parameters.put("enrollmentno", data.get(0).getExEnrollementNo());
			parameters.put("mother", student.get(0).getExMotherName());
			parameters.put("exRollNo", data.get(0).getExRollNo());
			parameters.put("department", data.get(0).getDepartment().getExName());
			parameters.put("batch", data.get(0).getBatch().getExIdentifier());
			parameters.put("dateOfDeclaration", request.getDateOfDeclaration());
			parameters.put("geneder", geneder);
			// parameters.put("scrutinize", request.getScrutinize().intValue());
			parameters.put("emblem", image2);
			parameters.put("swatch", image3);
			parameters.put("programe", programs.get().getExIdentifier());
	
			String folder = createFolder(academicYearid.get().getExYear(), collage.get().getExIdentifier(),
					"migration");

			// Fill the report
			JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,
					jrBeanCollectionDataSource);

			String filename = "\\" + student.get(0).getStudentadmission().getExRollNo() + ".pdf";

			// Export the report to a PDF file
			JasperExportManager.exportReportToPdfFile(jasperPrint, reportPath + folder + filename);

			File filenew = new File(reportPath + folder + filename);
			if (filenew.exists()) {
				filenew.setExecutable(true, false);
				filenew.setReadable(true, false);
				filenew.setWritable(true, false);
			}
			CertificatesLog logs = new CertificatesLog();

			if (request.getUser() == null || request.getUser().equals("")) {
				logs.setUser(null);
			} else {
				List<User> userresult = super.user.findByIdAndExIsDelete(request.getUser(), false);
				if (userresult.size() <= 0) {
					info.put("status", "2");
					info.put("message", "User id not present");
					return info;
				}

				logs.setUser(userresult.get(0));

			}
			Date date = new Date();
			logs.setExUrl(folder + filename.replace("\\", "/"));
			logs.setExCreateDate(date);
			logs.setExFileName(filename);
			logs.setColleges(collage.get());
			logs.setProgrammes(programs.get());
			logs.setDegree(degree.get());
			logs.setStudentadmission(data.get(0));
		
			logs.setExRollNo(request.getExRollNo());
			// logs.setScrutinize(request.getScrutinize());
			logs.setAcademicyear(academicYearid.get());
			super.certificatelog.save(logs);

			// info.put("gradeReport", dataList);
			info.put("status", "1");
			info.put("url", folder + filename);
			info.put("message", "Report successfully generated");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> getStudentCertificates(CommonRequest request) {
		List tasks = new ArrayList();
		Map<String, Object> info = new LinkedHashMap<>();	
		try {	
			Optional<Studentadmission> status = super.studentadmission.findById(request.getStudent());
			if(!status.isPresent()) {
				info.put("status", "2");
				info.put("message", "Student is not present.");
				return info;
			}
			
			
			String DIRECTORY = super.commonHelper.getSettingValue("DOCUMENT_PATH");
			 String imagepath = "/"+status.get().getAcademicYear().getExYear()+"/"+ status.get().getProgrammes().getExIdentifier()+"/document/"+status.get().getExRollNo().trim()+"/";			
			String destipath = "/"+status.get().getAcademicYear().getExYear()+"/"+status.get().getProgrammes().getExIdentifier()+"/document/"+status.get().getExRollNo().trim()+".zip";
				System.out.println(">>>>>>>>>>>"+imagepath);
			File tempFile = new File(DIRECTORY+imagepath);
			
			if(!tempFile.exists()) {
				info.put("status", "2");
				info.put("message", "Certificates Not Present");
				return info;
			}
			
			zipFolder(Paths.get(DIRECTORY+imagepath) , Paths.get(DIRECTORY+destipath));
				info.put("status", "1");
				info.put("url", destipath);
				info.put("message", "Report successfully generated");
				return info;
		
			
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	private void zipFolder(Path sourceFolderPath, Path zipPath) throws Exception {
		ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(zipPath.toFile()));
		Files.walkFileTree(sourceFolderPath, new SimpleFileVisitor<Path>() {
			public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
				zos.putNextEntry(new ZipEntry(sourceFolderPath.relativize(file).toString()));
				Files.copy(file, zos);
				zos.closeEntry();
				return FileVisitResult.CONTINUE;
			}
		});
		zos.close();
	}

	@Override
	public Map<String, Object> academicCalenderPdfForStudent(AcademicClenderForPdfRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();

		try {
			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}

			if (request.getExIsEven() == null || request.getExIsEven().equals("null")) {
				info.put("status", "2");
				info.put("message", "exIsEven ie required 0/1");
				return info;
			}

			List<University> uid = super.university.findAllUnivesity();
			if (uid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "University not present");
				return info;
			}
			String university = uid.get(0).getExName();

			List dataList = new LinkedList();
			List<AcademicCalender> academicCalender = super.academicCalender.getrecordForPdf(false, true, request.getAcademicYear(),request.getExIsEven(),request.getBatch());
			if (academicCalender.size() <= 0) {
				info.put("status", "2");
				info.put("message", "AcademicCalender not present");
				return info;
			}

			List<AcademicCalenderLog> tasks = super.academicCalenderLog.getRecord(academicCalender.get(0).getId());
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "AcademicCalender not created");
				return info;
			}
			
			String academicyear  = academic.get().getExYear();
			String exCreateDate = academicCalender.get(0).getExCreateDate().toString();
			for (AcademicCalenderLog e : tasks) {
				Map<Object, Object> data = new HashMap<Object, Object>();
				data.put("academicYear", academicyear);
				data.put("exCreateDate", exCreateDate);
				data.put("ativity", e.getAcademicCalenderActivity().getExName());
				data.put("exProposedDates", e.getExProposedDates());

				dataList.add(data);

			}
			// }
			List<TeachingSummary> TeachingSummary = super.teachingsummary
					.findByExIsDeleteAndExIsActiveAndAcademicYearIdAndExIsEven(false, true, request.getAcademicYear(),
							request.getExIsEven());
			if (TeachingSummary.size() <= 0) {

				info.put("status", "2");
				info.put("message", "TeachingSummary not present");
				return info;
			}
			for (TeachingSummary e : TeachingSummary) {
				Map<Object, Object> data1 = new HashMap<Object, Object>();

				data1.put("academicYear", e.getAcademicYear().getExYear());
				data1.put("monthnam", e.getMonthname().getExName());
				data1.put("teachingDays", e.getExTeachingDays());
				data1.put("exHolidayDates", e.getExHolidayDates());
				dataList.add(data1);

			}
			Map<Object, Object> datae = new HashMap<Object, Object>();
			datae.put("summary", "summary");

			dataList.add(datae);

			System.out.println("??????????????dataList????????????" + dataList);

			String serverurl = super.commonHelper.getSettingValue("SERVER_IP");
			// String reportPath = "src/main/resources/";
			String reportPath = super.commonHelper.getSettingValue("DOCUMENT_PATH");
			String image = super.commonHelper.getSettingValue("IMAGE_PATH");
			logger.info(image);

			// Compile the Jasper report from .jrxml to .japser

			String path = resourceLoader.getResource("classpath:academicClender.jrxml").getURI().getPath();
			JasperReport jasperReport = JasperCompileManager.compileReport(path);

			// JasperReport jasperReport = JasperCompileManager.compileReport(reportPath +
			// "\\gradeReport.jrxml");

			// Get your data source

			JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(dataList);

			// Add parameters
			Map<String, Object> parameters = new HashMap<>();
			parameters.put("remark", academicCalender.get(0).getExRemark());
			parameters.put("createdBy", "Win.org");
			parameters.put("university", university);
			parameters.put("academic", academic.get().getExYear());
			parameters.put("exIsEven", request.getExIsEven() == true ? "Even" : "Odd");
			parameters.put("createdDate", academicCalender.get(0).getExCreateDate());

			parameters.put("logo", image);

			String sem = "";
			if (request.getExIsEven() == true) {
				sem = "Even";
			} else {
				sem = "Odd";
			}
			String feesName = "\\" + academic.get().getExYear() + sem + ".pdf";

			String folder = createFolder(academic.get().getExYear(), sem, "academicClender");

			// Fill the report
			JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,
					jrBeanCollectionDataSource);

			// Export the report to a PDF file
			JasperExportManager.exportReportToPdfFile(jasperPrint, reportPath + folder + feesName);

			File filenew = new File(reportPath + folder + feesName);
			if (filenew.exists()) {
				filenew.setExecutable(true, false);
				filenew.setReadable(true, false);
				filenew.setWritable(true, false);
			}

			// info.put("gradeReport", dataList);
			info.put("status", "1");
			info.put("url", folder + feesName);
			info.put("message", "Report successfully generated");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}
	}
	
	
	@Override
	public Map<String, Object> generateInternalMarks(InternalMarksRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();

		try {

			List<University> uid = super.university.findAllUnivesity();
			if (uid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "University not present");
				return info;
			}
			String university = uid.get(0).getExName().toUpperCase();

			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department not present");
				return info;
			}
			Optional<Colleges> collage = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!collage.isPresent() || !collage.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "College not present");
				return info;
			}

			Optional<Programmes> programs = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!programs.isPresent() || !programs.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Programs not present");
				return info;
			}

			Optional<AcademicYear> academicYearid = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getAcademicYear());
			if (!academicYearid.isPresent()) {
				info.put("status", "2");
				info.put("message", "AcademicYear id not present");
				return info;
			}

			Optional<Courses> course = super.courses.findByIdAndExIsDeleteAndExIsActive(request.getCourses(), false,
					true);
			if (!course.isPresent()) {
				info.put("status", "2");
				info.put("message", "Course not present");
				return info;
			}

			Optional<Semster> sem = super.semester.findByIdAndExIsActiveAndExIsDelete(request.getSemester(), true,
					false);
			if (!sem.isPresent()) {
				info.put("status", "2");
				info.put("message", " Semster not present");
				return info;
			}
			List<Staffpersonal> staff = super.staffpersonal.findByIdAndExIsDelete(request.getStaff(), false);
			if (staff.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Staff id not present");
				return info;
			}
			
			boolean ispractical = false ;
			
			boolean isboth = false ;
			
			if(course.get().getCoursesType().size() == 1 && course.get().getCoursesType().get(0).getId() == 2 ) {
				ispractical = true;
				
			}
			if(course.get().getCoursesType().size() == 2) {
				isboth = true;
			}

			Optional<ProgrammeYear> programyear = super.programmeYear
					.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
			if (!programyear.isPresent()) {
				info.put("status", "2");
				info.put("message", "ProgrammeYear not present");
				return info;
			}
			Section sections = null;
			Long Section = null;
			String Sectionsname = "";
			if (request.getSection() == null || request.getSection().equals("")) {
				Section = null;
				sections = null;
			} else {
				Optional<Section> Sections = super.section.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getSection());
				if (!Sections.isPresent()) {
					info.put("status", "2");
					info.put("message", "Section id not present");
					return info;
				}
				sections = Sections.get();
				Section = Sections.get().getId();
				Sectionsname = Sections.get().getExName();
			}

			String pattern = "dd/MM/yyyy";
			DateFormat df = new SimpleDateFormat(pattern);
			Date today = Calendar.getInstance().getTime();        
			String todayAsString = df.format(today);
			System.out.println("Today is: " + todayAsString);
		
			List dataList = new LinkedList();
			int count = 0;
			List<Object[]> stuid = super.courses.getDetails(request.getDegree(), request.getAcademicYear(),
					request.getProgrammes(), request.getCourses(), request.getProgrammeYear(), request.getSemester(),
					request.getColleges(), Section, request.getDepartment());
			if (stuid.size() < 0) {
				info.put("status", "2");
				info.put("message", "No record found.");
				return info;
			}
			for (Object[] e : stuid) {
				Map<Object, Object> studentinfo = new HashMap<Object, Object>();
				studentinfo.put("exStudentId", e[0]);
				studentinfo.put("exCoursesName", e[1]);
				studentinfo.put("exFirstName", e[2]);
				// studentinfo.put("exSemester", e[3]);
				studentinfo.put("exSection", e[4]);
				studentinfo.put("exCoursesCode", e[5]);
				studentinfo.put("exCreditHourTitle", e[6]);
				// get Student Internal marks if present
				List<MidTermMarks> getresult = super.midtermmarksMarks
						.findByDegreeIdAndCoursesIdAndExRollNoAndAcademicYearIdAndProgrammesIdAndSemesterIdAndProgrammeYearIdAndCollegesIdAndExIsActiveAndExIsDelete(
								request.getDegree(), request.getCourses(), e[0].toString(), request.getAcademicYear(),
								request.getProgrammes(), request.getSemester(), request.getProgrammeYear(),
								request.getColleges(), true, false);
				if (getresult.size() <= 0) {
					studentinfo.put("exAtt", "");
					studentinfo.put("date", null);
					studentinfo.put("exAss", "");
					studentinfo.put("exmid", "");
					studentinfo.put("exquiz", "");
					studentinfo.put("prac", "");
					studentinfo.put("casestudy", "");
					studentinfo.put("MidtermMarks", "");
					studentinfo.put("TotalInternal", "");
					
					studentinfo.put("practicalrcord", "");
					studentinfo.put("practicallearning", "");
					studentinfo.put("labexpriment", "");
					studentinfo.put("viva", "");

				} else {
					DecimalFormat df2 = new DecimalFormat("####0.00");
					if(getresult.get(0).getExAttendenceRemark() !=null && !getresult.get(0).getExAttendenceRemark().equals("NA")) {
						studentinfo.put("exAtt",getresult.get(0).getExAttendenceRemark());
					}else {
						double attendance =(getresult.get(0).getExAttendenceMarks() == null ? 0.00 : getresult.get(0).getExAttendenceMarks());
						String satt = df2.format(attendance);
						studentinfo.put("exAtt",satt);
					}
					/////////
					if(getresult.get(0).getExAssignmentMarkRemark() !=null && !getresult.get(0).getExAssignmentMarkRemark().equals("NA")) {
						studentinfo.put("exAss",getresult.get(0).getExAssignmentMarkRemark());
					}else {
						double assignment = (getresult.get(0).getExAssignmentMarks() == null ? 0.00 : getresult.get(0).getExAssignmentMarks());
						String sass = df2.format(assignment);
						studentinfo.put("exAss", sass);
					}

					/////////////////
					if(getresult.get(0).getExQuizRemark() !=null && !getresult.get(0).getExQuizRemark().equals("NA")) {
						studentinfo.put("exquiz",getresult.get(0).getExQuizRemark());
					}else {
						double Quizz = (getresult.get(0).getExQuizMarks() == null ? 0.00 : getresult.get(0).getExQuizMarks());
						String squiz = df2.format(Quizz);
						studentinfo.put("exquiz",squiz);
					}		
					//////////
					if(getresult.get(0).getExCaseStudyRemark() !=null && !getresult.get(0).getExCaseStudyRemark().equals("NA")) {
						studentinfo.put("casestudy",getresult.get(0).getExCaseStudyRemark());
					}else {
						double casestudy = (getresult.get(0).getExCaseStudy() == null ? 0.00 : getresult.get(0).getExCaseStudy());
						String scase = df2.format(casestudy);
						studentinfo.put("casestudy", scase);
					}		
					/////////
					if(getresult.get(0).getExMidTermRemarks() !=null && !getresult.get(0).getExMidTermRemarks().equals("NA")) {
						studentinfo.put("MidtermMarks",getresult.get(0).getExMidTermRemarks());
					}else {
						double Midterm = (getresult.get(0).getExMidTermMarks() == null ? 0.00 : getresult.get(0).getExMidTermMarks());
						String sMidterm = df2.format(Midterm);
						studentinfo.put("MidtermMarks",sMidterm);
					}
					////////
					/*
					 * double d =(getresult.get(0).getExMidTermMarks() == null ? 0.00 :
					 * getresult.get(0).getExMidTermMarks()); System.out.println(Math.round(d));
					 * studentinfo.put("Longs",Math.round(d));
					 */
					
					//studentinfo.put("exAtt", getresult.get(0).getExAttendenceMarks());
					//studentinfo.put("exAss", getresult.get(0).getExAssignmentMarks());
					//studentinfo.put("exmid", getresult.get(0).getExMidTermMarks());
					//studentinfo.put("exquiz", getresult.get(0).getExQuizMarks());
					//studentinfo.put("casestudy", getresult.get(0).getExCaseStudy());
					//studentinfo.put("MidtermMarks",(getresult.get(0).getExMidTermRemarks()==null || getresult.get(0).getExMidTermRemarks().equals("")) ? "NA" : getresult.get(0).getExMidTermMarks());
					studentinfo.put("prac",(getresult.get(0).getExPracticalLearning() == null || getresult.get(0).getExPracticalRecordMarks() == null )  ? "NA": getresult.get(0).getExPracticalLearning()+ (getresult.get(0).getExPracticalRecordMarks()));
					studentinfo.put("date", todayAsString);
					
					double atte= (getresult.get(0).getExAttendenceMarks() == null) ? 0.00 : getresult.get(0).getExAttendenceMarks();
					double assig = (getresult.get(0).getExAssignmentMarks() == null) ? 0.00 : getresult.get(0).getExAssignmentMarks();
					double Quiz = (getresult.get(0).getExQuizMarks() == null) ? 0.00 : getresult.get(0).getExQuizMarks();
					double Case = (getresult.get(0).getExCaseStudy() == null ) ? 0.00 : getresult.get(0).getExCaseStudy();
					
					double finalpoint =(atte+assig+Quiz);
					String s = df2.format(finalpoint);
					studentinfo.put("TotalInternal",s);
					
					double finals = (atte+assig+Quiz+Case);
					String sdegree2 = df2.format(finals);
					studentinfo.put("TotalInternaldegree2",sdegree2);
				
					DecimalFormat lb = new DecimalFormat("####00.00");

					double precord =(getresult.get(0).getExPracticalRecordMarks() == null ? 0.00 : getresult.get(0).getExPracticalRecordMarks());
					String spr = lb.format(precord);
					studentinfo.put("practicalrcord",spr);
					
					double plearning = (getresult.get(0).getExPracticalLearning() == null ? 0.00 : getresult.get(0).getExPracticalLearning());
					String spl = lb.format(plearning);
					studentinfo.put("practicallearning",spl);
					
					//studentinfo.put("practicalrcord", getresult.get(0).getExPracticalRecordMarks());
					//studentinfo.put("practicallearning", getresult.get(0).getExPracticalLearning());
					
					// check If courses belong to practical
					if(ispractical || isboth) {
						  List<ExamBarcodes> getdata=super.ExamBarcodes.findByCoursesIdAndAcademicYearIdAndExIsActiveAndExIsDeleteAndCollegesIdAndDegreeIdAndProgrammesIdAndDepartmentIdAndProgrammeYearIdAndSemesterIdAndStudentadmissionId(
								  request.getCourses(), request.getAcademicYear(),
								  true,false,request.getColleges(),request.getDegree(),request.getProgrammes(),
								  request.getDepartment(),request.getProgrammeYear(),request.getSemester(),getresult.get(0).getStudentadmission().getId()); 
						if(getdata.size() <=0) {
							studentinfo.put("labexpriment", "");
							studentinfo.put("viva", "");
						}else {
							
							
							double Lab = (getdata.get(0).getExLabExperiment() == null ? 0.00 : getdata.get(0).getExLabExperiment());
							double viva =(getdata.get(0).getExViva() == null ? 0.00 :getdata.get(0).getExViva());
							String slb = lb.format(Lab);
							String svv = lb.format(viva);
							studentinfo.put("labexpriment",slb);
							studentinfo.put("viva",svv);
							//studentinfo.put("labexpriment", getdata.get(0).getExLabExperiment());
							//studentinfo.put("viva", getdata.get(0).getExViva());
						}
					}else {
						studentinfo.put("labexpriment", "");
						studentinfo.put("viva", "");
					}
				}
				

				dataList.add(studentinfo);
				count++;
			}

			Map<Object, Object> studentcount = new HashMap<Object, Object>();
			studentcount.put("studentcount", count);

			logger.info(">>>>>>>>>studentcount>>>>>>" + count);
			dataList.add(studentcount);

			String serverurl = super.commonHelper.getSettingValue("SERVER_IP");
			// String reportPath = "src/main/resources/";
			String reportPath = super.commonHelper.getSettingValue("DOCUMENT_PATH");
			String image = super.commonHelper.getSettingValue("IMAGE_PATH");
			String image1 = super.commonHelper.getSettingValue("MOFPI_PATH");
			String image2 = super.commonHelper.getSettingValue("EMBLEM_PATH");
			logger.info(image);

			// Compile the Jasper report from .jrxml to .japser

			String path = "";
				if(request.getDegree() !=1) {
					if(isboth) {
						path = resourceLoader.getResource("classpath:internalmarksbothforpg.jrxml").getURI().getPath();
					}else {
						if(!ispractical) {
							path = resourceLoader.getResource("classpath:internalMarksforpg.jrxml").getURI().getPath();
						}else {
							path = resourceLoader.getResource("classpath:practicalinternalMarksforpg.jrxml").getURI().getPath();
						}
						   
					}				
				}else {
					// Only for Btech 
					if(isboth) {
						path = resourceLoader.getResource("classpath:InternalMarksBothforUG.jrxml").getURI().getPath();
					}else {
						if(!ispractical) {
							path = resourceLoader.getResource("classpath:internalMarksThforUG.jrxml").getURI().getPath();
							
						}else {
							path = resourceLoader.getResource("classpath:practicalinternalMarkforUG.jrxml").getURI().getPath();
						}
						   
					}	
					
				}
					
			JasperReport jasperReport = JasperCompileManager.compileReport(path);
			// Get your data source

			JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(dataList);

			Map<String, Object> parameters = new HashMap<>();

			List<TeacherCourseMapping> teacher = super.teacherCourseMapping
					.findByCoursesIdAndDepartmentIdAndAcademicYearIdAndCollegesIdAndDegreeIdAndProgrammeYearIdAndSemsterIdAndSectionId(
							request.getCourses(), request.getDepartment(), request.getAcademicYear(),
							request.getColleges(), request.getDegree(), request.getProgrammeYear(),
							request.getSemester(), Section);
			List<String> data = new ArrayList<String>();

			for (int j = 0; j < teacher.size(); j++) {

				String firstname = teacher.get(j).getStaffpersonal().getExName();
				String teachername = firstname;
				logger.info(">>>>>>>>>teachername>>>>>>" + teachername);

				String[] collageid = teachername.split("/");
				for (int i = 0; i < collageid.length; i++) {
					data.add(collageid[i]);
				}
			}
			
			  List<String> listWithoutDuplicates = data.stream()
					     .distinct()
					     .collect(Collectors.toList());

			String teacherslist = listWithoutDuplicates.toString();
			parameters.put("teacherName", teacherslist.replaceAll("\\[", "").replaceAll("\\]", ""));
			logger.info(">>>>>>>>>teacherslist>>>>>>" + teacherslist);

			// Add parameters

			parameters.put("reportTital", "Internal Marks Report");
			parameters.put("department", department.get().getExName().toUpperCase());

			parameters.put("studentcount", count);
			parameters.put("university", university);
			parameters.put("logo", image);
			parameters.put("exCoursesCode", course.get().getExCoursesCode());
			parameters.put("college", collage.get().getExName());
			parameters.put("semester", sem.get().getExName());
			parameters.put("academicyear", academicYearid.get().getExYear());
			parameters.put("exCourseName", course.get().getExName());
			parameters.put("excerdithour", course.get().getCreditHours().getExCreditHourTitle());
			parameters.put("programe", programs.get().getExName().toUpperCase());
			parameters.put("programeIdentifier", programs.get().getExIdentifier());
			parameters.put("Stream", course.get().getStream().getExIdentifier());
			parameters.put("Batch", course.get().getBatch().getExIdentifier());
			parameters.put("programeYear", programyear.get().getExName());
			parameters.put("section", Section == null ? null : Sectionsname);
			parameters.put("emblem", image1);
			parameters.put("logo1", image2);

			String folder = createFolder(academicYearid.get().getExYear(), collage.get().getExIdentifier(),
					"internalMarksReport");

			// Fill the report
			JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,
					jrBeanCollectionDataSource);

			String filename = "\\" + course.get().getExCoursesCode() + " " + "("
					+ course.get().getCreditHours().getExCreditHourTitle() + ")" + ".pdf";

			// Export the report to a PDF file
			JasperExportManager.exportReportToPdfFile(jasperPrint, reportPath + folder + filename);

			File filenew = new File(reportPath + folder + filename);
			if (filenew.exists()) {
				filenew.setExecutable(true, false);
				filenew.setReadable(true, false);
				filenew.setWritable(true, false);
			}

			// info.put("gradeReport", dataList);
			info.put("status", "1");
			info.put("url", folder + filename);
			info.put("message", "Report successfully generated");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getRegisterCoursesList(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		java.sql.Connection conn = null;

		try {
			List<University> uid = super.university.findAllUnivesity();
			if (uid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "University not present");
				return info;
			}
			String university = uid.get(0).getExName();
			// get current courses details
						List<SemesterRegistration> status = super.semesterRegistration
								.findByExIsDeleteAndExIsActiveAndStudentadmissionIdAndExSemesterStatus(false, true,
										request.getStudent(), false);
						if (status.size() <= 0) {
							info.put("status", "2");
							info.put("message", "student registration are pending");
							return info;
						}
						List<CoursesRegistration> task = super.coursesRegistration
								.findByProgrammesIdAndExIsActiveAndExIsDeleteAndRegistrationIdAndSemesterIdAndProgrammeYearIdAndAcademicYearIdAndDepartmentIdAndStudentadmissionId(
										status.get(0).getProgrammes().getId(), true, false, 1L, status.get(0).getSemester().getId(),
										status.get(0).getProgrammeYear().getId(), status.get(0).getAcademicYear().getId(),
										status.get(0).getDepartment().getId(), request.getStudent());
						System.out.println("<<<<<" + task.size());
						if (task.size() <= 0) {
							info.put("status", "2");
							info.put("message", "record not found");
							return info;
						} else {
							List dataList = new LinkedList();
							for (CoursesRegistration e : task) {
								List coursestype = new LinkedList();
								List coursesTypeId = new LinkedList();
								Map<String, Object> Coursesdata = new HashMap<String, Object>();

								Coursesdata.put("id", e.getCourses().getId());
								Coursesdata.put("exCoursesType", e.getCourses().getExSubjectCode());
								Coursesdata.put("exCoursesCode", e.getCourses().getExCoursesCode());
								Coursesdata.put("exDescrption", e.getCourses().getExDescription());
								
								Coursesdata.put("exName", e.getCourses().getExName());								
								Coursesdata.put("creditHoursId", e.getCourses().getCreditHours().getId());
								Coursesdata.put("creditHours", e.getCourses().getCreditHours().getExCreditHourTitle());

								for (int i = 0; i < e.getCourses().getCoursesType().size(); i++) {
									coursestype.add(e.getCourses().getCoursesType().get(i).getExName());
									coursesTypeId.add(e.getCourses().getCoursesType().get(i).getId());
								}

								Coursesdata.put("coursesType", coursestype);
								Coursesdata.put("coursesTypeId", coursesTypeId);

								dataList.add(Coursesdata);

							}
			
							String serverurl = super.commonHelper.getSettingValue("SERVER_IP");
							String reportPath = super.commonHelper.getSettingValue("DOCUMENT_PATH"); // "src/main/resources/";
							String image = super.commonHelper.getSettingValue("IMAGE_PATH");
							logger.info(image);
							
							// Compile the Jasper report from .jrxml to .japser

							String path = resourceLoader.getResource("classpath:registerCourses.jrxml").getURI().getPath();
							JasperReport jasperReport = JasperCompileManager.compileReport(path);

							JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(dataList);
							
							// Add parameters
							Map<String, Object> parameters = new HashMap<>();
							parameters.put("studentId", task.get(0).getStudentadmission().getExRollNo());
							parameters.put("logo", image);						
							parameters.put("university", university);
							parameters.put("Batch", task.get(0).getStudentadmission().getBatch().getExIdentifier());
							parameters.put("Department", task.get(0).getStudentadmission().getDepartment().getExIdentifier());					
							parameters.put("program", task.get(0).getProgrammes().getExName().toUpperCase());
							parameters.put("programyear", task.get(0).getProgrammeYear().getExName());
							parameters.put("semester", task.get(0).getSemester().getExName());

							parameters.put("fullname",task.get(0).getStudentadmission().getExName());

							String folder = createFolder(task.get(0).getAcademicYear().getExYear(),task.get(0).getDegree().getExName(), "courses");

							// Fill the report

							JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,jrBeanCollectionDataSource);

							// Export the report to a PDF file
							JasperExportManager.exportReportToPdfFile(jasperPrint, reportPath + folder + "/coursesList.pdf");

							File filenew = new File(reportPath + folder + "/coursesList.pdf");
							if (filenew.exists()) {
								filenew.setExecutable(true, false);
								filenew.setReadable(true, false);
								filenew.setWritable(true, false);
							}

							String Description = folder + "/coursesList.pdf";

							// info.put("gradeReport", dataList);
							info.put("status", "1");
							info.put("file", filenew);
							info.put("url", folder + "/coursesList.pdf");
							info.put("message", "Report successfully generated");
							return info;

						}		

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getStudentadmissiondetailsPdf(ReportRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			logger.info("Request :" + request);
			List<Object> datalist = new ArrayList<Object>();
			
			List<University> uid = super.university.findAllUnivesity();
			if (uid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "University not present");
				return info;
			}
			String university = uid.get(0).getExName().toUpperCase();

			String pattern = "dd/MM/yyyy";
			DateFormat df = new SimpleDateFormat(pattern);
			Date today = Calendar.getInstance().getTime();        
			String todayAsString = df.format(today);
			System.out.println("Today is: " + todayAsString);
			
			
			List<Studentpersonal> list = new ArrayList<>();
				list = super.studentpersonal.getAdmisionRecord(request.getColleges(), request.getDegree(),
						request.getProgrammes(), request.getAcademicYear());
			
				if (list.size() <= 0) {
					info.put("status", "2");
					info.put("message", "No records");
					return info;
					
				}else {
					for(Studentpersonal e :list) {
					Map<String, Object> detail = new HashMap<>();
				    detail.put("StudentName",e.getStudentadmission().getExName().toUpperCase());
				    detail.put("exStudentId",e.getStudentadmission().getExRollNo());
				    detail.put("EnrollmentNumber",e.getStudentadmission().getExEnrollementNo());
					detail.put("StudyStatus",e.getStudentadmission().getExStudyStatus());
					detail.put("Email",e.getExEmailId());
					detail.put("Contact",e.getExContactDetails());
					detail.put("DOB",e.getExDateOfBirth());
					detail.put("Gender",e.getExGender());
					detail.put("FatherName",e.getExFatherName());
					detail.put("MotherName",e.getExMotherName());
					detail.put("Native",e.getExNativeState());
					detail.put("Religion",e.getExReligion());
					detail.put("academicYear", e.getStudentadmission().getAcademicYear().getExIdentifier());
					detail.put("degree",e.getStudentadmission().getBatch().getExIdentifier());
					detail.put("programeIdentifier", e.getStudentadmission().getProgrammes().getExIdentifier().toUpperCase());
					datalist.add(detail);
					}
				}
			
			String serverurl = commonHelper.getSettingValue("SERVER_IP");
			String reportPath = commonHelper.getSettingValue("DOCUMENT_PATH"); // "src/main/resources/";
			String image = super.commonHelper.getSettingValue("IMAGE_PATH");
			String image1 = super.commonHelper.getSettingValue("MOFPI_PATH");
			String image2 = super.commonHelper.getSettingValue("EMBLEM_PATH");
			logger.info(image);
			
			String path = "";
		    path = resourceLoader.getResource("classpath:studentadmissiondetails.jrxml").getURI().getPath();
			JasperReport jasperReport = JasperCompileManager.compileReport(path);

			JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(datalist);
			// Parameters for report
			Map<String, Object> parameters = new HashMap<>();
			parameters.put("academicYear", list.get(0).getStudentadmission().getAcademicYear().getExIdentifier());
			parameters.put("degree",list.get(0).getStudentadmission().getDegree().getExName());
			parameters.put("programe", list.get(0).getStudentadmission().getProgrammes().getExName().toUpperCase());
			parameters.put("programeIdentifier", list.get(0).getStudentadmission().getProgrammes().getExIdentifier().toUpperCase());
			parameters.put("todayAsString",todayAsString);
			parameters.put("university", university.toUpperCase());
			parameters.put("logo", image);
			parameters.put("date", todayAsString);
			parameters.put("emblem", image1);
			parameters.put("logo1", image2);
			
			// Fill the report
			JasperPrint print = JasperFillManager.fillReport(jasperReport, parameters, jrBeanCollectionDataSource);
			// Export the report to a PDF file

			String folder = createFolder(list.get(0).getStudentadmission().getAcademicYear().getExYear(), list.get(0).getStudentadmission().getDegree().getExName(), "StudentAdmission");
			JasperExportManager.exportReportToPdfFile(print, reportPath + folder + "/StudentAdmission.pdf");

			File filenew = new File(reportPath + folder + "/StudentAdmission.pdf");
			if (filenew.exists()) {
				filenew.setExecutable(true, false);
				filenew.setReadable(true, false);
				filenew.setWritable(true, false);
			}
			
			info.put("status", "1");
			info.put("url", folder + "/StudentAdmission.pdf");
			info.put("message", "Report successfully generated");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getOverallmarksPdfPdf(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			logger.info("Request :" + request);
			List<Object> datalist = new ArrayList<Object>();
			
			List<University> uid = super.university.findAllUnivesity();
			if (uid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "University not present");
				return info;
			}
			String university = uid.get(0).getExName().toUpperCase();

			String pattern = "dd/MM/yyyy";
			DateFormat df = new SimpleDateFormat(pattern);
			Date today = Calendar.getInstance().getTime();        
			String todayAsString = df.format(today);
			System.out.println("Today is: " + todayAsString);
			
			
			List<Object[]> list = new ArrayList<Object[]>();
			list = super.semester.getrecordspdf(request.getColleges(), request.getProgrammes() , request.getAcademicYear());				
				if (list.size() <= 0) {
					info.put("status", "2");
					info.put("message", "No records");
					return info;
					
				}else {
					for(Object[] e :list) {
					Map<String, Object> detail = new HashMap<>();
				    detail.put("StudentName",e[1] == null ?"NA" :e[1].toString());
				    detail.put("exStudentId",e[0] == null ?"NA" :e[0].toString());
				    detail.put("EnrollmentNumber",e[5] == null ?"NA" :e[5].toString());
					detail.put("Email",e[7] == null ?"NA"    :e[7].toString());
					detail.put("Contact",e[6] == null ?"NA"  :e[6].toString());
					detail.put("1stsem",e[8] == null ?"NA" 	 :e[8].toString());
					detail.put("2ndsem",e[9] == null ?"NA"   :e[9].toString());
					detail.put("3rdsem",e[10] == null ?"NA"  :e[10].toString());
					detail.put("4thsem",e[11] == null ?"NA"  :e[11].toString());
					detail.put("5thsem",e[12] == null ?"NA"  :e[12].toString());
					detail.put("6thsem",e[13] == null ?"NA"  :e[13].toString());
					detail.put("7thsem", e[14] == null ?"NA" :e[14].toString());
					detail.put("8thsem",e[15] == null ?"NA"  :e[15].toString());	
					
					datalist.add(detail);
					}
				}
			
			String serverurl = commonHelper.getSettingValue("SERVER_IP");
			String reportPath = commonHelper.getSettingValue("DOCUMENT_PATH"); // "src/main/resources/";
			String image = super.commonHelper.getSettingValue("IMAGE_PATH");
			String image1 = super.commonHelper.getSettingValue("MOFPI_PATH");
			String image2 = super.commonHelper.getSettingValue("EMBLEM_PATH");
			logger.info(image);
			
			String path = "";
		    path = resourceLoader.getResource("classpath:Overallmarks.jrxml").getURI().getPath();
			JasperReport jasperReport = JasperCompileManager.compileReport(path);

			JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(datalist);
			// Parameters for report
			Map<String, Object> parameters = new HashMap<>();
			for(Object[] e :list) {
				parameters.put("Batch",e[4] == null ?"NA" :e[4].toString() );
				parameters.put("programe", e[3] == null ?"NA" :e[3].toString());
			}
			parameters.put("todayAsString",todayAsString);
			parameters.put("university", university.toUpperCase());
			parameters.put("logo", image);
			parameters.put("date", todayAsString);
			parameters.put("emblem", image1);
			parameters.put("logo1", image2);
			
			// Fill the report
			JasperPrint print = JasperFillManager.fillReport(jasperReport, parameters, jrBeanCollectionDataSource);
			// Export the report to a PDF file

			String folder = createFolder("Niftem", "Overallmarks", "Studentlistforconvocation");
			JasperExportManager.exportReportToPdfFile(print, reportPath + folder + "/Studentlistforconvocation.pdf");

			File filenew = new File(reportPath + folder + "/Studentlistforconvocation.pdf");
			if (filenew.exists()) {
				filenew.setExecutable(true, false);
				filenew.setReadable(true, false);
				filenew.setWritable(true, false);
			}
			
			info.put("status", "1");
			info.put("url", folder + "/Studentlistforconvocation.pdf");
			info.put("message", "Report successfully generated");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getStudentAddressAndContactDetailspdf(ReportRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			logger.info("Request :" + request);
			List<Object> datalist = new ArrayList<Object>();
			
			List<University> uid = super.university.findAllUnivesity();
			if (uid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "University not present");
				return info;
			}
			String university = uid.get(0).getExName().toUpperCase();

			String pattern = "dd/MM/yyyy";
			DateFormat df = new SimpleDateFormat(pattern);
			Date today = Calendar.getInstance().getTime();        
			String todayAsString = df.format(today);
			System.out.println("Today is: " + todayAsString);
			
			
			List<Studentpersonal> list = new ArrayList<>();
				list = super.studentpersonal.getAdmisionRecord(request.getColleges(), request.getDegree(),
						request.getProgrammes(), request.getAcademicYear());
			
				if (list.size() <= 0) {
					info.put("status", "2");
					info.put("message", "No records");
					return info;
					
				}else {
					for(Studentpersonal e :list) {
					Map<String, Object> detail = new HashMap<>();
				    detail.put("StudentName",e.getStudentadmission().getExName().toUpperCase());
				    detail.put("exStudentId",e.getStudentadmission().getExRollNo());
				    detail.put("EnrollmentNumber",e.getStudentadmission().getExEnrollementNo());
					detail.put("StudyStatus",e.getStudentadmission().getExStudyStatus());
					detail.put("Email",e.getExEmailId());
					detail.put("Contact",e.getExContactDetails());
					detail.put("DOB",e.getExDateOfBirth());
					detail.put("Gender",e.getExGender());
					detail.put("FatherName",e.getExFatherName());
					detail.put("MotherName",e.getExMotherName());
					detail.put("FatherContact",e.getExParentContactDetails());
					detail.put("MotherContact",e.getExParentContactDetails());
					detail.put("Native",e.getExNativeState());
					detail.put("Religion",e.getExReligion());
					detail.put("Address",e.getExPermanentAddress());
					detail.put("academicYear", e.getStudentadmission().getAcademicYear().getExIdentifier());
					detail.put("degree",e.getStudentadmission().getBatch().getExIdentifier());
					detail.put("programeIdentifier", e.getStudentadmission().getProgrammes().getExIdentifier().toUpperCase());
					datalist.add(detail);
					}
				}
			
			String serverurl = commonHelper.getSettingValue("SERVER_IP");
			String reportPath = commonHelper.getSettingValue("DOCUMENT_PATH"); // "src/main/resources/";
			String image = super.commonHelper.getSettingValue("IMAGE_PATH");
			String image1 = super.commonHelper.getSettingValue("MOFPI_PATH");
			String image2 = super.commonHelper.getSettingValue("EMBLEM_PATH");
			logger.info(image);
			
			String path = "";
			if(request.getExIdentifier().equalsIgnoreCase("studentcontactandaddressdetails")) {
		    path = resourceLoader.getResource("classpath:studentcontactandaddressdetails.jrxml").getURI().getPath();
			}
			
			if(request.getExIdentifier().equalsIgnoreCase("studentparentdetails")) {
			    path = resourceLoader.getResource("classpath:studentparentdetails.jrxml").getURI().getPath();
				}
			
		    JasperReport jasperReport = JasperCompileManager.compileReport(path);

			JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(datalist);
			// Parameters for report
			Map<String, Object> parameters = new HashMap<>();
			parameters.put("academicYear", list.get(0).getStudentadmission().getAcademicYear().getExIdentifier());
			parameters.put("degree",list.get(0).getStudentadmission().getDegree().getExName());
			parameters.put("programe", list.get(0).getStudentadmission().getProgrammes().getExName().toUpperCase());
			parameters.put("programeIdentifier", list.get(0).getStudentadmission().getProgrammes().getExIdentifier().toUpperCase());
			parameters.put("todayAsString",todayAsString);
			parameters.put("university", university.toUpperCase());
			parameters.put("logo", image);
			parameters.put("date", todayAsString);
			parameters.put("logo1", image2);
			parameters.put("emblem", image1);
			
			
			// Fill the report
			JasperPrint print = JasperFillManager.fillReport(jasperReport, parameters, jrBeanCollectionDataSource);
			// Export the report to a PDF file

			String folder = createFolder(list.get(0).getStudentadmission().getAcademicYear().getExYear(), list.get(0).getStudentadmission().getDegree().getExName(), "StudentAdmission");
			JasperExportManager.exportReportToPdfFile(print, reportPath + folder + "/StudentAdmission.pdf");

			File filenew = new File(reportPath + folder + "/StudentAdmission.pdf");
			if (filenew.exists()) {
				filenew.setExecutable(true, false);
				filenew.setReadable(true, false);
				filenew.setWritable(true, false);
			}
			
			info.put("status", "1");
			info.put("url", folder + "/StudentAdmission.pdf");
			info.put("message", "Report successfully generated");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getTermWiseSubjectspdf(CoursesRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			logger.info("Request :" + request);
			List<Object> datalist = new ArrayList<Object>();
			
			List<University> uid = super.university.findAllUnivesity();
			if (uid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "University not present");
				return info;
			}
			String university = uid.get(0).getExName().toUpperCase();
			
			Optional<Programmes> programs = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!programs.isPresent() || !programs.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Programs not present");
				return info;
			}
			
			String pattern = "dd/MM/yyyy";
			DateFormat df = new SimpleDateFormat(pattern);
			Date today = Calendar.getInstance().getTime();        
			String todayAsString = df.format(today);
			System.out.println("Today is: " + todayAsString);
			
			if(request.getExIdentifier().equalsIgnoreCase("TermWiseSubjects")) {
				List<Courses> list = new ArrayList<>();
				list = super.courses
						.findByCollegesIdAndDegreeIdAndProgrammesIdAndAcademicYearIdAndSemesterIdAndProgrammeYearIdAndExIsActiveAndExIsDelete(
								request.getColleges(), request.getDegree(), request.getProgrammes(),
								request.getAcademicYear(), request.getSemester(), request.getProgrammeYear(),true,false);
			
			
				
				System.out.println("testing "+ list.size());
				
				if (list.size() <= 0) {
					info.put("status", "2");
					info.put("message", "No records");
					return info;
				}else {
					for(Courses e :list) {
					Map<String, Object> detail = new HashMap<>();
				    detail.put("Coursecode",e.getExCoursesCode());
				    detail.put("CourseName",e.getExName());
				    detail.put("CreditHour",e.getCreditHours().getExCreditHourTitle());
				    
					String str = "";
					for(int i = 0 ;i<e.getCoursesType().size() ; i++) {
						str = str+e.getCoursesType().get(i).getExName()+",";
					}
					StringBuffer sb= new StringBuffer(str); 
					sb.deleteCharAt(sb.length()-1);     
					detail.put("CourseType",sb.toString());
					String sat = "NA" ;
					if(e.getExIsSatisfactory() !=null && e.getExIsSatisfactory() == false) {
						sat = "NO";
					}else {
						sat = "YES";
					}
					detail.put("IsSatisfactoryCourse",sat);
					
					String project = "NA" ;
					if(e.getExIsProject() !=null && e.getExIsProject() == false) {
						project = "NO";
					}else {
						project = "YES";
					}
					detail.put("IsProject",project);
					
					String seminar = "NA" ;
					if(e.getExIsSeminar() !=null && e.getExIsSeminar() == false) {
						seminar = "NO";
					}else {
						seminar = "YES";
					}
					detail.put("IsSeminar",seminar);
					
					String elective = "NA" ;
					if(e.getExIsElective() !=null && e.getExIsElective() == false) {
						elective = "NO";
					}else {
						elective = "YES";
					}
					detail.put("IsElectiveCourse",elective);
					
					String Compulsory = "NA" ;
					if(e.getExIscompulsory() !=null && e.getExIscompulsory() == false) {
						Compulsory = "NO";
					}else {
						Compulsory = "YES";
					}
					detail.put("Iscompulsory",Compulsory);
					
					String SubCode = "NA" ;
					if(e.getExSubjectCode()!=null && !e.getExSubjectCode().equalsIgnoreCase("NA")&& !e.getExSubjectCode().equals(" ")) {
						SubCode=e.getExSubjectCode();
					}else {
						SubCode = "NA" ;
							
					}
					detail.put("SubjectType",SubCode);
					detail.put("semester",e.getSemester().getExName());
					
					String Syllbus = "NA" ;
					if(e.getExSyllabusUrl()!=null && !e.getExSyllabusUrl().equalsIgnoreCase("NA")&& !e.getExSyllabusUrl().equals(" ")) {
						Syllbus="Uploaded";
					}else {
						Syllbus = "Pending";		
					}
					detail.put("SyllabusUploadStatus",Syllbus);
					String Ivisit = "";
					if(e.getExIsIndustrialVisit() !=null && e.getExIsIndustrialVisit() == false) {
						Ivisit = "NO";
					}else {
						Ivisit = "YES";
					}
					detail.put("IsIndustrialVisit",Ivisit);
					
					String village = "";
					if(e.getExIsVillageAdoption() !=null && e.getExIsVillageAdoption() == false) {
						village = "NO";
					}else {
						village = "YES";
					}
					detail.put("IsVillageAdoption",village);
					
					String Industry = "";
					if(e.getExIsIndustrialTrainingInternship() !=null && e.getExIsIndustrialTrainingInternship() == false) {
						Industry = "NO";
					}else {
						Industry = "YES";
					}
					detail.put("IsIndustrialTrainingInternship",Industry);
					
					String Research = "";
					if(e.getExIsResearchProject() !=null && e.getExIsResearchProject() == false) {
						Research = "NO";
					}else {
						Research = "YES";
					}
					detail.put("IsResearchProject",Research);
					detail.put("Department",e.getDepartment().getExIdentifier());
					detail.put("academicYear",e.getAcademicYear().getExIdentifier());
					datalist.add(detail);
					}
					
					System.out.println(">>>>>>>>>>>>>>>>>"+datalist);
					
				}
			}
			
			if(request.getExIdentifier().equalsIgnoreCase("DisciplineWiseSubjects")) {
				List<Courses> list = new ArrayList<>();
				list = super.courses
						.findByCollegesIdAndDegreeIdAndProgrammesIdAndExIsActiveAndExIsDelete(
								request.getColleges(), request.getDegree(), request.getProgrammes(),
								true,false);
			
			
				
				System.out.println("testing "+ list.size());
				
				if (list.size() <= 0) {
					info.put("status", "2");
					info.put("message", "No records");
					return info;
				}else {
					for(Courses e :list) {
					Map<String, Object> detail = new HashMap<>();
				    detail.put("Coursecode",e.getExCoursesCode());
				    detail.put("CourseName",e.getExName());
				    detail.put("CreditHour",e.getCreditHours().getExCreditHourTitle());
				    detail.put("semester",e.getSemester().getExName());
					String str = "";
					for(int i = 0 ;i<e.getCoursesType().size() ; i++) {
						str = str+e.getCoursesType().get(i).getExName()+",";
					}
					StringBuffer sb= new StringBuffer(str); 
					sb.deleteCharAt(sb.length()-1);     
					detail.put("CourseType",sb.toString());
					String sat = "NA" ;
					if(e.getExIsSatisfactory() !=null && e.getExIsSatisfactory() == false) {
						sat = "NO";
					}else {
						sat = "YES";
					}
					detail.put("IsSatisfactoryCourse",sat);
					
					String project = "NA" ;
					if(e.getExIsProject() !=null && e.getExIsProject() == false) {
						project = "NO";
					}else {
						project = "YES";
					}
					detail.put("IsProject",project);
					
					String seminar = "NA" ;
					if(e.getExIsSeminar() !=null && e.getExIsSeminar() == false) {
						seminar = "NO";
					}else {
						seminar = "YES";
					}
					detail.put("IsSeminar",seminar);
					
					String elective = "NA" ;
					if(e.getExIsElective() !=null && e.getExIsElective() == false) {
						elective = "NO";
					}else {
						elective = "YES";
					}
					detail.put("IsElectiveCourse",elective);
					
					String Compulsory = "NA" ;
					if(e.getExIscompulsory() !=null && e.getExIscompulsory() == false) {
						Compulsory = "NO";
					}else {
						Compulsory = "YES";
					}
					detail.put("Iscompulsory",Compulsory);
					
					String SubCode = "NA" ;
					if(e.getExSubjectCode()!=null && !e.getExSubjectCode().equalsIgnoreCase("NA")&& !e.getExSubjectCode().equals(" ")) {
						SubCode=e.getExSubjectCode();
					}else {
						SubCode = "NA" ;
							
					}
					detail.put("SubjectType",SubCode);
					detail.put("Semester",e.getSemester().getExName());
					
					String Syllbus = "NA" ;
					if(e.getExSyllabusUrl()!=null && !e.getExSyllabusUrl().equalsIgnoreCase("NA")&& !e.getExSyllabusUrl().equals(" ")) {
						Syllbus="Uploaded";
					}else {
						Syllbus = "Pending";		
					}
					detail.put("SyllabusUploadStatus",Syllbus);
					
					String Ivisit = "";
					if(e.getExIsIndustrialVisit() !=null && e.getExIsIndustrialVisit() == false) {
						Ivisit = "NO";
					}else {
						Ivisit = "YES";
					}
					detail.put("IsIndustrialVisit",Ivisit);
					
					String village = "";
					if(e.getExIsVillageAdoption() !=null && e.getExIsVillageAdoption() == false) {
						village = "NO";
					}else {
						village = "YES";
					}
					detail.put("IsVillageAdoption",village);
					
					String Industry = "";
					if(e.getExIsIndustrialTrainingInternship() !=null && e.getExIsIndustrialTrainingInternship() == false) {
						Industry = "NO";
					}else {
						Industry = "YES";
					}
					detail.put("IsIndustrialTrainingInternship",Industry);
					
					String Research = "";
					if(e.getExIsResearchProject() !=null && e.getExIsResearchProject() == false) {
						Research = "NO";
					}else {
						Research = "YES";
					}
					detail.put("IsResearchProject",Research);
					detail.put("Department",e.getDepartment().getExIdentifier());
					detail.put("academicYear",e.getAcademicYear().getExIdentifier());
					datalist.add(detail);
					}
					
					System.out.println(">>>>>>>>>>>>>>>>>"+datalist);
					
				}
			}
			
			String serverurl = commonHelper.getSettingValue("SERVER_IP");
			String reportPath = commonHelper.getSettingValue("DOCUMENT_PATH"); // "src/main/resources/";
			String image = super.commonHelper.getSettingValue("IMAGE_PATH");
			String image1 = super.commonHelper.getSettingValue("MOFPI_PATH");
			String image2 = super.commonHelper.getSettingValue("EMBLEM_PATH");
			
			logger.info(image);
			
			String path = "";
			if(request.getExIdentifier().equalsIgnoreCase("TermWiseSubjects")) {
		    path = resourceLoader.getResource("classpath:TermWiseSubjects.jrxml").getURI().getPath();
			}
			
			if(request.getExIdentifier().equalsIgnoreCase("DisciplineWiseSubjects")) {
			    path = resourceLoader.getResource("classpath:Descipline.jrxml").getURI().getPath();
				}
			
		    JasperReport jasperReport = JasperCompileManager.compileReport(path);

			JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(datalist);
			// Parameters for report
			Map<String, Object> parameters = new HashMap<>();
			parameters.put("academicyear", programs.get().getExName().toUpperCase());
			parameters.put("Batch",programs.get().getExName().toUpperCase());
			parameters.put("programe", programs.get().getExName().toUpperCase());
			//parameters.put("department", list.get(0).getDepartment().getExName().toUpperCase());
			parameters.put("todayAsString",todayAsString);
			parameters.put("university", university.toUpperCase());
			parameters.put("logo", image);
			parameters.put("date", todayAsString);
			parameters.put("emblem", image1);
			parameters.put("logo1", image2);
			
			// Fill the report
			JasperPrint print = JasperFillManager.fillReport(jasperReport, parameters, jrBeanCollectionDataSource);
			// Export the report to a PDF file

			String folder = createFolder("AcademicYear","Programmes", "TermWiseSubjects");
			JasperExportManager.exportReportToPdfFile(print, reportPath + folder + "/TermWiseSubjects.pdf");

			File filenew = new File(reportPath + folder + "/TermWiseSubjects.pdf");
			if (filenew.exists()) {
				filenew.setExecutable(true, false);
				filenew.setReadable(true, false);
				filenew.setWritable(true, false);
			}
			
			info.put("status", "1");
			info.put("url", folder + "/TermWiseSubjects.pdf");
			info.put("message", "Report successfully generated");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getTransactionpdf(ReportRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		List<Object[]> list1 = null;
		List<Object[]> list2 = null;
		List<Object[]> list3 = new ArrayList<>();
		try {
			logger.info("Request :" + request);
			List<Object> datalist = new ArrayList<Object>();
			
			List<University> uid = super.university.findAllUnivesity();
			if (uid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "University not present");
				return info;
			}
			String university = uid.get(0).getExName().toUpperCase();

			String pattern = "dd/MM/yyyy";
			DateFormat df = new SimpleDateFormat(pattern);
			Date today = Calendar.getInstance().getTime();        
			String todayAsString = df.format(today);
			System.out.println("Today is: " + todayAsString);
			
			
			SimpleDateFormat date = new SimpleDateFormat("dd/mm/yyyy");
			DateFormat dateFormat = new SimpleDateFormat("yyyy-mm-dd hh:MM:ss");
			List<String> paymentstatus =validatePaymentStatus(request);
			String sacademic = validateRepor(request.getAcademicYear());
			String ssemester = validateRepor(request.getSemester());
			String pstatus = validateReporPaymet(paymentstatus);
			
			String sql = "";

			String sDate = dateFormat.format(date.parse(request.getStartDate() ));
			System.out.println(">>>>>>>..start date" + sDate);
			String eDate = dateFormat.format(date.parse(request.getEndDate()));
			System.out.println(">>>>>>>..eDate date" + eDate);
			sql = "AND DATE(o.txnDate) >= '" + sDate + "' AND DATE(o.txnDate) <= '" + eDate
					+ "' AND o.academicYear  IN (" + sacademic + ")   AND o.semester IN (" + ssemester
					+ ")  AND o.paymentstatus IN (" + pstatus + ") GROUP BY o.exRollNo  order by o.txnDate desc";
			
			list1 = accademicdao.getTransactionReportPDF(sql);
			list3 =super.transactionRepository.getTransactionReports(request.getPaymentStatus(),request.getAcademicYear(),request.getSemester(),sDate,eDate);    
			
			List<Object[]> list = new ArrayList<Object[]>();
			list.addAll(list1);
			
				if (list.size() <= 0) {
					info.put("status", "2");
					info.put("message", "No records");
					return info;
					
				}else {
					for(Object[] e : list) {
					Map<String, Object> detail = new HashMap<>();
				    detail.put("OrderId",e[0] == null ?"NA" :e[0].toString());
				    detail.put("TransactionNumber",e[1] == null ?"NA" :e[1].toString());
				    detail.put("BankReferencenumber",e[2] == null ?"NA" :e[2].toString());
					detail.put("AcademicYear",e[3] == null ?"NA" :e[3].toString());
					detail.put("Programmes",e[4] == null ?"NA" :e[4].toString());
					detail.put("Semester",e[6] == null ?"NA" :e[6].toString());
					detail.put("exStudentId",e[7] == null ?"NA" :e[7].toString());
					detail.put("StudentName",e[8] == null ?"NA" :e[8].toString());
					detail.put("TransactionDate",e[11] == null ?"NA" :e[11].toString());
					detail.put("PaymentStatus",e[12] == null ?"NA" :e[12].toString());
					detail.put("TotalTransactionAmount",e[13] == null ?"NA" :e[13].toString());
					detail.put("feecategoryNames",e[15] == null ?"NA" :e[15].toString());
					datalist.add(detail);
					}
				}
			
			String serverurl = commonHelper.getSettingValue("SERVER_IP");
			String reportPath = commonHelper.getSettingValue("DOCUMENT_PATH"); // "src/main/resources/";
			String image = super.commonHelper.getSettingValue("IMAGE_PATH");
			String image1 = super.commonHelper.getSettingValue("MOFPI_PATH");
			String image2 = super.commonHelper.getSettingValue("EMBLEM_PATH");
			logger.info(image);
			
			String path="";
			    path = resourceLoader.getResource("classpath:TransactionReport.jrxml").getURI().getPath();
			
		    JasperReport jasperReport = JasperCompileManager.compileReport(path);

			JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(datalist);
			// Parameters for report
			Map<String, Object> parameters = new HashMap<>();
			parameters.put("todayAsString",todayAsString);
			parameters.put("university", university.toUpperCase());
			parameters.put("logo", image);
			parameters.put("date", todayAsString);
			parameters.put("emblem", image1);
			parameters.put("logo1", image2);
			
			// Fill the report
			JasperPrint print = JasperFillManager.fillReport(jasperReport, parameters, jrBeanCollectionDataSource);
			// Export the report to a PDF file

			String folder = createFolder("AcademicYear", "Degreee", "Transactionpdf");
			JasperExportManager.exportReportToPdfFile(print, reportPath + folder + "/Transactionpdf.pdf");

			File filenew = new File(reportPath + folder + "/Transactionpdf.pdf");
			if (filenew.exists()) {
				filenew.setExecutable(true, false);
				filenew.setReadable(true, false);
				filenew.setWritable(true, false);
			}
			
			info.put("status", "1");
			info.put("url", folder + "/Transactionpdf.pdf");
			info.put("message", "Report successfully generated");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}
	}
	public String validateRepor(List<Long> list) {
		String validatereport  = "";
		System.out.println(">>>>>list"+list.size());
		if(list.size()>0) {	
			
			for(int i =0 ; i<list.size() ; i++) {
				Long number =list.get(i);
			validatereport = validatereport+number+",";
			}	
			validatereport =  validatereport.substring(0, validatereport.length() -1);
		}
		return validatereport;
	}
	
	public List<String> validatePaymentStatus(ReportRequest request) {
		List<String> paymentstatus = new ArrayList<String>();
		try {			
			if(request.getPaymentStatus() == null || request.getPaymentStatus().equals("") || request.getPaymentStatus().equalsIgnoreCase("all")) {
				paymentstatus.add("Success");
				paymentstatus.add("Failed");
				paymentstatus.add("initiated");
				paymentstatus.add("Cancelled");
				paymentstatus.add("Refund");
			}else if(request.getPaymentStatus().equals("failed")) {
				paymentstatus.add("failure");
				paymentstatus.add("failed");
			}
			
			else {
				paymentstatus.add(request.getPaymentStatus());
			}
			
		}catch(Exception e) {
			
			e.printStackTrace();
		}
		return paymentstatus;
	}
	
	public String validateReporPaymet(List<String> list) {
		String validatereport  = "";
		if(list.size()>0) {		
			for(int i =0 ; i<list.size() ; i++) {
				String number =list.get(i);
			validatereport = validatereport+"'"+number+"',";
			}	
			validatereport =  validatereport.substring(0, validatereport.length() -1);
		}
		return validatereport;
	}

	@Override
	public Map<String, Object> generateCourseCoveragepdf(CoursesCoverageRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			logger.info("Request :" + request);
			List<Object> datalist = new ArrayList<Object>();
			
			List<University> uid = super.university.findAllUnivesity();
			if (uid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "University not present");
				return info;
			}
			String university = uid.get(0).getExName().toUpperCase();

			String pattern = "dd/MM/yyyy";
			DateFormat df = new SimpleDateFormat(pattern);
			Date today = Calendar.getInstance().getTime();        
			String todayAsString = df.format(today);
			System.out.println("Today is: " + todayAsString);
			
			
			List<CoursesCoverage> list = new ArrayList<>();
				list = super.CourseCoverage.findByExIsDeleteAndCoursesId(false , request.getCourses());
			
				if (list.size() <= 0) {
					info.put("status", "2");
					info.put("message", "No records");
					return info;
					
				}else {
					for(CoursesCoverage e :list) {
					Map<String, Object> detail = new HashMap<>();
				    detail.put("unitNames",e.getExUnitName());
				    detail.put("TopicsCovered",e.getExTopicsCovered());
				    detail.put("TopicsNotCovered",e.getExTopicsNotCovered());
				    detail.put("TotalTopics",e.getExTotalTopics());
				    double d1 = (e.getExTopicsCovered()/e.getExTotalTopics()*100);
				    DecimalFormat df2 = new DecimalFormat("####0.00");
				    String satt = df2.format(d1);
				    detail.put("Percenatge",satt+"%");
				    
					datalist.add(detail);
					}
				}
			
			String serverurl = commonHelper.getSettingValue("SERVER_IP");
			String reportPath = commonHelper.getSettingValue("DOCUMENT_PATH"); // "src/main/resources/";
			String image = super.commonHelper.getSettingValue("IMAGE_PATH");
			String image1 = super.commonHelper.getSettingValue("MOFPI_PATH");
			String image2 = super.commonHelper.getSettingValue("EMBLEM_PATH");	
			logger.info(image);

			
			String path = "";		
		    path = resourceLoader.getResource("classpath:CourseCoverage.jrxml").getURI().getPath();			
		    JasperReport jasperReport = JasperCompileManager.compileReport(path);
			JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(datalist);
			// Parameters for report
			Map<String, Object> parameters = new HashMap<>();
			parameters.put("todayAsString",todayAsString);
			parameters.put("university", university.toUpperCase());
			parameters.put("logo", image);
			parameters.put("exCourseName", list.get(0).getCourses().getExName());
			parameters.put("exCoursesCode", list.get(0).getCourses().getExCoursesCode());
			parameters.put("programe", list.get(0).getCourses().getProgrammes().getExName());
			parameters.put("department", list.get(0).getCourses().getDepartment().getExName());
			parameters.put("emblem", image1);
			parameters.put("logo1", image2);
			
			// Fill the report
			JasperPrint print = JasperFillManager.fillReport(jasperReport, parameters, jrBeanCollectionDataSource);
			// Export the report to a PDF file

			String folder = createFolder(list.get(0).getCourses().getAcademicYear().getExYear(), list.get(0).getCourses().getDegree().getExName(), "CourseCoverage");
			JasperExportManager.exportReportToPdfFile(print, reportPath + folder + "/CourseCoverage.pdf");

			File filenew = new File(reportPath + folder + "/CourseCoverage.pdf");
			if (filenew.exists()) {
				filenew.setExecutable(true, false);
				filenew.setReadable(true, false);
				filenew.setWritable(true, false);
			}
			
			info.put("status", "1");
			info.put("url", folder + "/CourseCoverage.pdf");
			info.put("message", "Report successfully generated");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> generateCourseProgressionpdf(CoursesCoverageRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			logger.info("Request :" + request);
			List<Object> datalist = new ArrayList<Object>();
			
			List<University> uid = super.university.findAllUnivesity();
			if (uid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "University not present");
				return info;
			}
			String university = uid.get(0).getExName().toUpperCase();

			String pattern = "dd/MM/yyyy";
			DateFormat df = new SimpleDateFormat(pattern);
			Date today = Calendar.getInstance().getTime();        
			String todayAsString = df.format(today);
			System.out.println("Today is: " + todayAsString);
			
			
			List<GradeReport> list = new ArrayList<>();
				list = super.gradeReport.findByCoursesIdAndExIsActiveAndExIsDelete(request.getCourses(),true , false);
			
				if (list.size() <= 0) {
					info.put("status", "2");
					info.put("message", "No records");
					return info;
					
				}else {
					
					  List<String> list1 = Arrays.asList(list.get(0).getExLetterGrades());
					  long total = list1.stream().distinct().count();
					  System.out.println(total);
					  List<Object[]> lists = new ArrayList<Object[]>();
					  lists = super.gradeReport.getrecordspdfs(request.getCourses() , request.getAcademicYear());				
						if (lists.size() <= 0) {
							info.put("status", "2");
							info.put("message", "No records");
							return info;
							
						}else {
							for(Object[] e :lists) {
							Map<String, Object> detail = new HashMap<>();
						    detail.put("Totalstudents",e[1] == null ?"NA" :e[1].toString());
						    detail.put("exStudentId",e[0] == null ?"NA" :e[0].toString());
						    detail.put("EnrollmentNumber",e[5] == null ?"NA" :e[5].toString());
							detail.put("Email",e[7] == null ?"NA" :e[7].toString());
							detail.put("Contact",e[6] == null ?"NA" :e[6].toString());
							detail.put("1stsem",e[8] == null ?"NA" :e[8].toString());
							detail.put("2ndsem",e[9] == null ?"NA" :e[9].toString());
							detail.put("3rdsem",e[10] == null ?"NA" :e[10].toString());
							detail.put("4thsem",e[11] == null ?"NA" :e[11].toString());
							detail.put("5thsem",e[12] == null ?"NA":e[12].toString());
							detail.put("6thsem",e[13] == null ?"NA":e[13].toString());
							detail.put("7thsem", e[14] == null ?"NA":e[14].toString());
							detail.put("8thsem",e[15] == null ?"NA":e[15].toString());
							datalist.add(detail);
							}
						}
					
					//for(GradeReport e :list) {
					//Map<String, Object> detail = new HashMap<>();
				   // detail.put("unitNames",e.getExUnitName());
				   // detail.put("TopicsCovered",e.getExTopicsCovered());
				   // detail.put("TopicsNotCovered",e.getExTopicsNotCovered());
				   // detail.put("TotalTopics",e.getExTotalTopics());
				   // double d1 = (e.getExTopicsCovered()/e.getExTotalTopics()*100);
				   // DecimalFormat df2 = new DecimalFormat("####0.00");
				    //String satt = df2.format(d1);
				   // detail.put("Percenatge",satt+"%");
				    
					//datalist.add(detail);
					//}
				}
			
			String serverurl = commonHelper.getSettingValue("SERVER_IP");
			String reportPath = commonHelper.getSettingValue("DOCUMENT_PATH"); // "src/main/resources/";
			String image = super.commonHelper.getSettingValue("IMAGE_PATH");
			logger.info(image);

			
			String path = "";		
		    path = resourceLoader.getResource("classpath:CourseCoverage.jrxml").getURI().getPath();			
		    JasperReport jasperReport = JasperCompileManager.compileReport(path);
			JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(datalist);
			// Parameters for report
			Map<String, Object> parameters = new HashMap<>();
			parameters.put("todayAsString",todayAsString);
			parameters.put("university", university.toUpperCase());
			parameters.put("logo", image);
			parameters.put("exCourseName", list.get(0).getCourses().getExName());
			parameters.put("exCoursesCode", list.get(0).getCourses().getExCoursesCode());
			parameters.put("programe", list.get(0).getCourses().getProgrammes().getExName());
			parameters.put("department", list.get(0).getCourses().getDepartment().getExName());
			
			
			// Fill the report
			JasperPrint print = JasperFillManager.fillReport(jasperReport, parameters, jrBeanCollectionDataSource);
			// Export the report to a PDF file

			String folder = createFolder(list.get(0).getCourses().getAcademicYear().getExYear(), list.get(0).getCourses().getDegree().getExName(), "CourseCoverage");
			JasperExportManager.exportReportToPdfFile(print, reportPath + folder + "/CourseCoverage.pdf");

			File filenew = new File(reportPath + folder + "/CourseCoverage.pdf");
			if (filenew.exists()) {
				filenew.setExecutable(true, false);
				filenew.setReadable(true, false);
				filenew.setWritable(true, false);
			}
			
			info.put("status", "1");
			info.put("url", folder + "/CourseCoverage.pdf");
			info.put("message", "Report successfully generated");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> generatestudentstatusReportPdf(ReportRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			logger.info("Request :" + request);
			List<Object> datalist = new ArrayList<Object>();
			
			List<University> uid = super.university.findAllUnivesity();
			if (uid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "University not present");
				return info;
			}
			String university = uid.get(0).getExName().toUpperCase();

			String pattern = "dd/MM/yyyy";
			DateFormat df = new SimpleDateFormat(pattern);
			Date today = Calendar.getInstance().getTime();        
			String todayAsString = df.format(today);
			System.out.println("Today is: " + todayAsString);
			
			
			List<Studentpersonal> list = new ArrayList<>();
				list = super.studentpersonal.getAdmisionRecord(request.getColleges(), request.getDegree(),
						request.getProgrammes(), request.getAcademicYear());
			
				if (list.size() <= 0) {
					info.put("status", "2");
					info.put("message", "No records");
					return info;
					
				}else {
					for(Studentpersonal e :list) {
					Map<String, Object> detail = new HashMap<>();
				    detail.put("StudentName",e.getStudentadmission().getExName().toUpperCase());
				    detail.put("exStudentId",e.getStudentadmission().getExRollNo());
				    detail.put("EnrollmentNumber",e.getStudentadmission().getExEnrollementNo());
					detail.put("StudyStatus",e.getStudentadmission().getExStudyStatus()==null?"NA":e.getStudentadmission().getExStudyStatus().toLowerCase());
					detail.put("Email",e.getExEmailId());
					detail.put("Contact",e.getExContactDetails());
					detail.put("DOB",e.getExDateOfBirth());
					detail.put("Gender",e.getExGender().toUpperCase());
					detail.put("FatherName",e.getExFatherName());
					detail.put("MotherName",e.getExMotherName());
					detail.put("Native",e.getExNativeState());
					detail.put("Religion",e.getExReligion());
					detail.put("academicYear", e.getStudentadmission().getAcademicYear().getExIdentifier());
					detail.put("degree",e.getStudentadmission().getBatch().getExIdentifier());
					detail.put("programeIdentifier", e.getStudentadmission().getProgrammes().getExIdentifier().toUpperCase());
					datalist.add(detail);
					}
				}
			
			String serverurl = commonHelper.getSettingValue("SERVER_IP");
			String reportPath = commonHelper.getSettingValue("DOCUMENT_PATH"); // "src/main/resources/";
			String image = super.commonHelper.getSettingValue("IMAGE_PATH");
			String image1 = super.commonHelper.getSettingValue("MOFPI_PATH");
			String image2 = super.commonHelper.getSettingValue("EMBLEM_PATH");
			logger.info(image);
			
			String path = "";
		    path = resourceLoader.getResource("classpath:studentstatus.jrxml").getURI().getPath();
			JasperReport jasperReport = JasperCompileManager.compileReport(path);

			JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(datalist);
			// Parameters for report
			Map<String, Object> parameters = new HashMap<>();
			parameters.put("academicYear", list.get(0).getStudentadmission().getAcademicYear().getExIdentifier());
			parameters.put("degree",list.get(0).getStudentadmission().getDegree().getExName());
			parameters.put("programe", list.get(0).getStudentadmission().getProgrammes().getExName().toUpperCase());
			parameters.put("programeIdentifier", list.get(0).getStudentadmission().getProgrammes().getExIdentifier().toUpperCase());
			parameters.put("todayAsString",todayAsString);
			parameters.put("university", university.toUpperCase());
			parameters.put("logo", image);
			parameters.put("date", todayAsString);
			parameters.put("emblem", image1);
			parameters.put("logo1", image2);
			
			// Fill the report
			JasperPrint print = JasperFillManager.fillReport(jasperReport, parameters, jrBeanCollectionDataSource);
			// Export the report to a PDF file

			String folder = createFolder(list.get(0).getStudentadmission().getAcademicYear().getExYear(), list.get(0).getStudentadmission().getDegree().getExName(), "StudentAdmission");
			JasperExportManager.exportReportToPdfFile(print, reportPath + folder + "/studentstatus.pdf");

			File filenew = new File(reportPath + folder + "/studentstatus.pdf");
			if (filenew.exists()) {
				filenew.setExecutable(true, false);
				filenew.setReadable(true, false);
				filenew.setWritable(true, false);
			}
			
			info.put("status", "1");
			info.put("url", folder + "/studentstatus.pdf");
			info.put("message", "Report successfully generated");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> generateTotalStudentFeePaidDetailsPdf(ReportRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		List<Object[]> list1 = null;
		List<Object[]> list2 = null;
		List<Object[]> list3 = new ArrayList<>();
		try {
			logger.info("Request :" + request);
			List<Object> datalist = new ArrayList<Object>();
			
			List<University> uid = super.university.findAllUnivesity();
			if (uid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "University not present");
				return info;
			}
			String university = uid.get(0).getExName().toUpperCase();

			String pattern = "dd/MM/yyyy";
			DateFormat df = new SimpleDateFormat(pattern);
			Date today = Calendar.getInstance().getTime();        
			String todayAsString = df.format(today);
			System.out.println("Today is: " + todayAsString);
	
			list1 =super.transactionRepository.getTransactionReportsPDF(request.getPaymentStatus(),request.getAcademicYear());    
			
			List<Object[]> list = new ArrayList<Object[]>();
			list.addAll(list1);
			
				if (list.size() <= 0) {
					info.put("status", "2");
					info.put("message", "No records");
					return info;
					
				}else {
					for(Object[] e : list) {
					Map<String, Object> detail = new HashMap<>();
				    detail.put("college",e[0] == null ?"NA" :e[0].toString());
				    detail.put("programe",e[1] == null ?"NA" :e[1].toString());
				    detail.put("department",e[2] == null ?"NA" :e[2].toString());
					detail.put("Batch",e[3] == null ?"NA" :e[3].toString());
					detail.put("exStudentId",e[4] == null ?"NA" :e[4].toString());
					detail.put("Snames",e[5] == null ?"NA" :e[5].toString());
					detail.put("Scontact",e[6] == null ?"NA" :e[6].toString());
					detail.put("SEmail",e[7] == null ?"NA" :e[7].toString());
					detail.put("txn1",e[8] == null ?"NA" :e[8].toString());
					detail.put("txn2",e[9] == null ?"NA" :e[9].toString());
					detail.put("txn3",e[10] == null ?"NA" :e[10].toString());
					detail.put("txn4",e[11] == null ?"NA" :e[11].toString());
					detail.put("txn5",e[12] == null ?"NA" :e[12].toString());
					detail.put("txn6",e[13] == null ?"NA" :e[13].toString());
					detail.put("txn7",e[14] == null ?"NA" :e[14].toString());
					detail.put("txn8",e[15] == null ?"NA" :e[15].toString());
					datalist.add(detail);
					}
				}
			
			String serverurl = commonHelper.getSettingValue("SERVER_IP");
			String reportPath = commonHelper.getSettingValue("DOCUMENT_PATH"); // "src/main/resources/";
			String image = super.commonHelper.getSettingValue("IMAGE_PATH");
			logger.info(image);
			
			String path="";
			    path = resourceLoader.getResource("classpath:TotalStudentFeePaidDetails.jrxml").getURI().getPath();
			
		    JasperReport jasperReport = JasperCompileManager.compileReport(path);

			JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(datalist);
			// Parameters for report
			Map<String, Object> parameters = new HashMap<>();
	     	parameters.put("todayAsString",todayAsString);
			parameters.put("university", university.toUpperCase());
			parameters.put("logo", image);
			parameters.put("date", todayAsString);
			
			// Fill the report
			JasperPrint print = JasperFillManager.fillReport(jasperReport, parameters, jrBeanCollectionDataSource);
			// Export the report to a PDF file

			String folder = createFolder("AcademicYear", "Degreee", "TotalStudentFeePaidDetails");
			JasperExportManager.exportReportToPdfFile(print, reportPath + folder + "/TotalStudentFeePaidDetails.pdf");

			File filenew = new File(reportPath + folder + "/TotalStudentFeePaidDetails.pdf");
			if (filenew.exists()) {
				filenew.setExecutable(true, false);
				filenew.setReadable(true, false);
				filenew.setWritable(true, false);
			}
			
			info.put("status", "1");
			info.put("url", folder + "/TotalStudentFeePaidDetails.pdf");
			info.put("message", "Report successfully generated");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> generateNoduesDetailsPdf(ReportRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		List<Object[]> list1 = null;
		try {
			logger.info("Request :" + request);
			List<Object> datalist = new ArrayList<Object>();
			
			List<University> uid = super.university.findAllUnivesity();
			if (uid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "University not present");
				return info;
			}
			String university = uid.get(0).getExName().toUpperCase();

			String pattern = "dd/MM/yyyy";
			DateFormat df = new SimpleDateFormat(pattern);
			Date today = Calendar.getInstance().getTime();        
			String todayAsString = df.format(today);
			System.out.println("Today is: " + todayAsString);
	
		 list1  = super.semesterRegistration.NoDuesDetailss( request.getSemester() ,request.getAcademicYear(),request.getProgrammes());
			List<Object[]> list = new ArrayList<Object[]>();
			list.addAll(list1);
			if (list.size() <= 0) {
				info.put("status", "2");
				info.put("message", "No records");
				return info;
				
			}else{
				for(Object[] f: list) {
					Map<Object, Object> NoDues = new HashMap<Object, Object>();
					NoDues.put("college",f[0] == null ?"NA":f[0].toString());
					NoDues.put("programe",f[1]  == null ?"NA":f[1].toString());
					NoDues.put("department",f[2]  == null ?"NA":f[2].toString());
					NoDues.put("stream",f[3]  == null ?"NA":f[3].toString());
					NoDues.put("academicyear",f[4] == null ?"NA":f[4].toString());
					NoDues.put("semester",f[5]  == null ?"NA":f[5].toString());
					NoDues.put("exStudentId",f[6]  == null ?"NA":f[6].toString());
					NoDues.put("Snames",f[7] == null ?"NA":f[7].toString());
					NoDues.put("Remark",f[9]  == null ?"NA":f[9].toString());
					NoDues.put("approveType",f[10] == null ?"NA":f[10].toString());
					NoDues.put("isPaid",f[12].equals(false) ? "not paid": "Paid");
					NoDues.put("Amount",f[11]==null ? "NA":f[11].toString());
					datalist.add(NoDues);
					}
				}
			
			String serverurl = commonHelper.getSettingValue("SERVER_IP");
			String reportPath = commonHelper.getSettingValue("DOCUMENT_PATH"); // "src/main/resources/";
			String image = super.commonHelper.getSettingValue("IMAGE_PATH");
			logger.info(image);
			
			String path="";
			    path = resourceLoader.getResource("classpath:Nodues.jrxml").getURI().getPath();
			
		    JasperReport jasperReport = JasperCompileManager.compileReport(path);

			JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(datalist);
			// Parameters for report
			Map<String, Object> parameters = new HashMap<>();
	     	parameters.put("todayAsString",todayAsString);
			parameters.put("university", university.toUpperCase());
			parameters.put("logo", image);
			parameters.put("date", todayAsString);
			
			// Fill the report
			JasperPrint print = JasperFillManager.fillReport(jasperReport, parameters, jrBeanCollectionDataSource);
			// Export the report to a PDF file

			String folder = createFolder("AcademicYear", "Degreee", "Nodues");
			JasperExportManager.exportReportToPdfFile(print, reportPath + folder + "/Nodues.pdf");

			File filenew = new File(reportPath + folder + "/Nodues.pdf");
			if (filenew.exists()) {
				filenew.setExecutable(true, false);
				filenew.setReadable(true, false);
				filenew.setWritable(true, false);
			}
			
			info.put("status", "1");
			info.put("url", folder + "/Nodues.pdf");
			info.put("message", "Report successfully generated");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> generateSeatingplanPdf(InternalMarksRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();

		try {

			List<University> uid = super.university.findAllUnivesity();
			if (uid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "University not present");
				return info;
			}
			String university = uid.get(0).getExName().toUpperCase();


			Optional<AcademicYear> academicYearid = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getAcademicYear());
			if (!academicYearid.isPresent()) {
				info.put("status", "2");
				info.put("message", "AcademicYear id not present");
				return info;
			}


			
			Optional<RoomMaster> Room = super.roomMaster.findByIdAndExIsDeleteAndExIsActive(request.getRoomId(), false,
					true);
			if (!Room.isPresent()) {
				info.put("status", "2");
				info.put("message", "Room not present");
				return info;
			}
			

			String pattern = "dd/MM/yyyy";
			DateFormat df = new SimpleDateFormat(pattern);
			Date today = Calendar.getInstance().getTime();        
			String todayAsString = df.format(today);
			System.out.println("Today is: " + todayAsString);
		
			List dataList = new LinkedList();
			List dataList1 = new LinkedList();
			List dataList2 = new LinkedList();
			List dataList3 = new LinkedList();
			List dataList4 = new LinkedList();
			List dataList5 = new LinkedList();
			List dataList6 = new LinkedList();
			List dataList7 = new LinkedList();
			List dataList8 = new LinkedList();
			List dataList9 = new LinkedList();
			int count = 0;
			
			SimpleDateFormat date = new SimpleDateFormat("dd/mm/yyyy");
			DateFormat dateFormat = new SimpleDateFormat("yyyy-mm-dd 00:00:00");
			String sDate = dateFormat.format(date.parse(request.getStartDate()));
			
			//List<SeatArrangement> stuid = super.seatArrangement
			//		.findByAcademicYearIdAndRoomIdAndExStartDateAndExExamTypeAndExSemesterTypeAndExIsActiveAndExIsDelete(
			//				 request.getAcademicYear(), 
				//			Room.get().getId(),sDate,request.getExExamType(),request.getSemeserType() ,true, false);
			
			List<SeatArrangement> stuid = super.seatArrangement
					.Seatingplan(
							 request.getAcademicYear(), 
							Room.get().getId(),sDate,request.getExExamType(),request.getSemeserType() ,true, false);
			
			if (stuid.size() <= 0) {
				info.put("status", "2");
				info.put("message", "No record found.");
				return info;
			}else {
				List<SeatArrangement> stuids1 = super.seatArrangement.getresults(
								request.getAcademicYear(), 
								request.getRoomId() ,1L,sDate,request.getExExamType(),request.getSemeserType());
				
				
				List<SeatArrangement> stuid4 = super.seatArrangement.getresults(
						request.getAcademicYear(), 
						request.getRoomId() ,4L,sDate,request.getExExamType(),request.getSemeserType());
		
				List<SeatArrangement> stuid7 = super.seatArrangement.getresults(
						request.getAcademicYear(), 
						request.getRoomId() ,7L,sDate,request.getExExamType(),request.getSemeserType());
				
				
				List<SeatArrangement> stuids2 = super.seatArrangement.getresults(
						request.getAcademicYear(), 
						request.getRoomId() ,2L,sDate,request.getExExamType(),request.getSemeserType());
				
				
				List<SeatArrangement> stuids5 = super.seatArrangement.getresults(
						request.getAcademicYear(),  
						request.getRoomId() ,5L,sDate,request.getExExamType(),request.getSemeserType());
				
				List<SeatArrangement> stuids8 = super.seatArrangement.getresults(
						request.getAcademicYear(), 
						request.getRoomId() ,8L,sDate,request.getExExamType(),request.getSemeserType());
				
				
				List<SeatArrangement> stuids3 = super.seatArrangement.getresults(
						request.getAcademicYear(), 
						request.getRoomId() ,3L,sDate,request.getExExamType(),request.getSemeserType());
				
				
				List<SeatArrangement> stuids6 = super.seatArrangement.getresults(
						request.getAcademicYear(),  
						request.getRoomId() ,6L,sDate,request.getExExamType(),request.getSemeserType());
				
				List<SeatArrangement> stuids9 = super.seatArrangement.getresults(
						request.getAcademicYear(), 
						request.getRoomId() ,9L,sDate,request.getExExamType(),request.getSemeserType());
				
				
					for (SeatArrangement e : stuids1) {
						Map<Object, Object> studentinfo = new HashMap<Object, Object>();
						studentinfo.put("exStudentId", e.getStudentAdmission().getExRollNo());
						System.out.println(">>>>>code" + studentinfo);
						dataList9.add(studentinfo);
						count++;
					}
					
					for (SeatArrangement e : stuid4) {
						Map<Object, Object> studentinfo = new HashMap<Object, Object>();
						studentinfo.put("exStudentId4", e.getStudentAdmission().getExRollNo());
						System.out.println(">>>>>code" + studentinfo);
						dataList1.add(studentinfo);
						count++;
					}
					
					for (SeatArrangement e : stuid7) {
						Map<Object, Object> studentinfo = new HashMap<Object, Object>();
						studentinfo.put("exStudentId7", e.getStudentAdmission().getExRollNo());
						System.out.println(">>>>>code" + studentinfo);
						dataList2.add(studentinfo);
						count++;
					}
					
					
					
					for (SeatArrangement e : stuids2) {
						Map<Object, Object> studentinfo = new HashMap<Object, Object>();
						studentinfo.put("exStudentId2", e.getStudentAdmission().getExRollNo());
						System.out.println(">>>>>code" + studentinfo);
						dataList3.add(studentinfo);
						count++;
					}
					
					for (SeatArrangement e : stuids5) {
						Map<Object, Object> studentinfo = new HashMap<Object, Object>();
						studentinfo.put("exStudentId5", e.getStudentAdmission().getExRollNo());
						System.out.println(">>>>>code" + studentinfo);
						dataList4.add(studentinfo);
						count++;
					}
					
					for (SeatArrangement e : stuids8) {
						Map<Object, Object> studentinfo = new HashMap<Object, Object>();
						studentinfo.put("exStudentId8", e.getStudentAdmission().getExRollNo());
						System.out.println(">>>>>code" + studentinfo);
						dataList5.add(studentinfo);
						count++;
					}
					
					
					for (SeatArrangement e : stuids3) {
						Map<Object, Object> studentinfo = new HashMap<Object, Object>();
						studentinfo.put("exStudentId3", e.getStudentAdmission().getExRollNo());
						System.out.println(">>>>>code" + studentinfo);
						dataList6.add(studentinfo);
						count++;
					}
					
					for (SeatArrangement e : stuids6) {
						Map<Object, Object> studentinfo = new HashMap<Object, Object>();
						studentinfo.put("exStudentId6", e.getStudentAdmission().getExRollNo());
						System.out.println(">>>>>code" + studentinfo);
						dataList7.add(studentinfo);
						count++;
					}
					
					for (SeatArrangement e : stuids9) {
						Map<Object, Object> studentinfo = new HashMap<Object, Object>();
						studentinfo.put("exStudentId9", e.getStudentAdmission().getExRollNo());
						System.out.println(">>>>>code" + studentinfo);
						dataList8.add(studentinfo);
						count++;
					}
					
					
			}
			
			List<Object[]> list = new ArrayList<Object[]>();
			list = super.seatArrangement
					.Seatingplans(
							 request.getAcademicYear(), 
							Room.get().getId(),sDate,request.getExExamType(),request.getSemeserType() ,true, false);
							
				if (list.size() <= 0) {
					info.put("status", "2");
					info.put("message", "No records");
					return info;
					
				}else {
					//Map<String, Object> parameters = new HashMap<>();
					// Add parameters
				//	parameters.put("studentcounts", list.get(0));
				   System.out.println("StudentName"+ list.get(0));
				   
				
				}
			
			Map<Object, Object> studentcount = new HashMap<Object, Object>();
			studentcount.put("studentcount", count);

			logger.info(">>>>>>>>>studentcount>>>>>>" + count);
			dataList.add(studentcount);

			String serverurl = super.commonHelper.getSettingValue("SERVER_IP");
			// String reportPath = "src/main/resources/";
			String reportPath = super.commonHelper.getSettingValue("DOCUMENT_PATH");
			String image = super.commonHelper.getSettingValue("IMAGE_PATH");
			String image1 = super.commonHelper.getSettingValue("MOFPI_PATH");
			String image2 = super.commonHelper.getSettingValue("EMBLEM_PATH");
			String Coe = "images/Coe.jpg";
			String Narender = "images/Nare_Sign.jpg";
			logger.info(image);

			// Compile the Jasper report from .jrxml to .japser

			String path = ""; 
					path = resourceLoader.getResource("classpath:seatingplans.jrxml").getURI().getPath();	
					
					
			JasperReport jasperReport = JasperCompileManager.compileReport(path);
			// Get your data source

			JRBeanCollectionDataSource datasource9 = new JRBeanCollectionDataSource(dataList9);
			JRBeanCollectionDataSource datasource1 = new JRBeanCollectionDataSource(dataList1);
			JRBeanCollectionDataSource datasource2 = new JRBeanCollectionDataSource(dataList2);
			JRBeanCollectionDataSource datasource3 = new JRBeanCollectionDataSource(dataList3);
			JRBeanCollectionDataSource datasource4 = new JRBeanCollectionDataSource(dataList4);
			JRBeanCollectionDataSource datasource5 = new JRBeanCollectionDataSource(dataList5);
			JRBeanCollectionDataSource datasource6 = new JRBeanCollectionDataSource(dataList6);
			JRBeanCollectionDataSource datasource7 = new JRBeanCollectionDataSource(dataList7);
			JRBeanCollectionDataSource datasource8 = new JRBeanCollectionDataSource(dataList8);
			Map<String, Object> parameters = new HashMap<>();
			// Add parameters
			parameters.put("ds9", datasource9);
			parameters.put("ds1", datasource1);
			parameters.put("ds2", datasource2);
			parameters.put("ds3", datasource3);
			parameters.put("ds4", datasource4);
			parameters.put("ds5", datasource5);
			parameters.put("ds6", datasource6);
			parameters.put("ds7", datasource7);
			parameters.put("ds8", datasource8);
			parameters.put("emblem", image1);
			parameters.put("logo1", image2);
			parameters.put("Coe", Coe);
			parameters.put("Narender", Narender);
			parameters.put("roomname",stuid.get(0).getRoom().getExName().toUpperCase());
			parameters.put("programe", stuid.get(0).getRoom().getExName());
			parameters.put("batch", stuid.get(0).getRoom().getExName().toUpperCase());
			parameters.put("semester", stuid.get(0).getSemester().getExName());
			parameters.put("semester1", stuid.get(1).getSemester().getExName());
			parameters.put("semester2", stuid.get(2).getSemester().getExName());
			parameters.put("studentcounts",  list.get(0));
			parameters.put("examtype", request.getExExamType()==0 ? "MID-TERM EXAMINATION" :"END-TERM EXAMINATION");
			
			
			List<SeatArrangement> sdfg = super.seatArrangement
					.findrecords(
							 request.getAcademicYear(), 
							Room.get().getId() ,true, false);
			for (SeatArrangement e : sdfg) {
				System.out.println("semesterFor"+e.getSemester().getExName());
			}
			

			// Add parameters

			parameters.put("studentcount", count);
			parameters.put("university", university);
			parameters.put("logo", image);
			parameters.put("academicyear", academicYearid.get().getExYear());

			String folder = createFolder(academicYearid.get().getExYear(), "seatingplanpdf",
					"seatingplanpdf");

			// Fill the report
			JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters, new JREmptyDataSource());
			
			String filename = "\\" + stuid.get(0).getAcademicYear().getExIdentifier() + " " + "("
					+  "seatingplanpdf" + ")" + ".pdf";

			// Export the report to a PDF file
			JasperExportManager.exportReportToPdfFile(jasperPrint, reportPath + folder + filename);

			File filenew = new File(reportPath + folder + filename);
			if (filenew.exists()) {
				filenew.setExecutable(true, false);
				filenew.setReadable(true, false);
				filenew.setWritable(true, false);
			}

			// info.put("gradeReport", dataList);
			info.put("status", "1");
			info.put("url", folder + filename);
			info.put("message", "Report successfully generated");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}
	
	}
}
