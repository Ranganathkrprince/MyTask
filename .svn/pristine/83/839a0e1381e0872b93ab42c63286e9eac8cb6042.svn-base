package com.niftem.app.controller;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Optional;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.thymeleaf.TemplateEngine;
import org.thymeleaf.context.WebContext;

import com.itextpdf.html2pdf.ConverterProperties;
import com.itextpdf.html2pdf.HtmlConverter;
import com.niftem.app.entity.Studentadmission;
import com.niftem.app.model.CommonRequest;
import com.niftem.app.repository.StudentadmissionRepository;
import com.niftem.app.service.CommonService;
@RequestMapping("/api/pdfFile/")
@CrossOrigin(origins = "*", allowedHeaders = "*")
@RestController
@Validated
public class HtmlFile {
	
	@Autowired
	private CommonService commonService;
	

    @Autowired
    ServletContext servletContext;
    
	@Autowired
	public StudentadmissionRepository studentadmission;
    
    
    private final TemplateEngine templateEngine;
    
    public HtmlFile(TemplateEngine templateEngine) {
        this.templateEngine = templateEngine;
    }

    @PostMapping(value =  "/getPdfmarkSheet")
	    public ResponseEntity<?> getOrderPage(@RequestBody CommonRequest request1 ,  Model model,  HttpServletRequest request, HttpServletResponse response) throws IOException {
		
		 		 
		 Map<String, Object>  order =  commonService.courseWiseResult(request1);
		
		 WebContext context = new WebContext(request, response, servletContext);
		 context.setVariable("orderEntry", order);
		 String orderHtml = "";
		 if(order.get("flag").toString().equalsIgnoreCase("1")) {
			 orderHtml = templateEngine.process("order", context);
		 }else {
			 orderHtml = templateEngine.process("orderPG", context);
		 }
		 
	        
	        
	        ByteArrayOutputStream target = new ByteArrayOutputStream();
	        ConverterProperties converterProperties = new ConverterProperties();
	      //  converterProperties.setBaseUri("http://localhost:8080");
	        /* Call convert method */
	        HtmlConverter.convertToPdf(orderHtml, target, converterProperties);

	        /* extract output as bytes */
	        byte[] bytes = target.toByteArray();


	        /* Send the response as downloadable PDF */

	        return ResponseEntity.ok()
	                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=result.pdf")
	                .contentType(MediaType.APPLICATION_PDF)
	                .body(bytes);

	    }
    
    
    @PostMapping(value =  "/getPdfmarkSheetByAdmin")
    public ResponseEntity<?> getPdfmarkSheetByAdmin(@RequestBody CommonRequest request1 ,  Model model,  HttpServletRequest request, HttpServletResponse response) throws IOException {
    	Map<String, Object> info = new LinkedHashMap<>();
    	Optional<Studentadmission> status = studentadmission.findByExRollNo( request1.getExRollNo());
		if(!status.isPresent()) {
			info.put("status", "2");
			info.put("message", "Student is not present.");
			return (ResponseEntity<?>) info;
		}	
		request1.setStudent(status.get().getId());
	 Map<String, Object>  order =  commonService.courseWiseResult(request1);
	 WebContext context = new WebContext(request, response, servletContext);
	 context.setVariable("orderEntry", order);
        String orderHtml = templateEngine.process("order", context);
        
        ByteArrayOutputStream target = new ByteArrayOutputStream();
        ConverterProperties converterProperties = new ConverterProperties();
      //  converterProperties.setBaseUri("http://localhost:8080");
        /* Call convert method */
        HtmlConverter.convertToPdf(orderHtml, target, converterProperties);

        /* extract output as bytes */
        byte[] bytes = target.toByteArray();


        /* Send the response as downloadable PDF */

        return ResponseEntity.ok()
                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=result.pdf")
                .contentType(MediaType.APPLICATION_PDF)
                .body(bytes);

    }
	 
	/*
	 * @RequestMapping(path = "/getmarkSheetbbbbbbbb") public String
	 * getOrderPage(Model model) { CommonRequest request1 = new CommonRequest();
	 * request1.setProgrammeYear(1L); request1.setSemester(1L);
	 * request1.setStudent(2386L);
	 * 
	 * Map<String, Object> order = commonService.courseWiseResult(request1);
	 * model.addAttribute("orderEntry", order); return "order"; }
	 */
}
