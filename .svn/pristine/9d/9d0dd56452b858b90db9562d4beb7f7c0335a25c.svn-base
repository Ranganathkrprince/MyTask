package com.niftem.app.implementation;

import java.io.File;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import javax.transaction.Transactional;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.niftem.app.entity.AboutFeedBack;
import com.niftem.app.entity.AboutFeedBackScaleMapping;
import com.niftem.app.entity.AcademicCalenderActivity;
import com.niftem.app.entity.AcademicYear;
import com.niftem.app.entity.AccessLogs;
import com.niftem.app.entity.ApplicationVersion;
import com.niftem.app.entity.Batch;
import com.niftem.app.entity.Category;
import com.niftem.app.entity.Colleges;
import com.niftem.app.entity.CourseGroup;
import com.niftem.app.entity.CourseGroupMapping;
import com.niftem.app.entity.Courses;
import com.niftem.app.entity.CoursesType;
import com.niftem.app.entity.CreditHours;
import com.niftem.app.entity.Degree;
import com.niftem.app.entity.Department;
import com.niftem.app.entity.Designation;
import com.niftem.app.entity.ElectiveCoursesGroup;
import com.niftem.app.entity.ElectiveGroup;
import com.niftem.app.entity.EmailTemplates;
import com.niftem.app.entity.EvaluationType;
import com.niftem.app.entity.EvaluatorList;
import com.niftem.app.entity.ExamAnnouncement;
import com.niftem.app.entity.FeeType;
import com.niftem.app.entity.FeedBack;
import com.niftem.app.entity.FeedBackScale;
import com.niftem.app.entity.FeedbackConfiguration;
import com.niftem.app.entity.Hostel;
import com.niftem.app.entity.HostelConfiguration;
import com.niftem.app.entity.HostelFeeType;
import com.niftem.app.entity.InternalMarksConfiguration;
import com.niftem.app.entity.Mentor;
import com.niftem.app.entity.ProgramType;
import com.niftem.app.entity.ProgrammeYear;
import com.niftem.app.entity.Programmes;
import com.niftem.app.entity.RegistrationType;
import com.niftem.app.entity.Role;
import com.niftem.app.entity.RoomMaster;
import com.niftem.app.entity.Scale;
import com.niftem.app.entity.Section;
import com.niftem.app.entity.SemesterRegistrationConfiguration;
import com.niftem.app.entity.Semster;
import com.niftem.app.entity.StaffType;
import com.niftem.app.entity.Staffpersonal;
import com.niftem.app.entity.Stream;
import com.niftem.app.entity.Studentadmission;
import com.niftem.app.entity.Studentpersonal;
import com.niftem.app.entity.TeacherCourseMapping;
import com.niftem.app.entity.University;
import com.niftem.app.entity.User;
import com.niftem.app.model.AboutFeedBackRequest;
import com.niftem.app.model.AcademicCalenderActivityRequest;
import com.niftem.app.model.AcademicYearRequest;
import com.niftem.app.model.ApplicationVersionRequest;
import com.niftem.app.model.BatchRequest;
import com.niftem.app.model.CategoryRequest;
import com.niftem.app.model.CollegesRequest;
import com.niftem.app.model.CourseGroupRequest;
import com.niftem.app.model.CoursesRequest;
import com.niftem.app.model.CoursesTypeRequest;
import com.niftem.app.model.CreateStudentRequest;
import com.niftem.app.model.CreditHoursRquest;
import com.niftem.app.model.DegreeRequest;
import com.niftem.app.model.DepartmentRequest;
import com.niftem.app.model.DesignationRequest;
import com.niftem.app.model.ElectiveGroupRequest;
import com.niftem.app.model.EvaluationTypeRequest;
import com.niftem.app.model.ExamAnnouncementRequest;
import com.niftem.app.model.ExportListRequest;
import com.niftem.app.model.FeeTypeRequest;
import com.niftem.app.model.FeedbackRequest;
import com.niftem.app.model.HostelConfigureDetailRequest;
import com.niftem.app.model.HostelFeeTypeRequest;
import com.niftem.app.model.HostelRequest;
import com.niftem.app.model.Login;
import com.niftem.app.model.MentorRequest;
import com.niftem.app.model.ProgramTypeRequest;
import com.niftem.app.model.ProgrammeRequest;
import com.niftem.app.model.ProgrammeYearRequest;
import com.niftem.app.model.RegistrationTypeRequest;
import com.niftem.app.model.RoomMasterRequest;
import com.niftem.app.model.SectionRequest;
import com.niftem.app.model.SemesterRegistrationConfigurationRequest;
import com.niftem.app.model.SemesterRequest;
import com.niftem.app.model.StaffTypeRequest;
import com.niftem.app.model.StreamRequest;
import com.niftem.app.model.StudentMentorAllocation;
import com.niftem.app.model.StudentMentorRequest;
import com.niftem.app.model.TeacherCourseMappingRequest;
import com.niftem.app.model.UniversityRequest;
import com.niftem.app.model.UserRequest;
import com.niftem.app.repository.EmailTemplatesRepository;
import com.niftem.app.service.MasterService;
import com.niftem.app.util.AutoManager;
import com.niftem.app.util.EmailSending;

@Service
@Transactional

public class MasterImpl extends AutoManager implements MasterService {
	private static Logger logger = LoggerFactory.getLogger("master-log");
	private Date date2;

	@PersistenceContext
	private EntityManager entityManager;

	@Autowired
	EmailTemplatesRepository emailTemplatesRepository;

	@Autowired
	EmailSending emailSending;

	@Override
	public Map<String, String> createUniversity(UniversityRequest university) {
		Map<String, String> info = new LinkedHashMap<>();
		try {

			List<University> tasks = new ArrayList<University>();
			tasks = super.university.findByExNameAndExIsDelete(university.getExName().trim(), false);
			if (tasks.size() > 0) {
				info.put("status", "2");
				info.put("message", "University name already exists");
				return info;
			}
			List<University> task = new ArrayList<University>();
			task = super.university.findByExIdentifierAndExIsDeleteAndExIsActive(university.getExIdentifier(), false,
					true);
			if (task.size() > 0) {
				info.put("status", "2");
				info.put("message", "Identifier already exists");
				return info;
			}
			Date date = new Date();
			Long privailageid = 1L;
			User userid = super.commonHelper.getuser(university.getUser());
			String Description = university.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(false, Description, userid, privailageid);

			University universitys = new University();
			universitys.setId(null);
			universitys.setExCreateDate(date);
			universitys.setExIsDelete(false);
			universitys.setExIsActive(university.getExIsActive());
			universitys.setExName(university.getExName());
			universitys.setExDescription(university.getExDescription());
			universitys.setExAddress(university.getExAddress());
			universitys.setExEmail(university.getExEmail());
			universitys.setExFax(university.getExFax());
			universitys.setExLocalName(university.getExLocalName());
			universitys.setExPincode(university.getExPincode());
			universitys.setExPlace(university.getExPlace());
			universitys.setExTelephone(university.getExTelephone());
			universitys.setExIdentifier(university.getExIdentifier());
			super.university.save(universitys);
			info.put("status", "1");
			info.put("message", "University created successfully");
			info.put("id", universitys.getId().toString());
			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, String> updateUniversity(UniversityRequest university) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<University> University = super.university.findByExIsDeleteAndId(false, university.getId());
			if (university.getId() == null || !University.isPresent()) {
				info.put("status", "2");
				info.put("message", "University id not present");
				return info;
			}

			List<University> tasks = new ArrayList<University>();
			tasks = super.university.findByExNameAndExIsDelete(university.getExName().trim(), false);
			if (tasks.size() > 0 && tasks.get(0).getId() != university.getId()) {
				info.put("status", "2");
				info.put("message", "University name already exists");
				return info;
			}
			List<University> task = new ArrayList<University>();
			task = super.university.findByExIdentifierAndExIsDeleteAndExIsActive(university.getExIdentifier().trim(),
					false, true);
			if (task.size() > 0 && tasks.get(0).getId() != university.getId()) {
				info.put("status", "2");
				info.put("message", "Identifier already exists");
				return info;
			}
			Date date = new Date();
			Long privailageid = 1L;
			User userid = super.commonHelper.getuser(university.getUser());
			String Description = university.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(true, Description, userid, privailageid);

			int retval = super.university.updateUniversityRecord(university.getExName(), university.getExIdentifier(),
					university.getExDescription(), university.getExIsActive(), date, university.getId(),
					university.getExAddress(), university.getExEmail(), university.getExFax(),
					university.getExLocalName(), university.getExPincode(), university.getExPlace(),
					university.getExTelephone());
			if (retval == 1) {
				info.put("status", "1");
				info.put("message", "University updated successfully");
				return info;
			} else {
				info.put("status", "2");
				info.put("message", "University id not present");
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> deleteUniversity(University university) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<University> task = super.university.findById(university.getId());
			if (task.isPresent()) {
				if (task.get().getExIsDelete()) {
					info.put("status", "2");
					info.put("message", "University already deleted");
					return info;
				}
				Boolean exIsDelete = true;
				Boolean is_active = false;
				int result = super.university.deleteUniversity(exIsDelete, is_active, task.get().getId());
				if (result == 0) {
					info.put("status", "2");
					info.put("message", "Something went wrong");
					return info;
				}
				info.put("status", "1");
				info.put("message", "University deleted successfully");
				return info;
			}
			info.put("status", "2");
			info.put("message", "University id not present");
			return info;
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getUniversity(University university) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<University> tasks = super.university.findByExIsDelete(false);
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "University not created");
				return info;
			} else {
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", tasks);
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> createDegree(DegreeRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			List<Degree> tasks = new ArrayList<Degree>();
			tasks = super.degree.findByExNameAndExIsDelete(request.getExName().trim(), false);
			if (tasks.size() > 0) {
				info.put("status", "2");
				info.put("message", "Degree name already exists");
				return info;
			}

			Date date = new Date();
			Long privailageid = 3L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = request.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(false, Description, userid, privailageid);
			System.out.println(">>>>>" + audit);

			Degree degree = new Degree();
			request.setId(null);
			degree.setExCreateDate(date);
			degree.setExIsDelete(false);
			degree.setExIsActive(request.getExIsActive());
			degree.setExName(request.getExName());
			degree.setExDescription(request.getExDescription());
			super.degree.save(degree);

			info.put("status", "1");
			info.put("message", "Degree created successfully");
			info.put("id", degree.getId().toString());

			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> updateDegree(DegreeRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<Degree> Degree = super.degree.findByExIsDeleteAndId(false, request.getId());
			if (request.getId() == null || !Degree.isPresent()) {
				info.put("status", "2");
				info.put("message", "Degree id not present");
				return info;
			}
			List<Degree> tasks = new ArrayList<Degree>();
			tasks = super.degree.findByExNameAndExIsDelete(request.getExName().trim(), false);
			if (tasks.size() > 0 && tasks.get(0).getId() != request.getId()) {
				info.put("status", "2");
				info.put("message", "Degree name already exists");
				return info;
			}

			Date date = new Date();

			Long privailageid = 3L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = request.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(true, Description, userid, privailageid);

			int retval = super.degree.updateDegreeRecord(request.getExName(), request.getExDescription(),
					request.getExIsActive(), date, request.getId());
			if (retval == 1) {
				info.put("status", "1");
				info.put("message", "Degree updated successfully");
				return info;
			} else {
				info.put("status", "2");
				info.put("message", "Degree id not present");
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, String> deleteDegree(DegreeRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<Degree> task = super.degree.findById(request.getId());
			if (task.isPresent()) {
				if (task.get().getExIsDelete()) {
					info.put("status", "2");
					info.put("message", "Degree already deleted");
					return info;
				}
				Boolean exIsDelete = true;
				Boolean is_active = false;
				int result = super.degree.deleteDegree(exIsDelete, is_active, task.get().getId());
				if (result == 0) {
					info.put("status", "2");
					info.put("message", "Something went wrong");
					return info;
				}
				info.put("status", "1");
				info.put("message", "Degree deleted successfully");
				return info;
			}
			info.put("status", "2");
			info.put("message", "Degree id not present");
			return info;
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getDegree(DegreeRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<Degree> tasks = super.degree.findByExIsDelete(false);
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Degree not created");
				return info;
			} else {
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", tasks);
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> createFeeType(FeeTypeRequest feeType) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			List<FeeType> tasks = new ArrayList<FeeType>();
			tasks = super.feeType.findByExNameAndExIsDelete(feeType.getExName().trim(), false);
			if (tasks.size() > 0) {
				info.put("status", "2");
				info.put("message", "FeeType name already exists");
				return info;
			}
			Date date = new Date();

			Long privailageid = 22L;
			User userid = super.commonHelper.getuser(feeType.getUser());
			String Description = feeType.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(false, Description, userid, privailageid);

			FeeType fees = new FeeType();
			fees.setExName(feeType.getExName());
			fees.setExDescription(feeType.getExDescription());
			fees.setExCreateDate(date);
			fees.setExIsDelete(false);
			fees.setExIsActive(feeType.getExIsActive());
			super.feeType.save(fees);
			info.put("status", "1");
			info.put("message", "FeeType created successfully");
			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> updateFeeType(FeeTypeRequest feeType) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<FeeType> FeeType = super.feeType.findByExIsDeleteAndId(false, feeType.getId());
			if (feeType.getId() == null || !FeeType.isPresent()) {
				info.put("status", "2");
				info.put("message", "FeeType id not present");
				return info;
			}

			List<FeeType> tasks = new ArrayList<FeeType>();
			tasks = super.feeType.findByExNameAndExIsDelete(feeType.getExName().trim(), false);
			if (tasks.size() > 0 && tasks.get(0).getId() != feeType.getId()) {
				info.put("status", "2");
				info.put("message", "FeeType name already exists");
				return info;
			}
			Date date = new Date();

			Long privailageid = 22L;
			User userid = super.commonHelper.getuser(feeType.getUser());
			String Description = feeType.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(true, Description, userid, privailageid);

			int retval = super.feeType.updateFeeTypeRecord(feeType.getExName(), feeType.getExDescription(),
					feeType.getExIsActive(), date, feeType.getId());
			if (retval == 1) {
				info.put("status", "1");
				info.put("message", "FeeType updated successfully");
				return info;
			} else {
				info.put("status", "2");
				info.put("message", "FeeType id not present");
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> deleteFeeType(FeeType feeType) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<FeeType> task = super.feeType.findById(feeType.getId());
			if (task.isPresent()) {
				if (task.get().getExIsDelete()) {
					info.put("status", "2");
					info.put("message", "FeeType already deleted");
					return info;
				}
				Boolean exIsDelete = true;
				Boolean is_active = false;
				int result = super.feeType.deleteFeeType(exIsDelete, is_active, task.get().getId());
				if (result == 0) {
					info.put("status", "2");
					info.put("message", "Something went wrong");
					return info;
				}
				info.put("status", "1");
				info.put("message", "FeeType deleted successfully");
				return info;
			}
			info.put("status", "2");
			info.put("message", "FeeType id not present");
			return info;
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getFeeType(FeeType feeType) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<FeeType> tasks = super.feeType.findByExIsDelete(false);
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "FeeType not created");
				return info;
			} else {
				List dataList = new LinkedList();
				for (FeeType e : tasks) {
					Map<Object, Object> fess = new HashMap<Object, Object>();
					fess.put("id", e.getId());
					fess.put("exName", e.getExName());
					fess.put("exDescription", e.getExDescription());
					fess.put("exIsActive", e.getExIsActive());
					dataList.add(fess);
				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> createSemster(SemesterRequest request) {

		Map<String, String> info = new LinkedHashMap<>();
		try {
			System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>" + request.toString());

			List<Semster> tasks = new ArrayList<Semster>();
			tasks = super.semester.findByExNameAndExIsDelete(request.getExName().trim(), false);
			if (tasks.size() > 0) {
				info.put("status", "2");
				info.put("message", "semester name already exists");
				return info;
			}
			List<Semster> task = new ArrayList<Semster>();
			task = super.semester.findByExIdentifierAndExIsDeleteAndExIsActive(request.getExIdentifier(), false, true);
			if (task.size() > 0) {
				info.put("status", "2");
				info.put("message", "Identifier  already exists");
				return info;
			}

			request.setId(null);
			Date date = new Date();

			Long privailageid = 18L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = request.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(false, Description, userid, privailageid);

			Semster semester = new Semster();
			semester.setExCreateDate(date);

			semester.setExName(request.getExName().trim());
			semester.setExIdentifier(request.getExIdentifier());

			semester.setExDescription(request.getExDescription());
			semester.setExIsActive(request.getExIsActive());
			semester.setExIsDelete(false);

			super.semester.save(semester);
			info.put("status", "1");
			info.put("message", "semester created successfully");
			info.put("id", semester.getId().toString());
			return info;
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, String> updateSemster(SemesterRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			if (request.getExDescription() == null || request.getExDescription().equals("")
					|| request.getExDescription().equals("NA")) {
				info.put("status", "2");
				info.put("message", "Description  is required");
				return info;
			}
			Optional<Semster> Semester = super.semester.findByExIsDeleteAndId(false, request.getId());
			if (request.getId() == null || !Semester.isPresent()) {
				info.put("status", "2");
				info.put("message", "Semester id not present");
				return info;
			}
			List<Semster> tasks = new ArrayList<Semster>();
			tasks = super.semester.findByExNameAndExIsDelete(request.getExName().trim(), false);
			if (tasks.size() > 0 && tasks.get(0).getId() != request.getId()) {
				info.put("status", "2");
				info.put("message", "Semester already exists");
				return info;
			}
			List<Semster> task = new ArrayList<Semster>();
			task = super.semester.findByExIdentifierAndExIsDeleteAndExIsActive(request.getExIdentifier(), false, true);
			if (task.size() > 0 && task.get(0).getId() != request.getId()) {
				info.put("status", "2");
				info.put("message", "Identifier  already exists");
				return info;
			}

			Date date = new Date();
			Long privailageid = 18L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = request.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(true, Description, userid, privailageid);

			int retval = super.semester.updateSemsterRecord(request.getExName(), date, request.getExIsActive(),
					request.getExIdentifier(), request.getId(), request.getExDescription());
			if (retval == 1) {
				info.put("status", "1");
				info.put("message", "Semester updated successfully");
				return info;
			} else {
				info.put("status", "2");
				info.put("message", "Semester id not present");
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> deleteSemster(SemesterRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<Semster> task = super.semester.findById(request.getId());
			if (task.isPresent()) {
				if (task.get().getExIsDelete()) {
					info.put("status", "2");
					info.put("message", "Semester already deleted");
					return info;
				}
				Boolean exIsDelete = true;
				Boolean is_active = false;
				int result = super.semester.deleteSemster(exIsDelete, is_active, task.get().getId());
				if (result == 0) {
					info.put("status", "2");
					info.put("message", "Something went wrong");
					return info;
				}
				info.put("status", "1");
				info.put("message", "Semester deleted successfully");
				return info;
			}
			info.put("status", "2");
			info.put("message", "Semester id not present");
			return info;
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getSemster(SemesterRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<Semster> tasks = super.semester.findByExIsDelete(false);
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Semester not created");
				return info;
			} else {
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", tasks);
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> deleteCourseGroup(CourseGroupRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<CourseGroup> task = super.courseGroup.findById(request.getId());
			if (task.isPresent()) {
				if (task.get().getExIsDelete()) {
					info.put("status", "2");
					info.put("message", "CourseGroup already deleted");
					return info;
				}
				Boolean exIsDelete = true;
				Boolean is_active = false;
				int result = super.courseGroup.deleteCourseGroup(exIsDelete, is_active, task.get().getId());
				if (result == 0) {
					info.put("status", "2");
					info.put("message", "Something went wrong");
					return info;
				}
				info.put("status", "1");
				info.put("message", "CourseGroup deleted successfully");
				return info;
			}
			info.put("status", "2");
			info.put("message", "CourseGroup id not present");
			return info;
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getCourseGroup(CourseGroupRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<CourseGroup> tasks = super.courseGroup.findByExIsDelete(false);
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "CourseGroup not created");
				return info;
			} else {
				List dataList = new LinkedList();
				for (CourseGroup e : tasks) {
					Map<String, Object> CourseGroupdata = new HashMap();
					CourseGroupdata.put("id", e.getId());
					CourseGroupdata.put("exDegree", e.getDegree().getExName());
					CourseGroupdata.put("exDegreeId", e.getDegree().getId());
					CourseGroupdata.put("exProgramme", e.getProgrammes().getExName());
					CourseGroupdata.put("exProgrammeId", e.getProgrammes().getId());
					CourseGroupdata.put("exName", e.getExName());
					CourseGroupdata.put("exIsActive", e.getExIsActive());

					List<CourseGroupMapping> course = super.courseGroupMapping.findByCourseGroupId(e.getId());
					List<String> data = new ArrayList<String>();
					for (int j = 0; j < course.size(); j++) {
						String[] collageid = course.get(j).getCourses().getExName().split(".");
						for (int i = 0; i < collageid.length; i++) {
							data.add(collageid[i]);
						}
					}
					HashMap<String, ArrayList<String>> multiMap = new HashMap<String, ArrayList<String>>();
					multiMap.put("exName", (ArrayList<String>) data);
					CourseGroupdata.put("courses", multiMap);
					dataList.add(CourseGroupdata);
				}

				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> createCreditHours(CreditHoursRquest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			List<CreditHours> tasks = new ArrayList<CreditHours>();
			tasks = super.creditHours.findByExCreditHourTitleAndExIsDelete(request.getExCreditHourTitle().trim(),
					false);
			if (tasks.size() > 0) {
				info.put("status", "2");
				info.put("message", "CreditHourTitle already exists");
				return info;
			}
			Date date = new Date();

			Long privailageid = 23L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = request.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(false, Description, userid, privailageid);

			CreditHours creditHours = new CreditHours();

			request.setId(null);
			creditHours.setExIsDelete(false);
			creditHours.setExCreateDate(date);
			creditHours.setExIsActive(request.getExIsActive());

			creditHours.setExCreditHourPractical(request.getExCreditHourPractical());
			creditHours.setExCreditHourLecture(request.getExCreditHourLecture());
			creditHours.setExExternalMarks(request.getExExternalMarks());
			creditHours.setExExternalPassingMarks(request.getExExternalPassingMarks());
			creditHours.setExNoOfTopics(request.getExNoOfTopics());
			creditHours.setExPassingGradePoints(request.getExPassingGradePoints());
			creditHours.setExTotalMarks(request.getExTotalMarks());
			creditHours.setExCreditHourTitle(request.getExCreditHourTitle());
			creditHours.setExPassingGradePoints(request.getExPassingGradePoints());
			creditHours.setExCreditHourTutorials(request.getExCreditHourTutorials());
			creditHours.setExTotalCreditHour(request.getExTotalCreditHour());
			creditHours.setExName(request.getExName());
			super.creditHours.save(creditHours);
			info.put("status", "1");
			info.put("message", "CreditHours created successfully");
			info.put("id", creditHours.getId().toString());

			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> updateCreditHours(CreditHoursRquest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<CreditHours> CreditHours = super.creditHours.findByExIsDeleteAndId(false, request.getId());
			if (request.getId() == null || !CreditHours.isPresent()) {
				info.put("status", "2");
				info.put("message", "CreditHours id not present");
				return info;
			}

			List<CreditHours> tasks = new ArrayList<CreditHours>();
			tasks = super.creditHours.findByExCreditHourTitleAndExIsDelete(request.getExCreditHourTitle().trim(),
					false);
			if (tasks.size() > 0 && tasks.get(0).getId() != request.getId()) {
				info.put("status", "2");
				info.put("message", "CreditHours already exists");
				return info;
			}
			Date date = new Date();

			Long privailageid = 23L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = request.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(true, Description, userid, privailageid);

			int retval = super.creditHours.updateCreditHoursRecord(request.getExCreditHourPractical(),
					request.getExCreditHourLecture(), request.getExCreditHourTitle(), request.getExExternalMarks(),
					request.getExExternalPassingMarks(), request.getExIsActive(), request.getExNoOfTopics(),
					request.getExPassingGradePoints(), request.getExTotalMarks(), date, request.getExName(),
					request.getExTotalCreditHour(), request.getExCreditHourTutorials(), request.getId());

			if (retval == 1) {
				info.put("status", "1");
				info.put("message", "CreditHours updated successfully");
				return info;
			} else {
				info.put("status", "2");
				info.put("message", "CreditHours id not present");
				return info;

			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> deleteCreditHours(CreditHoursRquest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<CreditHours> task = super.creditHours.findById(request.getId());
			if (task.isPresent()) {
				if (task.get().getExIsDelete()) {
					info.put("status", "2");
					info.put("message", "CreditHours already deleted");
					return info;
				}
				Boolean exIsDelete = true;
				Boolean is_active = false;
				int result = super.creditHours.deleteCreditHours(exIsDelete, is_active, task.get().getId());
				if (result == 0) {
					info.put("status", "2");
					info.put("message", "Something went wrong");
					return info;
				}
				info.put("status", "1");
				info.put("message", "CreditHours deleted successfully");
				return info;
			}
			info.put("status", "2");
			info.put("message", "CreditHours id not present");
			return info;
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getCreditHours(CreditHoursRquest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<CreditHours> tasks = super.creditHours.findByExIsDelete(false);
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "CreditHours not created");
				return info;
			} else {
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", tasks);
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> createEvaluationType(EvaluationTypeRequest evaluationType) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			List<EvaluationType> tasks = new ArrayList<EvaluationType>();
			tasks = super.evaluationType.findByExNameAndExIsDeleteAndExIsActive(evaluationType.getExName().trim(),
					false, true);
			if (tasks.size() > 0) {
				info.put("status", "2");
				info.put("message", "EvaluationType already exists");
				return info;
			}

			Date date = new Date();
			Long privailageid = 24L;
			User userid = super.commonHelper.getuser(evaluationType.getUser());
			String Description = evaluationType.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(false, Description, userid, privailageid);
			EvaluationType evaluationType1 = new EvaluationType();
			evaluationType1.setId(null);
			evaluationType1.setExCreateDate(date);
			evaluationType1.setExIsDelete(false);
			evaluationType1.setExIsActive(evaluationType.getExIsActive());
			evaluationType1.setExName(evaluationType.getExName());
			super.evaluationType.save(evaluationType1);
			info.put("status", "1");
			info.put("message", "EvaluationType created successfully");
			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> updateEvaluationType(EvaluationTypeRequest evaluationType) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<EvaluationType> EvaluationType = super.evaluationType.findById(evaluationType.getId());
			if (evaluationType.getId() == null || !EvaluationType.isPresent()) {
				info.put("status", "2");
				info.put("message", "EvaluationType id not present");
				return info;
			}
			List<EvaluationType> tasks = new ArrayList<EvaluationType>();
			tasks = super.evaluationType.findByExNameAndExIsDelete(evaluationType.getExName().trim(), false);
			if (tasks.size() > 0 && tasks.get(0).getId() != evaluationType.getId()) {
				info.put("status", "2");
				info.put("message", "EvaluationType already exists");
				return info;
			}
			Date date = new Date();

			Long privailageid = 24L;
			User userid = super.commonHelper.getuser(evaluationType.getUser());
			String Description = evaluationType.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(true, Description, userid, privailageid);

			int retval = super.evaluationType.updateEvaluationTypeRecord(evaluationType.getExName(),
					evaluationType.getExIsActive(), date, evaluationType.getId());
			if (retval == 1) {
				info.put("status", "1");
				info.put("message", "EvaluationType updated successfully");
				return info;
			} else {
				info.put("status", "2");
				info.put("message", "EvaluationType id not present");
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> deleteEvaluationType(EvaluationTypeRequest evaluationType) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<EvaluationType> task = super.evaluationType.findById(evaluationType.getId());
			if (task.isPresent()) {
				if (task.get().getExIsDelete()) {
					info.put("status", "2");
					info.put("message", "EvaluationType already deleted");
					return info;
				}
				Boolean exIsDelete = true;
				Boolean is_active = false;
				int result = super.evaluationType.deleteEvaluationType(exIsDelete, is_active, task.get().getId());
				if (result == 0) {
					info.put("status", "2");
					info.put("message", "Something went wrong");
					return info;
				}
				info.put("status", "1");
				info.put("message", "EvaluationType deleted successfully");
				return info;
			}
			info.put("status", "2");
			info.put("message", "EvaluationType id not present");
			return info;
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getEvaluationType(EvaluationTypeRequest evaluationType) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<EvaluationType> tasks = super.evaluationType.findByExIsDelete(false);
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "EvaluationType not created");
				return info;
			} else {
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", tasks);
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> createStaffType(StaffTypeRequest staffType) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			List<StaffType> tasks = new ArrayList<StaffType>();
			tasks = super.staffType.findByExNameAndExIsDelete(staffType.getExName().trim(), false);
			if (tasks.size() > 0) {
				info.put("status", "2");
				info.put("message", "StaffType name already exists");
				return info;
			}

			Long privailageid = 19L;
			User userid = super.commonHelper.getuser(staffType.getUser());
			String Description = staffType.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(false, Description, userid, privailageid);

			StaffType staffType1 = new StaffType();

			staffType1.setId(null);

			staffType1.setExIsDelete(false);
			staffType1.setExIsActive(staffType.getExIsActive());
			staffType1.setExDescription(staffType.getExDescription());
			staffType1.setExName(staffType.getExName());
			super.staffType.save(staffType1);
			info.put("status", "1");
			info.put("message", "StaffType created successfully");
			info.put("id", staffType1.getId().toString());
			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> updateStaffType(StaffTypeRequest staffType) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<StaffType> StaffType = super.staffType.findById(staffType.getId());
			if (staffType.getId() == null || !StaffType.isPresent()) {
				info.put("status", "2");
				info.put("message", "StaffType id not present");
				return info;
			}
			List<StaffType> tasks = new ArrayList<StaffType>();
			tasks = super.staffType.findByExNameAndExIsDelete(staffType.getExName().trim(), false);
			if (tasks.size() > 0 && tasks.get(0).getId() != staffType.getId()) {
				info.put("status", "2");
				info.put("message", "StaffType name already exists");
				return info;
			}

			Long privailageid = 19L;
			User userid = super.commonHelper.getuser(staffType.getUser());
			String Description = staffType.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(true, Description, userid, privailageid);

			int retval = super.staffType.updateStaffTypeRecord(staffType.getExName(), staffType.getExDescription(),
					staffType.getExIsActive(), staffType.getId());
			if (retval == 1) {
				info.put("status", "1");
				info.put("message", "StaffType updated successfully");
				return info;
			} else {
				info.put("status", "2");
				info.put("message", "StaffType id not present");
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> deleteStaffType(StaffTypeRequest staffType) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<StaffType> task = super.staffType.findById(staffType.getId());
			if (task.isPresent()) {
				if (task.get().getExIsDelete()) {
					info.put("status", "2");
					info.put("message", "StaffType already deleted");
					return info;
				}
				Boolean exIsDelete = true;
				Boolean is_active = false;
				int result = super.staffType.deleteStaffType(exIsDelete, is_active, task.get().getId());
				if (result == 0) {
					info.put("status", "2");
					info.put("message", "Something went wrong");
					return info;
				}
				info.put("status", "1");
				info.put("message", "StaffType deleted successfully");
				return info;
			}
			info.put("status", "2");
			info.put("message", "StaffType id not present");
			return info;
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getStaffType(StaffTypeRequest staffType) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<StaffType> tasks = super.staffType.findByExIsDelete(false);
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "StaffType not created");
				return info;
			} else {
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", tasks);
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	/*
	 * @Override public Map<String, String> createRegistrationType(RegistrationType
	 * registrationType) { Map<String, String> info = new LinkedHashMap<>(); try {
	 * List<RegistrationType> tasks = new ArrayList<RegistrationType>(); tasks =
	 * super.registrationType.findByExNameAndExIsDelete(registrationType.getExName()
	 * .trim() , false); if (tasks.size() > 0) { info.put("status", "2");
	 * info.put("message", "RegistrationType name already exists"); return info; }
	 * registrationType.setId(null); Date date = new Date();
	 * registrationType.setExCreateDate(date);
	 * registrationType.setExIsDelete(false);
	 * registrationType.setExIsActive(registrationType.getExIsActive());
	 * super.registrationType.save(registrationType); info.put("status", "1");
	 * info.put("message", "RegistrationType created successfully"); return info;
	 * 
	 * }catch(Exception e) { logger.error("Exception occured" + e); StringWriter
	 * errors = new StringWriter(); e.printStackTrace(new PrintWriter(errors));
	 * logger.error(errors.toString()); info.put("status", "0"); info.put("message",
	 * "Something went wrong"); return info; } }
	 * 
	 * @Override public Map<String, String> updateRegistrationType(RegistrationType
	 * registrationType) { Map<String, String> info = new LinkedHashMap<>(); try {
	 * Optional<RegistrationType> RegistrationType =
	 * super.registrationType.findById(registrationType.getId()); if
	 * (registrationType.getId() == null || !RegistrationType.isPresent()) {
	 * info.put("status", "2"); info.put("message",
	 * "RegistrationType id not present"); return info; }
	 * 
	 * List<RegistrationType> tasks = new ArrayList<RegistrationType>(); tasks =
	 * super.registrationType.findByExNameAndExIsDelete(registrationType.getExName()
	 * .trim() , false); if (tasks.size() > 0 && tasks.get(0).getId() !=
	 * registrationType.getId()) { info.put("status", "2"); info.put("message",
	 * "RegistrationType name already exists"); return info; } Date date = new
	 * Date(); int retval =
	 * super.registrationType.updateRegistrationTypeRecord(registrationType.
	 * getExName(), registrationType.getExIsActive(), date ,
	 * registrationType.getId()); if (retval == 1) { info.put("status", "1");
	 * info.put("message", "RegistrationType updated successfully"); return info; }
	 * else { info.put("status", "2"); info.put("message",
	 * "RegistrationType id not present"); return info; }
	 * 
	 * }catch(Exception e) { logger.error("Exception occured" + e); StringWriter
	 * errors = new StringWriter(); e.printStackTrace(new PrintWriter(errors));
	 * logger.error(errors.toString()); info.put("status", "0"); info.put("message",
	 * "Something went wrong"); return info; }
	 * 
	 * }
	 * 
	 * @Override public Map<String, String> deleteRegistrationType(RegistrationType
	 * registrationType) { Map<String, String> info = new LinkedHashMap<>(); try {
	 * Optional<RegistrationType> task =
	 * super.registrationType.findById(registrationType.getId()); if
	 * (task.isPresent()) { if(task.get().getExIsDelete()) { info.put("status",
	 * "2"); info.put("message", "RegistrationType already deleted"); return info; }
	 * Boolean exIsDelete = true; Boolean is_active = false; int result =
	 * super.registrationType.deleteRegistrationType(exIsDelete, is_active,
	 * task.get().getId()); if (result == 0) { info.put("status", "2");
	 * info.put("message", "Something went wrong"); return info; }
	 * info.put("status", "1"); info.put("message",
	 * "RegistrationType deleted successfully"); return info; } info.put("status",
	 * "2"); info.put("message", "RegistrationType id not present"); return info; }
	 * catch (Exception e) { logger.error("Exception occured" + e); StringWriter
	 * errors = new StringWriter(); e.printStackTrace(new PrintWriter(errors));
	 * logger.error(errors.toString()); info.put("status", "0"); info.put("message",
	 * "Something went wrong"); return info; } }
	 * 
	 * @Override public Map<String, Object> getRegistrationType(RegistrationType
	 * registrationType) { Map<String, Object> info = new LinkedHashMap<>(); try {
	 * List<RegistrationType> tasks =
	 * super.registrationType.findByExIsDelete(false); if(tasks.size() <=0) {
	 * info.put("status", "2"); info.put("message", "RegistrationType not created");
	 * return info; }else { info.put("status", "1"); info.put("message", "success");
	 * info.put("details", tasks); return info; }
	 * 
	 * } catch (Exception e) { logger.error("Exception occured" + e); StringWriter
	 * errors = new StringWriter(); e.printStackTrace(new PrintWriter(errors));
	 * logger.error(errors.toString()); info.put("status", "0"); info.put("message",
	 * "Something went wrong"); return info; } }
	 */
	@Override
	public Map<String, String> createHostelFeeType(HostelFeeTypeRequest hostelFeeType) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			List<HostelFeeType> tasks = new ArrayList<HostelFeeType>();
			tasks = super.hostelFeeType.findByExNameAndExIsDelete(hostelFeeType.getExName().trim(), false);
			if (tasks.size() > 0) {
				info.put("status", "2");
				info.put("message", "HostelFeeType already exists");
				return info;
			}

			Long privailageid = 21L;
			User userid = super.commonHelper.getuser(hostelFeeType.getUser());
			String Description = hostelFeeType.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(false, Description, userid, privailageid);
			HostelFeeType hostelFeeType1 = new HostelFeeType();
			Date date = new Date();
			hostelFeeType1.setId(null);
			hostelFeeType1.setExCreateDate(date);
			hostelFeeType1.setExIsDelete(false);
			hostelFeeType1.setExIsActive(hostelFeeType.getExIsActive());
			hostelFeeType1.setExDescription(hostelFeeType.getExDescription());
			hostelFeeType1.setExName(hostelFeeType.getExName());
			super.hostelFeeType.save(hostelFeeType1);
			info.put("status", "1");
			info.put("message", "HostelFeeType created successfully");
			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> updateHostelFeeType(HostelFeeTypeRequest hostelFeeType) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<HostelFeeType> HostelFeeType = super.hostelFeeType.findById(hostelFeeType.getId());
			if (hostelFeeType.getId() == null || !HostelFeeType.isPresent()) {
				info.put("status", "2");
				info.put("message", "HostelFeeType id not present");
				return info;
			}

			List<HostelFeeType> tasks = new ArrayList<HostelFeeType>();
			tasks = super.hostelFeeType.findByExNameAndExIsDelete(hostelFeeType.getExName().trim(), false);
			if (tasks.size() > 0 && tasks.get(0).getId() != hostelFeeType.getId()) {
				info.put("status", "2");
				info.put("message", "HostelFeeType already exists");
				return info;
			}
			Date date = new Date();

			Long privailageid = 21L;
			User userid = super.commonHelper.getuser(hostelFeeType.getUser());
			String Description = hostelFeeType.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(true, Description, userid, privailageid);

			int retval = super.hostelFeeType.updateHostelFeeTypeRecord(hostelFeeType.getExName(),
					hostelFeeType.getExDescription(), hostelFeeType.getExIsActive(), date, hostelFeeType.getId());
			if (retval == 1) {
				info.put("status", "1");
				info.put("message", "HostelFeeType updated successfully");
				return info;
			} else {
				info.put("status", "2");
				info.put("message", "HostelFeeType id not present");
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> deleteHostelFeeType(HostelFeeTypeRequest hostelFeeType) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<HostelFeeType> task = super.hostelFeeType.findById(hostelFeeType.getId());
			if (task.isPresent()) {
				if (task.get().getExIsDelete()) {
					info.put("status", "2");
					info.put("message", "HostelFeeType already deleted");
					return info;
				}
				Boolean exIsDelete = true;
				Boolean is_active = false;
				int result = super.hostelFeeType.deleteHostelFeeType(exIsDelete, is_active, task.get().getId());
				if (result == 0) {
					info.put("status", "2");
					info.put("message", "Something went wrong");
					return info;
				}
				info.put("status", "1");
				info.put("message", "HostelFeeType deleted successfully");
				return info;
			}
			info.put("status", "2");
			info.put("message", "HostelFeeType id not present");
			return info;
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getHostelFeeType(HostelFeeTypeRequest hostelFeeType) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<HostelFeeType> tasks = super.hostelFeeType.findByExIsDelete(false);
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "HostelFeeType not created");
				return info;
			} else {
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", tasks);
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> createRoomMaster(RoomMasterRequest roomMaster) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			List<RoomMaster> tasks = new ArrayList<RoomMaster>();
			tasks = super.roomMaster.findByExNameAndExIsDeleteAndCollegesId(roomMaster.getExName().trim(), false,
					roomMaster.getColleges());
			if (tasks.size() > 0) {
				info.put("status", "2");
				info.put("message", "Room name already exists");
				return info;
			}

			Optional<Colleges> clgid = super.colleges.findByIdAndExIsDeleteAndExIsActive(roomMaster.getColleges(),
					false, true);
			if (!clgid.isPresent()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}

			Date date = new Date();

			Long privailageid = 16L;
			User userid = super.commonHelper.getuser(roomMaster.getUser());
			String Description = roomMaster.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(false, Description, userid, privailageid);

			RoomMaster room = new RoomMaster();
			room.setId(null);
			room.setExCreateDate(date);
			room.setExName(roomMaster.getExName());
			room.setExRoomNumber(roomMaster.getExRoomNumber());
			room.setExRoomCapacity(roomMaster.getExRoomCapacity());
			room.setExIsDelete(false);
			room.setExIsActive(roomMaster.getExIsActive());
			room.setColleges(clgid.get());
			room.setExNumberOfStudent(roomMaster.getExNumberOfStudent());
			room.setNoOfInvigilator(roomMaster.getNoOfInvigilator());
			super.roomMaster.save(room);

			info.put("status", "1");
			info.put("message", "Room created successfully");
			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> updateRoomMaster(RoomMasterRequest roomMaster) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<RoomMaster> RoomMaster = super.roomMaster.findById(roomMaster.getId());
			if (roomMaster.getId() == null || !RoomMaster.isPresent()) {
				info.put("status", "2");
				info.put("message", "RoomMaster id not present");
				return info;
			}

			Optional<Colleges> clgid = super.colleges.findByIdAndExIsDeleteAndExIsActive(roomMaster.getColleges(),
					false, true);
			if (!clgid.isPresent()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}

			List<RoomMaster> tasks = new ArrayList<RoomMaster>();
			tasks = super.roomMaster.findByExNameAndExIsDeleteAndCollegesId(roomMaster.getExName().trim(), false,
					roomMaster.getColleges());
			if (tasks.size() > 0 && tasks.get(0).getId() != roomMaster.getId()) {
				info.put("status", "2");
				info.put("message", "RoomMaster name already exists");
				return info;
			}
			Date date = new Date();

			Long privailageid = 16L;
			User userid = super.commonHelper.getuser(roomMaster.getUser());
			String Description = roomMaster.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(true, Description, userid, privailageid);

			int retval = super.roomMaster.updateRoomMasterRecord(roomMaster.getExName(), roomMaster.getExRoomNumber(),
					clgid.get(), roomMaster.getExRoomCapacity(), roomMaster.getExIsActive(), date, roomMaster.getId(),
					roomMaster.getExNumberOfStudent(),roomMaster.getNoOfInvigilator());
			if (retval == 1) {
				info.put("status", "1");
				info.put("message", "RoomMaster updated successfully");
				return info;
			} else {
				info.put("status", "2");
				info.put("message", "RoomMaster id not present");
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> deleteRoomMaster(RoomMasterRequest roomMaster) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<RoomMaster> task = super.roomMaster.findById(roomMaster.getId());
			if (task.isPresent()) {
				if (task.get().getExIsDelete()) {
					info.put("status", "2");
					info.put("message", "RoomMaster already deleted");
					return info;
				}
				Boolean exIsDelete = true;
				Boolean is_active = false;
				int result = super.roomMaster.deleteRoomMaster(exIsDelete, is_active, task.get().getId());
				if (result == 0) {
					info.put("status", "2");
					info.put("message", "Something went wrong");
					return info;
				}
				info.put("status", "1");
				info.put("message", "RoomMaster deleted successfully");
				return info;
			}
			info.put("status", "2");
			info.put("message", "RoomMaster id not present");
			return info;
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getRoomMaster(RoomMasterRequest roomMaster) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<RoomMaster> tasks = super.roomMaster.findByExIsDelete(false);
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "RoomMaster not created");
				return info;
			} else {
				List dataList = new LinkedList();
				for (RoomMaster e : tasks) {
					Map<Object, Object> RoomMasterdata = new HashMap<Object, Object>();
					RoomMasterdata.put("id", e.getId());
					RoomMasterdata.put("exName", e.getExName());
					RoomMasterdata.put("exCollege", e.getColleges().getExName());
					RoomMasterdata.put("exCollegeId", e.getColleges().getId());
					RoomMasterdata.put("exRoomNumber", e.getExRoomNumber());
					RoomMasterdata.put("exIsActive", e.getExIsActive());
					RoomMasterdata.put("exIsDelete", e.getExIsDelete());
					RoomMasterdata.put("exRoomCapacity", e.getExRoomCapacity());
					RoomMasterdata.put("exNumberOfStudent", e.getExNumberOfStudent());
					RoomMasterdata.put("noOfInvigilator", e.getNoOfInvigilator());
					dataList.add(RoomMasterdata);
				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> createDesignation(DesignationRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			List<Designation> tasks = new ArrayList<Designation>();

			for (int i = 0; i < request.getDepartment().size(); i++) {
				long number = request.getDepartment().get(i);
				Long col = new Long(number);

				tasks = super.designation.findByExNameAndExIsDeleteAndDepartmentId(request.getExName().trim(), false,
						col);

				if (tasks.size() > 0) {
					info.put("status", "2");
					info.put("message", "Designation name already exists with particular Department");
					return info;
				}
			}
			List<Department> dept = new ArrayList<Department>();

			for (int i = 0; i < request.getDepartment().size(); i++) {
				long number = (long) request.getDepartment().get(i);
				Long col = new Long(number);

				Optional<Department> depts = super.department.findByIdAndExIsDeleteAndExIsActive(col, false, true);
				if (!depts.isPresent()) {
					info.put("status", "2");
					info.put("message", "Department not present");
					return info;
				}
				dept.add(depts.get());
			}
			System.out.println("__________________" + dept);
			Date date = new Date();
			Long privailageid = 10L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = request.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(false, Description, userid, privailageid);
			System.out.println("><><" + audit);
			Designation desig = new Designation();

			desig.setExCreateDate(date);
			desig.setExName(request.getExName());
			desig.setExDescription(request.getExDescription());
			desig.setDepartment(dept);
			desig.setExIsDelete(false);
			desig.setExIsActive(request.getExIsActive());
			super.designation.save(desig);
			info.put("status", "1");
			info.put("message", "Designation created successfully");
			info.put("id", desig.getId().toString());

			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> updateDesignation(DesignationRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<Designation> Designation = super.designation.findById(request.getId());
			if (request.getId() == null || !Designation.isPresent()) {
				info.put("status", "2");
				info.put("message", "Designation id not present");
				return info;
			}
			List<Department> dept = new ArrayList<Department>();

			for (int i = 0; i < request.getDepartment().size(); i++) {
				long number = (long) request.getDepartment().get(i);
				Long col = new Long(number);

				Optional<Department> depts = super.department.findByIdAndExIsDeleteAndExIsActive(col, false, true);
				if (!depts.isPresent()) {
					info.put("status", "2");
					info.put("message", "Department not present");
					return info;
				}

			}
			List<Designation> tasks = new ArrayList<Designation>();

			/*
			 * for (int i = 0; i < request.getDepartment().size(); i++) { long number =
			 * request.getDepartment().get(i); Long col = new Long(number); tasks =
			 * super.designation.findByExNameAndExIsDeleteAndDepartmentId(request.getExName(
			 * ).trim(), false, col);
			 * 
			 * if (tasks.size() > 0) { info.put("status", "2"); info.put("message",
			 * "Designation name already exists with particular Department"); return info; }
			 * }
			 */

			Date date = new Date();

			Long privailageid = 10L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = request.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(true, Description, userid, privailageid);
			int retval = super.designation.updateDesignationRecord(request.getExName(), request.getExDescription(),
					request.getExIsActive(), date, request.getId());
			if (retval == 1) {

				super.designation.deleteDesi(request.getId());
				for (int i = 0; i < request.getDepartment().size(); i++) {
					Long number = request.getDepartment().get(i);
					Long col = new Long(number);
					super.designation.saveDeptDesi(request.getId(), col);
				}
				info.put("status", "1");
				info.put("message", "Designation updated successfully");
				return info;
			} else {
				info.put("status", "2");
				info.put("message", "Designation id not present");
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> deleteDesignation(DesignationRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<Designation> task = super.designation.findById(request.getId());
			if (task.isPresent()) {
				if (task.get().getExIsDelete()) {
					info.put("status", "2");
					info.put("message", "Designation already deleted");
					return info;
				}
				Boolean exIsDelete = true;
				Boolean is_active = false;
				int result = super.designation.deleteDesignation(exIsDelete, is_active, task.get().getId());
				if (result == 0) {
					info.put("status", "2");
					info.put("message", "Something went wrong");
					return info;
				}
				info.put("status", "1");
				info.put("message", "Designation deleted successfully");
				return info;
			}
			info.put("status", "2");
			info.put("message", "Designation id not present");
			return info;
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getDesignation(DesignationRequest request) {

		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<Designation> tasks = super.designation.findByExIsDelete(false);
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Designation not created");
				return info;
			} else {
				List dataList = new LinkedList();
				for (Designation e : tasks) {
					Map<Object, Object> Designationdata = new HashMap<Object, Object>();
					Designationdata.put("id", e.getId());
					Designationdata.put("exName", e.getExName());

					List department = new LinkedList();
					List departmentId = new LinkedList();
					for (int i = 0; i < e.getDepartment().size(); i++) {
						department.add(e.getDepartment().get(i).getExName());
						departmentId.add(e.getDepartment().get(i).getId());
					}

					Designationdata.put("exDepartment", department);
					Designationdata.put("exDepartmentId", departmentId);
					Designationdata.put("exDescription", e.getExDescription());
					Designationdata.put("exIsActive", e.getExIsActive());
					Designationdata.put("exIsDelete", e.getExIsDelete());
					dataList.add(Designationdata);
				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> createUser(UserRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {

			String dcrypt = super.EncryptionAndDecryption.getDecryptedStringaddhexkey(request.getExPassword().trim());

			List<User> tasks = new ArrayList<User>();
			tasks = super.user.findByExUserNameAndExIsDelete(request.getExUserName().trim(), false);
			if (tasks.size() > 0) {
				info.put("status", "2");
				info.put("message", "User name already exists");
				return info;
			}
			Optional<Role> role = super.role.findByIdAndExIsDeleteAndExIsActive(request.getRole(), false, true);
			if (!role.isPresent()) {
				info.put("status", "2");
				info.put("message", "Role Id  not present");
				return info;
			}
			List<Colleges> collist = new ArrayList<Colleges>();
			for (int i = 0; i < request.getColleges().size(); i++) {
				Long number = request.getColleges().get(i);
				Long col = new Long(number);
				Optional<Colleges> college = super.colleges.findByIdAndExIsDeleteAndExIsActive(col, false, true);
				if (!college.isPresent()) {
					info.put("status", "2");
					info.put("message", "Selected college not present");
					return info;
				}
				collist.add(college.get());
			}
			request.setId(null);
			List<Department> department = new ArrayList<Department>();
			for (int i = 0; i < request.getDepartment().size(); i++) {
				Long number = request.getDepartment().get(i);
				Long col = new Long(number);
				Optional<Department> departments = super.department.findByIdAndExIsDeleteAndExIsActive(col, false,
						true);
				if (!departments.isPresent()) {
					info.put("status", "2");
					info.put("message", "Selected department not present");
					return info;
				}
				department.add(departments.get());
			}
			List<Degree> degree = new ArrayList<Degree>();
			for (int i = 0; i < request.getDegree().size(); i++) {
				Long number = request.getDegree().get(i);
				Long col = new Long(number);
				Optional<Degree> degrees = super.degree.findByIdAndExIsDeleteAndExIsActive(col, false, true);
				if (!degrees.isPresent()) {
					info.put("status", "2");
					info.put("message", "Selected degree not present");
					return info;
				}
				degree.add(degrees.get());
			}
			List<Programmes> Programmes = new ArrayList<Programmes>();
			for (int i = 0; i < request.getProgrammes().size(); i++) {
				Long number = request.getProgrammes().get(i);
				Long col = new Long(number);
				Optional<Programmes> Program = super.programmes.findByIdAndExIsDeleteAndExIsActive(col, false, true);
				if (!Program.isPresent()) {
					info.put("status", "2");
					info.put("message", "Selected programmes not present");
					return info;
				}
				Programmes.add(Program.get());
			}

			Date date = new Date();
			SimpleDateFormat date1 = new SimpleDateFormat("dd/MM/yyyy");
			SimpleDateFormat time = new SimpleDateFormat("HH:mm");

			User user = new User();

			if (request.getExStartTime() != null && !request.getExStartTime().trim().equals("")) {
				user.setExStartTime(time.parse(request.getExStartTime()));
			}

			if (request.getExEndTime() != null && !request.getExEndTime().trim().equals("")) {
				user.setExEndTime(time.parse(request.getExEndTime()));
			}

			if (request.getExStartDate() != null && !request.getExStartDate().trim().equals("")) {
				user.setExStartDate(date1.parse(request.getExStartDate()));
			}

			if (request.getExEndDate() != null && !request.getExEndDate().trim().equals("")) {
				user.setExEndDate(date1.parse(request.getExEndDate()));
			}

			user.setCollege(collist);
			user.setDegree(degree);
			user.setProgrammes(Programmes);
			user.setDepartment(department);
			user.setExCreateDate(date);
			user.setExIsDelete(false);
			user.setExIsActive(request.getExIsActive());
			user.setExUserName(request.getExUserName());
			user.setExName(request.getExName());
			user.setExEmail(request.getExEmail());
			user.setExMobile(request.getExMobile());
			user.setExPassword(dcrypt);
			user.setCollege(collist);
			user.setRole(role.get());
			super.user.save(user);
			info.put("status", "1");
			info.put("message", "User created successfully");
			return info;
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> updateUser(UserRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<User> User = super.user.findById(request.getId());
			if (request.getId() == null || !User.isPresent()) {
				info.put("status", "2");
				info.put("message", "User id not present");
				return info;
			}

			List<Colleges> collist = new ArrayList<Colleges>();
			for (int i = 0; i < request.getColleges().size(); i++) {
				Long number = request.getColleges().get(i);
				Long col = new Long(number);
				Optional<Colleges> college = super.colleges.findByIdAndExIsDeleteAndExIsActive(col, false, true);
				if (!college.isPresent()) {
					info.put("status", "2");
					info.put("message", "Selected college not present");
					return info;
				}
				collist.add(college.get());
			}
			List<User> tasks = new ArrayList<User>();
			tasks = super.user.findByExUserNameAndExIsDelete(request.getExUserName().trim(), false);
			if (tasks.size() > 0 && tasks.get(0).getId() != request.getId()) {
				info.put("status", "2");
				info.put("message", "User already exists");
				return info;
			}

			SimpleDateFormat date1 = new SimpleDateFormat("dd/MM/yyyy");
			SimpleDateFormat time = new SimpleDateFormat("HH:mm");

			Date setExStartTime = null;
			if (request.getExStartTime() != null && !request.getExStartTime().trim().equals("")) {
				setExStartTime = time.parse(request.getExStartTime());
			}

			Date setExEndTime = null;
			if (request.getExEndTime() != null && !request.getExEndTime().trim().equals("")) {
				setExEndTime = time.parse(request.getExEndTime());
			}

			Date setExStartDate = null;
			if (request.getExStartDate() != null && !request.getExStartDate().trim().equals("")) {
				setExStartDate = date1.parse(request.getExStartDate());
			}

			Date setExEndDate = null;
			if (request.getExEndDate() != null && !request.getExEndDate().trim().equals("")) {
				setExEndDate = date1.parse(request.getExEndDate());
			}

			String dcrypt = super.EncryptionAndDecryption.getDecryptedStringaddhexkey(request.getExPassword().trim());
			Date date = new Date();
			int retval = super.user.updateUserRecord(request.getExName(), dcrypt, request.getExMobile(),
					request.getExIsActive(), request.getExEmail(), date, request.getId(), request.getExUserName(),
					request.getRole(), setExStartTime, setExEndTime, setExStartDate, setExEndDate);
			if (retval == 1) {
				super.user.deleteuserCollege(request.getId());
				for (int i = 0; i < request.getColleges().size(); i++) {
					Long number = request.getColleges().get(i);
					Long col = new Long(number);
					super.user.saveuserCollege(request.getId(), col);
				}
				super.user.deleteuserDegree(request.getId());
				for (int i = 0; i < request.getDegree().size(); i++) {
					Long number = request.getDegree().get(i);
					Long col = new Long(number);
					super.user.saveuserDegree(request.getId(), col);
				}

				super.user.deleteuserDepartment(request.getId());
				for (int i = 0; i < request.getDepartment().size(); i++) {
					Long number = request.getDepartment().get(i);
					Long col = new Long(number);
					super.user.saveuserDepartment(request.getId(), col);
				}
				super.user.deleteuserprogrammes(request.getId());
				for (int i = 0; i < request.getProgrammes().size(); i++) {
					Long number = request.getProgrammes().get(i);
					Long col = new Long(number);
					super.user.saveuserprogramme(request.getId(), col);
				}

				info.put("status", "1");
				info.put("message", "user updated successfully");
				return info;
			} else {
				info.put("status", "2");
				info.put("message", "User id not present");
				return info;
			}

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> deleteUser(UserRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<User> task = super.user.findById(request.getId());
			if (task.isPresent()) {
				if (task.get().getExIsDelete()) {
					info.put("status", "2");
					info.put("message", "User already deleted");
					return info;
				}
				Boolean exIsDelete = true;
				Boolean is_active = false;
				int result = super.user.deleteUser(exIsDelete, is_active, task.get().getId());
				if (result == 0) {
					info.put("status", "2");
					info.put("message", "Something went wrong");
					return info;
				}
				info.put("status", "1");
				info.put("message", "User deleted successfully");
				return info;
			}
			info.put("status", "2");
			info.put("message", "User id not present");
			return info;
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getUser(UserRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<User> tasks = super.user.findByExIsDelete(false);
			if (tasks.size() > 0) {
				String serverurl = commonHelper.getSettingValue("SERVER_IP");
				List dataList = new LinkedList();
				for (User e : tasks) {
					List college = new LinkedList();
					List collegeId = new LinkedList();

					List degree = new LinkedList();
					List degreeId = new LinkedList();

					List programmes = new LinkedList();
					List programmesId = new LinkedList();

					List department = new LinkedList();
					List departmentId = new LinkedList();

					Map<Object, Object> data = new HashMap<Object, Object>(); //

					for (int i = 0; i < e.getCollege().size(); i++) {
						college.add(e.getCollege().get(i).getExName());
						collegeId.add(e.getCollege().get(i).getId());
					}

					for (int i = 0; i < e.getDegree().size(); i++) {
						degree.add(e.getDegree().get(i).getExName());
						degreeId.add(e.getDegree().get(i).getId());
					}

					for (int i = 0; i < e.getProgrammes().size(); i++) {
						programmes.add(e.getProgrammes().get(i).getExName());
						programmesId.add(e.getProgrammes().get(i).getId());
					}

					for (int i = 0; i < e.getDepartment().size(); i++) {
						department.add(e.getDepartment().get(i).getExName());
						departmentId.add(e.getDepartment().get(i).getId());
					}

					data.put("id", e.getId());
					data.put("collegesId", collegeId);
					data.put("colleges", college);
					data.put("degreeId", degreeId);
					data.put("degree", degree);
					data.put("programmesId", programmesId);
					data.put("programmes", programmes);
					data.put("departmentId", departmentId);
					data.put("department", department);

					data.put("exStartDate",
							e.getExStartDate() == null ? "NA" : e.getExStartDate().toString().substring(0, 10));
					data.put("exEndDate",
							e.getExEndDate() == null ? "NA" : e.getExEndDate().toString().substring(0, 10));
					data.put("exStartTime",
							e.getExStartTime() == null ? "NA" : e.getExStartTime().toString().substring(0, 5));
					data.put("exEndTime",
							e.getExEndTime() == null ? "NA" : e.getExEndTime().toString().substring(0, 5));

					data.put("exUserName", e.getExUserName());
					data.put("exName", e.getExName());
					data.put("exMobile", e.getExMobile());
					data.put("exEmail", e.getExEmail());
					data.put("role", e.getRole() == null ?"NA" : e.getRole().getExName());
					data.put("roleId", e.getRole() == null ?"NA" :  e.getRole().getId());
					data.put("exIsAdmin", e.getExIsAdmin());
					data.put("exName", e.getExName());
					data.put("exIsActive", e.getExIsActive());
					data.put("exPhoto",
							(e.getExPhoto() == null || e.getExPhoto() == "NA") ? "NA" : serverurl + e.getExPhoto());
					dataList.add(data);
				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;

			} else {
				info.put("status", "2");
				info.put("message", "No Record Found");
				return info;
			}

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> createCourses(CoursesRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			List<Courses> tasks = new ArrayList<Courses>();
			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}

			Optional<Colleges> clgid = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);

			if (!clgid.isPresent()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}

			Optional<Programmes> programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!programmes.isPresent()) {
				info.put("status", "2");
				info.put("message", "Programme not present");
				return info;
			}
			Optional<ProgrammeYear> programmeYear = super.programmeYear
					.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
			if (!programmeYear.isPresent()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!sem.isPresent()) {
				info.put("status", "2");
				info.put("message", "Semster not present");
				return info;
			}
			Optional<CreditHours> creditHours = super.creditHours.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getCreditHours());
			if (!creditHours.isPresent()) {
				info.put("status", "2");
				info.put("message", "CreditHours not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<Stream> stream = super.stream.findByIdAndExIsDeleteAndExIsActive(request.getStream(), false, true);
			if (!stream.isPresent()) {
				info.put("status", "2");
				info.put("message", "Stream not present");
				return info;
			}

			Optional<Batch> batch = super.batch.findByExIsDeleteAndExIsActiveAndId(false, true, request.getBatch());
			if (!batch.isPresent()) {
				info.put("status", "2");
				info.put("message", "Batch not present");
				return info;
			}

			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department not present");
				return info;
			}

			tasks = super.courses
					.findByExNameAndAcademicYearIdAndProgrammesIdAndProgrammeYearIdAndStreamIdAndDegreeIdAndExIsDeleteAndExIsActiveAndCollegesIdAndBatchIdAndExIsSatisfactoryAndExIsProjectAndExIsSeminarAndExIsElectiveAndExIsIndustrialVisitAndExIsVillageAdoptionAndExIsResearchProjectAndExIsIndustrialTrainingInternship(
							request.getExName(), request.getAcademicYear(), request.getProgrammes(),
							request.getProgrammeYear(), request.getStream(), request.getDegree(), false, true,
							request.getColleges(), request.getBatch(), request.getExIsSatisfactory(),
							request.getExIsProject(), request.getExIsSeminar(), request.getExIsElective(),request.getExIsIndustrialVisit(),request.getExIsVillageAdoption(),request.getExIsResearchProject(),request.getExIsIndustrialTrainingOrInternship());
			if (tasks.size() > 0) {
				info.put("status", "2");
				info.put("message", "Course name already exists");
				return info;
			}

			List<CoursesType> coursestype = new ArrayList<CoursesType>();
			for (int i = 0; i < request.getCoursesType().size(); i++) {
				Long number = request.getCoursesType().get(i);
				Long col = new Long(number);
				Optional<CoursesType> college = super.coursestype.findByIdAndExIsDeleteAndExIsActive(col, false, true);
				if (!college.isPresent()) {
					info.put("status", "2");
					info.put("message", "Selected Courses type not present");
					return info;
				}
				coursestype.add(college.get());
			}

			Date date = new Date();

			Long privailageid = 9L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = request.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(false, Description, userid, privailageid);

			Courses courses = new Courses();
			courses.setExCreateDate(date);
			courses.setExName(request.getExName());
			courses.setExDescription(request.getExDescription());
			courses.setProgrammes(programmes.get());
			courses.setAcademicYear(academic.get());
			courses.setExIsDelete(false);
			courses.setDegree(degree.get());
			courses.setCoursesType(coursestype);
			courses.setDepartment(department.get());
			courses.setExIsActive(request.getExIsActive());
			courses.setExCoursesCode(request.getExCoursesCode());
			courses.setProgrammeYear(programmeYear.get());
			courses.setStream(stream.get());
			courses.setSemester(sem.get());
			courses.setBatch(batch.get());
			courses.setCreditHours(creditHours.get());
			courses.setColleges(clgid.get());
			courses.setExIsProject(request.getExIsProject());
			courses.setExIsSeminar(request.getExIsSeminar());
			courses.setExIsSatisfactory(request.getExIsSatisfactory());
			courses.setExIsElective(request.getExIsElective());
			courses.setExSubjectCode(request.getExSubjectCode());
			courses.setExIscompulsory(request.getExIscompulsory());
			courses.setExIsIndustrialTrainingInternship(request.getExIsIndustrialTrainingOrInternship());
			courses.setExIsIndustrialVisit(request.getExIsIndustrialVisit());
			courses.setExIsVillageAdoption(request.getExIsVillageAdoption());
			courses.setExIsResearchProject(request.getExIsResearchProject());
			
			super.courses.save(courses);
			info.put("status", "1");
			info.put("message", "Course created successfully");
			info.put("id", courses.getId().toString());
			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> createDepartment(DepartmentRequest request) {
		// TODO Auto-generated method stub
		Map<String, String> info = new LinkedHashMap<>();
		try {
			List<Department> tasks = new ArrayList<Department>();
			if (request.getExIsActive() == null) {
				info.put("status", "2");
				info.put("message", "IsActive is required 0/1");
				return info;
			}
			if (request.getExName() == null || request.getExName().equals("") || request.getExName().equals("NA")) {
				info.put("status", "2");
				info.put("message", "Name is required");
				return info;
			}
			tasks = super.department.findByExNameAndExIsDeleteAndProgrammesId(request.getExName(), false,
					request.getProgrammes());
			if (tasks.size() > 0) {
				info.put("status", "2");
				info.put("message", "Department name already exists with particular Programme");
				return info;
			}
			tasks = super.department.findByExIdentifierAndExIsDeleteAndProgrammesId(request.getExIdentifier(), false,
					request.getProgrammes());
			if (tasks.size() > 0) {
				info.put("status", "2");
				info.put("message", "Identifier  already exists with particular Programme");
				return info;
			}

			Optional<Programmes> programmes = super.programmes
					.findByIdAndExIsDeleteAndExIsActive(request.getProgrammes(), false, true);
			if (!programmes.isPresent()) {
				info.put("status", "2");
				info.put("message", "programmes not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent()) {
				info.put("status", "2");
				info.put("message", "degree not present");
				return info;
			}

			List<Colleges> collist = new ArrayList<Colleges>();
			for (int i = 0; i < request.getColleges().size(); i++) {
				Long number = request.getColleges().get(i);
				Long col = new Long(number);
				Optional<Colleges> college = super.colleges.findByIdAndExIsDeleteAndExIsActive(col, false, true);
				if (!college.isPresent()) {
					info.put("status", "2");
					info.put("message", "Selected college not present");
					return info;
				}
				collist.add(college.get());
			}

			Date date = new Date();

			Long privailageid = 7L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = request.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(false, Description, userid, privailageid);

			Department department = new Department();
			department.setId(null);
			department.setExCreateDate(date);
			department.setDegree(degree.get());
			department.setExDepartmentCode(request.getExDepartmentCode());
			department.setProgrammes(programmes.get());
			department.setExName(request.getExName());
			department.setExIsDelete(false);
			department.setExLocalName(request.getExLocalName());
			department.setExIdentifier(request.getExIdentifier());
			department.setExIsActive(request.getExIsActive());
			department.setCollege(collist);
			super.department.save(department);
			info.put("status", "1");
			info.put("message", "Department created successfully");
			info.put("id", department.getId().toString());

			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> updateDepartment(DepartmentRequest request) {
		// TODO Auto-generated method stub

		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<Programmes> programmes = super.programmes
					.findByIdAndExIsDeleteAndExIsActive(request.getProgrammes(), false, true);

			if (!programmes.isPresent()) {
				info.put("status", "2");
				info.put("message", "programmes not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent()) {
				info.put("status", "2");
				info.put("message", "degree not present");
				return info;
			}

			List<Colleges> collist = new ArrayList<Colleges>();
			for (int i = 0; i < request.getColleges().size(); i++) {
				Long number = request.getColleges().get(i);
				Long col = new Long(number);
				Optional<Colleges> college = super.colleges.findByIdAndExIsDeleteAndExIsActive(col, false, true);
				if (!college.isPresent()) {
					info.put("status", "2");
					info.put("message", "Selected college not present");
					return info;
				}
				collist.add(college.get());
			}

			List<Department> tasks = new ArrayList<Department>();
			tasks = super.department.findByExNameAndExIsDeleteAndProgrammesId(request.getExName(), false,
					request.getProgrammes());
			if (tasks.size() > 0 && tasks.get(0).getId() != request.getId()) {
				info.put("status", "2");
				info.put("message", "Department name already exists with particular Programme");
				return info;
			}
			tasks = super.department.findByExIdentifierAndExIsDeleteAndProgrammesId(request.getExIdentifier(), false,
					request.getProgrammes());
			if (tasks.size() > 0 && tasks.get(0).getId() != request.getId()) {
				info.put("status", "2");
				info.put("message", "Identifier  already exists with particular Programme");
				return info;
			}
			tasks = super.department.findByExDepartmentCodeAndExIsDeleteAndExIsActive(request.getExDepartmentCode(),
					false, true);
			if (tasks.size() > 0 && tasks.get(0).getId() != request.getId()) {
				info.put("status", "2");
				info.put("message", "Department Code   already exists");
				return info;
			}
			Date date = new Date();

			Long privailageid = 7L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = request.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(true, Description, userid, privailageid);

			int retval = super.department.updateDepartmentRecord(request.getExName(), request.getExIsActive(),
					request.getExIdentifier(), request.getExLocalName(), date, request.getExDepartmentCode(),
					request.getId(), request.getProgrammes(), request.getDegree());
			if (retval == 1) {

				/*
				 * super.department.deleteDeptCollege(request.getId()); for (int i = 0; i <
				 * request.getColleges().size(); i++) { Long number =
				 * request.getColleges().get(i); Long col = new Long(number);
				 * super.department.saveDeptCollege(request.getId(), col);
				 */

				info.put("status", "1");
				info.put("message", "Department updated successfully");
				return info;

			} else {
				info.put("status", "2");
				info.put("message", "Department id not present");
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> deleteDepartment(DepartmentRequest request) {
		// TODO Auto-generated method stub
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<Department> task = super.department.findById(request.getId());
			if (task.isPresent()) {
				if (task.get().getExIsDelete()) {
					info.put("status", "2");
					info.put("message", "Department already deleted");
					return info;
				}
				Boolean exIsDelete = true;
				Boolean is_active = false;
				int result = super.department.deleteDepartment(exIsDelete, is_active, task.get().getId());
				if (result == 0) {
					info.put("status", "2");
					info.put("message", "Something went wrong");
					return info;
				}
				info.put("status", "1");
				info.put("message", "Department deleted successfully");
				return info;
			}
			info.put("status", "2");
			info.put("message", "Department id not present");
			return info;
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getDepartment(DepartmentRequest request) {
		// TODO Auto-generated method stub
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<Department> tasks = super.department.findByExIsDelete(false);
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Department not created");
				return info;
			} else {
				List dataList = new LinkedList();
				for (Department e : tasks) {
					List college = new LinkedList();
					List collegeId = new LinkedList();
					Map<Object, Object> Departmentdata = new HashMap<Object, Object>(); //

					for (int i = 0; i < e.getCollege().size(); i++) {
						college.add(e.getCollege().get(i).getExName());
						collegeId.add(e.getCollege().get(i).getId());
					}

					Departmentdata.put("collegeId", collegeId);
					Departmentdata.put("college", college);

					Departmentdata.put("id", e.getId());
					Departmentdata.put("exIsActive", e.getExIsActive());

					Departmentdata.put("exName", e.getExName());
					Departmentdata.put("exDepartmentCode", e.getExDepartmentCode());

					Departmentdata.put("exIsDelete", e.getExIsDelete());
					Departmentdata.put("degree", e.getDegree().getExName());
					Departmentdata.put("degreeId", e.getDegree().getId());
					Departmentdata.put("programmes", e.getProgrammes().getExName());
					Departmentdata.put("programmesId", e.getProgrammes().getId());
					Departmentdata.put("exLocalName", e.getExLocalName());
					Departmentdata.put("exIdentifier", e.getExIdentifier());
					dataList.add(Departmentdata);
				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@SuppressWarnings("null")
	@Override
	public Map<String, String> createProgramme(ProgrammeRequest request) {
		// TODO Auto-generated method stub
		Map<String, String> info = new LinkedHashMap<>();
		try {
			if (request.getExIsActive() == null) {
				info.put("status", "2");
				info.put("message", "IsActive is required 0/1");
				return info;
			}
			if (request.getExName() == null || request.getExName().equals("") || request.getExName().equals("NA"))

			{
				info.put("status", "2");
				info.put("message", "Name is required");
				return info;
			}

			List<Programmes> tasks = super.programme.findByExNameAndExIsDelete(request.getExName().trim(), false);
			if (tasks.size() > 0) {
				info.put("status", "2");
				info.put("message", "Programmes name already exists");
				return info;
			}
			List<Programmes> task = super.programme.findByExIdentifierAndExIsDelete(request.getExIdentifier(), false);
			if (task.size() > 0) {
				info.put("status", "2");
				info.put("message", "Identifier already exists");
				return info;
			}
			List<Colleges> collist = new ArrayList<Colleges>();
			for (int i = 0; i < request.getColleges().size(); i++) {
				Long number = request.getColleges().get(i);
				Long col = new Long(number);
				Optional<Colleges> college = super.colleges.findByIdAndExIsDeleteAndExIsActive(col, false, true);
				if (!college.isPresent()) {
					info.put("status", "2");
					info.put("message", "Selected college not present");
					return info;
				}
				collist.add(college.get());
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent()) {
				info.put("status", "2");
				info.put("message", "degree not present");
				return info;
			}
			Date date = new Date();

			Long privailageid = 6L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = request.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(false, Description, userid, privailageid);

			Programmes prog = new Programmes();
			prog.setExCreateDate(date);
			prog.setExName(request.getExName());
			prog.setExLocalName(request.getExLocalName());
			prog.setDegree(degree.get());
			prog.setExIsActive(request.getExIsActive());
			prog.setExIsDelete(false);
			prog.setExIdentifier(request.getExIdentifier());
			prog.setCollege(collist);
			super.programmes.save(prog);
			info.put("status", "1");
			info.put("message", "Programmes created successfully");
			info.put("id", prog.getId().toString());
			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			e.printStackTrace();
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, String> updateProgramme(ProgrammeRequest request) {
		// TODO Auto-generated method stub
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());

			if (!degree.isPresent()) {
				info.put("status", "2");
				info.put("message", "degree not present");
				return info;
			}
			Optional<Programmes> programme = super.programme.findByExIsDeleteAndId(false, request.getId());
			if (!programme.isPresent()) {
				info.put("status", "2");
				info.put("message", "Programme not present");
				return info;
			}

			List<Programmes> tasks = new ArrayList<Programmes>();
			tasks = super.programme.findByExNameAndExIsDelete(request.getExName().trim(), false);
			if (tasks.size() > 0 && tasks.get(0).getId() != request.getId()) {
				info.put("status", "2");
				info.put("message", "Programme name already exists");
				return info;
			}
			List<Programmes> task = super.programme.findByExIdentifierAndExIsDelete(request.getExIdentifier(), false);
			if (task.size() > 0 && task.get(0).getId() != request.getId()) {
				info.put("status", "2");
				info.put("message", "Identifier already exists");
				return info;
			}
			List<Colleges> collist = new ArrayList<Colleges>();
			for (int i = 0; i < request.getColleges().size(); i++) {
				Long number = request.getColleges().get(i);
				Long col = new Long(number);
				Optional<Colleges> college = super.colleges.findByIdAndExIsDeleteAndExIsActive(col, false, true);
				if (!college.isPresent()) {
					info.put("status", "2");
					info.put("message", "Selected college not present");
					return info;
				}
				collist.add(college.get());
			}
			Date date = new Date();
			Long privailageid = 6L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = request.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(true, Description, userid, privailageid);

			int retval = super.programme.updatePrograme(request.getExName(), request.getExIdentifier(),
					request.getExIsActive(), request.getExLocalName(), request.getId(), date, request.getDegree());
			if (retval == 0) {
				info.put("status", "0");
				info.put("message", "Something went wrong");
				return info;
			} /*
				 * else { // String hql =
				 * "delete from ex_programmes_collage where program_id = " + request.getId();
				 * Query query = entityManager.createNativeQuery(hql); query.executeUpdate();
				 * entityManager.close(); //
				 * super.programmes.deleteProgramCollege(request.getId()); for (int i = 0; i <
				 * request.getColleges().size(); i++) { Long number =
				 * request.getColleges().get(i); Long col = new Long(number);
				 * super.programmes.saveProgramCollege(request.getId(), col); } }
				 */

			info.put("status", "1");
			info.put("message", "Programme Updated Successfully");
			return info;
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();

			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> getProgramme(ProgrammeRequest request) {
		// TODO Auto-generated method stub
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<Programmes> tasks = super.programme.findByExIsDelete(false);
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Programmes not created");
				return info;
			} else {
				List dataList = new LinkedList();
				for (Programmes e : tasks) {
					List college = new LinkedList();
					List collegeId = new LinkedList();

					Map<Object, Object> Programmesdata = new HashMap<Object, Object>();
					Programmesdata.put("id", e.getId());
					Programmesdata.put("exName", e.getExName());
					// Programmesdata.put("exDescription", e.getExDescription());
					// Programmesdata.put("exDuration", e.getExDuration());
					Programmesdata.put("exIsActive", e.getExIsActive());
					Programmesdata.put("exIsDelete", e.getExIsDelete());
					Programmesdata.put("degree", e.getDegree().getExName());
					Programmesdata.put("degreeId", e.getDegree().getId());

					for (int i = 0; i < e.getCollege().size(); i++) {
						college.add(e.getCollege().get(i).getExName());
						collegeId.add(e.getCollege().get(i).getId());
					}

					Programmesdata.put("collegeId", collegeId);
					Programmesdata.put("college", college);

					System.out.println("MMMM" + e);
					Programmesdata.put("exIdentifier", e.getExIdentifier());
					// Programmesdata.put(courses, e.getCourses());
					// Programmesdata.put(department, e.getDepartment());
					Programmesdata.put("exLocalName", e.getExLocalName());
					System.out.println("<<<<<<<<<" + Programmesdata);

					dataList.add(Programmesdata);
				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> deleteProgramme(ProgrammeRequest request) {
		// TODO Auto-generated method stub
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<Programmes> task = super.programme.findById(request.getId());
			if (task.isPresent()) {
				if (task.get().getExIsDelete()) {
					info.put("status", "2");
					info.put("message", "Programmes already deleted");
					return info;
				}
				Boolean exIsDelete = true;
				Boolean is_active = false;
				int result = super.programme.DeleteProgrammes(exIsDelete, is_active, task.get().getId());
				if (result == 0) {
					info.put("status", "2");
					info.put("message", "Something went wrong");
					return info;
				}
				info.put("status", "1");
				info.put("message", "Programmes deleted successfully");
				return info;
			}
			info.put("status", "2");
			info.put("message", "Programmes id not present");
			return info;
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, String> updateCourses(@Valid CoursesRequest request) {
		// TODO Auto-generated method stub
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<Courses> Courses = super.courses.findById(request.getId());
			if (request.getId() == null || !Courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "Course id not present");
				return info;
			}

			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}

			Optional<Programmes> programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!programmes.isPresent()) {
				info.put("status", "2");
				info.put("message", "Programme not present");
				return info;
			}
			Optional<ProgrammeYear> programmeYear = super.programmeYear
					.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
			if (!programmeYear.isPresent()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!sem.isPresent()) {
				info.put("status", "2");
				info.put("message", "Semster not present");
				return info;
			}

			Optional<Colleges> clgid = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!clgid.isPresent()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}

			Optional<CreditHours> creditHours = super.creditHours.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getCreditHours());
			if (!creditHours.isPresent()) {
				info.put("status", "2");
				info.put("message", "CreditHours not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<Stream> stream = super.stream.findByIdAndExIsDeleteAndExIsActive(request.getStream(), false, true);
			if (!stream.isPresent()) {
				info.put("status", "2");
				info.put("message", "Stream not present");
				return info;
			}

			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department not present");
				return info;
			}

			Optional<Batch> batch = super.batch.findByExIsDeleteAndExIsActiveAndId(false, true, request.getBatch());
			if (!batch.isPresent() || !stream.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Batch not present");
				return info;
			}

			List<Courses> result = super.courses
					.findByExNameAndAcademicYearIdAndProgrammesIdAndProgrammeYearIdAndStreamIdAndDegreeIdAndExIsDeleteAndExIsActiveAndCollegesIdAndBatchIdAndExIsSatisfactoryAndExIsProjectAndExIsSeminarAndExIsElectiveAndExIsIndustrialVisitAndExIsVillageAdoptionAndExIsResearchProjectAndExIsIndustrialTrainingInternship(
							request.getExName(), request.getAcademicYear(), request.getProgrammes(),
							request.getProgrammeYear(), request.getStream(), request.getDegree(), false, true,
							request.getColleges(), request.getBatch(), request.getExIsSatisfactory(),
							request.getExIsProject(), request.getExIsSeminar(), request.getExIsElective(),request.getExIsIndustrialVisit(),request.getExIsVillageAdoption(),request.getExIsResearchProject(),request.getExIsIndustrialTrainingOrInternship());
			
			
			
			if (result.size() > 0 && result.get(0).getId() != request.getId()) {
				info.put("status", "2");
				info.put("message", "Course name already exists");
				return info;
			}
			List<CoursesType> coursestype = new ArrayList<CoursesType>();
			for (int i = 0; i < request.getCoursesType().size(); i++) {
				Long number = request.getCoursesType().get(i);
				Long col = new Long(number);
				Optional<CoursesType> college = super.coursestype.findByIdAndExIsDeleteAndExIsActive(col, false, true);
				if (!college.isPresent()) {
					info.put("status", "2");
					info.put("message", "Selected Courses type not present");
					return info;
				}
				coursestype.add(college.get());
			}

			Date date = new Date();

			Long privailageid = 9L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = request.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(true, Description, userid, privailageid);

			int retval = super.courses.updateCourses(request.getExName(), request.getExDescription(), date,
					request.getExIsActive(), request.getExCoursesCode(), request.getId(), request.getExIsSatisfactory(),
					request.getExIsElective(), request.getExIsSeminar(), request.getExIsProject(),
					request.getAcademicYear(), request.getCreditHours(), request.getProgrammes(),
					request.getProgrammeYear(), request.getSemester(), request.getDepartment(), request.getDegree(),
					request.getStream(), request.getBatch(), request.getExSubjectCode(), request.getExIscompulsory(),request.getExIsIndustrialVisit(),request.getExIsVillageAdoption(),request.getExIsResearchProject(),request.getExIsIndustrialTrainingOrInternship());
			if (retval == 1) {
				// update mapping table
				String hql = "delete from ex_courses_coursestype where courses_id = " + request.getId();
				Query query = entityManager.createNativeQuery(hql);
				query.executeUpdate();
				entityManager.close();
				for (int i = 0; i < request.getCoursesType().size(); i++) {
					Long number = request.getCoursesType().get(i);
					Long col = new Long(number);
					super.courses.saveCoursesCourseType(request.getId(), col);
				}

				info.put("status", "1");
				info.put("message", "Courses updated successfully");
				return info;
			} else {
				info.put("status", "2");
				info.put("message", "Courses id not present");
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> deleteCourses(CoursesRequest request) {
		// TODO Auto-generated method stub
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<Courses> task = super.courses.findById(request.getId());
			if (task.isPresent()) {
				if (task.get().getExIsDelete()) {
					info.put("status", "2");
					info.put("message", "Course already deleted");
					return info;
				}
				Boolean exIsDelete = true;
				Boolean is_active = false;
				int result = super.courses.deleteCourses(exIsDelete, is_active, task.get().getId());
				if (result == 0) {
					info.put("status", "2");
					info.put("message", "Something went wrong");
					return info;
				}
				info.put("status", "1");
				info.put("message", "Course deleted successfully");
				return info;
			}
			info.put("status", "2");
			info.put("message", "Course id not present");
			return info;
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getCourses(CoursesRequest request) {
		// TODO Auto-generated method stub
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<Courses> tasks = super.courses.findByExIsDelete(false);
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Courses not created");
				return info;
			} else {
				String serverurl = commonHelper.getSettingValue("SERVER_IP");
				List dataList = new LinkedList();
				for (Courses e : tasks) {
					List coursestype = new LinkedList();
					List coursesTypeId = new LinkedList();
					Map<Object, Object> coursesdata = new HashMap<Object, Object>();
					coursesdata.put("id", e.getId());
					coursesdata.put("exName", e.getExName());
					coursesdata.put("exIsActive", e.getExIsActive());
					coursesdata.put("exIsDelete", e.getExIsDelete());
					coursesdata.put("exDescription", e.getExDescription());
					coursesdata.put("programmes", e.getProgrammes().getExName());
					coursesdata.put("programmesId", e.getProgrammes().getId());
					coursesdata.put("programmesIdentifire", e.getProgrammes().getExIdentifier());
					
					coursesdata.put("exSubjectCode", e.getExSubjectCode());

					coursesdata.put("department", e.getDepartment() == null ? "NA" : e.getDepartment().getExName());
					coursesdata.put("departmentId", e.getDepartment() == null ? "NA" : e.getDepartment().getId());
					coursesdata.put("departmentIdentifire", e.getDepartment() == null ? "NA" : e.getDepartment().getExIdentifier());
					
					coursesdata.put("exCoursesCode", e.getExCoursesCode());
					coursesdata.put("programmeYear", e.getProgrammeYear().getExName());
					coursesdata.put("programmeYearId", e.getProgrammeYear().getId());
					coursesdata.put("semester", e.getSemester().getExName());
					coursesdata.put("semesterId", e.getSemester().getId());
					coursesdata.put("creditHours", e.getCreditHours().getExCreditHourTitle());
					coursesdata.put("creditHoursId", e.getCreditHours().getId());
					coursesdata.put("exIsSatisfactory", e.getExIsSatisfactory());
					coursesdata.put("exIsElective", e.getExIsElective());
					coursesdata.put("exIsProject", e.getExIsProject());
					coursesdata.put("exIsSeminar", e.getExIsSeminar());
					coursesdata.put("exIsIndustrialVisit", e.getExIsIndustrialVisit());
					coursesdata.put("exIsVillageAdoption", e.getExIsVillageAdoption());
					coursesdata.put("exIsIndustrialTrainingInternship", e.getExIsIndustrialTrainingInternship());
					coursesdata.put("exIsResearchProject", e.getExIsResearchProject());
					
				
					for (int i = 0; i < e.getCoursesType().size(); i++) {
						coursestype.add(e.getCoursesType().get(i).getExName());
						coursesTypeId.add(e.getCoursesType().get(i).getId());
					}

					coursesdata.put("coursesType", coursestype);
					coursesdata.put("coursesTypeId", coursesTypeId);

					coursesdata.put("academicYear", e.getAcademicYear().getExYear());
					coursesdata.put("academicYearId", e.getAcademicYear().getId());

					coursesdata.put("stream", e.getStream() == null ? "NA" : e.getStream().getExName());
					coursesdata.put("streamId", e.getStream().getId());
					coursesdata.put("streamIdentifireId", e.getStream().getExIdentifier());

					coursesdata.put("degree", e.getDegree().getExName());
					coursesdata.put("degreeId", e.getDegree().getId());

					coursesdata.put("colleges", e.getColleges().getExName());
					coursesdata.put("collegesId", e.getColleges().getId());

					coursesdata.put("batch", e.getBatch().getExName());
					coursesdata.put("batchId", e.getBatch().getId());
					coursesdata.put("exIscompulsory", e.getExIscompulsory());
					coursesdata.put("exSyllabusUrl", ( e.getExSyllabusUrl() == null || e.getExSyllabusUrl() == "NA")?"NA" :serverurl+e.getExSyllabusUrl());	
					
					
					dataList.add(coursesdata);
				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> createExamAnnouncement(ExamAnnouncementRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			List<ExamAnnouncement> tasks = new ArrayList<ExamAnnouncement>();
			tasks = super.examAnnouncement.findByExNameAndExIsDeleteAndAcademicYearIdAndProgrammeYearId(
					request.getExName().trim(), false, request.getAcademicYear(), request.getProgrammeYear());
			if (tasks.size() > 0) {
				info.put("status", "2");
				info.put("message", "ExamAnnouncement name already exists");
				return info;
			}

			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			System.out.println("<><" + academic);
			if (!academic.isPresent()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}
			Optional<ProgrammeYear> programmeYear = super.programmeYear
					.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
			if (!programmeYear.isPresent()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!sem.isPresent()) {
				info.put("status", "2");
				info.put("message", "Semster not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());

			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<Programmes> Programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());

			if (!Programmes.isPresent() || !Programmes.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmes not present");
				return info;
			}

			Long privailageid = 30L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = examAnnouncement.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(false, Description, userid, privailageid);

			Date date = new Date();
			ExamAnnouncement examannouncement = new ExamAnnouncement();
			SimpleDateFormat date1 = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
			SimpleDateFormat time = new SimpleDateFormat("HH:mm");

			examannouncement.setAcademicYear(academic.get());
			examannouncement.setSemester(sem.get());
			examannouncement.setProgrammeYear(programmeYear.get());
			examannouncement.setDegree(degree.get());
			examannouncement.setProgrammes(Programmes.get());
			examannouncement.setExName(request.getExName().trim());
			examannouncement.setExLocalLangName(request.getExLocalLangName().trim());
			examannouncement.setExDescription(request.getExDescription());
			examannouncement.setExIsLive(request.getExIsLive());
			examannouncement.setExIsActive(request.getExIsActive());
			examannouncement.setExCreateDate(date);

			examannouncement.setExEndTermExamStartDate(date1.parse(request.getExEndTermExamStartDate() + " 00:00:00"));
			examannouncement.setExEndTermExamEndDate(date1.parse(request.getExEndTermExamEndDate() + " 23:59:00"));
			examannouncement.setExMidTermExamStartDate(date1.parse(request.getExMidTermExamStartDate() + " 00:00:00"));
			examannouncement.setExMidTermExamEndDate(date1.parse(request.getExMidTermExamEndDate() + " 23:59:00"));

			examannouncement.setExIsDelete(false);

			super.examAnnouncement.save(examannouncement);

			info.put("status", "1");
			info.put("message", "ExamAnnouncement created successfully");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> updateExamAnnouncement(ExamAnnouncementRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<ExamAnnouncement> ExamAnnouncement = super.examAnnouncement.findById(request.getId());

			if (request.getId() == null || !ExamAnnouncement.isPresent()) {
				info.put("status", "2");
				info.put("message", "ExamAnnouncement id not present");
				return info;
			}
			List<ExamAnnouncement> tasks = new ArrayList<ExamAnnouncement>();
			tasks = super.examAnnouncement
					.findByExNameAndExIsDeleteAndAcademicYearIdAndProgrammeYearIdAndSemesterIdAndDegreeId(
							request.getExName().trim(), false, request.getAcademicYear(), request.getProgrammeYear(),
							request.getSemester(), request.getDegree());

			if (tasks.size() > 0 && tasks.get(0).getId() != request.getId()) {
				info.put("status", "2");
				info.put("message", "ExamAnnouncement name already exists");
				return info;
			}

			SimpleDateFormat date1 = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
			Date EndDetailsEndDate = date1.parse(request.getExEndTermExamEndDate() + " 00:00:00");
			Date EndDetailStartDate = date1.parse(request.getExEndTermExamStartDate() + " 00:00:00");
			Date MidDetailsEndDate = date1.parse(request.getExMidTermExamEndDate() + " 00:00:00");
			Date MidDetailStartDate = date1.parse(request.getExMidTermExamStartDate() + " 00:00:00");

			Date date = new Date();
			Long privailageid = 30L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = examAnnouncement.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(false, Description, userid, privailageid);
			int retval = super.examAnnouncement.updateExamAnnouncement(request.getExName(), request.getExIsActive(),
					EndDetailStartDate, EndDetailsEndDate, MidDetailStartDate, MidDetailsEndDate,
					request.getExDescription(), date, request.getExIsLive(), request.getId());
			if (retval == 1) {
				info.put("status", "1");
				info.put("message", "ExamAnnouncement updated successfully");
				return info;
			} else {
				info.put("status", "2");
				info.put("message", "ExamAnnouncement id not present");
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> deleteExamAnnouncement(ExamAnnouncementRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<ExamAnnouncement> task = super.examAnnouncement.findById(request.getId());
			if (task.isPresent()) {
				if (task.get().getExIsDelete()) {
					info.put("status", "2");
					info.put("message", "ExamAnnouncement already deleted");
					return info;
				}
				Boolean exIsDelete = true;
				Boolean is_active = false;
				int result = super.examAnnouncement.deleteExamAnnouncement(exIsDelete, is_active, task.get().getId());
				if (result == 0) {
					info.put("status", "2");
					info.put("message", "Something went wrong");
					return info;
				}
				info.put("status", "1");
				info.put("message", "ExamAnnouncement deleted successfully");
				return info;
			}
			info.put("status", "2");
			info.put("message", "ExamAnnouncement id not present");
			return info;
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getExamAnnouncement(ExamAnnouncementRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<ExamAnnouncement> tasks = super.examAnnouncement.findByExIsDelete(false);

			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "ExamAnnouncement not created");
				return info;
			} else {
				List dataList = new LinkedList();
				for (ExamAnnouncement e : tasks) {
					Map<Object, Object> data = new HashMap<Object, Object>();
					SimpleDateFormat date1 = new SimpleDateFormat("dd/MM/yyyy");

					data.put("academicYear", e.getAcademicYear().getExYear());
					data.put("academicYearId", e.getAcademicYear().getId());
					data.put("programmeYear", e.getProgrammeYear().getExName());
					data.put("programmeYearId", e.getProgrammeYear().getId());
					data.put("semester", e.getSemester().getExName());
					data.put("semesterId", e.getSemester().getId());
					data.put("programmes", e.getProgrammes().getExIdentifier());
					data.put("programmesId", e.getProgrammes().getId());

					data.put("degree", e.getDegree().getExName());
					data.put("degreeId", e.getDegree().getId());
					data.put("exEndTermExamEndDate", e.getExEndTermExamEndDate() == null ? "NA"
							: e.getExEndTermExamEndDate().toString().substring(0, 10));
					data.put("exEndTermExamStartDate", e.getExEndTermExamStartDate() == null ? "NA"
							: e.getExEndTermExamStartDate().toString().substring(0, 10));
					data.put("exMidTermExamEndDate", e.getExMidTermExamEndDate() == null ? "NA"
							: e.getExMidTermExamEndDate().toString().substring(0, 10));
					data.put("exMidTermExamStartDate", e.getExMidTermExamStartDate() == null ? "NA"
							: e.getExMidTermExamStartDate().toString().substring(0, 10));

					data.put("exIsLive", e.getExIsLive());
					data.put("id", e.getId());
					data.put("exName", e.getExName());
					data.put("exLocalLangName", e.getExLocalLangName());
					data.put("exDescription", e.getExDescription());

					// data.put("exEndTermExamStartDate",date1.format(e.getExEndTermExamStartDate()));
					// data.put("exEndTermExamEndDate",date1.format(e.getExEndTermExamEndDate()));
					// data.put("exMidTermExamStartDate",date1.format(e.getExMidTermExamStartDate()));
					// data.put("exMidTermExamEndDate",date1.format(e.getExMidTermExamEndDate()));

					data.put("exIsActive", e.getExIsActive());
					data.put("exIsDelete", e.getExIsDelete());
					data.put("exIsLive", e.getExIsLive());
					dataList.add(data);

				}

				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> createSemesterRegistrationConfiguration(
			SemesterRegistrationConfigurationRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
//			SimpleDateFormat date1 = new SimpleDateFormat("dd/MM/yyyy");
//			DateFormat dateFormat = new SimpleDateFormat("yyyy-mm-dd hh:mm:ss");

			Optional<Colleges> Colleges = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),
					false, true);
			if (!Colleges.isPresent() || !Colleges.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}

			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent() || !academic.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}

			Optional<Programmes> Programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Programmes.isPresent() || !Programmes.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}

			Optional<ProgrammeYear> programmeYear = super.programmeYear
					.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
			if (!programmeYear.isPresent() || !programmeYear.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!sem.isPresent() || !sem.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Semster not present");
				return info;
			}
			Optional<Batch> batch = super.batch.findByExIsDeleteAndExIsActiveAndId(false, true, request.getBatch());
			if (!batch.isPresent() || !batch.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "batch not present");
				return info;
			}
			Optional<ExamAnnouncement> exam = super.examAnnouncement.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getExamAnnouncement());
			if (!exam.isPresent() || !exam.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "ExamAnnouncement not present");
				return info;
			}

			List<RegistrationType> registration = super.registrationType
					.findByIdAndExIsDelete(request.getRegistrationType(), false);
			if (registration.size() <= 0) {
				info.put("status", "2");
				info.put("message", "RegistrationType not present");
				return info;
			}
			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department not present");
				return info;
			}

			if (sem.get().getExIdentifier() == null || sem.get().getExIdentifier().equals("null")) {
				info.put("status", "2");
				info.put("message", "Semster  Identifier missing");
				return info;
			}
			Boolean iseven = commonHelper.getEvenorOddsem(sem.get().getExIdentifier());

			List<SemesterRegistrationConfiguration> duplicates = super.semesterRegistrationConfiguration
					.findByExIsDeleteAndExIsActiveAndProgrammesIdAndCollegesIdAndDegreeIdAndAcademicYearIdAndProgrammeYearIdAndSemesterIdAndRegistrationIdAndExamAnnouncementIdAndDepartmentIdAndBatchId(
							false, true, request.getProgrammes(), request.getColleges(), request.getDegree(),
							request.getAcademicYear(), request.getProgrammeYear(), request.getSemester(),
							request.getRegistrationType(), request.getExamAnnouncement(), request.getDepartment(),request.getBatch());
			if (duplicates.size() > 0) {
				info.put("status", "2");
				info.put("message", "SemesterRegistrationConfiguration already created");
				return info;
			}
			//Date date1 = new SimpleDateFormat("dd/MM/yyyy").parse(request.getExStartDate());
			//Date date2 = new SimpleDateFormat("dd/MM/yyyy").parse(request.getExEndDate());
			//Date date3 = new SimpleDateFormat("dd/MM/yyyy").parse(request.getExExtendDate());

			//SimpleDateFormat date1 = new SimpleDateFormat("dd/MM/yyyy");
			//SimpleDateFormat date2 = new SimpleDateFormat("dd/MM/yyyy 23:59:59");
			
			
			//Date dateEnd= new Date(request.getExEndDate());
		    //String sEndDate =	date2.format(dateEnd);  
			//Date dates1=new SimpleDateFormat("dd/MM/yyyy HH:mm:ss").parse(sEndDate);  
			
			//Date datestart= new Date(request.getExStartDate());
		    //String sStartDate =	date2.format(datestart);  
			//Date dates2=new SimpleDateFormat("dd/MM/yyyy HH:mm:ss").parse(sStartDate);  
	
			//Date dateExtend= new Date(request.getExExtendDate());
		    //String sExtendDate =	date2.format(dateExtend);  
			//Date dates3=new SimpleDateFormat("dd/MM/yyyy HH:mm:ss").parse(sExtendDate);  
	
			  String sDate1=request.getExEndDate()+" "+"23:59:59";  
			  SimpleDateFormat formatter1=new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");  
			  Date dates1=formatter1.parse(sDate1); 
			  
			  String sDate2=request.getExStartDate()+" "+"23:59:59";   
			  Date dates2=formatter1.parse(sDate2);
			  
			  String sDate3=request.getExExtendDate()+" "+"23:59:59";   
			  Date dates3=formatter1.parse(sDate3);
			
			
			Date date = new Date();
			Long privailageid = 47L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = request.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(true, Description, userid, privailageid);
			SemesterRegistrationConfiguration config = new SemesterRegistrationConfiguration();
			config.setExStartDate(dates2);
			config.setExEndDate(dates1);
			config.setExExtendDate(dates3);
			config.setDepartment(department.get());
			config.setExIsActive(request.getExIsActive());
			config.setRegistration(registration.get(0));
			config.setExIsDelete(false);
			config.setExCreateDate(date);
			config.setColleges(Colleges.get());
			config.setCompulsory(request.getCompulsory());
			config.setNotCompulsory(request.getNotCompulsory());
			config.setDegree(degree.get());
			config.setProgrammes(Programmes.get());
			config.setAcademicYear(academic.get());
			config.setBatch(batch.get());
			config.setProgrammeYear(programmeYear.get());
			config.setSemester(sem.get());
			config.setRegistration(registration.get(0));
			config.setExStatus(0);
			config.setExamAnnouncement(exam.get());
			super.semesterRegistrationConfiguration.save(config);

			// update record
			if (request.getRegistrationType() == 1) {
				// update student profile
				super.studentadmission.updateStudentRegistration(request.getColleges(), request.getDegree(),
						request.getProgrammes());
			}

			info.put("status", "1");
			info.put("message", "SemesterRegistrationConfiguration created successfully");
			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> updateSemesterRegistrationConfiguration(
			SemesterRegistrationConfigurationRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			//SimpleDateFormat date1 = new SimpleDateFormat("dd/MM/yyyy");

			Optional<SemesterRegistrationConfiguration> config = super.semesterRegistrationConfiguration
					.findById(request.getId());
			if (request.getId() == null || !config.isPresent()) {
				info.put("status", "2");
				info.put("message", "SemesterRegistrationConfiguration id not present");
				return info;
			}

			Optional<Colleges> Colleges = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),
					false, true);
			if (!Colleges.isPresent() || !Colleges.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<Batch> batch = super.batch.findByExIsDeleteAndExIsActiveAndId(false, true, request.getBatch());
			if (!batch.isPresent() || !batch.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Batch not present");
				return info;
			}
			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent() || !academic.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}

			Optional<Programmes> Programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Programmes.isPresent() || !Programmes.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}

			Optional<ProgrammeYear> programmeYear = super.programmeYear
					.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
			if (!programmeYear.isPresent() || !programmeYear.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!sem.isPresent() || !sem.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Semster not present");
				return info;
			}

			List<RegistrationType> registration = super.registrationType
					.findByIdAndExIsDelete(request.getRegistrationType(), false);
			if (registration.size() <= 0) {
				info.put("status", "2");
				info.put("message", "RegistrationType not present");
				return info;
			}
			if (sem.get().getExIdentifier() == null || sem.get().getExIdentifier().equals("null")) {
				info.put("status", "2");
				info.put("message", "Semster  Identifier missing");
				return info;
			}
			Boolean iseven = commonHelper.getEvenorOddsem(sem.get().getExIdentifier());

			Date date = new Date();
			Long privailageid = 47L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = request.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(true, Description, userid, privailageid);
			
			//SimpleDateFormat date1 = new SimpleDateFormat("dd/MM/yyyy");
			//SimpleDateFormat date2 = new SimpleDateFormat("dd/MM/yyyy 23:59:59");
			
			  String sDate1=request.getExEndDate()+" "+"23:59:59";  
			  SimpleDateFormat formatter1=new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");  
			  Date dates1=formatter1.parse(sDate1); 
			  
			  String sDate2=request.getExStartDate()+" "+"23:59:59";   
			  Date dates2=formatter1.parse(sDate2);
			  
			  String sDate3=request.getExExtendDate()+" "+"23:59:59";   
			  Date dates3=formatter1.parse(sDate3);

			
			//Date dateEnds= new Date(request.getExEndDate());
		    //String sEndDates =	date2.format(dateEnds);
			//Date date22 = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss").parse(sEndDates);
			
			//Date dateEnd= new Date(request.getExEndDate());
		    //String sEndDate =	date2.format(dateEnd);  
			//Date dates1=new SimpleDateFormat("dd/MM/yyyy HH:mm:ss").parse(sEndDate);  
			
			//Date datestart= new Date(request.getExStartDate());
		    //String sStartDate =	date2.format(datestart);  
			//Date dates2=new SimpleDateFormat("dd/MM/yyyy HH:mm:ss").parse(sStartDate);  
	
			//Date dateExtend= new Date(request.getExExtendDate());
		    //String sExtendDate =	date2.format(dateExtend);  
			//Date dates3=new SimpleDateFormat("dd/MM/yyyy HH:mm:ss").parse(sExtendDate);  
			
			
			int retval = super.semesterRegistrationConfiguration.updateConfig(request.getExIsActive(),
					dates1,dates2 , date,dates3, request.getCompulsory() , request.getNotCompulsory() , request.getId() ,request.getBatch());
				if (retval == 1) {
				if (request.getRegistrationType() == 1) {
					// update student profile
					super.studentadmission.updateStudentRegistration(request.getColleges(), request.getDegree(),
							request.getProgrammes());
				}
				info.put("status", "1");
				info.put("message", "SemesterRegistrationConfiguration updated successfully");
				return info;
			} else {
				info.put("status", "2");
				info.put("message", "SemesterRegistrationConfiguration id not present");
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> deleteSemesterRegistrationConfiguration(
			SemesterRegistrationConfigurationRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<SemesterRegistrationConfiguration> task = super.semesterRegistrationConfiguration
					.findById(request.getId());
			if (task.isPresent()) {
				if (task.get().getExIsDelete()) {
					info.put("status", "2");
					info.put("message", "SemesterRegistrationConfiguration already deleted");
					return info;
				}
				Boolean exIsDelete = true;
				Boolean is_active = false;
				int result = super.semesterRegistrationConfiguration.deleteSemesterRegistration(exIsDelete, is_active,
						task.get().getId());
				if (result == 0) {
					info.put("status", "2");
					info.put("message", "Something went wrong");
					return info;
				}
				info.put("status", "1");
				info.put("message", "SemesterRegistrationConfiguration deleted successfully");
				return info;
			}
			info.put("status", "2");
			info.put("message", "SemesterRegistrationConfiguration id not present");
			return info;
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getSemesterRegistrationConfiguration(SemesterRegistrationConfigurationRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<SemesterRegistrationConfiguration> tasks = super.semesterRegistrationConfiguration
					.findByExIsDelete(false);
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "SemesterRegistrationConfiguration not created");
				return info;
			} else {
				List dataList = new LinkedList();
				for (SemesterRegistrationConfiguration e : tasks) {
					Map<Object, Object> datalist = new HashMap<Object, Object>();
					datalist.put("id", e.getId());
					datalist.put("registrationType", e.getRegistration().getExName());
					datalist.put("registrationTypeId", e.getRegistration().getId());
					datalist.put("exIsActive", e.getExIsActive());
					datalist.put("exStartDate",
							e.getExStartDate() == null ? "NA" : e.getExStartDate().toString().substring(0, 10));
					datalist.put("exEndDate",
							e.getExEndDate() == null ? "NA" : e.getExEndDate().toString().substring(0, 10));
					System.out.println("+++++++++++++++++++" + e.getExEndDate().toString().substring(0, 10));

					datalist.put("exExtendDate",
							e.getExExtendDate() == null ? "NA" : e.getExExtendDate().toString().substring(0, 10));
					datalist.put("exStatus", e.getExStatus());

					datalist.put("programmes", e.getProgrammes().getExIdentifier());
					datalist.put("programmesId", e.getProgrammes().getId());

					datalist.put("examAnnouncement", e.getExamAnnouncement().getExName());
					datalist.put("examAnnouncementId", e.getExamAnnouncement().getId());

					datalist.put("programmeYear", e.getProgrammeYear().getExName());
					datalist.put("programmeYearId", e.getProgrammeYear().getId());

					datalist.put("semester", e.getSemester().getExName());
					datalist.put("semesterId", e.getSemester().getId());

					datalist.put("academicYear", e.getAcademicYear().getExYear());
					datalist.put("academicYearId", e.getAcademicYear().getId());

					datalist.put("degree", e.getDegree().getExName());
					datalist.put("degreeId", e.getDegree().getId());

					datalist.put("colleges", e.getColleges().getExName());
					datalist.put("collegesId", e.getColleges().getId());
					
					datalist.put("batch", e.getBatch() == null ? "NA" :e.getBatch().getExName());
					datalist.put("batchId", e.getBatch() == null ? "NA" :e.getBatch().getId());

					 datalist.put("department", e.getDepartment() == null ?"NA" :e.getDepartment().getExIdentifier());
					 datalist.put("departmentId", e.getDepartment() == null ?"NA" :e.getDepartment().getId());
					datalist.put("exIsDelete", e.getExIsDelete());
					
					datalist.put("compulsory", e.getCompulsory());
					datalist.put("notCompulsory", e.getNotCompulsory());
					dataList.add(datalist);
				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> createAccessLogs(AccessLogs request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Date date = new Date();
			request.setExStatus("Active");
			request.setExLoginTime(date);
			request.setExIPAddress(request.getExIPAddress());
			request.setExUserName(request.getExUserName());
			request.setExName(request.getExName());

			super.accessLogs.save(request);
			info.put("status", "1");
			info.put("message", "AccessLogs created successfully");
			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getAccessLogs(AccessLogs request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<AccessLogs> tasks = (List<AccessLogs>) super.accessLogs.findAll();
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "AccessLogs not created");
				return info;
			} else {
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", tasks);
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> createHostel(HostelRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<Colleges> clgid = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!clgid.isPresent()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}
			Optional<Hostel> hostelcode = super.hostel
					.findByExHostelCodeAndExIsDeleteAndExIsActive(request.getExHostelCode(), false, true);
			if (hostelcode.isPresent()) {
				info.put("status", "2");
				info.put("message", "HostelCode already present");
				return info;
			}
			Date date = new Date();
			Long privailageid = 13L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = request.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(false, Description, userid, privailageid);

			Hostel hostelrecord = new Hostel();
			hostelrecord.setExCreateDate(date);
			hostelrecord.setExIsDelete(false);
			hostelrecord.setExIsActive(request.getExIsActive());
			hostelrecord.setColleges(clgid.get());
			hostelrecord.setExHostelAddress(request.getExHostelAddress());
			hostelrecord.setExHostelCapacity(request.getExHostelCapacity());
			hostelrecord.setExHostelCode(request.getExHostelCode());
			hostelrecord.setExHostelIncharge(request.getExHostelIncharge());
			hostelrecord.setExName(request.getExName());
			hostelrecord.setExHostelType(request.getExHostelType());
			hostelrecord.setSingleRoom(((request.getSingleRoom() == null) || (request.getSingleRoom().equals(""))) ? 0
					: Integer.parseInt(request.getSingleRoom()));
			hostelrecord.setDoubleRoom(((request.getDoubleRoom() == null) || (request.getDoubleRoom().equals(""))) ? 0
					: Integer.parseInt(request.getDoubleRoom()));
			hostelrecord.setTripleRoom(((request.getTripleRoom() == null) || (request.getTripleRoom().equals(""))) ? 0
					: Integer.parseInt(request.getTripleRoom()));
			hostelrecord.setExTelephone(request.getExTelephone());
			super.hostel.save(hostelrecord);
			info.put("status", "1");
			info.put("message", "Hostel created successfully");
			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> updateHostel(HostelRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<Hostel> Hostel = super.hostel.findById(request.getId());
			if (request.getId() == null || !Hostel.isPresent()) {
				info.put("status", "2");
				info.put("message", "Hostel id not present");
				return info;
			}
			Optional<Colleges> clgid = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!clgid.isPresent()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}
			Optional<Hostel> hostelcode = super.hostel
					.findByExHostelCodeAndExIsDeleteAndExIsActive(request.getExHostelCode(), false, true);
			if (hostelcode.isPresent() && hostelcode.get().getId() != request.getId()) {
				info.put("status", "2");
				info.put("message", "HostelCode already present");
				return info;
			}
			Date date = new Date();
			Long privailageid = 13L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = request.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(true, Description, userid, privailageid);

			int retval = super.hostel.updateHosteldetails(request.getExHostelAddress(), request.getExHostelCapacity(),
					request.getExHostelCode(), request.getExHostelIncharge(), request.getExName(),
					request.getExHostelType(), clgid.get(), request.getExIsActive(), date, request.getExTelephone(),
					request.getId(),
					((request.getSingleRoom() == null) || (request.getSingleRoom().equals(""))) ? 0
							: Integer.parseInt(request.getSingleRoom()),
					((request.getDoubleRoom() == null) || (request.getDoubleRoom().equals(""))) ? 0
							: Integer.parseInt(request.getDoubleRoom()),
					((request.getTripleRoom() == null) || (request.getTripleRoom().equals(""))) ? 0
							: Integer.parseInt(request.getTripleRoom()));
			if (retval == 1) {
				info.put("status", "1");
				info.put("message", "Hostel updated successfully");
				return info;
			} else {
				info.put("status", "2");
				info.put("message", "Hostel id not present");
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> deleteHostel(HostelRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<Hostel> task = super.hostel.findById(request.getId());
			if (task.isPresent()) {
				if (task.get().getExIsDelete()) {
					info.put("status", "2");
					info.put("message", "Hostel already deleted");
					return info;
				}
				Boolean exIsDelete = true;
				Boolean is_active = false;

				int result = super.hostel.updateHostel(exIsDelete, is_active, task.get().getId());
				if (result == 0) {
					info.put("status", "2");
					info.put("message", "Something went wrong");
					return info;
				}
				info.put("status", "1");
				info.put("message", "Hostel deleted successfully");
				return info;
			}
			info.put("status", "2");
			info.put("message", "Hostel id not present");
			return info;
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getHostel(HostelRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<Hostel> tasks = super.hostel.findByExIsDelete(false);
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Hostel not created");
				return info;
			} else {
				List dataList = new LinkedList();
				for (Hostel e : tasks) {
					Map<Object, Object> data = new HashMap<Object, Object>();
					data.put("id", e.getId());
					data.put("hostelName", e.getExName());
					data.put("hostelAddress", e.getExHostelAddress());
					data.put("hostelType", e.getExHostelType());
					data.put("hostelCode", e.getExHostelCode());
					data.put("hostelCapacity", e.getExHostelCapacity());
					data.put("hostelIncharge", e.getExHostelIncharge());
					data.put("exIsActive", e.getExIsActive());
					data.put("exIsDelete", e.getExIsDelete());
					data.put("college", e.getColleges().getExName());
					data.put("collegeId", e.getColleges().getId());

					data.put("singleRoom", e.getSingleRoom());
					data.put("doubleRoom", e.getDoubleRoom());
					data.put("tripleRoom", e.getTripleRoom());

					data.put("telephone", e.getExTelephone());
					dataList.add(data);
				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> createScale(Scale scale) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			List<Scale> tasks = new ArrayList<Scale>();
			tasks = super.scale.findByExNameAndExIsDeleteAndExIsActive(scale.getExName().trim(), false, true);
			if (tasks.size() > 0) {
				info.put("status", "2");
				info.put("message", "Scale name already exists");
				return info;
			} else {

				Scale Scale = new Scale();
				Date date = new Date();
				Scale.setExCreateDate(date);
				Scale.setExIsDelete(false);
				Scale.setExIsActive(scale.getExIsActive());
				Scale.setExName(scale.getExName());
				Scale.setExDescription(scale.getExDescription());
				Scale.setExScaleValue(scale.getExScaleValue());
				super.scale.save(Scale);

				info.put("status", "1");
				info.put("message", "Scale created successfully");
				return info;
			}
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, String> updateScale(Scale scale) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<Scale> Scale = super.scale.findById(scale.getId());
			if (scale.getId() == null || !Scale.isPresent()) {
				info.put("status", "2");
				info.put("message", "Scale id not present");
				return info;
			}
			List<Scale> tasks = new ArrayList<Scale>();
			tasks = super.scale.findByExNameAndExIsDeleteAndExIsActive(scale.getExName().trim(), false, true);
			if (tasks.size() > 0 && tasks.get(0).getId() != scale.getId()) {
				info.put("status", "2");
				info.put("message", "Scale Name already exists");
				return info;
			}
			Date date = new Date();

			int retval = super.scale.updatescale(scale.getExName(), scale.getExDescription(), scale.getExIsActive(),
					scale.getExScaleValue(), date, scale.getId());
			if (retval == 1) {
				info.put("status", "1");
				info.put("message", "Scale  updated successfully");
				return info;
			} else {
				info.put("status", "2");
				info.put("message", "Scale id not present");
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> deleteScale(Scale scale) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<Scale> task = super.scale.findById(scale.getId());
			if (task.isPresent()) {
				if (task.get().getExIsDelete()) {
					info.put("status", "2");
					info.put("message", "Scale already deleted");
					return info;
				}
				Boolean exIsDelete = true;
				Boolean is_active = false;

				int result = super.scale.updateScalefordelete(exIsDelete, is_active, task.get().getId());
				if (result == 0) {
					info.put("status", "2");
					info.put("message", "Something went wrong");
					return info;
				}
				info.put("status", "1");
				info.put("message", "Scale deleted successfully");
				return info;
			}
			info.put("status", "2");
			info.put("message", "Scale id not present");
			return info;
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> getScale(Scale scale) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<Scale> tasks = super.scale.findByExIsDelete(false);
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Scale not created");
				return info;
			} else {

				List<Scale> task = super.scale.findByExIsDelete(false);
				List dataList = new LinkedList();
				for (Scale e : task) {
					Map<Object, Object> data = new HashMap<Object, Object>();
					data.put("id", e.getId());
					data.put("exName", e.getExName());
					data.put("exDescription", e.getExDescription());
					data.put("exIsActive", e.getExIsActive());
					data.put("exIsDelete", e.getExIsDelete());
					data.put("scaleValue", e.getExScaleValue());
					dataList.add(data);
				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> createAboutFeedBack(AboutFeedBackRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			List scale = request.getScale();
			if (scale.size() == 0) {
				info.put("status", "2");
				info.put("message", "Please select scale ");
				return info;
			}
			for (int i = 0; i < scale.size(); i++) {
				Integer number = (Integer) scale.get(i);
				Long scales = new Long(number);
				Optional<Scale> res = super.scale.findByIdAndExIsDeleteAndExIsActive(scales, false, true);
				if (!res.isPresent()) {
					info.put("status", "2");
					info.put("message", "Please provide active Scale array list");
					return info;
				}
			}
			List<AboutFeedBack> tasks = new ArrayList<AboutFeedBack>();
			tasks = super.aboutFeedBack.findByExNameAndExIsDeleteAndExIsActive(request.getExName().trim(), false, true);
			if (tasks.size() > 0) {
				info.put("status", "2");
				info.put("message", "Name already exists");
				return info;
			} else {
				AboutFeedBack AboutFeedBack = new AboutFeedBack();
				Long privailageid = 34L;
				User userid = super.commonHelper.getuser(request.getUser());
				String Description = request.toString();
				Boolean audit = super.commonHelper.saveauditlogdetails(true, Description, userid, privailageid);
				Date date = new Date();
				AboutFeedBack.setExCreateDate(date);
				AboutFeedBack.setExIsDelete(false);
				AboutFeedBack.setExIsActive(request.getExIsActive());
				AboutFeedBack.setExName(request.getExName());
				AboutFeedBack.setExDescription(request.getExDescription());
				AboutFeedBack.setExType(request.getExType());
				super.aboutFeedBack.save(AboutFeedBack);
				for (int i = 0; i < scale.size(); i++) {
					Integer number = (Integer) scale.get(i);
					Long scales = new Long(number);
					Optional<Scale> res = super.scale.findByIdAndExIsDeleteAndExIsActive(scales, false, true);
					if (!res.isPresent()) {
						info.put("status", "2");
						info.put("message", "Please provide active Scale array list");
						return info;
					}
					AboutFeedBackScaleMapping AboutFeedBackScaleMapping = new AboutFeedBackScaleMapping();
					AboutFeedBackScaleMapping.setScale(res.get());
					AboutFeedBackScaleMapping.setAboutFeedBack(AboutFeedBack);
					super.aboutFeedBackScaleMapping.save(AboutFeedBackScaleMapping);
				}

				info.put("status", "1");
				info.put("message", "AboutFeedBack created successfully");
				return info;
			}
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, String> updateAboutFeedBack(AboutFeedBackRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {

			List scale = request.getScale();
			if (scale.size() == 0) {
				info.put("status", "2");
				info.put("message", "Please select scale ");
				return info;
			}
			for (int i = 0; i < scale.size(); i++) {
				Integer number = (Integer) scale.get(i);
				Long scales = new Long(number);
				Optional<Scale> res = super.scale.findByIdAndExIsDeleteAndExIsActive(scales, false, true);
				if (!res.isPresent()) {
					info.put("status", "2");
					info.put("message", "Please provide active Scale array list");
					return info;
				}
			}
			Optional<AboutFeedBack> task = super.aboutFeedBack.findById(request.getId());
			if (!task.isPresent() || request.getId() == null) {
				info.put("status", "2");
				info.put("message", "AboutFeedBack id Not Present");
				return info;
			}

			List<AboutFeedBack> result = super.aboutFeedBack.findByExNameAndExIsDelete(request.getExName(), false);
			if (result.size() > 0 && result.get(0).getId() != request.getId()) {
				info.put("status", "2");
				info.put("message", "Name already exists");
				return info;
			}

			Date date = new Date();
			Long privailageid = 34L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = request.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(true, Description, userid, privailageid);
			int retval = super.aboutFeedBack.UpdateAboutFeedBack(request.getExName(), request.getExDescription(),
					request.getExIsActive(), date, request.getExType(), request.getId());
			if (retval == 0) {
				info.put("status", "2");
				info.put("message", "some thing went wrong in Query");
				return info;
			}

			for (int i = 0; i < scale.size(); i++) {
				super.aboutFeedBackScaleMapping.deleteByAboutFeedBackId(request.getId());
			}
			for (int i = 0; i < scale.size(); i++) {
				Integer number = (Integer) scale.get(i);
				Long scales = new Long(number);
				Optional<Scale> res = super.scale.findByIdAndExIsDeleteAndExIsActive(scales, false, true);
				if (!res.isPresent()) {
					info.put("status", "2");
					info.put("message", "Please provide active Scale array list");
					return info;
				}
				AboutFeedBackScaleMapping AboutFeedBackScaleMapping = new AboutFeedBackScaleMapping();
				AboutFeedBackScaleMapping.setScale(res.get());
				AboutFeedBackScaleMapping.setAboutFeedBack(task.get());
				super.aboutFeedBackScaleMapping.save(AboutFeedBackScaleMapping);
			}
			info.put("status", "1");
			info.put("message", "AboutFeedBack updated Successfully");
			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> deleteAboutFeedBack(AboutFeedBackRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {

			Optional<AboutFeedBack> task = super.aboutFeedBack.findById(request.getId());
			if (task.isPresent()) {
				if (task.get().getExIsDelete()) {
					info.put("status", "2");
					info.put("message", "AboutFeedBack already deleted");
					return info;
				}
				Boolean exIsDelete = true;
				Boolean is_active = false;
				int result = super.aboutFeedBack.deleteAboutFeedback(exIsDelete, is_active, task.get().getId());
				if (result == 0) {
					info.put("status", "2");
					info.put("message", "Something went wrong");
					return info;
				}
				info.put("status", "1");
				info.put("message", "AboutFeedBack deleted successfully");
				return info;
			}
			info.put("status", "2");
			info.put("message", "AboutFeedBack id not present");
			return info;
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getAboutFeedBack(AboutFeedBackRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<AboutFeedBack> tasks = super.aboutFeedBack.findByExIsDelete(false);
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "AboutFeedBack not created");
				return info;
			} else {
				List<AboutFeedBack> task = super.aboutFeedBack.findByExIsDelete(false);
				List dataList = new LinkedList();
				for (AboutFeedBack e : task) {
					Map<Object, Object> data = new HashMap<Object, Object>();
					data.put("id", e.getId());
					data.put("exName", e.getExName());
					data.put("exDescription", e.getExDescription());
					data.put("exIsActive", e.getExIsActive());
					data.put("exIsDelete", e.getExIsDelete());
					data.put("exType", e.getExType());
					List<AboutFeedBackScaleMapping> AboutFeedBackScaleMapping = super.aboutFeedBackScaleMapping
							.findByAboutFeedBackId(e.getId());
					List scaledataList = new LinkedList();
					for (AboutFeedBackScaleMapping f : AboutFeedBackScaleMapping) {
						Map<Object, Object> scaledata = new HashMap<Object, Object>();
						scaledata.put("scaleId", f.getScale().getId());
						scaledata.put("value", f.getScale().getExName());
						scaledataList.add(scaledata);
						data.put("scale", (LinkedList<Object>) scaledataList);

					}
					dataList.add(data);
				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> createFeedBack(FeedbackRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			List feedback = request.getAboutFeedBack();
			if (feedback.size() == 0) {
				info.put("status", "2");
				info.put("message", "Please select AboutFeedBack ");
				return info;
			}
			List Scale = request.getScale();
			if (Scale.size() == 0) {
				info.put("status", "2");
				info.put("message", "Please select  Scale ");
				return info;
			}
			Optional<AcademicYear> academicYearid = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getAcademicYear());
			if (!academicYearid.isPresent()) {
				info.put("status", "2");
				info.put("message", "academicYear id not present");
				return info;
			}

			Optional<Colleges> Colleges = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),
					false, true);
			if (!Colleges.isPresent()) {
				info.put("status", "2");
				info.put("message", "Colleges id not present");
				return info;
			}
			Optional<Studentadmission> studentadmission = super.studentadmission
					.findByExIsDeleteAndExIsActiveAndId(false, true, request.getStudent());
			if (!studentadmission.isPresent()) {
				info.put("status", "2");
				info.put("message", "student not present");
				return info;
			}

			Optional<ProgrammeYear> ProgrammeYear = super.programmeYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammeYear());
			if (!ProgrammeYear.isPresent()) {
				info.put("status", "2");
				info.put("message", "programmeYear id not present");
				return info;
			}
			Optional<Semster> Semester = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!Semester.isPresent()) {
				info.put("status", "2");
				info.put("message", "Semester id not present");
				return info;
			}

			Optional<Programmes> program = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!program.isPresent()) {
				info.put("status", "2");
				info.put("message", "Programme not present");
				return info;
			}
			Optional<Staffpersonal> Staffpersonal = super.staffpersonal.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getStaff());
			if (!Staffpersonal.isPresent()) {
				info.put("status", "2");
				info.put("message", "Staffpersonal not present");
				return info;

			}
			Optional<Courses> cour = super.courses.findByIdAndExIsDeleteAndExIsActiveAndAcademicYearId(
					request.getCourses(), false, true, request.getAcademicYear());
			if (!cour.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not  present");
				return info;

			}
			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department id not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByIdAndExIsDeleteAndExIsActive(request.getDegree(), false, true);
			if (!degree.isPresent()) {
				info.put("status", "2");
				info.put("message", "degree not  present");
				return info;

			}

			List<FeedBack> duplicateCheck = super.feedBack
					.findByStudentadmissionIdAndCoursesIdAndProgrammeYearIdAndAcademicYearIdAndProgrammesIdAndSemesterIdAndStaffIdAndCollegesIdAndDepartmentIdAndDegreeIdAndFeedbackType(
							request.getStudent(), request.getCourses(), request.getProgrammeYear(),
							request.getAcademicYear(), request.getProgrammes(), request.getSemester(),
							request.getStaff(), request.getColleges(), request.getDepartment(), request.getDegree(),request.getFeedbackType());
			if (duplicateCheck.size() > 0) {
				info.put("status", "2");
				info.put("message", "FeedBack alredy sumbitteds for particular course");
				return info;
			}
			if (feedback.size() == Scale.size()) {
				FeedBack FeedBack = new FeedBack();

				if (request.getDesignation() == null || request.getDesignation().equals("")) {

					FeedBack.setDesignation(null);

				} else {
					Optional<Designation> designation = super.designation.findByExIsDeleteAndExIsActiveAndId(false,
							true, request.getDesignation());
					if (!designation.isPresent()) {
						info.put("status", "2");
						info.put("message", "Designation not Present");
						return info;
					}
					FeedBack.setDesignation(designation.get());
				}

				Date date = new Date();
				FeedBack.setAcademicYear(academicYearid.get());
				FeedBack.setExIsActive(request.getExIsActive());
				FeedBack.setDepartment(department.get());
				FeedBack.setExIsDelete(false);
				FeedBack.setExCreateDate(date);
				FeedBack.setStaff(Staffpersonal.get());
				FeedBack.setProgrammeYear(ProgrammeYear.get());
				FeedBack.setSemester(Semester.get());
				FeedBack.setProgrammes(program.get());
				FeedBack.setCourses(cour.get());
				FeedBack.setColleges(Colleges.get());
				FeedBack.setFeedbackType(request.getFeedbackType());
				FeedBack.setDegree(degree.get());
				FeedBack.setStudentadmission(studentadmission.get());
				FeedBack.setExRemark(request.getExRemark()); //
				super.feedBack.save(FeedBack); // saving about feedback
				int scalevalue = 0;
				for (int i = 0; i < feedback.size(); i++) {
					Integer number = (Integer) feedback.get(i);
					Long feedbacks = new Long(number);
					Optional<AboutFeedBack> res = super.aboutFeedBack.findByIdAndExIsDeleteAndExIsActive(feedbacks,
							false, true);

					if (!res.isPresent()) {
						info.put("status", "2");
						info.put("message", "Please provide about feedback array list");
						return info;

					}
					Integer numbers = (Integer) Scale.get(i);
					Long Scales = new Long(numbers);
					System.out.println("Sssssssssssssssssssss" + Scales);
					Optional<Scale> Scaleresult = super.scale.findByIdAndExIsDeleteAndExIsActive(Scales, false, true);
					if (!Scaleresult.isPresent()) {
						info.put("status", "2");
						info.put("message", "Please provide about Scale array list");
						return info;
					}
					scalevalue = scalevalue + Integer.parseInt(Scaleresult.get().getExScaleValue());
					FeedBackScale FeedBackScale = new FeedBackScale();
					FeedBackScale.setAboutFeedBack(res.get());
					FeedBackScale.setFeedBack(FeedBack);
					FeedBackScale.setScale(Scaleresult.get());
					super.feedBackScale.save(FeedBackScale);

				}

				// updating totalscalevalue
				int totalvalue = scalevalue;
				int updatetotalvalue = super.feedBack.updatetotalscalevalue(totalvalue, request.getStaff(),
						request.getCourses(), request.getAcademicYear(), request.getProgrammes(),
						request.getProgrammeYear(), request.getSemester(), request.getStudent(), FeedBack.getId());
				if (updatetotalvalue == 0) {
					info.put("status", "2");
					info.put("message", "something went wrong will updating total scale value");
					return info;
				}
			} else {
				info.put("status", "2");
				info.put("message", "please sumbit all the feedback Values ");
				return info;
			}

			info.put("status", "1");
			info.put("message", "FeedBack sumbitted successfully");
			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> createTeacherCourseMapping(TeacherCourseMappingRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Optional<Colleges> colleges = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),
					false, true);
			if (!colleges.isPresent() || !colleges.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}

			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent() || !academic.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}

			Optional<Programmes> Programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Programmes.isPresent() || !Programmes.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programme not present");
				return info;
			}

			Optional<ProgrammeYear> programmeYear = super.programmeYear
					.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
			System.out.println(">>>>>.programyear" + programmeYear);
			if (!programmeYear.isPresent() || !programmeYear.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}

			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!sem.isPresent() || !sem.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Semster not present");
				return info;
			}

			Optional<Section> section = super.section.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSection());
			if (!section.isPresent() || !section.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Section not present");
				return info;
			}
			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department not present");
				return info;
			}

			Optional<RegistrationType> registration = super.registrationType.findByExIsDeleteAndExIsActiveAndId(false,
					true, request.getRegistrationType());
			if (!registration.isPresent()) {
				info.put("status", "2");
				info.put("message", "RegistrationType not present");
				return info;
			}

			Optional<StaffType> staffType = super.staffType.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getStaffType());
			if (!staffType.isPresent()) {
				info.put("status", "2");
				info.put("message", "staffType not present");
				return info;
			}

			Optional<Staffpersonal> staffpersonal = super.staffpersonal.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getStaff());

			if (!staffpersonal.isPresent()) {
				info.put("status", "2");
				info.put("message", "staff not present");
				return info;
			}

			Stream stream = null;
			if (request.getStream() == null || request.getStream().equals("")) {
				stream = null;
			} else {
				Optional<Stream> res = super.stream.findByIdAndExIsDeleteAndExIsActive(request.getStream(), false,
						true);
				if (!res.isPresent()) {
					info.put("status", "2");
					info.put("message", "Stream id not present");
					return info;
				}
				stream = res.get();
			}

			List<Courses> courses = new ArrayList<Courses>();
			for (int i = 0; i < request.getCourses().size(); i++) {
				Long number = request.getCourses().get(i);
				Long col = new Long(number);
				System.out.println("dddddddddddddddddddddffffff");
				for (int k = 0; k < request.getCourseType().size(); k++) {
					Long cnumber = request.getCourseType().get(k);
					Long colnumber = new Long(cnumber);

					Optional<CoursesType> coursesType = super.coursestype.findByIdAndExIsDeleteAndExIsActive(colnumber,
							false, true);
					if (!coursesType.isPresent()) {
						info.put("status", "2");
						info.put("message", "Selected courseType not present");
						return info;
					}

					Optional<Courses> Courseres = super.courses
							.findByCollegesIdAndDegreeIdAndProgrammesIdAndDepartmentIdAndIdAndExIsDeleteAndExIsActiveAndCoursesType(
									request.getColleges(), request.getDegree(), request.getProgrammes(),
									request.getDepartment(), col, false, true, coursesType);
					if (!Courseres.isPresent()) {
						info.put("status", "2");
					info.put("message", "Selected Courses courseType not present");
						return info;
				}
					courses.add(Courseres.get());
				}

			}
			for (int i = 0; i < request.getCourseType().size(); i++) {
				Long cnumber = request.getCourseType().get(i);
				Long colnumber = new Long(cnumber);

				for (int u = 0; u < request.getCourses().size(); u++) {
					Long numberofcourses = request.getCourses().get(u);
					Long course = new Long(numberofcourses);	
				
				
				
				Optional<CoursesType> coursesType = super.coursestype.findByIdAndExIsDeleteAndExIsActive(colnumber,
						false, true);
				if (!coursesType.isPresent()) {
					info.put("status", "2");
					info.put("message", "Selected courseType not present");
					return info;
				}
					/*
					 * 
					 * Optional<CoursesType> coursesTypess =
					 * super.coursestype.findtheoryORpractical(colnumber,false, true,course); if
					 * (!coursesTypess.isPresent()) { info.put("status", "2"); info.put("message",
					 * "Selected courseType not present for particular subject"); return info; }
					 */

				List<TeacherCourseMapping> duplicates = super.teacherCourseMapping
						.findByCoursesIdInAndStaffpersonalIdAndCollegesIdAndDegreeIdAndProgrammesIdAndDepartmentIdAndExIsDeleteAndExIsActiveAndCourseTypeAndSectionId(
								request.getCourses(), request.getStaff(), request.getColleges(), request.getDegree(),
								request.getProgrammes(), request.getDepartment(), false, true, coursesType,
								request.getSection());
				if (duplicates.size() > 0) {
					info.put("status", "2");
					info.put("message", "Teacher with particular courses already mapped");
					return info;
				} else {
					List<TeacherCourseMapping> duplicates2 = super.teacherCourseMapping
							.findByCoursesIdInAndCollegesIdAndDegreeIdAndProgrammesIdAndDepartmentIdAndExIsDeleteAndExIsActiveAndCourseTypeAndSectionId(
									request.getCourses(), request.getColleges(), request.getDegree(),
									request.getProgrammes(), request.getDepartment(), false, true, coursesType,
									request.getSection());
					if (duplicates2.size() > 0) {
						info.put("status", "2");
						info.put("message", "Course already mapped with the teacher");
						return info;
					}
				}

			}
		}
			Long privailageid = 31L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = request.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(false, Description, userid, privailageid);

			for (int i = 0; i < request.getCourseType().size(); i++) {
				Long cnumber = request.getCourseType().get(i);
				Long colnumber = new Long(cnumber);

				Optional<CoursesType> coursesType = super.coursestype.findByIdAndExIsDeleteAndExIsActive(colnumber,
						false, true);
				if (!coursesType.isPresent()) {
					info.put("status", "2");
					info.put("message", "Selected courseType not present");
					return info;
				}

				TeacherCourseMapping teacherCourse = new TeacherCourseMapping();
				Date date = new Date();
				SimpleDateFormat date1 = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
				teacherCourse.setAcademicYear(academic.get());
				teacherCourse.setExIsActive(request.getExIsActive());
				teacherCourse.setExIsDelete(false);
				teacherCourse.setExCreateDate(date);
				teacherCourse.setColleges(colleges.get());
				teacherCourse.setStaffpersonal(staffpersonal.get());
				teacherCourse.setStaffType(staffType.get());
				teacherCourse.setDegree(degree.get());
				teacherCourse.setProgrammeYear(programmeYear.get());
				System.out.println(">>>>>>>>pgm" + teacherCourse);
				teacherCourse.setSemster(sem.get());
				teacherCourse.setSection(section.get());
				teacherCourse.setProgrammes(Programmes.get());
				teacherCourse.setCourses(courses);
				teacherCourse.setDepartment(department.get());
				teacherCourse.setStream(stream);
				teacherCourse.setRegistrationType(registration.get());
				teacherCourse.setCourseType(coursesType.get());
				super.teacherCourseMapping.save(teacherCourse);

			}

			info.put("status", "1");
			info.put("message", "Teacher courses created successfully");
			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> updateTeacherCourseMapping(TeacherCourseMappingRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Optional<Colleges> colleges = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),
					false, true);
			if (!colleges.isPresent() || !colleges.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}

			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent() || !academic.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}

			Optional<Programmes> Programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Programmes.isPresent() || !Programmes.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}

			Optional<ProgrammeYear> programmeYear = super.programmeYear
					.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
			if (!programmeYear.isPresent() || !programmeYear.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!sem.isPresent() || !sem.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Semester not Configured");
				return info;
			}
			Optional<Section> section = super.section.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSection());
			if (!section.isPresent() || !section.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Section not Configured");
				return info;
			}

			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department not present");
				return info;
			}

			Optional<StaffType> staffType = super.staffType.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getStaffType());
			if (!staffType.isPresent()) {
				info.put("status", "2");
				info.put("message", "staffType not present");
				return info;
			}

			Optional<Staffpersonal> staffpersonal = super.staffpersonal.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getStaff());
			if (!staffpersonal.isPresent()) {
				info.put("status", "2");
				info.put("message", "staff not present");
				return info;
			}

			Stream stream = null;
			if (request.getStream() == null || request.getStream().equals("")) {
				stream = null;
			} else {
				Optional<Stream> res = super.stream.findByIdAndExIsDeleteAndExIsActive(request.getStream(), false,
						true);
				if (!res.isPresent()) {
					info.put("status", "2");
					info.put("message", "Stream id not present");
					return info;
				}
				stream = res.get();
			}

			List<Courses> courses = new ArrayList<Courses>();
			for (int i = 0; i < request.getCourses().size(); i++) {
				Long number = request.getCourses().get(i);
				Long col = new Long(number);
				Optional<Courses> Courseres = super.courses
						.findByCollegesIdAndDegreeIdAndProgrammesIdAndDepartmentIdAndIdAndExIsDeleteAndExIsActive(
								request.getColleges(), request.getDegree(), request.getProgrammes(),
								request.getDepartment(), col, false, true);
				if (!Courseres.isPresent()) {
					info.put("status", "2");
					info.put("message", "Selected Courseres not present");
					return info;
				}
				courses.add(Courseres.get());
			}

			for (int i = 0; i < request.getCourseType().size(); i++) {
				Long cnumber = request.getCourseType().get(i);
				Long colnumber = new Long(cnumber);

				for (int u = 0; u < request.getCourses().size(); u++) {
					Long numberofcourses = request.getCourses().get(u);
					Long course = new Long(numberofcourses);	
				
				
				Optional<CoursesType> coursesType = super.coursestype.findByIdAndExIsDeleteAndExIsActive(colnumber,
						false, true);
				if (!coursesType.isPresent()) {
					info.put("status", "2");
					info.put("message", "Selected courseType not present");
					return info;
				}
				
				Optional<CoursesType> coursesTypess = super.coursestype.findtheoryORpractical(colnumber,false, true,course);
				if (!coursesTypess.isPresent()) {
					info.put("status", "2");
					info.put("message", "Selected courseType not present for particular subject");
					return info;
				}
				
				List<TeacherCourseMapping> duplicates = super.teacherCourseMapping
						.findByIdAndCoursesIdInAndStaffpersonalIdAndCollegesIdAndDegreeIdAndProgrammesIdAndDepartmentIdAndExIsDeleteAndExIsActiveAndCourseTypeAndSectionId(
								request.getId(),request.getCourses(), request.getStaff(), request.getColleges(), request.getDegree(),
								request.getProgrammes(), request.getDepartment(), false, true, coursesType,
								request.getSection());
				if (duplicates.size() > 0) {
					info.put("status", "2");
					info.put("message", "courses already mapped");
					return info;
				}
			}
		}
			super.teacherCourseMapping.deleteOldRecords(request.getId());
			Date date = new Date();
			Long privailageid = 31L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = request.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(false, Description, userid, privailageid);
			
			for (int k = 0; k < request.getCourseType().size(); k++) {
				Long coursetype = request.getCourseType().get(k);
				Long colnumber = new Long(coursetype);

			
			int updateresult = super.teacherCourseMapping.UpdateTeacherCourse(request.getColleges(),
					request.getExIsActive(), date, request.getStaff(), request.getStaffType(),
					request.getAcademicYear(), request.getProgrammeYear(), request.getDegree(), request.getSemester(),
					request.getId(), request.getDepartment(), request.getStream(),request.getProgrammes(),colnumber,request.getSection());
			if (updateresult == 0) {
				info.put("status", "2");
				info.put("message", "some thing went wrong in Query");
				return info;
			} else {

				for (int i = 0; i < request.getCourses().size(); i++) {
					Long number = request.getCourses().get(i);
					Long col = new Long(number);
					super.teacherCourseMapping.insertupdatedCourses(request.getId(), col);
				}
			}
			}
			info.put("status", "1");
			info.put("message", "Teacher Courses has been  Updated Successfully");
			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, String> deleteTeacherCourseMapping(TeacherCourseMappingRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<TeacherCourseMapping> task = super.teacherCourseMapping.findById(request.getId());
			if (task.isPresent()) {
				if (task.get().getExIsDelete()) {
					info.put("status", "2");
					info.put("message", "TeacherCourseMapping already deleted");
					return info;
				}
				int result = super.teacherCourseMapping.deleteTeacherCourseMapping(true, false, task.get().getId());
				if (result == 0) {
					info.put("status", "2");
					info.put("message", "Something went wrong");
					return info;
				}
				info.put("status", "1");
				info.put("message", "TeacherCourseMapping deleted successfully");
				return info;
			}
			info.put("status", "2");
			info.put("message", "TeacherCourseMapping id not present ");
			return info;
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			e.printStackTrace();
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getTeacherCourseMapping(TeacherCourseMappingRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<TeacherCourseMapping> tasks = super.teacherCourseMapping.findByExIsDelete(false);
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "TeacherCourseMapping not created");
				return info;
			} else {
				List dataList = new LinkedList();
				for (TeacherCourseMapping e : tasks) {
					List coursestype = new LinkedList();
					List coursesTypeId = new LinkedList();
					Map<Object, Object> data = new HashMap<Object, Object>();
					data.put("id", e.getId());
					data.put("college", e.getColleges().getExName());
					data.put("collegeId", e.getColleges().getId());

					data.put("department", e.getDepartment().getExIdentifier());
					data.put("departmentId", e.getDepartment().getId());

					data.put("stream", e.getStream() == null ? "NA" : e.getStream().getExName());
					data.put("streamId", e.getStream() == null ? "NA" : e.getStream().getId());

					// TeacherCourseMappingdata.put("staffName",
					// e.getStaffPersonal().getExFirstName());
					data.put("academicYear", e.getAcademicYear().getExYear());
					data.put("academicYearId", e.getAcademicYear().getId());

					data.put("section", e.getSection().getExName());
					data.put("sectionId", e.getSection().getId());

					data.put("exIsActive", e.getExIsActive());

					data.put("programmeYear", e.getProgrammeYear().getExName());
					data.put("programmeYearId", e.getProgrammeYear().getId());

					data.put("degree", e.getDegree().getExName());
					data.put("degreeId", e.getDegree().getId());

					data.put("semester", e.getSemster().getExName());
					data.put("semesterId", e.getSemster().getId());

					data.put("staff", e.getStaffpersonal().getExName());
					data.put("staffId", e.getStaffpersonal().getId());
					data.put("exEmployeeId", e.getStaffpersonal().getExEmployeeId());

					data.put("programe", e.getProgrammes().getExIdentifier());
					data.put("programeId", e.getProgrammes().getId());

					data.put("staffType", e.getStaffType().getExName());
					data.put("staffTypeId", e.getStaffType().getId());

					data.put("registrationType", e.getRegistrationType().getExName());
					data.put("registrationTypeId", e.getRegistrationType().getId());

					List<Object[]> maping = super.teacherCourseMapping.getCoursemapping(e.getId());
					data.put("coursesId", maping);
					data.put("courses", super.courses.getName(maping));
					
					data.put("batch", super.courses.getBatchName(maping));

					List<String> ctname = new ArrayList<>();
					List<Long> ctid = new ArrayList<>();
					ctname.add(e.getCourseType().getExName());
					ctid.add(e.getCourseType().getId());

					data.put("courseType", ctname);
					data.put("courseTypeId", ctid);
					dataList.add(data);

				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			logger.error(errors.toString());
		}
		return info;
	}

	@Override
	public Map<String, String> checkFBSubmitted(FeedbackRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<Colleges> Colleges = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),
					false, true);
			if (!Colleges.isPresent()) {
				info.put("status", "2");
				info.put("message", "Colleges id not present");
				return info;
			}

			Optional<AcademicYear> academicYearid = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getAcademicYear());
			if (!academicYearid.isPresent()) {
				info.put("status", "2");
				info.put("message", "AcademicYear id not present");
				return info;
			}

			Optional<ProgrammeYear> ProgrammeYear = super.programmeYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammeYear());
			if (!ProgrammeYear.isPresent()) {
				info.put("status", "2");
				info.put("message", "ProgrammeYear id not present");
				return info;
			}
			Optional<Semster> Semester = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!Semester.isPresent()) {
				info.put("status", "2");
				info.put("message", "Semester id not present");
				return info;
			}
			// get Program from Program course mappimg table

			Optional<Studentadmission> studentadmission = super.studentadmission
					.findByExIsDeleteAndExIsActiveAndId(false, true, request.getStudent());
			if (!studentadmission.isPresent()) {
				info.put("status", "2");
				info.put("message", "student not present");
				return info;
			}

			List<Courses> courselist = super.courses
					.findByExIsDeleteAndExIsActiveAndProgrammesIdAndProgrammeYearIdAndSemesterIdAndAcademicYearId(false,
							true, studentadmission.get().getProgrammes().getId(), request.getProgrammeYear(),
							request.getSemester(), request.getAcademicYear());
			if (courselist.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Courses not present for selected program");
				return info;
			}

			// check Feed Back submited or not
			String checkfeedback = commonHelper.getSettingValue("FEEDBACK");
			logger.info("checkfeedback from settings" + checkfeedback);
			if (checkfeedback.equalsIgnoreCase("1")) {
				List<FeedBack> validatefeedbak = super.feedBack
						.findByStudentadmissionIdAndProgrammeYearIdAndAcademicYearIdAndProgrammesIdAndSemesterIdAndCollegesIdAndFeedbackType(
								request.getStudent(), request.getProgrammeYear(), request.getAcademicYear(),
								studentadmission.get().getProgrammes().getId(), request.getSemester(),
								request.getColleges(),request.getFeedbackType());
				if (validatefeedbak.size() <= 0) {
					info.put("status", "2");
					info.put("message", "Please submit Feedback");
					return info;
				} else {
					for (Courses cs : courselist) {
						List<FeedBack> checkfeedbak = super.feedBack
								.findByStudentadmissionIdAndCoursesIdAndProgrammeYearIdAndAcademicYearIdAndProgrammesIdAndSemesterIdAndCollegesIdAndFeedbackType(
										request.getStudent(), cs.getId(), request.getProgrammeYear(),
										request.getAcademicYear(), studentadmission.get().getProgrammes().getId(),
										request.getSemester(), request.getColleges(),request.getFeedbackType());
						if (checkfeedbak.size() <= 0) {
							info.put("status", "2");
							info.put("message", "FeedBack not submited for : " + cs.getExName());
							return info;
						}
					}

					info.put("status", "1");
					info.put("message", "FeedBack submited");
					return info;

				}
			} else {
				info.put("status", "1");
				info.put("message", "FeedBack submited");
				return info;
			}
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			e.printStackTrace();
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> validateAboutFeedback(FeedbackRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			logger.info("validateAboutFeedback request :" + request);
			
			// check  feedback confuguration done or not
			Optional<Studentadmission> studentadmission = super.studentadmission.findByExIsDeleteAndExIsActiveAndId(false, true, request.getStudent());
			if (!studentadmission.isPresent() ) {
				info.put("status", "2");
				info.put("message", "student not present");
				return info;
			}
			
			

			Optional<AcademicYear> academicYearid = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getAcademicYear());
			if (!academicYearid.isPresent()) {
				info.put("status", "2");
				info.put("message", "AcademicYear id not present");
				return info;
			}
			Optional<Colleges> Colleges = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),
					false, true);
			if (!Colleges.isPresent()) {
				info.put("status", "2");
				info.put("message", "Colleges id not present");
				return info;
			}

			Optional<ProgrammeYear> ProgrammeYear = super.programmeYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammeYear());
			if (!ProgrammeYear.isPresent()) {
				info.put("status", "2");
				info.put("message", "ProgrammeYear id not present");
				return info;
			}
			Optional<Semster> Semester = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!Semester.isPresent()) {
				info.put("status", "2");
				info.put("message", "Semester id not present");
				return info;
			}
			Optional<Courses> cour = super.courses.findByIdAndExIsDeleteAndExIsActiveAndAcademicYearId(
					request.getCourses(), false, true, request.getAcademicYear());
			if (!cour.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not  present");
				return info;
			}
			List<FeedBack> duplicateCheck = super.feedBack
					.findByStudentadmissionIdAndCoursesIdAndProgrammeYearIdAndAcademicYearIdAndSemesterIdAndCollegesIdAndFeedbackType(
							request.getStudent(), request.getCourses(), request.getProgrammeYear(),
							request.getAcademicYear(), request.getSemester(), request.getColleges(),request.getFeedbackType());
			if (duplicateCheck.size() > 0) {
				info.put("status", "2");
				info.put("message", "FeedBack alredy sumbitteds for particular course");
				return info;
			}
			List<AboutFeedBack> task = super.aboutFeedBack.findByExIsDelete(false);
			List dataList = new LinkedList();
			for (AboutFeedBack e : task) {
				Map<Object, Object> data = new HashMap<Object, Object>();
				data.put("id", e.getId());
				data.put("exName", e.getExName());
				data.put("exDescription", e.getExDescription());
				data.put("exIsActive", e.getExIsActive());
				data.put("exIsDelete", e.getExIsDelete());
				data.put("exType", e.getExType());
				List<AboutFeedBackScaleMapping> AboutFeedBackScaleMapping = super.aboutFeedBackScaleMapping
						.findByAboutFeedBackId(e.getId());
				List scaledataList = new LinkedList();
				for (AboutFeedBackScaleMapping f : AboutFeedBackScaleMapping) {
					Map<Object, Object> scaledata = new HashMap<Object, Object>();
					scaledata.put("scaleId", f.getScale().getId());
					scaledata.put("value", f.getScale().getExName());
					scaledataList.add(scaledata);
					data.put("scale", (LinkedList<Object>) scaledataList);
				}

				dataList.add(data);
			}
			info.put("details", dataList);
			info.put("status", "1");
			info.put("message", "success");
			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> getStaffList(FeedbackRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();

		try {
			if (request.getDegree() == null || request.getDegree().equals("")) {
				info.put("status", "2");
				info.put("message", "Degree is required");
				return info;
			}
			Optional<StaffType> safftype = super.staffType.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getStaffType());
			if (!safftype.isPresent()) {
				info.put("status", "2");
				info.put("message", "StaffType not Present");
				return info;
			}

			Optional<AcademicYear> academicYearid = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getAcademicYear());
			if (!academicYearid.isPresent()) {
				info.put("status", "2");
				info.put("message", "AcademicYear id not present");
				return info;
			}

			Optional<Colleges> col = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!col.isPresent()) {
				info.put("status", "2");
				info.put("message", "college id not present");
				return info;
			}

			Optional<Programmes> Prog = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Prog.isPresent()) {
				info.put("status", "2");
				info.put("message", " Programe not present");
				return info;
			}

			Optional<Courses> courses = super.courses.findByIdAndExIsDeleteAndExIsActiveAndAcademicYearId(
					request.getCourses(), false, true, request.getAcademicYear());
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}

			// staff list Response
			List dataList = new LinkedList();
			ArrayList<Object[]> evedetails = super.teacherCourseMapping.getstafffList(request.getProgrammes(),
					request.getCourses(), request.getColleges(), request.getAcademicYear(), request.getStaffType(),
					request.getDegree(), false);
			if (evedetails.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Teacher not Mapped with selected Courses.");
				return info;
			}

			for (Object[] e : evedetails) {
				Map<Object, Object> staffinfo = new HashMap<Object, Object>();
				staffinfo.put("exName", e[0]);
				staffinfo.put("exEmployeeId", e[1]);
				staffinfo.put("exEmail", e[2]);
				staffinfo.put("staffType", e[3]);
				staffinfo.put("staffTypeId", e[4]);
				staffinfo.put("id", e[5]);
				dataList.add(staffinfo);
			}

			info.put("details", dataList);
			info.put("status", "1");
			info.put("message", "success");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> uploadImage(MultipartFile exfile, Long id, String userType) {
		Map<String, Object> info = new LinkedHashMap<>();
		/*
		 * try { if(exfile ==null && !exfile.isEmpty()) { info.put("status", "2");
		 * info.put("message", "Please select image"); return info; } if(id ==null ||
		 * id.equals("NA") || id.equals("null")) { info.put("status", "2");
		 * info.put("message", "Please provide id"); return info; } if(userType ==null
		 * || userType.trim().isEmpty() || userType.equalsIgnoreCase("null")) {
		 * info.put("status", "2"); info.put("message", "Please provide userType");
		 * return info; } Optional<Studentadmission> task = null ;
		 * Optional<Staffpersonal> staff = null ; Optional<User> user = null ;
		 * 
		 * String UPLOADED_FOLDER = ""; if(userType.equalsIgnoreCase("student")) { task
		 * = super.studentadmission.findById(id); if(!task.isPresent()) {
		 * info.put("status", "2"); info.put("message", "Id not present"); return info;
		 * } UPLOADED_FOLDER = createFolder(task.get().getAcademicYear().getExYear()
		 * ,task.get().getColleges().getExIdentifier() ,
		 * task.get().getExStudentId().replace(" ", "-") , userType );
		 * 
		 * } if(userType.equalsIgnoreCase("staff")) { staff =
		 * super.staffpersonal.findById(id); if(!staff.isPresent()) { info.put("status",
		 * "2"); info.put("message", "Staff Id not present"); return info; }
		 * UPLOADED_FOLDER =
		 * createFolder("staffphoto",staff.get().getColleges().getExIdentifier(),staff.
		 * get().getExEmployeeId() , userType ); }
		 * if(userType.equalsIgnoreCase("regular")) { user = super.user.findById(id);
		 * if(!user.isPresent()) { info.put("status", "2"); info.put("message",
		 * "User Id not present"); return info; } UPLOADED_FOLDER =
		 * createFolder("userphoto",user.get().getExName(),user.get().getExUserName(),
		 * userType ); }
		 * 
		 * if(UPLOADED_FOLDER.equals("NA")) { info.put("status", "0");
		 * info.put("message", "something went wrong"); return info; } Random random =
		 * new Random(System.nanoTime() % 100000); int randomInt =
		 * random.nextInt(1000000000); byte[] bytes = exfile.getBytes(); String
		 * newfilename = randomInt+"-"+exfile.getOriginalFilename(); Path path =
		 * Paths.get(UPLOADED_FOLDER+newfilename); Files.write(path, bytes);
		 * logger.info("savePhoto Path :"+UPLOADED_FOLDER + newfilename); String
		 * imagepath = ""; int i = 0; if(userType.equalsIgnoreCase("student")) {
		 * imagepath =
		 * "/"+task.get().getAcademicYear().getExYear()+"/"+task.get().getColleges().
		 * getExIdentifier()+"/"+userType+"/"+task.get().getExStudentId().replace(" ",
		 * "-")+"/"+newfilename; i = super.studentpersonal.updatePhoto(imagepath, id); }
		 * if(userType.equalsIgnoreCase("staff")) { imagepath =
		 * "/"+"staffphoto"+"/"+staff.get().getColleges().getExIdentifier()+"/"+userType
		 * +"/"+staff.get().getExEmployeeId()+"/"+newfilename; i = super
		 * .staffpersonal.updatePhoto(imagepath, id); }
		 * if(userType.equalsIgnoreCase("regular")) { imagepath =
		 * "/"+"userphoto"+"/"+user.get().getExName()+"/"+userType+"/"+user.get().
		 * getExUserName()+"/"+newfilename; i = super.user.updatePhoto(imagepath, id); }
		 * 
		 * 
		 * if(i == 1){ File filenew = new File(path.toString()); if(filenew.exists()){
		 * filenew.setExecutable(true , false ); filenew.setReadable(true,false);
		 * filenew.setWritable(true,false); } info.put("status", "1");
		 * info.put("message", "Image uploded successfully"); return info; }else {
		 * info.put("status", "1"); info.put("message", "Image not uploded "); return
		 * info; }
		 * 
		 * }catch(Exception e) { logger.error("Exception occured" + e); StringWriter
		 * errors = new StringWriter(); e.printStackTrace(new PrintWriter(errors));
		 * logger.error(errors.toString()); info.put("status", "0"); info.put("message",
		 * "something went wrong"); return info;
		 */
		return null;
	}

	private String createFolder(String academicyear, String collegename, String studentid, String userType) {
		try {

			String UPLOADED_FOLDER = commonHelper.getSettingValue("DOCUMENT_PATH");
			File file1 = new File(UPLOADED_FOLDER + "/" + academicyear);
			if (file1.mkdir()) {
				file1.setExecutable(true, false);
				file1.setReadable(true, false);
				file1.setWritable(true, false);
			}
			String academicyearname = file1.getPath();
			File file2 = new File(academicyearname + "/" + collegename);
			if (file2.mkdir()) {
				file2.setExecutable(true, false);
				file2.setReadable(true, false);
				file2.setWritable(true, false);

			}
			String collegenames = file2.getPath();
			File file3 = new File(collegenames + "/" + userType + "/");
			if (file3.mkdir()) {
				file3.setExecutable(true, false);
				file3.setReadable(true, false);
				file3.setWritable(true, false);
			}
			String student = file3.getPath();
			File file4 = new File(student + "/" + studentid);
			if (file4.mkdir()) {
				file4.setExecutable(true, false);
				file4.setReadable(true, false);
				file4.setWritable(true, false);
			}

			return UPLOADED_FOLDER + academicyear + "/" + collegename + "/" + userType + "/" + studentid + "/";
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
		}
		return "NA";
	}

	@Override
	public Map<String, String> createCategory(CategoryRequest request) {
		// TODO Auto-generated method stub
		Map<String, String> info = new LinkedHashMap<>();
		try {
			System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>" + request.toString());

			List<Category> tasks = new ArrayList<Category>();
			tasks = super.category.findByExNameAndExIsDelete(request.getExName().trim(), false);
			if (tasks.size() > 0) {
				info.put("status", "2");
				info.put("message", "Category name already exists");
				return info;
			}
			request.setId(null);
			Long privailageid = 32L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = request.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(true, Description, userid, privailageid);
			Date date = new Date();
			Category category = new Category();
			category.setExCreateDate(date);
			category.setExName(request.getExName());
			category.setExIsActive(request.getExIsActive());
			category.setExIsFeeApply(request.getExIsFeeApply());
			category.setExIsDelete(false);

			super.category.save(category);
			info.put("status", "1");
			info.put("message", "Category created successfully");
			info.put("id", category.getId().toString());
			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> updateCategory(CategoryRequest request) {
		// TODO Auto-generated method stub
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<Category> Category = super.category.findById(request.getId());
			if (request.getId() == null || !Category.isPresent()) {
				info.put("status", "2");
				info.put("message", "Category id not present");
				return info;
			}
			List<Category> tasks = new ArrayList<Category>();
			tasks = super.category.findByExNameAndExIsDeleteAndExIsFeeApply(request.getExName().trim(), false,
					request.getExIsFeeApply());
			if (tasks.size() > 0 && tasks.get(0).getId() != request.getId()) {
				info.put("status", "2");
				info.put("message", "Category name already exists");
				return info;
			}
			Date date = new Date();
			Long privailageid = 32L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = request.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(true, Description, userid, privailageid);
			int retval = super.category.updateCategoryRecord(request.getExName(), request.getExIsActive(), date,
					request.getExIsFeeApply(), request.getId());
			if (retval == 1) {
				info.put("status", "1");
				info.put("message", "Category updated successfully");
				return info;
			} else {
				info.put("status", "2");
				info.put("message", "Category id not present");
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> deleteCategory(CategoryRequest request) {
		// TODO Auto-generated method stub
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<Category> task = super.category.findById(request.getId());
			if (task.isPresent()) {
				if (task.get().getExIsDelete()) {
					info.put("status", "2");
					info.put("message", "Category already deleted");
					return info;
				}
				Boolean exIsDelete = true;
				Boolean is_active = false;
				int result = super.category.deleteCategory(exIsDelete, is_active, task.get().getId());
				if (result == 0) {
					info.put("status", "2");
					info.put("message", "Something went wrong");
					return info;
				}
				info.put("status", "1");
				info.put("message", "Category deleted successfully");
				return info;
			}
			info.put("status", "2");
			info.put("message", "Category id not present");
			return info;
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getCategory(CategoryRequest request) {
		// TODO Auto-generated method stub
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<Category> tasks = super.category.findByExIsDelete(false);
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Category not created");
				return info;
			} else {
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", tasks);
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> createCollege(CollegesRequest request) {
		// TODO Auto-generated method stub
		Map<String, String> info = new LinkedHashMap<>();
		try {
			List<Colleges> tasks = new ArrayList<Colleges>();
			tasks = super.colleges.findByExNameAndExIsDelete(request.getExName().trim(), false);
			if (tasks.size() > 0) {
				info.put("status", "2");
				info.put("message", "College name already exists");

				return info;
			}
			List<Colleges> task = new ArrayList<Colleges>();
			task = super.colleges.findByExIdentifierAndExIsDelete(request.getExIdentifier(), false);
			if (task.size() > 0) {
				info.put("status", "2");
				info.put("message", "identifier already exists");
				return info;
			}
			Date date = new Date();
			Long privailageid = 2L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = request.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(false, Description, userid, privailageid);
			System.out.println(">>" + Description);
			request.setId(null);
			Colleges colleges = new Colleges();
			colleges.setExCreateDate(date);
			colleges.setExIsDelete(false);
			colleges.setExLocalName(request.getExLocalName());
			colleges.setExName(request.getExName());
			colleges.setExAddress(request.getExAddress());
			colleges.setExEmail(request.getExEmail());
			colleges.setExTelephone(request.getExTelephone());
			colleges.setExFax(request.getExFax());
			colleges.setExDescription(request.getExDescription());
			colleges.setExPlace(request.getExPlace());
			colleges.setExIdentifier(request.getExIdentifier());
			colleges.setExIsActive(request.getExIsActive());
			super.colleges.save(colleges);
			info.put("status", "1");
			info.put("message", "College created successfully");
			info.put("id", colleges.getId().toString());
			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> updateCollege(CollegesRequest request) {
		// TODO Auto-generated method stub
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<Colleges> Colleges = super.colleges.findById(request.getId());
			if (request.getId() == null || !Colleges.isPresent()) {
				info.put("status", "2");
				info.put("message", "College id not present");
				return info;
			}
			List<Colleges> tasks = new ArrayList<Colleges>();
			tasks = super.colleges.findByExNameAndExIsDelete(request.getExName().trim(), false);
			if (tasks.size() > 0 && tasks.get(0).getId() != request.getId()) {
				info.put("status", "2");
				info.put("message", "College name already exists");
				return info;
			}
			List<Colleges> task = new ArrayList<Colleges>();
			task = super.colleges.findByExIdentifierAndExIsDelete(request.getExIdentifier().trim(), false);
			if (task.size() > 0 && task.get(0).getId() != request.getId()) {
				info.put("status", "2");
				info.put("message", "identifier already exists");
				return info;
			}
			Date date = new Date();

			Long privailageid = 2L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = request.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(true, Description, userid, privailageid);

			int retval = super.colleges.updateCollegeRecord(request.getExName(), request.getExIdentifier(),
					request.getExAddress(), request.getExEmail(), request.getExTelephone(), request.getExIsActive(),
					date, request.getExLocalName(), request.getExFax(), request.getExPlace(), request.getId(),
					request.getExDescription());
			if (retval == 1) {
				info.put("status", "1");
				info.put("message", "College updated successfully");
				return info;
			} else {
				info.put("status", "2");
				info.put("message", "College id not present");
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> deleteCollege(CollegesRequest request) {
		// TODO Auto-generated method stub
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<Colleges> task = super.colleges.findById(request.getId());
			if (task.isPresent()) {
				if (task.get().getExIsDelete()) {
					info.put("status", "2");
					info.put("message", "College already deleted");
					return info;
				}
				Boolean exIsDelete = true;
				Boolean is_active = false;
				int result = super.colleges.deleteCollege(exIsDelete, is_active, task.get().getId());
				if (result == 0) {
					info.put("status", "2");
					info.put("message", "Something went wrong");
					return info;
				}
				info.put("status", "1");
				info.put("message", "College deleted successfully");
				return info;
			}
			info.put("status", "2");
			info.put("message", "College id not present");
			return info;
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getCollege(CollegesRequest request) {
		// TODO Auto-generated method stub
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<Colleges> tasks = super.colleges.findByExIsDelete(false);
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "College not created");
				return info;
			} else {
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", tasks);
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> createAcademicYear(AcademicYearRequest request) {
		// TODO Auto-generated method stub

		Map<String, String> info = new LinkedHashMap<>();
		try {
			List<AcademicYear> tasks = new ArrayList<AcademicYear>();
			if (request.getExIsActive() == null) {
				info.put("status", "2");
				info.put("message", "IsActive is required 0/1");
				return info;
			}
			if (request.getExYear() == null || request.getExYear().equals("") || request.getExYear().equals("NA")) {
				info.put("status", "2");
				info.put("message", "Name is required");
				return info;
			}
			tasks = super.academicYear.findByExYearAndExIsDelete(request.getExYear().trim(), false);
			if (tasks.size() > 0) {
				info.put("status", "2");
				info.put("message", "AcademicYear name already exists");
				return info;
			}
			List<AcademicYear> task = new ArrayList<AcademicYear>();
			task = super.academicYear.findByExIdentifierAndExIsDeleteAndExIsActive(request.getExIdentifier(), false,
					true);
			if (task.size() > 0) {
				info.put("status", "2");
				info.put("message", "Identifier already exists");
				return info;
			}
			Long privailageid = 5L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = request.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(false, Description, userid, privailageid);

			Date date1 = new SimpleDateFormat("dd/MM/yyyy").parse(request.getExStartdate());
			Date date2 = new SimpleDateFormat("dd/MM/yyyy").parse(request.getExEnddate());

			AcademicYear academicYear = new AcademicYear();
			academicYear.setId(null);
			Date date = new Date();
			academicYear.setExCreateDate(date);
			academicYear.setExStartdate(date1);
			academicYear.setExEnddate(date2);
			academicYear.setExYear(request.getExYear());
			academicYear.setExDescription(request.getExDescription());
			academicYear.setExIdentifier(request.getExIdentifier());
			academicYear.setExIsDelete(false);
			academicYear.setExIsActive(request.getExIsActive());
			super.academicYear.save(academicYear);
			info.put("status", "1");
			info.put("message", "AcademicYear created successfully");
			info.put("id", academicYear.getId().toString());
			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> updateAcademicYear(AcademicYearRequest request) {
		// TODO Auto-generated method stub
		Map<String, String> info = new LinkedHashMap<>();
		try {

			List<AcademicYear> tasks = new ArrayList<AcademicYear>();
			tasks = super.academicYear.findByExYearAndExIsDelete(request.getExYear().trim(), false);
			if (tasks.size() > 0 && tasks.get(0).getId() != request.getId()) {
				info.put("status", "2");
				info.put("message", "AcademicYear name already exists");
				return info;
			}
			List<AcademicYear> task = new ArrayList<AcademicYear>();
			task = super.academicYear.findByExIdentifierAndExIsDeleteAndExIsActive(request.getExIdentifier(), false,
					true);
			if (task.size() > 0 && task.get(0).getId() != request.getId()) {
				info.put("status", "2");
				info.put("message", "Identifier already exists");
				return info;
			}
			Date date = new Date();
			Long privailageid = 5L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = request.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(true, Description, userid, privailageid);

			Date date1 = new SimpleDateFormat("dd/MM/yyyy").parse(request.getExStartdate());
			Date date2 = new SimpleDateFormat("dd/MM/yyyy").parse(request.getExEnddate());
			int retval = super.academicYear.updateAcademicYearRecord(request.getExYear(), request.getExDescription(),
					date1, date2, request.getExIsActive(), date, request.getId(), request.getExIdentifier());
			if (retval == 1) {
				info.put("status", "1");
				info.put("message", "AcademicYear updated successfully");
				return info;
			} else {
				info.put("status", "2");
				info.put("message", "AcademicYear id not present");
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> getAcademicYear(AcademicYearRequest request) {
		// TODO Auto-generated method stub
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<AcademicYear> tasks = super.academicYear.getAcademic();
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "academicYear not created");
				return info;
			} else {
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", tasks);
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> deleteAcademicYear(AcademicYearRequest request) {
		// TODO Auto-generated method stub
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<AcademicYear> task = super.academicYear.findById(request.getId());
			if (task.isPresent()) {
				if (task.get().getExIsDelete()) {
					info.put("status", "2");
					info.put("message", "academicYear already deleted");
					return info;
				}
				Boolean exIsDelete = true;
				Boolean is_active = false;
				int result = super.academicYear.deleteAcademicYear(exIsDelete, is_active, task.get().getId());
				if (result == 0) {
					info.put("status", "2");
					info.put("message", "Something went wrong");
					return info;
				}
				info.put("status", "1");
				info.put("message", "academicYear deleted successfully");
				return info;
			}
			info.put("status", "2");
			info.put("message", "academicYear id not present");
			return info;
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> createSection(SectionRequest section) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			List<Section> tasks = new ArrayList<Section>();
			tasks = super.section.findByExNameAndExIsDelete(section.getExName().trim(), false);
			if (tasks.size() > 0) {
				info.put("status", "2");
				info.put("message", "Section already exists");
				return info;
			}

			Long privailageid = 27L;
			User userid = super.commonHelper.getuser(section.getUser());
			String Description = section.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(false, Description, userid, privailageid);

			Section section1 = new Section();
			section1.setId(null);
			section1.setExIsDelete(false);
			section1.setExIsActive(section.getExIsActive());
			section1.setExName(section.getExName());
			super.section.save(section1);
			info.put("status", "1");
			info.put("message", "Section created successfully");
			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> updateSection(SectionRequest section) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<Section> Section = super.section.findById(section.getId());
			if (section.getId() == null || !Section.isPresent()) {
				info.put("status", "2");
				info.put("message", "Section id not present");
				return info;
			}

			List<Section> tasks = new ArrayList<Section>();
			tasks = super.section.findByExNameAndExIsDelete(section.getExName().trim(), false);
			if (tasks.size() > 0 && tasks.get(0).getId() != section.getId()) {
				info.put("status", "2");
				info.put("message", "Section already exists");
				return info;
			}
			Long privailageid = 27L;
			User userid = super.commonHelper.getuser(section.getUser());
			String Description = section.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(true, Description, userid, privailageid);

			int retval = super.section.updateSectionRecord(section.getExName(), section.getExIsActive(),
					section.getId());
			if (retval == 1) {
				info.put("status", "1");
				info.put("message", "Section updated successfully");
				return info;
			} else {
				info.put("status", "2");
				info.put("message", "Section id not present");
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> deleteSection(SectionRequest section) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<Section> task = super.section.findById(section.getId());
			if (task.isPresent()) {
				if (task.get().getExIsDelete()) {
					info.put("status", "2");
					info.put("message", "Section already deleted");
					return info;
				}
				Boolean exIsDelete = true;
				Boolean is_active = false;
				int result = super.section.deleteSection(exIsDelete, is_active, task.get().getId());
				if (result == 0) {
					info.put("status", "2");
					info.put("message", "Something went wrong");
					return info;
				}
				info.put("status", "1");
				info.put("message", "Section deleted successfully");
				return info;
			}
			info.put("status", "2");
			info.put("message", "Section id not present");
			return info;
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getSection(SectionRequest section) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<Section> tasks = super.section.findByExIsDelete(false);
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Section not created");
				return info;
			} else {
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", tasks);
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> createstream(StreamRequest request) {
		// TODO Auto-generated method stub
		Map<String, String> info = new LinkedHashMap<>();
		try {
			if (request.getExIsActive() == null) {
				info.put("status", "2");
				info.put("message", "IsActive is required 0/1");
				return info;
			}
			if (request.getExName() == null || request.getExName().equals("") || request.getExName().equals("NA"))

			{
				info.put("status", "2");
				info.put("message", "Name is required");
				return info;
			}

			List<Colleges> collist = new ArrayList<Colleges>();
			for (int i = 0; i < request.getColleges().size(); i++) {
				Long number = request.getColleges().get(i);
				Long col = new Long(number);
				Optional<Colleges> college = super.colleges.findByIdAndExIsDeleteAndExIsActive(col, false, true);
				if (!college.isPresent()) {
					info.put("status", "2");
					info.put("message", "Selected college not present");
					return info;
				}
				collist.add(college.get());
			}

			List<Stream> tasks = super.stream.findByExNameAndExIsDeleteAndDepartmentId(request.getExName().trim(),
					false, request.getDepartment());
			if (tasks.size() > 0) {
				info.put("status", "2");
				info.put("message", "stream name already exists with particular Department");
				return info;
			}
			List<Stream> task = new ArrayList<Stream>();
			task = super.stream.findByExIdentifierAndExIsDeleteAndDepartmentId(request.getExIdentifier(), false,
					request.getDepartment());

			if (task.size() > 0) {
				info.put("status", "2");
				info.put("message", "Identifier already exists with particular Department");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent()) {
				info.put("status", "2");
				info.put("message", "degree not present");
				return info;
			}

			Optional<Programmes> programmes = super.programmes
					.findByIdAndExIsDeleteAndExIsActive(request.getProgrammes(), false, true);

			if (!programmes.isPresent()) {
				info.put("status", "2");
				info.put("message", "programmes not present");
				return info;
			}

			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department not present");
				return info;
			}

			Date date = new Date();

			Long privailageid = 8L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = request.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(false, Description, userid, privailageid);

			Stream stream = new Stream();
			stream.setExCreateDate(date);
			stream.setExName(request.getExName());
			stream.setExLocalName(request.getExLocalName());
			stream.setDegree(degree.get());
			stream.setExIsActive(request.getExIsActive());
			stream.setExIsDelete(false);
			stream.setExIdentifier(request.getExIdentifier());
			stream.setDegree(degree.get());
			stream.setDepartment(department.get());
			stream.setProgrammes(programmes.get());
			stream.setCollege(collist);
			stream.setExDescription(request.getExDescription());
			super.stream.save(stream);

			info.put("status", "1");
			info.put("message", "stream created successfully");
			info.put("id", stream.getId().toString());
			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, String> updateStream(StreamRequest request) {
		// TODO Auto-generated method stub
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());

			if (!degree.isPresent()) {
				info.put("status", "2");
				info.put("message", "degree not present");
				return info;
			}
			Optional<Programmes> programmes = super.programmes
					.findByIdAndExIsDeleteAndExIsActive(request.getProgrammes(), false, true);

			if (!programmes.isPresent()) {
				info.put("status", "2");
				info.put("message", "programmes not present");
				return info;
			}

			List<Colleges> collist = new ArrayList<Colleges>();
			for (int i = 0; i < request.getColleges().size(); i++) {
				Long number = request.getColleges().get(i);
				Long col = new Long(number);
				Optional<Colleges> college = super.colleges.findByIdAndExIsDeleteAndExIsActive(col, false, true);
				if (!college.isPresent()) {
					info.put("status", "2");
					info.put("message", "Selected college not present");
					return info;
				}
				collist.add(college.get());
			}

			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department not present");
				return info;
			}
			List<Stream> tasks = new ArrayList<Stream>();
			tasks = super.stream.findByExNameAndExIsDeleteAndDepartmentId(request.getExName().trim(), false,
					request.getDepartment());
			if (tasks.size() > 0 && tasks.get(0).getId() != request.getId()) {
				info.put("status", "2");
				info.put("message", "Stream name already exists");
				return info;
			}
			List<Stream> task = new ArrayList<Stream>();
			task = super.stream.findByExIdentifierAndExIsDeleteAndDepartmentId(request.getExIdentifier(), false,
					request.getDepartment());

			if (task.size() > 0 && task.get(0).getId() != request.getId()) {
				info.put("status", "2");
				info.put("message", "Identifier already exists with particular Department");
				return info;
			}

			Long privailageid = 8L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = request.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(true, Description, userid, privailageid);

			Date date = new Date();
			int retval = super.stream.updateStream(request.getExName(), request.getExIdentifier(),
					request.getExIsActive(), request.getExLocalName(), request.getExDescription(), date,
					request.getId(), request.getDegree(), request.getProgrammes(), request.getDepartment());
			if (retval == 1) {
				super.stream.deleteStreamCollege(request.getId());
				for (int i = 0; i < request.getColleges().size(); i++) {
					Long number = request.getColleges().get(i);
					Long col = new Long(number);
					super.stream.saveStreamCollege(request.getId(), col);
				}
				info.put("status", "1");
				info.put("message", "Stream Updated Successfully");
				return info;
			} else {
				info.put("status", "0");
				info.put("message", "Stream Id not present");
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();

			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> getstream(StreamRequest request) {
		// TODO Auto-generated method stub
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<Stream> tasks = super.stream.findByExIsDelete(false);
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Stream not created");
				return info;
			} else {
				List dataList = new LinkedList();
				for (Stream e : tasks) {
					List college = new LinkedList();
					List collegeId = new LinkedList();
					Map<Object, Object> stre = new HashMap<Object, Object>();
					stre.put("id", e.getId());
					stre.put("exName", e.getExName());
					for (int i = 0; i < e.getCollege().size(); i++) {
						college.add(e.getCollege().get(i).getExName());
						collegeId.add(e.getCollege().get(i).getId());
					}

					stre.put("collegeId", collegeId);
					stre.put("college", college);
					stre.put("programmes", e.getProgrammes().getExName());
					stre.put("programmesId", e.getProgrammes().getId());

					stre.put("exIsActive", e.getExIsActive());
					stre.put("exIsDelete", e.getExIsDelete());
					stre.put("degree", e.getDegree().getExName());
					stre.put("degreeId", e.getDegree().getId());
					stre.put("exIdentifier", e.getExIdentifier());
					// Programmesdata.put(courses, e.getCourses());
					stre.put("department", e.getDepartment().getExName());
					stre.put("departmentId", e.getDepartment().getId());
					stre.put("exLocalName", e.getExLocalName());
					dataList.add(stre);
				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> deletestream(StreamRequest request) {
		// TODO Auto-generated method stub
		// TODO Auto-generated method stub
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<Stream> task = super.stream.findById(request.getId());
			if (task.isPresent()) {
				if (task.get().getExIsDelete()) {
					info.put("status", "2");
					info.put("message", "Stream already deleted");
					return info;
				}
				Boolean exIsDelete = true;
				Boolean is_active = false;
				int result = super.stream.DeleteStream(exIsDelete, is_active, task.get().getId());
				if (result == 0) {
					info.put("status", "2");
					info.put("message", "Something went wrong");
					return info;
				}
				info.put("status", "1");
				info.put("message", "Stream deleted successfully");
				return info;
			}
			info.put("status", "2");
			info.put("message", "Stream id not present");
			return info;
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, String> createBatch(BatchRequest request) {
		// TODO Auto-generated method stub

		Map<String, String> info = new LinkedHashMap<>();
		try {
			System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>" + request.toString());
			Optional<Programmes> programmes = super.programmes
					.findByIdAndExIsDeleteAndExIsActive(request.getProgrammes(), false, true);
			if (!programmes.isPresent()) {
				info.put("status", "2");
				info.put("message", "programmes not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent()) {
				info.put("status", "2");
				info.put("message", "degree not present");
				return info;
			}

			List<Batch> tasks = new ArrayList<Batch>();
			tasks = super.batch.findByExNameAndExIsDeleteAndExIdentifierAndDegreeIdAndProgrammesId(
					request.getExName().trim(), false, request.getExIdentifier(), request.getDegree(),
					request.getProgrammes());
			if (tasks.size() > 0) {
				info.put("status", "2");
				info.put("message", "batch name already exists");
				return info;

			}

			Date date = new Date();

			Long privailageid = 4L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = request.toString();
			System.out.println(">>" + Description);
			Boolean audit = super.commonHelper.saveauditlogdetails(false, Description, userid, privailageid);

			Batch batch = new Batch();
			request.setId(null);
			batch.setExCreateDate(date);
			batch.setExName(request.getExName());
			batch.setExDescription(request.getExDescription());
			batch.setExIdentifier(request.getExIdentifier());
			batch.setExIsActive(request.getExIsActive());
			batch.setExIsDelete(false);
			batch.setDegree(degree.get());
			batch.setProgrammes(programmes.get());
			super.batch.save(batch);
			info.put("status", "1");
			info.put("message", "batch created successfully");
			info.put("id", batch.getId().toString());
			return info;
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getBatch(BatchRequest request) {

		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<Batch> tasks = super.batch.findByExIsDelete(false);
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Department not created");
				return info;
			} else {
				List dataList = new LinkedList();
				for (Batch e : tasks) {
					List college = new LinkedList();
					List collegeId = new LinkedList();
					Map<Object, Object> data = new HashMap<Object, Object>(); //

					data.put("id", e.getId());
					data.put("exIsActive", e.getExIsActive());

					data.put("exName", e.getExName());

					data.put("exDescription", e.getExDescription());
					data.put("exIsDelete", e.getExIsDelete());
					data.put("degree", e.getDegree().getExName());
					data.put("degreeId", e.getDegree().getId());
					data.put("programmes", e.getProgrammes().getExName());
					data.put("programmesId", e.getProgrammes().getId());
					data.put("exIdentifier", e.getExIdentifier());
					dataList.add(data);
				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> updateBatch(@Valid BatchRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<Batch> Batch = super.batch.findById(request.getId());
			if (request.getId() == null || !Batch.isPresent()) {
				info.put("status", "2");
				info.put("message", "Batch id not present");
				return info;
			}
			List<Batch> tasks = new ArrayList<Batch>();
			tasks = super.batch.findByExNameAndExIsDeleteAndExIdentifierAndDegreeIdAndProgrammesId(
					request.getExName().trim(), false, request.getExIdentifier().trim(), request.getDegree(),
					request.getProgrammes());
			if (tasks.size() > 0 && tasks.get(0).getId() != request.getId()) {
				info.put("status", "2");
				info.put("message", "Batch name already exists");
				return info;
			}
			/*
			 * List<Batch> task = new ArrayList<Batch>(); task =
			 * super.batch.findByExIdentifierAndExIsDelete(request.getExIdentifier(),
			 * false); if (task.size() > 0 && task.get(0).getId() != request.getId()) {
			 * info.put("status", "2"); info.put("message", "Identifier  already exists");
			 * return info; }
			 */
			Date date = new Date();

			Long privailageid = 4L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = request.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(true, Description, userid, privailageid);

			int retval = super.batch.updateBatchRecord(request.getExName(), request.getExIsActive(),
					request.getExDescription(), date, request.getId(), request.getExIdentifier(), request.getDegree(),
					request.getProgrammes());
			if (retval == 1) {
				info.put("status", "1");
				info.put("message", "Batch updated successfully");
				return info;
			} else {
				info.put("status", "2");
				info.put("message", "Batch id not present");
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> deleteBatch(BatchRequest request) {

		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<Batch> task = super.batch.findById(request.getId());
			if (task.isPresent()) {
				if (task.get().getExIsDelete()) {
					info.put("status", "2");
					info.put("message", "batch already deleted");
					return info;
				}
				Boolean exIsDelete = true;
				Boolean is_active = false;
				int result = super.batch.deleteBatch(exIsDelete, is_active, task.get().getId());
				if (result == 0) {
					info.put("status", "2");
					info.put("message", "Something went wrong");
					return info;
				}
				info.put("status", "1");
				info.put("message", "batch deleted successfully");
				return info;
			}
			info.put("status", "2");
			info.put("message", "batch id not present");
			return info;
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> createProgramType(ProgramTypeRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>" + request.toString());

			List<ProgramType> tasks = new ArrayList<ProgramType>();
			tasks = super.programtype.findByExNameAndExIsDelete(request.getExName().trim(), false);
			if (tasks.size() > 0) {
				info.put("status", "2");
				info.put("message", "program type  name already exists");
				return info;
			}

			Long privailageid = 26L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = request.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(false, Description, userid, privailageid);

			Date date = new Date();
			ProgramType programtype = new ProgramType();
			request.setId(null);
			programtype.setExCreateDate(date);
			programtype.setExName(request.getExName());
			programtype.setExDescription(request.getExDescription());
			programtype.setExIsActive(request.getExIsActive());
			programtype.setExIsDelete(false);

			super.programtype.save(programtype);
			info.put("status", "1");
			info.put("message", "programtype created successfully");
			info.put("id", programtype.getId().toString());
			return info;
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> getProgramType(ProgramTypeRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<ProgramType> tasks = super.programtype.findByExIsDelete(false);
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "program type not created");
				return info;
			} else {
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", tasks);
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> deleteProgramType(ProgramTypeRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<ProgramType> task = super.programtype.findById(request.getId());
			if (task.isPresent()) {
				if (task.get().getExIsDelete()) {
					info.put("status", "2");
					info.put("message", "program type already deleted");
					return info;
				}
				Boolean exIsDelete = true;
				Boolean is_active = false;
				int result = super.programtype.deleteProgramType(exIsDelete, is_active, task.get().getId());
				if (result == 0) {
					info.put("status", "2");
					info.put("message", "Something went wrong");
					return info;
				}
				info.put("status", "1");
				info.put("message", "program type deleted successfully");
				return info;
			}
			info.put("status", "2");
			info.put("message", "program type id not present");
			return info;
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> updateProgramType(ProgramTypeRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<ProgramType> ProgramType = super.programtype.findById(request.getId());
			if (request.getId() == null || !ProgramType.isPresent()) {
				info.put("status", "2");
				info.put("message", "ProgramType id not present");
				return info;
			}
			List<ProgramType> tasks = new ArrayList<ProgramType>();
			tasks = super.programtype.findByExNameAndExIsDelete(request.getExName().trim(), false);
			if (tasks.size() > 0 && tasks.get(0).getId() != request.getId()) {
				info.put("status", "2");
				info.put("message", "ProgramType name already exists");
				return info;
			}
			Date date = new Date();

			Long privailageid = 26L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = request.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(true, Description, userid, privailageid);

			int retval = super.programtype.updateProgramTypeRecord(request.getExName(), request.getExIsActive(),
					request.getExDescription(), date, request.getId());
			if (retval == 1) {
				info.put("status", "1");
				info.put("message", "program type updated successfully");
				return info;
			} else {
				info.put("status", "2");
				info.put("message", "program type id not present");
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> createCoursesType(CoursesTypeRequest request) {

		Map<String, String> info = new LinkedHashMap<>();
		try {
			System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>" + request.toString());

			List<CoursesType> tasks = new ArrayList<CoursesType>();
			tasks = super.coursestype.findByExNameAndExIsDelete(request.getExName().trim(), false);
			if (tasks.size() > 0) {
				info.put("status", "2");
				info.put("message", "courses type  name already exists");
				return info;
			}
			request.setId(null);
			Date date = new Date();
			CoursesType coursestype = new CoursesType();
			coursestype.setExCreateDate(date);
			coursestype.setExName(request.getExName());

			coursestype.setExDescription(request.getExDescription());
			coursestype.setExIsActive(request.getExIsActive());
			coursestype.setExIsDelete(false);

			super.coursestype.save(coursestype);
			info.put("status", "1");
			info.put("message", "courses type created successfully");
			info.put("id", coursestype.getId().toString());
			return info;
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> getCoursesType(CoursesTypeRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<CoursesType> tasks = super.coursestype.findByExIsDelete(false);
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Courses type not created");
				return info;
			} else {
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", tasks);
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> deleteCoursesType(CoursesTypeRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<CoursesType> task = super.coursestype.findById(request.getId());
			if (task.isPresent()) {
				if (task.get().getExIsDelete()) {
					info.put("status", "2");
					info.put("message", "CoursesType  already deleted");
					return info;
				}
				Boolean exIsDelete = true;
				Boolean is_active = false;
				int result = super.coursestype.deleteCoursesType(exIsDelete, is_active, task.get().getId());
				if (result == 0) {
					info.put("status", "2");
					info.put("message", "Something went wrong");
					return info;
				}
				info.put("status", "1");
				info.put("message", "CoursesType  deleted successfully");
				return info;
			}
			info.put("status", "2");
			info.put("message", "CoursesType  id not present");
			return info;
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> updateCoursesType(CoursesTypeRequest request) {

		Map<String, String> info = new LinkedHashMap<>();
		try {
			if (request.getExDescription() == null || request.getExDescription().equals("")) {
				info.put("status", "2");
				info.put("message", "Description  is required");
				return info;
			}
			Optional<CoursesType> CoursesType = super.coursestype.findById(request.getId());
			if (request.getId() == null || !CoursesType.isPresent()) {
				info.put("status", "2");
				info.put("message", "CoursesType id not present");
				return info;
			}
			List<CoursesType> tasks = new ArrayList<CoursesType>();
			tasks = super.coursestype.findByExNameAndExIsDelete(request.getExName().trim(), false);
			if (tasks.size() > 0 && tasks.get(0).getId() != request.getId()) {
				info.put("status", "2");
				info.put("message", "CoursesType name already exists");
				return info;
			}
			Date date = new Date();

			int retval = super.coursestype.updateCoursesTypeRecord(request.getExName(), request.getExIsActive(),
					request.getExDescription(), date, request.getId());
			if (retval == 1) {
				info.put("status", "1");
				info.put("message", "courses type updated successfully");
				return info;
			} else {
				info.put("status", "2");
				info.put("message", "courses type id not present");
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> createAcademicCalenderActivity(AcademicCalenderActivityRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>" + request.toString());
			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}
			List<AcademicCalenderActivity> tasks = new ArrayList<AcademicCalenderActivity>();
			tasks = super.academiccalenderactivity.findByExNameAndExIsDeleteAndAcademicYearId(
					request.getExName().trim(), false, request.getAcademicYear());
			if (tasks.size() > 0) {
				info.put("status", "2");
				info.put("message", "academic activity  name already exists");
				return info;
			}

			Date date = new Date();
			Long privailageid = 11L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = request.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(false, Description, userid, privailageid);
			AcademicCalenderActivity academiccalenderactivity = new AcademicCalenderActivity();
			request.setId(null);
			academiccalenderactivity.setExCreateDate(date);
			academiccalenderactivity.setExName(request.getExName());
			academiccalenderactivity.setExIdentifier(request.getExIdentifier());
			academiccalenderactivity.setExDescription(request.getExDescription());
			academiccalenderactivity.setExIsActive(request.getExIsActive());
			academiccalenderactivity.setExIsDelete(false);
			academiccalenderactivity.setAcademicYear(academic.get());
			academiccalenderactivity.setExIsEven(request.getExIsEven());
			super.academiccalenderactivity.save(academiccalenderactivity);
			info.put("status", "1");
			info.put("message", "academic activity created successfully");
			info.put("id", academiccalenderactivity.getId().toString());
			return info;
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> getAcademicCalenderActivity(AcademicCalenderActivityRequest request) {

		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<AcademicCalenderActivity> tasks = super.academiccalenderactivity.findByExIsDelete(false);
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "academic activity  not created");
				return info;
			} else {
				List dataList = new LinkedList();
				for (AcademicCalenderActivity e : tasks) {
					Map<Object, Object> RoomMasterdata = new HashMap<Object, Object>();
					RoomMasterdata.put("id", e.getId());
					RoomMasterdata.put("exName", e.getExName());
					RoomMasterdata.put("AcademicYearId", e.getAcademicYear().getId());
					RoomMasterdata.put("AcademicYear", e.getAcademicYear().getExYear());
					RoomMasterdata.put("exDescription", e.getExDescription());
					RoomMasterdata.put("exIsActive", e.getExIsActive());
					RoomMasterdata.put("exIsDelete", e.getExIsDelete());
					RoomMasterdata.put("exIdentifier", e.getExIdentifier());
					RoomMasterdata.put("exIsEven", e.getExIsEven());

					dataList.add(RoomMasterdata);
				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> deleteAcademicCalenderActivity(AcademicCalenderActivityRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<AcademicCalenderActivity> task = super.academiccalenderactivity.findById(request.getId());
			if (task.isPresent()) {
				if (task.get().getExIsDelete()) {
					info.put("status", "2");
					info.put("message", "academic activity   already deleted");
					return info;
				}
				Boolean exIsDelete = true;
				Boolean is_active = false;
				int result = super.academiccalenderactivity.deleteAcademicCalenderActivity(exIsDelete, is_active,
						task.get().getId());
				if (result == 0) {
					info.put("status", "2");
					info.put("message", "Something went wrong");
					return info;
				}
				info.put("status", "1");
				info.put("message", "academic activity   deleted successfully");
				return info;
			}
			info.put("status", "2");
			info.put("message", "academic activity   id not present");
			return info;
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> updateAcademicCalenderActivity(@Valid AcademicCalenderActivityRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}
			Optional<AcademicCalenderActivity> AcademicCalenderActivity = super.academiccalenderactivity
					.findById(request.getId());
			if (request.getId() == null || !AcademicCalenderActivity.isPresent()) {
				info.put("status", "2");
				info.put("message", "Academic Calender Activity id not present");
				return info;
			}

			/*
			 * List<AcademicCalenderActivity> tasks = new
			 * ArrayList<AcademicCalenderActivity>(); tasks =
			 * super.academiccalenderactivity.findByExNameAndExIsDeleteAndAcademicYearId(
			 * request.getExName().trim(), false,request.getAcademicYear()); if
			 * (tasks.size() > 0 && tasks.get(0).getId() != request.getId()) {
			 * info.put("status", "2"); info.put("message",
			 * "Academic Calender Activity name already exists"); return info; }
			 */
			Date date = new Date();

			Long privailageid = 11L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = request.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(true, Description, userid, privailageid);

			int retval = super.academiccalenderactivity.updateAcademicCalenderActivityRecord(request.getExName(),
					request.getExIsActive(), request.getExDescription(), date, request.getId(), academic.get(),
					request.getExIsEven());
			if (retval == 1) {
				info.put("status", "1");
				info.put("message", "Academic Calender Activity updated successfully");
				return info;
			} else {
				info.put("status", "2");
				info.put("message", "Academic Calender Activity id not present");
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> createProgrammeYear(ProgrammeYearRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			List<ProgrammeYear> tasks = new ArrayList<ProgrammeYear>();
			tasks = super.programmeYear.findByExNameAndExIsDelete(request.getExName().trim(), false);
			if (tasks.size() > 0) {
				info.put("status", "2");
				info.put("message", "programmeYear already exists");
				return info;
			}
			List<ProgrammeYear> task = new ArrayList<ProgrammeYear>();
			task = super.programmeYear.findByExIdentifierAndExIsDeleteAndExIsActive(request.getExIdentifier(), false,
					true);
			if (task.size() > 0) {
				info.put("status", "2");
				info.put("message", "Identifier already exists");
				return info;
			}

			Date date = new Date();

			Long privailageid = 17L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = request.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(false, Description, userid, privailageid);
			ProgrammeYear programmeYear = new ProgrammeYear();
			request.setId(null);
			programmeYear.setExCreateDate(date);
			programmeYear.setExIsDelete(false);
			programmeYear.setExDescription(request.getExDescription());
			programmeYear.setExIsActive(request.getExIsActive());
			programmeYear.setExIdentifier(request.getExIdentifier());
			programmeYear.setExName(request.getExName());
			super.programmeYear.save(programmeYear);
			info.put("status", "1");
			info.put("message", "programmeYear created successfully");
			info.put("id", programmeYear.getId().toString());

			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> updateProgrammeYear(ProgrammeYearRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			if (request.getExDescription() == null || request.getExDescription().equals("")
					|| request.getExDescription().equals("NA")) {
				info.put("status", "2");
				info.put("message", "Description  is required");
				return info;
			}
			Optional<ProgrammeYear> ProgrammeYear = super.programmeYear.findById(request.getId());
			if (request.getId() == null || !ProgrammeYear.isPresent()) {
				info.put("status", "2");
				info.put("message", "programmeYear id not present");
				return info;
			}

			List<ProgrammeYear> tasks = new ArrayList<ProgrammeYear>();
			tasks = super.programmeYear.findByExNameAndExIsDelete(request.getExName().trim(), false);
			if (tasks.size() > 0 && tasks.get(0).getId() != request.getId()) {
				info.put("status", "2");
				info.put("message", "programmeYear already exists");
				return info;
			}
			List<ProgrammeYear> task = new ArrayList<ProgrammeYear>();
			task = super.programmeYear.findByExIdentifierAndExIsDeleteAndExIsActive(request.getExIdentifier(), false,
					true);
			if (task.size() > 0 && task.get(0).getId() != request.getId()) {
				info.put("status", "2");
				info.put("message", "Identifier already exists");
				return info;
			}

			Date date = new Date();

			Long privailageid = 17L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = request.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(true, Description, userid, privailageid);

			int retval = super.programmeYear.updateProgrammeYearRecord(request.getExName(), request.getExDescription(),
					date, request.getExIsActive(), request.getExIdentifier(), request.getId());
			if (retval == 1) {
				info.put("status", "1");
				info.put("message", "programmeYear updated successfully");
				return info;
			} else {
				info.put("status", "2");
				info.put("message", "programmeYear id not present");
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> deleteProgrammeYear(ProgrammeYearRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<ProgrammeYear> task = super.programmeYear.findById(request.getId());
			if (task.isPresent()) {
				if (task.get().getExIsDelete()) {
					info.put("status", "2");
					info.put("message", "programmeYear already deleted");
					return info;
				}
				Boolean exIsDelete = true;
				Boolean is_active = false;
				int result = super.programmeYear.deleteProgrammeYear(exIsDelete, is_active, task.get().getId());
				if (result == 0) {
					info.put("status", "2");
					info.put("message", "Something went wrong");
					return info;
				}
				info.put("status", "1");
				info.put("message", "programmeYear deleted successfully");
				return info;
			}
			info.put("status", "2");
			info.put("message", "programmeYear id not present");
			return info;
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getProgrammeYear(ProgrammeYearRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<ProgrammeYear> tasks = super.programmeYear.findByExIsDelete(false);
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "programmeYear not created");
				return info;
			} else {
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", tasks);
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> createRegistrationType(RegistrationTypeRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			List<RegistrationType> tasks = new ArrayList<RegistrationType>();
			tasks = super.registrationType.findByExNameAndExIsDelete(request.getExName().trim(), false);
			if (tasks.size() > 0) {
				info.put("status", "2");
				info.put("message", "RegistrationType name already exists");

				return info;
			}

			Date date = new Date();

			Long privailageid = 20L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = request.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(false, Description, userid, privailageid);

			RegistrationType registrationType = new RegistrationType();
			request.setId(null);
			registrationType.setExCreateDate(date);
			registrationType.setExIsDelete(false);
			registrationType.setExIsActive(request.getExIsActive());
			registrationType.setExName(request.getExName());
			registrationType.setExDescription(request.getExDescription());
			super.registrationType.save(registrationType);
			info.put("status", "1");
			info.put("message", "RegistrationType created successfully");
			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> updateRegistrationType(RegistrationTypeRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<RegistrationType> RegistrationType = super.registrationType.findById(request.getId());
			if (request.getId() == null || !RegistrationType.isPresent()) {
				info.put("status", "2");
				info.put("message", "RegistrationType id not present");
				return info;
			}

			List<RegistrationType> tasks = new ArrayList<RegistrationType>();
			tasks = super.registrationType.findByExNameAndExIsDelete(request.getExName().trim(), false);
			if (tasks.size() > 0 && tasks.get(0).getId() != request.getId()) {
				info.put("status", "2");
				info.put("message", "RegistrationType name already exists");
				return info;
			}
			Date date = new Date();
			Long privailageid = 20L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = request.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(true, Description, userid, privailageid);

			int retval = super.registrationType.updateRegistrationTypeRecord(request.getExName(),
					request.getExIsActive(), date, request.getId(), request.getExDescription());
			if (retval == 1) {
				info.put("status", "1");
				info.put("message", "RegistrationType updated successfully");
				return info;
			} else {
				info.put("status", "2");
				info.put("message", "RegistrationType id not present");
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, String> deleteRegistrationType(RegistrationTypeRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<RegistrationType> task = super.registrationType.findById(request.getId());
			if (task.isPresent()) {
				if (task.get().getExIsDelete()) {
					info.put("status", "2");
					info.put("message", "RegistrationType already deleted");
					return info;
				}
				Boolean exIsDelete = true;
				Boolean is_active = false;
				int result = super.registrationType.deleteRegistrationType(exIsDelete, is_active, task.get().getId());
				if (result == 0) {
					info.put("status", "2");
					info.put("message", "Something went wrong");
					return info;
				}
				info.put("status", "1");
				info.put("message", "RegistrationType deleted successfully");
				return info;
			}
			info.put("status", "2");
			info.put("message", "RegistrationType id not present");
			return info;
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getRegistrationType(RegistrationTypeRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<RegistrationType> tasks = super.registrationType.findByExIsDelete(false);
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "RegistrationType not created");
				return info;
			} else {
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", tasks);
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> createCourseGroup(CourseGroupRequest request) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Map<String, String> updateCourseGroup(CourseGroupRequest request) {
		// TODO Auto-generated method stub
		return null;
	}
	/*
	 * @Override public Map<String, String> createelectiveGroup(ElectiveGroupRequest
	 * request) { Map<String, String> info = new LinkedHashMap<>(); try {
	 * List<ElectiveGroup> tasks = new ArrayList<ElectiveGroup>();
	 * System.out.println("LL"+tasks); tasks =
	 * super.electiveGroup.findByExGroupNameAndExIsDelete(request.getExGroupName().
	 * trim() , false); System.out.println("LLLLl"+tasks); if (tasks.size() > 0) {
	 * info.put("status", "2"); info.put("message",
	 * "ElectiveGroup name already exists");
	 * System.out.println(">>>>>>>>>>."+tasks); return info; } request.setId(null);
	 * Date date = new Date(); ElectiveGroup electivegroup = new ElectiveGroup();
	 * electivegroup.setExCreateDate(date); electivegroup.setExIsDelete(false);
	 * System.out.println(">>>>>>>>>>."+electivegroup);
	 * electivegroup.setExIsActive(request.getExIsActive());
	 * electivegroup.setExGroupName(request.getExGroupName());
	 * System.out.println(">>>>>>>>>>."+electivegroup);
	 * super.electiveGroup.save(electivegroup); info.put("status", "1");
	 * info.put("message", "ElectiveGraoup created successfully"); return info;
	 * 
	 * }catch(Exception e) { logger.error("Exception occured" + e); StringWriter
	 * errors = new StringWriter(); e.printStackTrace(new PrintWriter(errors));
	 * logger.error(errors.toString()); info.put("status", "0"); info.put("message",
	 * "Something went wrong"); return info; } }
	 */

	@Override
	public Map<String, String> createelectiveGroup(ElectiveGroupRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			List<ElectiveGroup> tasks = new ArrayList<ElectiveGroup>();
			Optional<Colleges> Colleges = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),
					false, true);
			if (!Colleges.isPresent() || !Colleges.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}

			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent() || !academic.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}

			Optional<Programmes> Programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Programmes.isPresent() || !Programmes.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}

			Optional<ProgrammeYear> programmeYear = super.programmeYear
					.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
			if (!programmeYear.isPresent() || !programmeYear.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				System.out.println(">>>>>>>>>>>>>>>>>>>>>" + programmeYear);
				return info;
			}
			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!sem.isPresent() || !sem.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Semster not present");
				return info;
			}
			Optional<Department> dep = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!dep.isPresent() || !dep.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Department not present");
				return info;
			}
			Optional<Batch> batch = super.batch.findByExIsDeleteAndExIsActiveAndId(false, true, request.getBatch());
			if (!batch.isPresent() || !batch.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Semster not present");
				return info;
			}

			Optional<User> user = super.user.findByExIsDeleteAndExIsActiveAndId(false, true, request.getUser());
			if (!Programmes.isPresent() || !Programmes.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}

			tasks = super.electiveGroup
					.findByExGroupNameAndAcademicYearIdAndProgrammesIdAndProgrammeYearIdAndDegreeIdAndExIsDeleteAndExIsActiveAndCollegesIdAndSemesterIdAndDepartmentIdAndBatchIdAndUserId(
							request.getExGroupName(), request.getAcademicYear(), request.getProgrammes(),
							request.getProgrammeYear(), request.getDegree(), false, true, request.getColleges(),
							request.getSemester(), request.getDepartment(), request.getBatch(), request.getUser());
			if (tasks.size() > 0) {
				info.put("status", "2");
				info.put("message", "electiveGroup  name already exists");
				return info;
			}

			Date date = new Date();

			Long privailageid = 14L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = request.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(false, Description, userid, privailageid);

			ElectiveGroup electiveGroup = new ElectiveGroup();
			electiveGroup.setExCreateDate(date);
			electiveGroup.setExGroupName(request.getExGroupName());
			electiveGroup.setDegree(degree.get());
			electiveGroup.setProgrammes(Programmes.get());
			electiveGroup.setProgrammeYear(programmeYear.get());
			System.out.println("<<<<<<<<<" + programmeYear);
			electiveGroup.setColleges(Colleges.get());
			electiveGroup.setSemester(sem.get());
			System.out.println(">>>>>>>>>." + electiveGroup);
			electiveGroup.setAcademicYear(academic.get());
			electiveGroup.setDepartment(dep.get());
			electiveGroup.setBatch(batch.get());
			electiveGroup.setUser(user.get());
			electiveGroup.setExIsDelete(false);
			electiveGroup.setExIsActive(request.getExIsActive());
			super.electiveGroup.save(electiveGroup);
			info.put("status", "1");
			info.put("message", "ElectiveGroup created successfully");
			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getelectiveGroup(ElectiveGroupRequest request) {

		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<ElectiveGroup> tasks = super.electiveGroup.findByExIsDelete(false);
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "ElectiveGroup not created");
				return info;
			} else {
				List dataList = new LinkedList();
				for (ElectiveGroup e : tasks) {
					Map<Object, Object> ElectiveGroupdata = new HashMap<Object, Object>();
					ElectiveGroupdata.put("id", e.getId());
					ElectiveGroupdata.put("exGroupName", e.getExGroupName());
					ElectiveGroupdata.put("exIsActive", e.getExIsActive());
					ElectiveGroupdata.put("exIsDelete", e.getExIsDelete());
					ElectiveGroupdata.put("programmes", e.getProgrammes().getExName());
					ElectiveGroupdata.put("programmesId", e.getProgrammes().getId());

					ElectiveGroupdata.put("programmeYear", e.getProgrammeYear().getExName());
					ElectiveGroupdata.put("programmeYearId", e.getProgrammeYear().getId());
					ElectiveGroupdata.put("semester", e.getSemester().getExName());
					ElectiveGroupdata.put("semesterId", e.getSemester().getId());

					ElectiveGroupdata.put("academicYear", e.getAcademicYear().getExYear());
					ElectiveGroupdata.put("academicYearId", e.getAcademicYear().getId());

					ElectiveGroupdata.put("degree", e.getDegree().getExName());
					ElectiveGroupdata.put("degreeId", e.getDegree().getId());

					ElectiveGroupdata.put("colleges", e.getColleges().getExName());
					ElectiveGroupdata.put("collegesId", e.getColleges().getId());
					ElectiveGroupdata.put("department", e.getDepartment().getExName());
					ElectiveGroupdata.put("departmentid", e.getDepartment().getId());
					ElectiveGroupdata.put("batch", e.getBatch().getExName());
					ElectiveGroupdata.put("batchId", e.getBatch().getId());
					ElectiveGroupdata.put("user", e.getUser().getExName());
					ElectiveGroupdata.put("userId", e.getUser().getId());

					dataList.add(ElectiveGroupdata);
				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> deleteelectiveGroup(ElectiveGroupRequest request) {

		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<ElectiveGroup> task = super.electiveGroup.findById(request.getId());
			if (task.isPresent()) {
				if (task.get().getExIsDelete()) {
					info.put("status", "2");
					info.put("message", "ElectiveGroup already deleted");
					return info;
				}
				Boolean exIsDelete = true;
				Boolean is_active = false;
				int result = super.electiveGroup.deleteelectiveGroup(exIsDelete, is_active, task.get().getId());
				if (result == 0) {
					info.put("status", "2");
					info.put("message", "Something went wrong");
					return info;
				}
				info.put("status", "1");
				info.put("message", "ElectiveGroup deleted successfully");
				return info;
			}
			info.put("status", "2");
			info.put("message", "ElectiveGroup id not present");
			return info;
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> updateelectiveGroup(ElectiveGroupRequest request) {

		Map<String, String> info = new LinkedHashMap<>();
		try {

			List<ElectiveGroup> result = super.electiveGroup
					.findByExGroupNameAndAcademicYearIdAndProgrammesIdAndProgrammeYearIdAndDegreeIdAndExIsDeleteAndExIsActiveAndCollegesIdAndSemesterIdAndDepartmentIdAndBatchIdAndUserId(
							request.getExGroupName(), request.getAcademicYear(), request.getProgrammes(),
							request.getProgrammeYear(), request.getDegree(), false, true, request.getColleges(),
							request.getSemester(), request.getDepartment(), request.getBatch(), request.getUser());
			if (result.size() > 0 && result.get(0).getId() != request.getId()) {
				info.put("status", "2");
				info.put("message", "elective group  name already exists");
				return info;
			}

			Date date = new Date();

			Long privailageid = 14L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = request.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(true, Description, userid, privailageid);

			int retval = super.electiveGroup.updateelectiveGroup(request.getExGroupName(), request.getProgrammes(),
					date, request.getExIsActive(), request.getProgrammeYear(), request.getSemester(),
					request.getAcademicYear(), request.getColleges(), request.getDegree(), request.getDepartment(),
					request.getBatch(), request.getUser(), request.getId());
			if (retval == 1) {
				info.put("status", "1");
				info.put("message", "elective group updated successfully");
				return info;
			} else {
				info.put("status", "2");
				info.put("message", "elective group id not present");
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<Object, Object> electiveGroupMapping(ElectiveGroupRequest request) {
		Map<Object, Object> info = new LinkedHashMap<>();
		try {
			Optional<ElectiveGroup> electiveGroup = super.electiveGroup
					.findByIdAndExIsDeleteAndExIsActive(request.getElectiveGroup(), false, true);
			if (!electiveGroup.isPresent()) {
				info.put("status", "2");
				info.put("message", "Elective group id not present");
				return info;
			}

			Optional<Department> department = super.department
					.findByIdAndExIsDeleteAndExIsActive(electiveGroup.get().getDepartment().getId(), false, true);
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "department id not present");
				return info;
			}

			Optional<AcademicYear> academicYear = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(electiveGroup.get().getAcademicYear().getId(), false, true);
			if (!academicYear.isPresent()) {
				info.put("status", "2");
				info.put("message", "AcademicYear id not present");
				return info;
			}

			Optional<Programmes> program = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					electiveGroup.get().getProgrammes().getId());
			if (!program.isPresent()) {
				info.put("status", "2");
				info.put("message", "Programme not present");
				return info;
			}

			Optional<Colleges> collage = super.colleges
					.findByIdAndExIsDeleteAndExIsActive(electiveGroup.get().getColleges().getId(), false, true);
			if (!collage.isPresent()) {
				info.put("status", "2");
				info.put("message", "College Id not Present");
				return info;
			}
			Optional<ProgrammeYear> programmeYear = super.programmeYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					electiveGroup.get().getProgrammeYear().getId());
			if (!program.isPresent()) {
				info.put("status", "2");
				info.put("message", "ProgrammeYear not present");
				return info;
			}
			Optional<Semster> semester = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					electiveGroup.get().getSemester().getId());
			if (!program.isPresent()) {
				info.put("status", "2");
				info.put("message", "semester not present");
				return info;
			}
			Optional<Batch> batch = super.batch.findByExIsDeleteAndExIsActiveAndId(false, true,
					electiveGroup.get().getBatch().getId());
			if (!batch.isPresent()) {
				info.put("status", "2");
				info.put("message", "batch not present");
				return info;
			}

			Optional<Degree> degree = super.degree
					.findByIdAndExIsDeleteAndExIsActive(electiveGroup.get().getDegree().getId(), false, true);
			if (!degree.isPresent()) {
				info.put("status", "2");
				info.put("message", "degree not Present");
				return info;
			}
			logger.info("electiveGroupMappingrequest :" + request.toString());

			if (request.getCourses() == null || request.getCourses().equals("")) {
				info.put("status", "2");
				info.put("message", "Please select courses ");
				return info;
			}
			List<Courses> courses = new ArrayList<Courses>();

			for (int i = 0; i < request.getCourses().size(); i++) {
				Integer number = (Integer) request.getCourses().get(i);
				Long course = new Long(number);
				System.out.println(">>>>>>>>>>>>>>>>" + course);

				// Optional<Courses> res =
				// super.courses.findByIdAndExIsDeleteAndExIsActiveAndAcademicYearIdAndProgrammeYearIdAndSemesterId(course,false,true,request.getAcademicYear(),request.getProgrammeYear(),request.getSemester());
				Optional<Courses> res = super.courses
						.findByIdAndExIsDeleteAndExIsActiveAndAcademicYearIdAndProgrammeYearIdAndSemesterIdAndDegreeIdAndCollegesIdAndDepartmentIdAndBatchIdAndProgrammesId(
								course, false, true, academicYear.get().getId(), programmeYear.get().getId(),
								semester.get().getId(), degree.get().getId(), collage.get().getId(),
								department.get().getId(), batch.get().getId(), program.get().getId());

				if (!res.isPresent()) {
					info.put("status", "2");
					info.put("message", "Please provide active courses array list");

					return info;
				}
			}
			List dataList1 = new LinkedList();

			System.out.println("???????????????????????????????????" + request);
			for (int j = 0; j < request.getCourses().size(); j++) {
				Integer number = (Integer) request.getCourses().get(j);
				Long cours = new Long(number);

				List<ElectiveCoursesGroup> result = super.electiveCoursesGroup.findByCoursesIdAndElectiveGroupId(cours,
						request.getElectiveGroup());
				if (!result.isEmpty()) {
					dataList1.add(result);
				}
			}
			if (dataList1.size() > 0) {
				info.put("status", "2");
				info.put("message", "group already exists");

			} else {
				List dataList = new LinkedList();

				for (int i = 0; i < request.getCourses().size(); i++) {
					Integer number = (Integer) request.getCourses().get(i);
					Long cours = new Long(number);
					System.out.println(">>>>>>>>>>>>>>>>" + cours);

					// Optional<Courses> res =
					// super.courses.findByIdAndExIsDeleteAndExIsActiveAndAcademicYearIdAndProgrammeYearIdAndSemesterId(course,false,true,request.getAcademicYear(),request.getProgrammeYear(),request.getSemester());
					Optional<Courses> res = super.courses
							.findByIdAndExIsDeleteAndExIsActiveAndAcademicYearIdAndProgrammeYearIdAndSemesterIdAndDegreeIdAndCollegesIdAndDepartmentIdAndBatchIdAndProgrammesId(
									cours, false, true, academicYear.get().getId(), programmeYear.get().getId(),
									semester.get().getId(), degree.get().getId(), collage.get().getId(),
									department.get().getId(), batch.get().getId(), program.get().getId());

					ElectiveCoursesGroup electiveCoursesGroup = new ElectiveCoursesGroup();
					electiveCoursesGroup.setElectiveGroup(electiveGroup.get());
					electiveCoursesGroup.setCourses(res.get());
					dataList.add(electiveCoursesGroup);
					System.out.println(">>>>>>>>>>.." + electiveGroup);
					super.electiveCoursesGroup.save(electiveCoursesGroup);
					System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>" + electiveGroup);
					// // get Last inserted Id from DB
				}
				super.electiveCoursesGroup.saveAll(dataList);

				info.put("status", "1");
				info.put("message", "Elective courses Mapped successfully");
				return info;
			}
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			e.printStackTrace();
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}
		return info;
	}

	@Override
	public Map<String, Object> getElectiveGroupName(ElectiveGroupRequest request) {
		System.out.println("><><" + request);

		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Optional<Department> department = super.department
					.findByIdAndExIsDeleteAndExIsActive(request.getDepartment(), false, true);
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "department id not present");
				return info;
			}

			Optional<AcademicYear> academicYear = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academicYear.isPresent()) {
				info.put("status", "2");
				info.put("message", "AcademicYear id not present");
				return info;
			}

			Optional<Programmes> program = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!program.isPresent()) {
				info.put("status", "2");
				info.put("message", "Programme not present");
				return info;
			}

			Optional<Colleges> collage = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!collage.isPresent()) {
				info.put("status", "2");
				info.put("message", "College Id not Present");
				return info;
			}
			Optional<ProgrammeYear> programmeYear = super.programmeYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammeYear());
			if (!program.isPresent()) {
				info.put("status", "2");
				info.put("message", "ProgrammeYear not present");
				return info;
			}
			Optional<Semster> semester = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!program.isPresent()) {
				info.put("status", "2");
				info.put("message", "semester not present");
				return info;
			}
			Optional<Batch> batch = super.batch.findByExIsDeleteAndExIsActiveAndId(false, true, request.getBatch());
			if (!batch.isPresent()) {
				info.put("status", "2");
				info.put("message", "batch not present");
				return info;
			}

			Optional<Degree> degree = super.degree.findByIdAndExIsDeleteAndExIsActive(request.getDegree(), false, true);
			if (!degree.isPresent()) {
				info.put("status", "2");
				info.put("message", "degree not Present");
				return info;
			}

			List<ElectiveGroup> task = super.electiveGroup
					.findByCollegesIdAndDegreeIdAndProgrammesIdAndDepartmentIdAndAcademicYearIdAndProgrammeYearIdAndSemesterIdAndBatchIdAndExIsDeleteAndExIsActive(
							request.getColleges(), request.getDegree(), request.getProgrammes(),
							request.getDepartment(), request.getAcademicYear(), request.getProgrammeYear(),
							request.getSemester(), request.getBatch(), false, true);
			System.out.println("><><><>>>>>>>>>>>>" + task.size());
			if (task.size() <= 0) {
				info.put("status", "2");
				info.put("message", "No Records found");
				return info;
			}

			List dataList = new LinkedList();
			for (ElectiveGroup e : task) {
				Map<Object, Object> datalist = new HashMap<Object, Object>();
				datalist.put("id", e.getId());
				datalist.put("groupName", e.getExGroupName());

				dataList.add(datalist);
			}
			info.put("status", "1");
			info.put("message", "success");

			info.put("college", task.get(0).getColleges().getExName());
			info.put("programme", task.get(0).getProgrammes().getExName());
			info.put("programmeYear", task.get(0).getProgrammeYear().getExName());
			info.put("semester", task.get(0).getSemester().getExName());
			info.put("degree", task.get(0).getDegree().getExName());
			info.put("academicYear", task.get(0).getAcademicYear().getExYear());
			info.put("department", task.get(0).getDepartment().getExName());
			info.put("batch", task.get(0).getBatch().getExName());

			info.put("message", "success");
			return info;

		}

		catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;

		}

	}

	@Override
	public Map<String, Object> courseOnGroupId(ElectiveGroupRequest request) {

		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<ElectiveCoursesGroup> groupid = super.electiveCoursesGroup
					.findByElectiveGroupId(request.getElectiveGroup());
			if (groupid.isEmpty()) {
				info.put("status", "2");
				info.put("message", "electiveGroup id not present");
				return info;
			}
			List<ElectiveCoursesGroup> task1 = super.electiveCoursesGroup.courseOnGroup(request.getElectiveGroup());
			Map<Object, Object> dataList1 = new HashMap<Object, Object>();
			List coursestype = new LinkedList();
			List coursesTypeId = new LinkedList();

			List dataList = new LinkedList();

			for (ElectiveCoursesGroup e : task1) {
				Map<Object, Object> datalist = new HashMap<Object, Object>();
				datalist.put("id", e.getCourses().getId());
				datalist.put("exName", e.getCourses().getExName());
				datalist.put("exCoursesCode", e.getCourses().getExCoursesCode());
				datalist.put("electiveGroup", e.getElectiveGroup().getExGroupName());
				datalist.put("electiveGroupId", e.getElectiveGroup().getId());
				datalist.put("credithoursId", e.getCourses().getCreditHours().getId());
				datalist.put("credithoursName", e.getCourses().getCreditHours().getExName());
				for (int i = 0; i < e.getCourses().getCoursesType().size(); i++) {
					coursesTypeId.add(e.getCourses().getCoursesType().get(i).getId());
					coursestype.add(e.getCourses().getCoursesType().get(i).getExName());

				}

				datalist.put("coursesType", coursestype);
				datalist.put("coursesTypeId", coursesTypeId);

				dataList.add(datalist);
			}
			info.put("status", "1");
			info.put("message", "success");

			info.put("college", task1.get(0).getElectiveGroup().getColleges().getExName());
			info.put("programme", task1.get(0).getElectiveGroup().getProgrammes().getExName());
			info.put("programmeYear", task1.get(0).getElectiveGroup().getProgrammeYear().getExName());
			info.put("semester", task1.get(0).getElectiveGroup().getSemester().getExName());
			info.put("degree", task1.get(0).getElectiveGroup().getDegree().getExName());
			info.put("academicYear", task1.get(0).getElectiveGroup().getAcademicYear().getExYear());
			info.put("department", task1.get(0).getElectiveGroup().getDepartment().getExName());
			info.put("batch", task1.get(0).getElectiveGroup().getBatch().getExName());

			info.put("details", dataList);
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> createMentor(MentorRequest request) {

		Map<String, String> info = new LinkedHashMap<>();
		try {
			List<Mentor> tasks = new ArrayList<Mentor>();

			Optional<Colleges> clgid = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!clgid.isPresent()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}

			Optional<Programmes> programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!programmes.isPresent()) {
				info.put("status", "2");
				info.put("message", "Programmes not present");
				return info;
			}

			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<Stream> stream = super.stream.findByIdAndExIsDeleteAndExIsActive(request.getDegree(), false, true);
			if (!stream.isPresent() || !stream.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Stream not present");
				return info;
			}

			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent() || !department.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Department not present");
				return info;
			}
			Optional<Batch> batch = super.batch.findByExIsDeleteAndExIsActiveAndId(false, true, request.getBatch());
			if (!batch.isPresent() || !batch.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Batch not present");
				return info;
			}

			Optional<Staffpersonal> staffpersonal = super.staffpersonal.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getStaffId());
			if (!staffpersonal.isPresent() || !staffpersonal.get().isExIsActive()) {
				info.put("status", "2");
				info.put("message", "staffPersonal not present");
				return info;
			}

			tasks = super.mentor
					.findByExNameAndStaffpersonalIdAndProgrammesIdAndBatchIdAndStreamIdAndDegreeIdAndExIsDeleteAndExIsActiveAndCollegesIdAndDepartmentId(
							request.getExName(), request.getStaffId(), request.getProgrammes(), request.getBatch(),
							request.getStream(), request.getDegree(), false, true, request.getColleges(),
							request.getDepartment());
			if (tasks.size() > 0) {
				info.put("status", "2");
				info.put("message", "Mentor  name already exists");
				return info;
			}

			Date date = new Date();

			Long privailageid = 15L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = request.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(false, Description, userid, privailageid);

			Mentor mentor = new Mentor();
			mentor.setExCreateDate(date);
			mentor.setExName(request.getExName());
			mentor.setProgrammes(programmes.get());
			mentor.setStaffpersonal(staffpersonal.get());
			mentor.setExIsDelete(false);
			mentor.setDegree(degree.get());
			mentor.setDepartment(department.get());
			mentor.setExIsActive(request.getExIsActive());
			mentor.setStream(stream.get());
			mentor.setBatch(batch.get());
			mentor.setColleges(clgid.get());
			super.mentor.save(mentor);
			info.put("status", "1");
			info.put("message", "mentor created successfully");
			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	/*
	 * @Override public Map<String, Object> getMentor(MentorRequest request) {
	 * Map<String, Object> info = new LinkedHashMap<>(); try { List<Mentor> tasks =
	 * super.mentor.findByExIsDelete(false); if(tasks.size() <=0) {
	 * info.put("status", "2"); info.put("message", "Mentor not created"); return
	 * info; }
	 * 
	 * 
	 * else { List dataList = new LinkedList(); for (Mentor e : tasks) { Map<Object,
	 * Object> mentordata = new HashMap<Object, Object>(); mentordata.put("id",
	 * e.getId()); mentordata.put("exName", e.getExName());
	 * mentordata.put("exIsActive", e.getExIsActive()); mentordata.put("exIsDelete",
	 * e.getExIsDelete()); mentordata.put("programmesId",
	 * e.getProgrammes().getId()); mentordata.put("programmes",
	 * e.getProgrammes().getExName()); mentordata.put("batchId",
	 * e.getBatch().getId()); mentordata.put("batch", e.getBatch().getExName());
	 * mentordata.put("departmentId", e.getDepartment().getId());
	 * mentordata.put("department", e.getDepartment().getExName());
	 * mentordata.put("staffId", e.getStaffpersonal().getId());
	 * mentordata.put("staff", e.getStaffpersonal().getExName());
	 * mentordata.put("stream",e.getStream().getExName());
	 * mentordata.put("streamId", e.getStream().getId()); mentordata.put("degree",
	 * e.getDegree().getExName()); mentordata.put("degreeId",
	 * e.getDegree().getId()); mentordata.put("colleges",
	 * e.getColleges().getExName()); mentordata.put("collegesId",
	 * e.getColleges().getId()); dataList.add(mentordata); } info.put("status",
	 * "1"); info.put("message", "success"); info.put("details", dataList); return
	 * info; }
	 * 
	 * } catch (Exception e) { logger.error("Exception occured" + e); StringWriter
	 * errors = new StringWriter(); e.printStackTrace(); e.printStackTrace(new
	 * PrintWriter(errors)); logger.error(errors.toString()); info.put("status",
	 * "0"); info.put("message", "Something went wrong");
	 * 
	 * return info; } }
	 */
	@Override
	public Map<String, String> deleteMentor(MentorRequest request) {

		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<Mentor> task = super.mentor.findById(request.getId());
			if (task.isPresent()) {
				if (task.get().getExIsDelete()) {
					info.put("status", "2");
					info.put("message", "mentor already deleted");
					return info;
				}
				Boolean exIsDelete = true;
				Boolean is_active = false;
				int result = super.mentor.deleteMentor(exIsDelete, is_active, task.get().getId());
				if (result == 0) {
					info.put("status", "2");
					info.put("message", "Something went wrong");
					return info;
				}
				info.put("status", "1");
				info.put("message", "mentor deleted successfully");
				return info;
			}
			info.put("status", "2");
			info.put("message", "mentor id not present");
			return info;
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> updateMentor(MentorRequest request) {

		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<Mentor> Mentor = super.mentor.findById(request.getId());

			if (request.getId() == null || !Mentor.isPresent()) {
				info.put("status", "2");
				info.put("message", "Mentor id not present");
				return info;
			}
			Optional<Batch> batch = super.batch.findByExIsDeleteAndExIsActiveAndId(false, true, request.getBatch());
			if (!batch.isPresent() || !batch.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Batch not present");
				return info;
			}

			Optional<Staffpersonal> staffpersonal = super.staffpersonal.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getStaffId());
			if (!staffpersonal.isPresent() || !staffpersonal.get().isExIsActive()) {
				info.put("status", "2");
				info.put("message", "staffPersonal not present");
				return info;
			}

			Optional<Programmes> programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!programmes.isPresent()) {
				info.put("status", "2");
				info.put("message", "Programme not present");
				return info;
			}

			Optional<Colleges> clgid = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!clgid.isPresent()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}

			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<Stream> stream = super.stream.findByIdAndExIsDeleteAndExIsActive(request.getDegree(), false, true);
			if (!stream.isPresent() || !stream.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Stream not present");
				return info;
			}

			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent() || !department.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Department not present");
				return info;
			}
			List<Mentor> result = super.mentor
					.findByExNameAndStaffpersonalIdAndProgrammesIdAndBatchIdAndStreamIdAndDegreeIdAndExIsDeleteAndExIsActiveAndCollegesIdAndDepartmentId(
							request.getExName(), request.getStaffId(), request.getProgrammes(), request.getBatch(),
							request.getStream(), request.getDegree(), false, true, request.getColleges(),
							request.getDepartment());
			if (result.size() > 0 && result.get(0).getId() != request.getId()) {
				info.put("status", "2");
				info.put("message", "mentor name already exists");
				return info;
			}
			Date date = new Date();

			Long privailageid = 15L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = request.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(true, Description, userid, privailageid);

			int retval = super.mentor.updateMentor(request.getExName(), request.getStaffId(), request.getProgrammes(),
					date, request.getExIsActive(), request.getBatch(), request.getDegree(), request.getDepartment(),
					request.getStream(), request.getColleges(), request.getId());
			if (retval == 1) {
				info.put("status", "1");
				info.put("message", "mentor updated successfully");
				return info;
			} else {
				info.put("status", "2");
				info.put("message", "mentor id not present");
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<Object, Object> resetPassword(Login request) {
		System.out.println(">>>>>>>>" + request);
		Map<Object, Object> info = new LinkedHashMap<>();
		try {

			if (request.getUserName() == null || request.getUserName().equals("")
					|| request.getUserName().equals("NA")) {

				info.put("status", "2");
				info.put("message", "username is required");
				return info;
			}

			if (request.getNewpassword() == null || request.getNewpassword().equals("")
					|| request.getNewpassword().equals("NA") || request.getNewpassword().trim().isEmpty()) {
				info.put("status", "2");
				info.put("message", "newpassword is required");
				return info;
			}

			if (request.getType() == null || request.getType().equals("") || request.getType().equals("NA")
					|| request.getType().trim().isEmpty()) {

				info.put("status", "2");
				info.put("message", "type is required");
				return info;
			}

			String newpassworddcrypt = EncryptionAndDecryption
					.getDecryptedStringaddhexkey(request.getNewpassword().trim());
			// String oldpassworddcrypt
			// =EncryptionAndDecryption.getDecryptedStringaddhexkey(request.getOldpassword().trim());

			if (request.getType().equalsIgnoreCase("student")) {
				System.out.println(">>>>>>>>" + request);
				List<Studentadmission> task = super.studentadmission.findByExIsDeleteAndExUserName(false,
						request.getUserName());
				if (task.size() > 0) {
					if (task.get(0).getExIsActive() == true) {
						int updatresult = super.studentadmission.updateStudentPassword(newpassworddcrypt,
								request.getUserName());
						System.out.println("><<><" + updatresult);
						if (updatresult == 0) {
							info.put("status", "2");
							info.put("message", "Something went wrong");
							return info;
						}
						info.put("status", "1");
						info.put("message", "student Password  updated successfully");
						return info;
					} else {
						info.put("status", "2");
						info.put("message", "Student is inactive");
						return info;
					}
				}
				info.put("status", "2");
				info.put("message", " Username doesnot exits");
				return info;
			}

			if (request.getType().equalsIgnoreCase("staff")) {
				List<Staffpersonal> task = super.staffpersonal.findByExIsDeleteAndExLoginName(false,
						request.getUserName());
				if (task.size() > 0) {
					if (task.get(0).isExIsActive() == true) {
						int updatresult = super.staffpersonal.updateStaffPassword(newpassworddcrypt,
								request.getUserName());
						if (updatresult == 0) {
							info.put("status", "2");
							info.put("message", "Something went wrong");
							return info;
						}
						info.put("status", "1");
						info.put("message", "Staff Password  updated successfully");
						return info;
					} else {
						info.put("status", "2");
						info.put("message", "Staff is inactive");
						return info;
					}
				}
				info.put("status", "2");
				info.put("message", "Username doesnot exits");
				return info;
			}
			if (request.getType().equalsIgnoreCase("regular")) {
				List<User> task = super.user.findByExIsDeleteAndExUserName(false, request.getUserName());
				if (task.size() > 0) {
					if (task.get(0).getExIsActive() == true) {
						int updatresult = super.user.updateuserPassword(newpassworddcrypt, request.getUserName());
						if (updatresult == 0) {
							info.put("status", "2");
							info.put("message", "Something went wrong");
							return info;
						}
						info.put("status", "1");
						info.put("message", "User Password  updated successfully");
						return info;
					} else {
						info.put("status", "2");
						info.put("message", "User is inactive");
						return info;
					}
				}
				info.put("status", "2");
				info.put("message", "Usernam doesnot exits");
				return info;
			}

			info.put("status", "2");
			info.put("message", "Invalid type");
			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			e.printStackTrace();
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> updateStudentMentor(StudentMentorRequest request) {

		Map<String, String> info = new LinkedHashMap<>();
		try {
			if (request.getMentorId() == null || request.getMentorId().equals("")) {
				System.out.println(">>>>>>>>>>>>>>>>." + request);
				info.put("status", "2");
				info.put("message", "mentor id is required");
				return info;
			}

			if (request.getStudentadmissionId() == null || request.getStudentadmissionId().equals("")) {
				info.put("status", "2");
				info.put("message", "studentAdmission id is required");
				return info;
			}

			Optional<Mentor> mentor = super.mentor.findByIdAndExIsDeleteAndExIsActive(request.getMentorId(), false,
					true);
			if (!mentor.isPresent()) {
				info.put("status", "2");
				info.put("message", "mentor Id not Present");
				return info;
			}
			Optional<Studentadmission> student = super.studentadmission.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getStudentadmissionId());
			System.out.println(">>>>>>>>>>>>>>>>." + student);
			if (!student.isPresent()) {
				info.put("status", "2");
				info.put("message", "student not present");

				return info;
			}

			List<Studentadmission> Studentadmission = null;// super.studentadmission.findByMentorIdAndId(request.getMentorId(),request.getStudentadmissionId());
			logger.info("student count" + Studentadmission.size());
			if (Studentadmission.size() <= 0) {
				info.put("status", "2");
				info.put("message", "students not present");
				return info;
			}
			int count = 0;
			/*
			 * for(Studentadmission s:Studentadmission ) { if(s.getMentor()==null) { int
			 * updateStudentadmission =
			 * super.studentadmission.updatestudentmentor(request.getMentorId(),s.getId());
			 * logger.info( s.getId()+" : Update query status : "+updateStudentadmission);
			 * count++; } logger.info( s.getId()+" :mentor already Allocated"); }
			 */
			info.put("status", "1");
			info.put("message", +count == 0 ? "mentor already Allocated"
					: "mentor Allocated succesfully for : " + count + " " + " student");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}

	}

	@Override
	public Map<Object, Object> changePassword(Login request) {

		Map<Object, Object> info = new LinkedHashMap<>();
		try {

			if (request.getUserName() == null || request.getUserName().equals("")
					|| request.getUserName().equals("NA")) {
				System.out.println(">" + request);
				info.put("status", "2");
				info.put("message", "Username is required");
				return info;
			}

			if (request.getOldpassword() == null || request.getOldpassword().equals("")
					|| request.getOldpassword().equals("NA") || request.getOldpassword().trim().isEmpty()) {
				System.out.println(">" + request);
				info.put("status", "2");
				info.put("message", "oldpassword is required");
				return info;
			}
			if (request.getNewpassword() == null || request.getNewpassword().equals("")
					|| request.getNewpassword().equals("NA") || request.getNewpassword().trim().isEmpty()) {
				System.out.println(">>" + request);
				info.put("status", "2");
				info.put("message", "newpassword is required");
				return info;
			}

			if (request.getLoginType() == null || request.getLoginType().equals("")
					|| request.getLoginType().equals("NA") || request.getLoginType().trim().isEmpty()) {
				System.out.println("><><><><" + request);
				info.put("status", "2");
				info.put("message", "LoginType is required");
				return info;
			}

			String newpassworddcrypt = EncryptionAndDecryption
					.getDecryptedStringaddhexkey(request.getNewpassword().trim());
			System.out.println(">>>>>>>" + newpassworddcrypt);
			String oldpassworddcrypt = EncryptionAndDecryption
					.getDecryptedStringaddhexkey(request.getOldpassword().trim());
			System.out.println(">>>>>>>..   " + oldpassworddcrypt);

			if (request.getLoginType().equalsIgnoreCase("student")) {
				System.out.println(">" + request);
				List<Studentadmission> task = super.studentadmission.findByExIsDeleteAndExUserNameAndExPassword(false,
						request.getUserName(), oldpassworddcrypt);
				System.out.println("><><><????" + task);

				if (task.size() > 0) {
					if (task.get(0).getExIsActive() == true) {
						int updatresult = super.studentadmission.updateStudentPassword(newpassworddcrypt,
								request.getUserName());
						System.out.println("hftgcd" + updatresult);
						if (updatresult == 0) {
							info.put("status", "2");
							info.put("message", "Something went wrong");
							return info;
						}
						info.put("status", "1");
						info.put("message", "student Password  updated successfully");
						return info;
					} else {
						info.put("status", "2");
						info.put("message", "Student is inactive");
						return info;
					}
				}

				info.put("status", "2");
				info.put("message", " Username doesnot match with oldpassword");
				return info;
			}
			if (request.getLoginType().equalsIgnoreCase("staff")) {
				List<Staffpersonal> task = super.staffpersonal
						.findByExLoginNameAndExPasswordAndExIsDelete(request.getUserName(), oldpassworddcrypt, false);
				if (task.size() > 0) {
					if (task.get(0).isExIsActive() == true) {
						int updatresult = super.staffpersonal.updateStaffPassword(newpassworddcrypt,
								request.getUserName());
						if (updatresult == 0) {
							info.put("status", "2");
							info.put("message", "Something went wrong");
							return info;
						}
						info.put("status", "1");
						info.put("message", "Staff Password  updated successfully");
						return info;
					} else {
						info.put("status", "2");
						info.put("message", "Staff is inactive");
						return info;
					}
				}
				info.put("status", "2");
				info.put("message", "Username doesnot match with oldpassword");
				return info;
			}
			if (request.getLoginType().equalsIgnoreCase("regular")) {
				List<User> task = super.user.findByExIsDeleteAndExUserNameAndExPassword(false, request.getUserName(),
						oldpassworddcrypt);
				if (task.size() > 0) {
					if (task.get(0).getExIsActive() == true) {
						int updatresult = super.user.updateuserPassword(newpassworddcrypt, request.getUserName());
						if (updatresult == 0) {
							info.put("status", "2");
							info.put("message", "Something went wrong");
							return info;
						}
						info.put("status", "1");
						info.put("message", "user Password  updated successfully");
						return info;
					} else {
						info.put("status", "2");
						info.put("message", "user is inactive");
						return info;
					}
				}
				info.put("status", "2");
				info.put("message", "Username doesnot match with oldpassword");
				return info;
			}
			info.put("status", "2");
			info.put("message", "Invalid login type");
			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			e.printStackTrace();
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}

	}

	@Override
	public Map<Object, Object> forgetPassword(Login request) {

		Map<Object, Object> info = new LinkedHashMap<>();
		try {

			if (request.getUserName() == null || request.getUserName().equals("")
					|| request.getUserName().equals("NA")) {
				info.put("status", "2");
				info.put("message", "Username is required");
				return info;
			}

			if (request.getLoginType() == null || request.getLoginType().equals("")
					|| request.getLoginType().equals("NA") || request.getLoginType().trim().isEmpty()) {
				info.put("status", "2");
				info.put("message", "LoginType is required");
				return info;
			}

			if (request.getLoginType().equalsIgnoreCase("student")) {
				List<Studentpersonal> task = super.studentpersonal
						.findByStudentadmissionExIsActiveAndStudentadmissionExUserName(true, request.getUserName());
				if (task.size() > 0) {
					if (task.get(0).getStudentadmission().getExIsActive() == true) {
						if ((task.get(0).getExEmailId() == null || task.get(0).getExEmailId().equalsIgnoreCase("NA")
								|| task.get(0).getExEmailId().equalsIgnoreCase("null"))
								&& (task.get(0).getExContactDetails() == null
										|| task.get(0).getExContactDetails().equalsIgnoreCase("NA")
										|| task.get(0).getExParentContactDetails().equalsIgnoreCase("null"))) {
							info.put("status", "2");
							info.put("message", "email Id and mobile number not exits please register");
							return info;
						} else {
							String localurl = commonHelper.getSettingValue("SEND_EMAIL");
							if (localurl.equalsIgnoreCase("1")) {

								List<EmailTemplates> temlate = emailTemplatesRepository
										.findByEmailCategoryIdIdAndExIsActiveAndExIsDelete(2L, true, false);
								if (temlate.size() > 0) {
									String dcrypt = super.EncryptionAndDecryption.getOriginalStringwithoutKey(
											task.get(0).getStudentadmission().getExPassword());
									String messagebody = temlate.get(0).getEmailBody();
									messagebody = messagebody.replace("Student_Name",
											task.get(0).getStudentadmission().getExName());
									messagebody = messagebody.replace("RandomPassword", dcrypt);
									boolean is_sent = emailSending.sendPasswordMail(task.get(0).getExEmailId(),
											messagebody, temlate.get(0).getSubject());
									if (is_sent) {
										info.put("status", "1");
										info.put("message", "Password has been sent to your e-mail address.");
										return info;
									}
									info.put("status", "2");
									info.put("message", "Password not sent");
									return info;
								}
								info.put("status", "2");
								info.put("message", "Email Template not present");
								return info;
							}
							info.put("status", "1");
							info.put("message", "Password has been sent to your e-mail address.");
							return info;

						}
					} else {
						info.put("status", "2");
						info.put("message", " student  is inactive");
						return info;
					}
				}
				info.put("status", "2");
				info.put("message", " Username doesnot exits");
				return info;
			}
			if (request.getLoginType().equalsIgnoreCase("staff")) {
				List<Staffpersonal> task = super.staffpersonal.findByExLoginNameAndExIsDelete(request.getUserName(),
						false);
				if (task.size() > 0) {
					if (task.get(0).isExIsActive() == true) {
						if ((task.get(0).getExEmail() == null || task.get(0).getExEmail().equalsIgnoreCase("NA")
								|| task.get(0).getExEmail().equalsIgnoreCase("null"))
								&& (task.get(0).getExContactDetails()) == null
								|| task.get(0).getExContactDetails().equalsIgnoreCase("NA")
								|| task.get(0).getExContactDetails().equalsIgnoreCase("null")) {
							info.put("status", "2");
							info.put("message", "email Id and mobile number not exits please register");
							return info;
						} else {
							String localurl = commonHelper.getSettingValue("SEND_EMAIL");
							if (localurl.equalsIgnoreCase("1")) {

								List<EmailTemplates> temlate = emailTemplatesRepository
										.findByEmailCategoryIdIdAndExIsActiveAndExIsDelete(2L, true, false);
								if (temlate.size() > 0) {
									String dcrypt = super.EncryptionAndDecryption
											.getOriginalStringwithoutKey(task.get(0).getExPassword());
									String messagebody = temlate.get(0).getEmailBody();
									messagebody = messagebody.replace("Student_Name", task.get(0).getExName());
									messagebody = messagebody.replace("RandomPassword", dcrypt);
									boolean is_sent = emailSending.sendPasswordMail(task.get(0).getExEmail(),
											messagebody, temlate.get(0).getSubject());
									if (is_sent) {
										info.put("status", "1");
										info.put("message", "Password has been sent to your e-mail address.");
										return info;
									}
									info.put("status", "2");
									info.put("message", "Password not sent");
									return info;
								}
								info.put("status", "2");
								info.put("message", "Email Template not present");
								return info;
							}
							info.put("status", "1");
							info.put("message", "Password has been sent to your e-mail address.");
							return info;

						}
					} else {
						info.put("status", "2");
						info.put("message", "Staff is inactive");
						return info;
					}
				}
				info.put("status", "2");
				info.put("message", "Username doesnot exits");
				return info;
			}

			if (request.getLoginType().equalsIgnoreCase("regular")) {
				List<User> task = super.user.findByExIsDeleteAndExUserName(false, request.getUserName());
				if (task.size() > 0) {
					if (task.get(0).getExIsActive() == true) {
						if ((task.get(0).getExEmail() == null || task.get(0).getExEmail().equalsIgnoreCase("NA")
								|| task.get(0).getExEmail().equalsIgnoreCase("null"))
								&& (task.get(0).getExMobile() == null
										|| task.get(0).getExMobile().equalsIgnoreCase("NA")
										|| task.get(0).getExMobile().equalsIgnoreCase("null"))) {
							info.put("status", "2");
							info.put("message", "email Id and mobile number not exits please register");
							return info;
						} else {
							String localurl = commonHelper.getSettingValue("SEND_EMAIL");
							if (localurl.equalsIgnoreCase("1")) {

								List<EmailTemplates> temlate = emailTemplatesRepository
										.findByEmailCategoryIdIdAndExIsActiveAndExIsDelete(2L, true, false);
								if (temlate.size() > 0) {
									String dcrypt = super.EncryptionAndDecryption
											.getOriginalStringwithoutKey(task.get(0).getExPassword());
									String messagebody = temlate.get(0).getEmailBody();
									messagebody = messagebody.replace("Student_Name", task.get(0).getExName());
									messagebody = messagebody.replace("RandomPassword", dcrypt);
									boolean is_sent = emailSending.sendPasswordMail(task.get(0).getExEmail(),
											messagebody, temlate.get(0).getSubject());
									if (is_sent) {
										info.put("status", "1");
										info.put("message", "Password has been sent to your e-mail address.");
										return info;
									}
									info.put("status", "2");
									info.put("message", "Password not sent");
									return info;
								}
								info.put("status", "2");
								info.put("message", "Email Template not present");
								return info;
							}
							info.put("status", "1");
							info.put("message", "Password has been sent to your e-mail address.");
							return info;
						}
					} else {
						info.put("status", "2");
						info.put("message", "user is inactive");
						return info;
					}
				}
				info.put("status", "2");
				info.put("message", "Usernam doesnot exits");
				return info;
			}

			info.put("status", "2");
			info.put("message", "Invalid login type");
			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			e.printStackTrace();
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getMentor(MentorRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<Mentor> tasks = super.mentor.findByExIsDelete(false);
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Mentor not created");
				return info;
			}

			else {
				List dataList = new LinkedList();
				for (Mentor e : tasks) {
					Map<Object, Object> mentordata = new HashMap<Object, Object>();
					mentordata.put("id", e.getId());
					mentordata.put("exName", e.getExName());
					mentordata.put("exIsActive", e.getExIsActive());
					mentordata.put("exIsDelete", e.getExIsDelete());
					mentordata.put("programmesId", e.getProgrammes().getId());
					mentordata.put("programmes", e.getProgrammes().getExName());
					mentordata.put("batchId", e.getBatch().getId());
					mentordata.put("batch", e.getBatch().getExName());
					mentordata.put("departmentId", e.getDepartment().getId());
					mentordata.put("department", e.getDepartment().getExName());
					mentordata.put("staffId", e.getStaffpersonal().getId());
					mentordata.put("staff", e.getStaffpersonal().getExName());
					mentordata.put("stream", e.getStream().getExName());
					mentordata.put("streamId", e.getStream().getId());
					mentordata.put("degree", e.getDegree().getExName());
					mentordata.put("degreeId", e.getDegree().getId());
					mentordata.put("colleges", e.getColleges().getExName());
					mentordata.put("collegesId", e.getColleges().getId());
					dataList.add(mentordata);
				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");

			return info;
		}
	}

	@Override
	public Map<String, String> createMentorAllocation(StudentMentorAllocation request) {
		// TODO Auto-generated method stub
		Map<String, Long> info1 = new LinkedHashMap<>();

		Map<String, String> info = new LinkedHashMap<>();
		try {

			if (request.getStudentIdFrom() == null || request.getStudentIdFrom().equals("")) {
				info.put("status", "2");
				info.put("message", "StudentIdFrom  is required");
				return info;
			}
			if (request.getStudentIdto() == null || request.getStudentIdto().equals("")) {
				info.put("status", "2");
				info.put("message", "StudentIdto is required");
				return info;
			}

			Optional<User> user = super.user.findByExIsDeleteAndExIsActiveAndId(false, true, request.getUser());
			if (!user.isPresent()) {
				info.put("status", "2");
				info.put("message", "user not present");
				return info;
			}
			Optional<Programmes> programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!programmes.isPresent()) {
				info.put("status", "2");
				info.put("message", "Programme not present");
				return info;
			}

			Optional<Colleges> clgid = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!clgid.isPresent()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}

			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;

			}
			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent() || !department.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "department not present");
				return info;

			}

			Optional<Mentor> mentor = super.mentor.findByExIsDeleteAndExIsActiveAndId(false, true, request.getMentor());
			if (!mentor.isPresent() || !mentor.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Mentor not present");
				return info;

			}
			List<Studentadmission> Studentadmission = super.studentadmission
					.findByCollegesIdAndDegreeIdAndProgrammesIdAndExRollNoGreaterThanEqualAndExRollNoLessThanEqualAndDepartmentId(
							request.getColleges(), request.getDegree(), request.getProgrammes(),
							request.getStudentIdFrom(), request.getStudentIdto(), request.getDepartment());
			logger.info("student count" + Studentadmission.size());
			if (Studentadmission.size() <= 0) {
				info.put("status", "2");
				info.put("message", "students not present");
				return info;
			}
			int count = 0;
			for (Studentadmission s : Studentadmission) {
				if (s.getMentor() == null) {
					// User userid =CommonHelper.getuser(request.getUser()) ;
					// String Description=request.toString();
					// Boolean audit =CommonHelper.saveauditlogdetails(true , Description
					// ,userid,27L);
					int updateStudentadmission = super.studentadmission.updatestudentMentor(request.getColleges(),
							request.getDegree(), request.getProgrammes(), s.getId(), request.getMentor(),
							request.getDepartment());
					logger.info(s.getExRollNo() + " : Update query status : " + updateStudentadmission);
					count++;
				}
				logger.info(s.getExRollNo() + " :Mentor already allocated");
			}
			Long privailageid = 36L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = request.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(true, Description, userid, privailageid);
			info.put("status", "1");
			info.put("message", +count == 0 ? "Mentor already allocated"
					: "Mentor allocated successfully for : " + count + " " + " student");
			return info;
		} catch (Exception e) {
			StringWriter errors = new StringWriter();
			e.printStackTrace();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");

			return info;
		}

	}

	@Override
	public Map<String, Object> getLiveExamDetails(ExamAnnouncementRequest request) {
		// TODO Auto-generated method stub

		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<ExamAnnouncement> tasks = super.examAnnouncement.findByExIsLive(true);

			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "ExamAnnouncement not created");
				return info;
			} else {
				List dataList = new LinkedList();
				for (ExamAnnouncement e : tasks) {
					SimpleDateFormat date1 = new SimpleDateFormat("dd/MM/yyyy");
					Map<Object, Object> data = new HashMap<Object, Object>();
					data.put("programmes", e.getProgrammes().getExName());
					data.put("exName", e.getExName());
					data.put("exEndTermExamStartDate", date1.format(e.getExEndTermExamStartDate()));
					data.put("exEndTermExamEndDate", date1.format(e.getExEndTermExamEndDate()));
					data.put("exMidTermExamStartDate", date1.format(e.getExMidTermExamStartDate()));
					data.put("exMidTermExamEndDate", date1.format(e.getExMidTermExamEndDate()));
					dataList.add(data);

				}

				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> createhostelConfiguration(@Valid HostelConfigureDetailRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {

			Optional<Colleges> clgid = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getCollege(), false,
					true);
			if (!clgid.isPresent()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}
			Optional<Degree> Degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!Degree.isPresent()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<HostelFeeType> HostelFeeType = super.hostelFeeType
					.findByIdAndExIsActiveAndExIsDelete(request.getHostelfeetype(), true, false);
			if (!HostelFeeType.isPresent()) {
				info.put("status", "2");
				info.put("message", "HostelFeeType not present");
				return info;
			}

			Optional<Semster> Semster = super.semester.findByIdAndExIsActiveAndExIsDelete(request.getSemester(), true,
					false);
			if (!Semster.isPresent()) {
				info.put("status", "2");
				info.put("message", "Semster not present");
				return info;
			}
			Optional<AcademicYear> academicYear = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academicYear.isPresent()) {
				info.put("status", "2");
				info.put("message", "AcademicYear not present");
				return info;
			}
			Optional<Programmes> prog = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!prog.isPresent()) {
				info.put("status", "2");
				info.put("message", "Programmes not present");
				return info;
			}
			Optional<Hostel> Hostel = super.hostel.findByExIsDeleteAndExIsActiveAndId(false, true, request.getHostel());
			if (!Hostel.isPresent()) {
				info.put("status", "2");
				info.put("message", "Hostel not present");
				return info;
			}
			Optional<ProgrammeYear> programyear = super.programmeYear
					.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
			if (!programyear.isPresent()) {
				info.put("status", "2");
				info.put("message", "ProgrammeYear not present");
				return info;
			}
			List<Studentadmission> studentadmission = super.studentadmission
					.findByExRollNoAndExIsActiveAndExIsDelete(request.getStudent(), true, false);
			if (studentadmission.size() <= 0) {
				info.put("status", "2");
				info.put("message", "student not present");
				return info;
			}
			SimpleDateFormat date1 = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
			Date sdate = date1.parse(request.getExStartDate() + " 00:00:00");
			Date edate = date1.parse(request.getExEndDate() + " 00:00:00");

			Optional<HostelConfiguration> duplication = super.HostelConfigurationRepository
					.findByAcademicYearIdAndCollegesIdAndDegreeIdAndHostelIdAndHostelfeetypeIdAndSemesterIdAndProgrammesIdAndExRollNoAndExStartDateAndExEndDateAndExIsActiveAndProgrammeyearId(
							request.getAcademicYear(), request.getCollege(), request.getDegree(), request.getHostel(),
							request.getHostelfeetype(), request.getSemester(), request.getProgrammes(),
							request.getStudent(), sdate, edate, true, request.getProgrammeYear());
			System.out.println(">stiudeent" + duplication);
			if (duplication.isPresent()) {
				info.put("status", "2");
				info.put("message", "HostelConfiguration already created for the student");
				return info;
			}
			Long privailageid = 33L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = request.toString();
			System.out.println(">>" + Description);
			Boolean audit = super.commonHelper.saveauditlogdetails(false, Description, userid, privailageid);
			Date date = new Date();
			HostelConfiguration HostelConfiguration = new HostelConfiguration();
			HostelConfiguration.setAcademicYear(academicYear.get());
			HostelConfiguration.setExAmount(request.getExAmount());
			HostelConfiguration.setColleges(clgid.get());
			HostelConfiguration.setProgrammeyear(programyear.get());
			HostelConfiguration.setDegree(Degree.get());
			HostelConfiguration.setExEndDate(date1.parse(request.getExEndDate() + " 00:00:00"));
			HostelConfiguration.setExCreateDate(date);
			HostelConfiguration.setExIsActive(request.getExIsActive());
			HostelConfiguration.setExIsDelete(false);
			HostelConfiguration.setExFeename(request.getExFeename());
			HostelConfiguration.setHostel(Hostel.get());
			HostelConfiguration.setHostelfeetype(HostelFeeType.get());
			HostelConfiguration.setExMonthName(request.getExMonthName());
			HostelConfiguration.setProgrammes(prog.get());
			HostelConfiguration.setSemester(Semster.get());
			HostelConfiguration.setExStartDate(date1.parse(request.getExStartDate() + " 00:00:00"));
			HostelConfiguration.setExRollNo(studentadmission.get(0).getExRollNo());
			HostelConfiguration.setExIsActive(request.getExIsActive());
			HostelConfiguration.setExIsPaid(false);
			super.HostelConfigurationRepository.save(HostelConfiguration);

			info.put("status", "1");
			info.put("message", "Hostelconfiguration created successfully.");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, String> updateStudentProfilebyStudent(CreateStudentRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			if (request.getId() == null || request.getId().equals("") || request.getId().equals("NA")) {
				info.put("status", "2");
				info.put("message", "Student id is required");
				return info;
			}

			if (request.getId() == null || request.getId().equals("") || request.getId().equals("NA")) {
				info.put("status", "2");
				info.put("message", "Email is required");
				return info;
			}

			if (request.getExContactDetails() == null || request.getExContactDetails().trim().isEmpty()
					|| request.getExContactDetails().equals("NA")) {
				info.put("status", "2");
				info.put("message", "Mobile is required");
				return info;
			}

			Optional<Studentadmission> Studentadmission = super.studentadmission.findById(request.getId());
			if (!Studentadmission.isPresent()) {
				info.put("status", "2");
				info.put("message", "Studentadmission id not present");
				return info;
			}
			int updateresult = super.studentpersonal.updateStudentPersonalbystudent(request.getExEmailId(),
					request.getExContactDetails(), request.getId());
			if (updateresult == 0) {
				info.put("status", "2");
				info.put("message", "Something went wrong Studentpersonal details update");
				return info;
			}

			info.put("status", "1");
			info.put("message", "Student personal details updated successfully");
			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			e.printStackTrace();
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> updateStudentSection(CreateStudentRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {

			if (request.getExStudentRollNoFrom() == null || request.getExStudentRollNoFrom().equals("")) {
				info.put("status", "2");
				info.put("message", "StudentRollNoFrom  is required");
				return info;
			}
			if (request.getExStudentRollNoTo() == null || request.getExStudentRollNoTo().equals("")) {
				info.put("status", "2");
				info.put("message", "StudentRollNoTo is required");
				return info;
			}
			Optional<Colleges> clgid = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!clgid.isPresent()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}
			Optional<Degree> Degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!Degree.isPresent()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<Programmes> prog = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!prog.isPresent()) {
				info.put("status", "2");
				info.put("message", "Programmes not present");
				return info;
			}
			Optional<Department> depts = super.department.findByIdAndExIsDeleteAndExIsActive(request.getDepartment(),
					false, true);
			if (!depts.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department not present");
				return info;
			}
			List<Studentadmission> Studentadmission = super.studentadmission
					.findByCollegesIdAndDegreeIdAndProgrammesIdAndExRollNoGreaterThanEqualAndExRollNoLessThanEqualAndDepartmentId(
							request.getColleges(), request.getDegree(), request.getProgrammes(),
							request.getExStudentRollNoFrom(), request.getExStudentRollNoTo(), request.getDepartment());
			logger.info("student count" + Studentadmission.size());
			if (Studentadmission.size() <= 0) {
				info.put("status", "2");
				info.put("message", "students not present");
				return info;
			}
			int count = 0;
			for (Studentadmission s : Studentadmission) {
				if (s.getSection() == null) {
					// User userid =CommonHelper.getuser(request.getUser()) ;
					// String Description=request.toString();
					// Boolean audit =CommonHelper.saveauditlogdetails(true , Description
					// ,userid,27L);
					int updateStudentadmission = super.studentadmission.updatestudentsection(request.getColleges(),
							request.getDegree(), request.getProgrammes(), s.getId(), request.getSection(),
							request.getDepartment());
					logger.info(s.getExRollNo() + " : Update query status : " + updateStudentadmission);
					count++;
				}
				logger.info(s.getExRollNo() + " :Section already allocated");
			}
			info.put("status", "1");
			info.put("message", +count == 0 ? "Section already allocated"
					: "Section allocated successfully for : " + count + " " + " student");
			return info;
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> getExportList(ExportListRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<EvaluatorList> tasks = super.expertlist.findByExIsDelete(false);
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "	EvaluatorList not created");
				return info;
			} else {
				List dataList = new LinkedList();
				for (EvaluatorList e : tasks) {
					Map<Object, Object> RoomMasterdata = new HashMap<Object, Object>();
					RoomMasterdata.put("id", e.getId());
					RoomMasterdata.put("exName", e.getExName());
					RoomMasterdata.put("exFullName", e.getExFullName());
					RoomMasterdata.put("exInitialName", e.getExInitialName());
					RoomMasterdata.put("exAddressLine1", e.getExAddressLine1());
					RoomMasterdata.put("exAddressLine2", e.getExAddressLin2());
					RoomMasterdata.put("exAddressLine3", e.getExAddressLine3());
					RoomMasterdata.put("exIsActive", e.isExIsActive());
					RoomMasterdata.put("exIsDelete", e.isExIsDelete());
					RoomMasterdata.put("exBankAccountNo", e.getExBankAccountNo());
					RoomMasterdata.put("exBankName", e.getExBankName());
					RoomMasterdata.put("exContactDetails", e.getExContactDetails());
					RoomMasterdata.put("exDesignation", e.getExdesignation());
					RoomMasterdata.put("exCreateDate", e.getExCreateDate());
					RoomMasterdata.put("exEmail", e.getExEmail());
					RoomMasterdata.put("exIfscCode", e.getExIfscCode());
					RoomMasterdata.put("exPinCode", e.getExPinCode());
					RoomMasterdata.put("exState", e.getExState());
					RoomMasterdata.put("exCustomField1", e.getExCustomField1());
					RoomMasterdata.put("exCustomField2", e.getExCustomField2());
					RoomMasterdata.put("exCustomField3", e.getExCustomField3());
					RoomMasterdata.put("exUpdateDate", e.getExUpdateDate());
					dataList.add(RoomMasterdata);
				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> createInternalMarksConfiguration(SemesterRegistrationConfigurationRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
//			SimpleDateFormat date1 = new SimpleDateFormat("dd/MM/yyyy");
//			DateFormat dateFormat = new SimpleDateFormat("yyyy-mm-dd hh:mm:ss");

			Optional<Colleges> Colleges = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),
					false, true);
			if (!Colleges.isPresent() || !Colleges.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}

			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent() || !academic.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}

			Optional<Programmes> Programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Programmes.isPresent() || !Programmes.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}

			Optional<ProgrammeYear> programmeYear = super.programmeYear
					.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
			if (!programmeYear.isPresent() || !programmeYear.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!sem.isPresent() || !sem.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Semster not present");
				return info;
			}

			Optional<ExamAnnouncement> exam = super.examAnnouncement.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getExamAnnouncement());
			if (!exam.isPresent() || !exam.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "ExamAnnouncement not present");
				return info;
			}
			List<InternalMarksConfiguration> duplicates = super.internalMarksConfiguration
					.findByExIsDeleteAndExIsActiveAndProgrammesIdAndCollegesIdAndDegreeIdAndAcademicYearIdAndProgrammeYearIdAndSemesterIdAndExamAnnouncementId(
							false, true, request.getProgrammes(), request.getColleges(), request.getDegree(),
							request.getAcademicYear(), request.getProgrammeYear(), request.getSemester(),
							request.getExamAnnouncement());
			if (duplicates.size() > 0) {
				info.put("status", "2");
				info.put("message", "InternalMarksConfiguration already created");
				return info;
			}
			Date date1 = new SimpleDateFormat("dd/MM/yyyy").parse(request.getExStartDate());
			Date date2 = new SimpleDateFormat("dd/MM/yyyy").parse(request.getExEndDate());
			Date date3 = new SimpleDateFormat("dd/MM/yyyy").parse(request.getExExtendDate());

			Date date = new Date();
			Long privailageid = 35L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = request.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(true, Description, userid, privailageid);
			InternalMarksConfiguration config = new InternalMarksConfiguration();
			config.setExStartDate(date1);
			config.setExEndDate(date2);
			config.setExExtendDate(date3);
			config.setExIsActive(request.getExIsActive());
			config.setExIsDelete(false);
			config.setExCreateDate(date);
			config.setColleges(Colleges.get());
			config.setDegree(degree.get());
			config.setProgrammes(Programmes.get());
			config.setAcademicYear(academic.get());
			config.setProgrammeYear(programmeYear.get());
			config.setSemester(sem.get());
			config.setExStatus(0);
			config.setExamAnnouncement(exam.get());
			super.internalMarksConfiguration.save(config);
			info.put("status", "1");
			info.put("message", "InternalMarksConfiguration created successfully");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> updateInternalMarksConfiguration(SemesterRegistrationConfigurationRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			SimpleDateFormat date1 = new SimpleDateFormat("dd/MM/yyyy");

			Optional<InternalMarksConfiguration> config = super.internalMarksConfiguration.findById(request.getId());
			if (request.getId() == null || !config.isPresent()) {
				info.put("status", "2");
				info.put("message", "InternalMarksConfiguration id not present");
				return info;
			}

			Optional<Colleges> Colleges = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),
					false, true);
			if (!Colleges.isPresent() || !Colleges.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}

			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent() || !academic.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}

			Optional<Programmes> Programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Programmes.isPresent() || !Programmes.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}

			Optional<ProgrammeYear> programmeYear = super.programmeYear
					.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
			if (!programmeYear.isPresent() || !programmeYear.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!sem.isPresent() || !sem.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Semster not present");
				return info;
			}

			Date date = new Date();
			Long privailageid = 35L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = request.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(true, Description, userid, privailageid);
			int retval = super.internalMarksConfiguration.updateConfig(request.getExIsActive(),
					date1.parse(request.getExEndDate()), date1.parse(request.getExStartDate()), date,
					date1.parse(request.getExExtendDate()), request.getId());
			if (retval == 1) {

				info.put("status", "1");
				info.put("message", "InternalMarksConfiguration updated successfully");
				return info;
			} else {
				info.put("status", "2");
				info.put("message", "InternalMarksConfiguration id not present");
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> deleteInternalMarksConfiguration(SemesterRegistrationConfigurationRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<InternalMarksConfiguration> task = super.internalMarksConfiguration.findById(request.getId());
			if (task.isPresent()) {
				if (task.get().getExIsDelete()) {
					info.put("status", "2");
					info.put("message", "InternalMarksConfiguration already deleted");
					return info;
				}
				Boolean exIsDelete = true;
				Boolean is_active = false;
				int result = super.internalMarksConfiguration.deleteSemesterRegistration(exIsDelete, is_active,
						task.get().getId());
				if (result == 0) {
					info.put("status", "2");
					info.put("message", "Something went wrong");
					return info;
				}
				info.put("status", "1");
				info.put("message", "InternalMarksConfiguration deleted successfully");
				return info;
			}
			info.put("status", "2");
			info.put("message", "InternalMarksConfiguration id not present");
			return info;
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getInternalMarksConfiguration(SemesterRegistrationConfigurationRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<InternalMarksConfiguration> tasks = super.internalMarksConfiguration.findByExIsDelete(false);
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "InternalMarksConfiguration not created");
				return info;
			} else {
				List dataList = new LinkedList();
				for (InternalMarksConfiguration e : tasks) {
					Map<Object, Object> datalist = new HashMap<Object, Object>();
					datalist.put("id", e.getId());
					datalist.put("exIsActive", e.getExIsActive());
					datalist.put("exStartDate",
							e.getExStartDate() == null ? "NA" : e.getExStartDate().toString().substring(0, 10));
					datalist.put("exEndDate",
							e.getExEndDate() == null ? "NA" : e.getExEndDate().toString().substring(0, 10));

					datalist.put("exExtendDate",
							e.getExExtendDate() == null ? "NA" : e.getExExtendDate().toString().substring(0, 10));
					datalist.put("exStatus", e.getExStatus());

					datalist.put("programmes", e.getProgrammes().getExIdentifier());
					datalist.put("programmesId", e.getProgrammes().getId());

					datalist.put("examAnnouncement", e.getExamAnnouncement().getExName());
					datalist.put("examAnnouncementId", e.getExamAnnouncement().getId());

					datalist.put("programmeYear", e.getProgrammeYear().getExName());
					datalist.put("programmeYearId", e.getProgrammeYear().getId());

					datalist.put("semester", e.getSemester().getExName());
					datalist.put("semesterId", e.getSemester().getId());

					datalist.put("academicYear", e.getAcademicYear().getExYear());
					datalist.put("academicYearId", e.getAcademicYear().getId());

					datalist.put("degree", e.getDegree().getExName());
					datalist.put("degreeId", e.getDegree().getId());

					datalist.put("colleges", e.getColleges().getExName());
					datalist.put("collegesId", e.getColleges().getId());
					datalist.put("exIsDelete", e.getExIsDelete());
					dataList.add(datalist);
				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getAcademicyearActivityBasedOnAcademicYear(AcademicCalenderActivityRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {

			List<AcademicCalenderActivity> tasks = super.academiccalenderactivity
					.findByExIsDeleteAndExIsActiveAndAcademicYearId(false, true, request.getAcademicYear());
			System.out.println(".lk" + request.getAcademicYear());
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "AcademicCalenderActivity not created for academic Year");
				return info;
			} else {
				List dataList = new LinkedList();
				for (AcademicCalenderActivity e : tasks) {
					Map<Object, Object> Calenderdata = new HashMap<Object, Object>();
					Calenderdata.put("id", e.getId());
					Calenderdata.put("exCreateDate", e.getExCreateDate());
					Calenderdata.put("academicYearId", e.getAcademicYear().getId());
					Calenderdata.put("academicYear", e.getAcademicYear().getExYear());
					Calenderdata.put("exIsActive", e.getExIsActive());
					Calenderdata.put("exIsDelete", e.getExIsDelete());
					Calenderdata.put("exName", e.getExName());
					Calenderdata.put("exUpdatedDate", e.getExUpdateDate());

					dataList.add(Calenderdata);
				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;

			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> getActivityBasedOnAcademicYearANDISEven(AcademicCalenderActivityRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {

			List<AcademicCalenderActivity> tasks = super.academiccalenderactivity
					.findByExIsDeleteAndExIsActiveAndAcademicYearIdAndExIsEven(false, true, request.getAcademicYear(),
							request.getExIsEven());
			System.out.println(".lk" + request.getAcademicYear());
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "AcademicCalenderActivity not created for academic Year..");
				return info;
			} else {
				List dataList = new LinkedList();
				for (AcademicCalenderActivity e : tasks) {
					Map<Object, Object> Calenderdata = new HashMap<Object, Object>();
					Calenderdata.put("id", e.getId());
					Calenderdata.put("exCreateDate", e.getExCreateDate());
					Calenderdata.put("academicYearId", e.getAcademicYear().getId());
					Calenderdata.put("academicYear", e.getAcademicYear().getExYear());
					Calenderdata.put("exIsActive", e.getExIsActive());
					Calenderdata.put("exIsDelete", e.getExIsDelete());
					Calenderdata.put("exName", e.getExName());
					Calenderdata.put("exIsEven", e.getExIsEven());

					dataList.add(Calenderdata);
				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;

			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> createApplicationVersion(@Valid ApplicationVersionRequest apprequest) {

		Map<String, String> info = new LinkedHashMap<>();
		try {

			

			Date date = new Date();	

			 ApplicationVersion appversioning = new ApplicationVersion(); 
		
				SimpleDateFormat date1 = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
				Date DueDate = date1.parse(apprequest.getExDueDate() + " 23:59:00");
			appversioning.setExCreateDate(date);
			appversioning.setExIsDelete(false);
			appversioning.setExIsActive(apprequest.getExIsActive());
			appversioning.setExAppType(apprequest.getExAppType());
			appversioning.setExDescription(apprequest.getExDescription());
			appversioning.setExVersion(apprequest.getExVersion());
			appversioning.setExDueDate(DueDate);

			super.appversion.save(appversioning);
			info.put("status", "1");
			info.put("message", "ApplicationVersioning created successfully");
		
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, String> updateApplicationVersion(@Valid ApplicationVersionRequest apprequest) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<ApplicationVersion> appinfo = super.appversion.findByExIsDeleteAndId(false, apprequest.getId());
			if (apprequest.getId() == null || !appinfo.isPresent()) {
				info.put("status", "2");
				info.put("message", "ApplicationVersion id not present");
				return info;
			}

		
			
			Date date = new Date();
			
			SimpleDateFormat date1 = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
			Date DueDate = date1.parse(apprequest.getExDueDate() + " 23:59:00");
			int updaterecords = super.appversion.updateAppversionRecords(apprequest.getExAppType(), apprequest.getExDescription(),
					apprequest.getExIsActive(), date, apprequest.getId(),
					DueDate, apprequest.getExVersion(),apprequest.getUser());
			
			if (updaterecords == 1) {
				info.put("status", "1");
				info.put("message", "AppVersion updated successfully");
				return info;
			} else {
				info.put("status", "2");
				info.put("message", "AppVersion id not present");
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	
	@Override
	public Map<String, String> deleteApplicationVersion(ApplicationVersionRequest apprequest) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			Optional<ApplicationVersion> task = super.appversion.findById(apprequest.getId());
			if (task.isPresent()) {
				if (task.get().getExIsDelete()) {
					info.put("status", "2");
					info.put("message", "AppVersion already deleted");
					return info;
				}
				Boolean exIsDelete = true;
				Boolean is_active = false;
				int result = super.appversion.deleteAppVersion(exIsDelete, is_active, task.get().getId());
				if (result == 0) {
					info.put("status", "2");
					info.put("message", "Something went wrong");
					return info;
				}
				info.put("status", "1");
				info.put("message", "AppVersion deleted successfully");
				return info;
			}
			info.put("status", "2");
			info.put("message", "AppVersion id not present");
			return info;
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getApplicationVersion(ApplicationVersionRequest apprequest) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<ApplicationVersion> tasks = super.appversion.findByExIsDelete(false);
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "AppVersion not created");
				return info;
			} else {
				List dataList = new LinkedList();
				for (ApplicationVersion e : tasks) {
					Map<Object, Object> Calenderdata = new HashMap<Object, Object>();
					Calenderdata.put("id", e.getId());
					Calenderdata.put("exAppType", e.getExAppType());
					Calenderdata.put("exVersion", e.getExVersion());
					Calenderdata.put("exDescription", e.getExDescription());
					Calenderdata.put("exDueDate", e.getExDueDate() == null ? "NA" : e.getExDueDate().toString().substring(0, 10));
					Calenderdata.put("exIsActive", e.getExIsActive());
					

					dataList.add(Calenderdata);
				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	
	@Override
	public Map<String, Object> ApplicationVersionstatus(ApplicationVersionRequest apprequest) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<ApplicationVersion> tasks = super.appversion.findByExVersionAndExAppTypeAndExIsDelete(apprequest.getExVersion().trim(),apprequest.getExAppType().trim(),false);
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("Information", "AppVersion not created");
				return info;
			} else {
				String States="";
				for(int i=0; i<tasks.size();i++)
				{
					States=States+tasks.get(i).getExDueDate();
				}

				Date date = new Date();
				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				String strDate= formatter.format(date);
				System.out.println("NIFTEMMMMMMMMMMMMMMMmmm"+strDate);
				

				DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date1 = format.parse(strDate);
				System.out.println("uppppppppppppnnnnnnnnn"+date1);
				
				
				SimpleDateFormat formatterr = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				String strDates= formatter.format(tasks.get(0).getExDueDate());
				System.out.println("NIFTEMMMMMMMMMMMMMMMmmm"+strDates);
				
				Date date2 = format.parse(strDates);
				System.out.println("uppppppppppppnnnnnnnnndeeeeeeee"+date2);
				
				System.out.println("NIFTEMMmmmmmmmmmmmmmmmmmmmmmmmm"+tasks.get(0).getExDueDate());	
				
				if (date1.compareTo(date2) < 0) {
					  
					
					info.put("status", "1");
					info.put("Information", "success");
					info.put("details", "Authorized to access");
					return info;
		            // When Date d1 > Date d2
		           // System.out.println("Date1 is after Date2");
		        }
		  
		        else {
		        	info.put("status", "2");
					info.put("Information", "success");
					info.put("details", "UnAuthorized to access");
					return info;
		        }
				
				
				/*
				 * info.put("status", "1"); info.put("Information", "success");
				 * info.put("details", States); return info;
				 */
			}
		
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("Information", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<Object, Object> AdminPassword(Login request) {
		Map<Object, Object> info = new LinkedHashMap<>();
		try {

			if (request.getUserName() == null || request.getUserName().equals("")
					|| request.getUserName().equals("NA")) {
				info.put("status", "2");
				info.put("message", "Username is required");
				return info;
			}

			if (request.getLoginType() == null || request.getLoginType().equals("")
					|| request.getLoginType().equals("NA") || request.getLoginType().trim().isEmpty()) {
				info.put("status", "2");
				info.put("message", "LoginType is required");
				return info;
			}

			if (request.getLoginType().equalsIgnoreCase("student")) {
				List dataList = new LinkedList();
				Map<String, Object> pass = new HashMap<String, Object>();
				List<Studentpersonal> task = super.studentpersonal
						.findByStudentadmissionExIsActiveAndStudentadmissionExUserName(true, request.getUserName());
				if (task.size() > 0) {
					if (task.get(0).getStudentadmission().getExIsActive() == true) {

					String decryptdata = super.EncryptionAndDecryption.getOriginalStringwithoutKey(
							task.get(0).getStudentadmission().getExPassword());
					
					pass.put("UserName",task.get(0).getStudentadmission().getExUserName());
					pass.put("Password",decryptdata);
					dataList.add(pass);
					
					info.put("status", "1");
					info.put("Details", dataList);
					return info;
					
					} else {
						info.put("status", "2");
						info.put("message", " student  is inactive");
						return info;
					}
				}else {
				info.put("status", "2");
				info.put("message", " Username doesnot exits");
				return info;
			}
			}
			
			
			if (request.getLoginType().equalsIgnoreCase("staff")) {
				List dataList = new LinkedList();
				Map<String, Object> pass = new HashMap<String, Object>();
				List<Staffpersonal> task = super.staffpersonal.findByExLoginNameAndExIsDelete(request.getUserName(),
						false);
				if (task.size() > 0) {
					if (task.get(0).isExIsActive() == true) {

						String decryptdata = super.EncryptionAndDecryption.getOriginalStringwithoutKey(
								task.get(0).getExPassword());
						
						
						pass.put("UserName",task.get(0).getExLoginName());
						pass.put("Password",decryptdata);
						dataList.add(pass);
						
						info.put("status", "1");
						info.put("Details", dataList);
						return info;
						
				}else {
					info.put("status", "2");
					info.put("message", " Staff  is inactive");
					return info;
				}
			}else {
			info.put("status", "2");
			info.put("message", " Username doesnot exits");
			return info;
		}
			}

			if (request.getLoginType().equalsIgnoreCase("regular")) {
				List dataList = new LinkedList();
				Map<String, Object> pass = new HashMap<String, Object>();
				List<User> task = super.user.findByExIsDeleteAndExUserName(false, request.getUserName());
				if (task.size() > 0) {
					if (task.get(0).getExIsActive() == true) {
						String decryptdata = super.EncryptionAndDecryption.getOriginalStringwithoutKey(
								task.get(0).getExPassword());
						
						pass.put("UserName",task.get(0).getExName());
						pass.put("Password",decryptdata);
						dataList.add(pass);
						
						info.put("status", "1");
						info.put("Details", dataList);
						return info;
						
					} else {
						info.put("status", "2");
						info.put("message", "user is inactive");
						return info;
					}
				}
				info.put("status", "2");
				info.put("message", "Usernam doesnot exits");
				return info;
			}
			info.put("status", "2");
			info.put("message", "Invalid login type");
			return info;
			
		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			e.printStackTrace();
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> createFeedbackConfig(SemesterRegistrationConfigurationRequest request)  {
	Map<String, String> info = new LinkedHashMap<>();
	try {
//		SimpleDateFormat date1 = new SimpleDateFormat("dd/MM/yyyy");
//		DateFormat dateFormat = new SimpleDateFormat("yyyy-mm-dd hh:mm:ss");

		Optional<Colleges> Colleges = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),
				false, true);
		if (!Colleges.isPresent() || !Colleges.get().getExIsActive()) {
			info.put("status", "2");
			info.put("message", "Colleges not present");
			return info;
		}
		Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
		if (!degree.isPresent() || !degree.get().getExIsActive()) {
			info.put("status", "2");
			info.put("message", "Degree not present");
			return info;
		}

		Optional<AcademicYear> academic = super.academicYear
				.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
		if (!academic.isPresent() || !academic.get().getExIsActive()) {
			info.put("status", "2");
			info.put("message", "academicYear not present");
			return info;
		}

		Optional<Programmes> Programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
				request.getProgrammes());
		if (!Programmes.isPresent() || !Programmes.get().getExIsActive()) {
			info.put("status", "2");
			info.put("message", "programmeYear not present");
			return info;
		}

		Optional<ProgrammeYear> programmeYear = super.programmeYear
				.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
		if (!programmeYear.isPresent() || !programmeYear.get().getExIsActive()) {
			info.put("status", "2");
			info.put("message", "programmeYear not present");
			return info;
		}
		Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
				request.getSemester());
		if (!sem.isPresent() || !sem.get().getExIsActive()) {
			info.put("status", "2");
			info.put("message", "Semster not present");
			return info;
		}
		Optional<Batch> batch = super.batch.findByExIsDeleteAndExIsActiveAndId(false, true, request.getBatch());
		if (!batch.isPresent() || !batch.get().getExIsActive()) {
			info.put("status", "2");
			info.put("message", "batch not present");
			return info;
		}
		Optional<User> user = super.user.findByExIsDeleteAndExIsActiveAndId(false, true, request.getUser());
		if (!user.isPresent()) {
			info.put("status", "2");
			info.put("message", "user not present");
			return info;
		}
		
		List<FeedbackConfiguration> duplicates = super.feedbackConfiguration
				.findByExIsDeleteAndExIsActiveAndProgrammesIdAndCollegesIdAndDegreeIdAndAcademicYearIdAndProgrammeYearIdAndSemesterIdAndBatchIdAndFeedbackType(
						false, true, request.getProgrammes(), request.getColleges(), request.getDegree(),
						request.getAcademicYear(), request.getProgrammeYear(), request.getSemester(),request.getBatch() , request.getFeedbackType());
		if (duplicates.size() > 0) {
			info.put("status", "2");
			info.put("message", "Feedback Configuration already created");
			return info;
		}
		Date date1 = new SimpleDateFormat("dd/MM/yyyy").parse(request.getExStartDate());
		Date date2 = new SimpleDateFormat("dd/MM/yyyy").parse(request.getExEndDate());
		Date date3 = new SimpleDateFormat("dd/MM/yyyy").parse(request.getExExtendDate());

			Date date = new Date();
			Long privailageid = 47L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = request.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(true, Description, userid, privailageid);
			FeedbackConfiguration config = new FeedbackConfiguration();
			config.setExStartDate(date1);
			config.setExEndDate(date2);
			config.setExExtendDate(date3);
			config.setExIsActive(request.getExIsActive());
			config.setExIsDelete(false);
			config.setExCreateDate(date);
			config.setColleges(Colleges.get());
			config.setFeedbackType(request.getFeedbackType());
			config.setUser(user.get());
			config.setDegree(degree.get());
			config.setProgrammes(Programmes.get());
			config.setAcademicYear(academic.get());
			config.setBatch(batch.get());
			config.setProgrammeYear(programmeYear.get());
			config.setSemester(sem.get());
			config.setExStatus(0);
		super.feedbackConfiguration.save(config);
		info.put("status", "1");
		info.put("message", "feedback configured successfully");
		return info;

	} catch (Exception e) {
		logger.error("Exception occured" + e);
		StringWriter errors = new StringWriter();
		e.printStackTrace(new PrintWriter(errors));
		logger.error(errors.toString());
		info.put("status", "0");
		info.put("message", "Something went wrong");
		return info;
	}
	}

	@Override
	public Map<String, String> updateFeedbackConfig( SemesterRegistrationConfigurationRequest request) {
		Map<String, String> info = new LinkedHashMap<>();
		try {
			SimpleDateFormat date1 = new SimpleDateFormat("dd/MM/yyyy");
			Optional<Colleges> Colleges = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),
					false, true);
			if (!Colleges.isPresent() || !Colleges.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<Batch> batch = super.batch.findByExIsDeleteAndExIsActiveAndId(false, true, request.getBatch());
			if (!batch.isPresent() || !batch.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Semster not present");
				return info;
			}
			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent() || !academic.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}

			Optional<Programmes> Programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Programmes.isPresent() || !Programmes.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}

			Optional<ProgrammeYear> programmeYear = super.programmeYear
					.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
			if (!programmeYear.isPresent() || !programmeYear.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!sem.isPresent() || !sem.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Semster not present");
				return info;
			}
			Date date = new Date();
			Long privailageid = 47L;
			User userid = super.commonHelper.getuser(request.getUser());
			String Description = request.toString();
			Boolean audit = super.commonHelper.saveauditlogdetails(true, Description, userid, privailageid);
			
			int retval = super.feedbackConfiguration.updateConfig(request.getExIsActive(),
					date1.parse(request.getExEndDate()), date1.parse(request.getExStartDate()), date,
					date1.parse(request.getExExtendDate()), request.getFeedbackType() , request.getId() ,request.getBatch());
			if (retval == 1) {				
				info.put("status", "1");
				info.put("message", "Feedback Configuration updated successfully");
				return info;
			} else {
				info.put("status", "2");
				info.put("message", "Feedback Configuration id not present");
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, String> deleteFeedbackConfig(SemesterRegistrationConfigurationRequest request) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Map<String, Object> getFeedbackConfig(SemesterRegistrationConfigurationRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<FeedbackConfiguration> tasks = super.feedbackConfiguration.findByExIsDelete(false);
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Feedback Configuration not created");
				return info;
			} else {
				List dataList = new LinkedList();
				for (FeedbackConfiguration e : tasks) {
					Map<Object, Object> datalist = new HashMap<Object, Object>();
					datalist.put("id", e.getId());

					datalist.put("exIsActive", e.getExIsActive());
					datalist.put("exStartDate",e.getExStartDate() == null ? "NA" : e.getExStartDate().toString().substring(0, 10));
					datalist.put("exEndDate",e.getExEndDate() == null ? "NA" : e.getExEndDate().toString().substring(0, 10));
					datalist.put("exExtendDate",e.getExExtendDate() == null ? "NA" : e.getExExtendDate().toString().substring(0, 10));
					datalist.put("exStatus", e.getExStatus());
					datalist.put("programmes", e.getProgrammes().getExIdentifier());
					datalist.put("programmesId", e.getProgrammes().getId());
					datalist.put("programmeYear", e.getProgrammeYear().getExName());
					datalist.put("programmeYearId", e.getProgrammeYear().getId());
					datalist.put("semester", e.getSemester().getExName());
					datalist.put("semesterId", e.getSemester().getId());
					datalist.put("academicYear", e.getAcademicYear().getExYear());
					datalist.put("academicYearId", e.getAcademicYear().getId());
					datalist.put("degree", e.getDegree().getExName());
					datalist.put("degreeId", e.getDegree().getId());
					datalist.put("colleges", e.getColleges().getExName());
					datalist.put("collegesId", e.getColleges().getId());
					datalist.put("batch", e.getBatch() == null ? "NA" :e.getBatch().getExName());
					datalist.put("batchId", e.getBatch() == null ? "NA" :e.getBatch().getId());
					datalist.put("exIsDelete", e.getExIsDelete());
					datalist.put("feedbackType", e.getFeedbackType());
					dataList.add(datalist);
				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

}
