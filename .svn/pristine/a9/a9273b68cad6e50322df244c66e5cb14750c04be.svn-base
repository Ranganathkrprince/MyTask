package com.niftem.app.util;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.UUID;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import java.util.zip.ZipFile;

import org.apache.commons.io.IOUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;
@Component
public class UnzipUtility {   
	
	@Autowired
	CommonHelper commonHelper;

	
	private static Logger logger = LoggerFactory.getLogger("master-log");
    public String filename(MultipartFile file) throws IOException {
    	String Origfilename  = ""; 
    	   try {	  
    			Origfilename = file.getOriginalFilename();
    			
    			if (Origfilename.indexOf(".") > 0) {
    				Origfilename = Origfilename.substring(0, Origfilename.lastIndexOf("."));    			
    	           	Origfilename.trim(); 
    			}
    	    		return Origfilename;
      	
    		   
    	   } catch (Exception e) {
   			e.printStackTrace();
   			logger.error("Exception occured" + e);
   			StringWriter errors = new StringWriter();
   			e.printStackTrace(new PrintWriter(errors));
   			logger.error(errors.toString());
   	    } 
   	     
		return Origfilename;
    	
    }

	
	
    public List<String> unzip(MultipartFile file , String destination) throws IOException {
    	String bookletname  = ""; 
     	List<String> fileslist= new LinkedList<String>();

    	File zip = File.createTempFile(UUID.randomUUID().toString(), "temp");
	    try {	    	    	
		    /**
		     * save file to temp
		     */		    
		    FileOutputStream o = new FileOutputStream(zip);
		    IOUtils.copy(file.getInputStream(), o);
	        zip.setExecutable(true , false); 
	        zip.setReadable(true , false); 
	        zip.setWritable(true , false); 
		    o.close();

		    /**
		     * unizp file from temp by zip4j
		     */
	       
	       
	        
	         ZipFile zipFile = new ZipFile(zip);
	         Enumeration<? extends ZipEntry> e = zipFile.entries();  
	            while (e.hasMoreElements()) {	

	            	
	            	 ZipEntry entry = e.nextElement();	
	                File destinationPath = new File(destination, entry.getName());

	                bookletname  = destinationPath.getParentFile().getName();
	                File validate = new File(destination+bookletname);	
	                //create parent directories
	                destinationPath.getParentFile().mkdirs();	 
	                destinationPath.setExecutable(true , false); 
	                destinationPath.setReadable(true , false); 
	                destinationPath.setWritable(true , false); 
	                // if the entry is a file extract it
	                if(validate.exists()) {
	            		validate.setExecutable(true , false); 
	            		validate.setReadable(true , false); 
	            		validate.setWritable(true , false); 
	            	}
	                
	                if (entry.isDirectory()) {
	                    continue;
	                }
	                else {
		                fileslist.add(bookletname);
	                    System.out.println("Extracting file: " + destinationPath);	                     
	                    BufferedInputStream bis = new BufferedInputStream(zipFile.getInputStream(entry));	 
	                    int b;
	                    byte buffer[] = new byte[1024];
	 
	                    FileOutputStream fos = new FileOutputStream(destinationPath);
	                     
	                    BufferedOutputStream bos = new BufferedOutputStream(fos, 1024);
	 
	                    while ((b = bis.read(buffer, 0, 1024)) != -1) {
	                        bos.write(buffer, 0, b);
	                    }	                     
	                    bos.close();
	                    bis.close();	                     
	                }	                 
	            }
	           System.out.println("?????????????????????Folder.size()??????????????"+fileslist.size());
	       //  zipFile.extractAll(destination);
	    } catch (ZipException e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
	    } finally {
	        /**
	         * delete temp file
	         */
	        zip.delete();
	    }
	    return fileslist;
    }
    
	public String createFolder(String collegename, String academicyear  , String program, String foldername ) {
		try {	
			
			String UPLOADED_FOLDER = commonHelper.getSettingValue("DOCUMENT_PATH");		

			
			File file2 = new File(UPLOADED_FOLDER+"/"+collegename);			
			if (file2.mkdir()) {
	            file2.setExecutable(true , false); 
	            file2.setReadable(true , false); 
	            file2.setWritable(true , false); 
				
			}
			String college= file2.getPath();			
			File file3 = new File(college+"/"+academicyear);
			if (file3.mkdir()) {	
	            file3.setExecutable(true , false); 
	            file3.setReadable(true , false); 
	            file3.setWritable(true , false); 
			}
			String academic= file3.getPath();	
			File file4 = new File(academic+"/"+program);	
			if (file4.mkdir()) {
	            file4.setExecutable(true , false); 
	            file4.setReadable(true , false); 
	            file4.setWritable(true , false); 
			}	
			
			String pro= file4.getPath();	
			File file5 = new File(pro+"/"+foldername);	
			if (file5.mkdir()) {
				file5.setExecutable(true , false); 
				file5.setReadable(true , false); 
				file5.setWritable(true , false); 
			}		
			return UPLOADED_FOLDER+collegename+"/"+academicyear+"/"+program+"/"+foldername+"/";
		}catch(Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
		}
		return "NA";
	}      
}
