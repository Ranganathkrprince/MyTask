package com.niftem.app.implementation;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Random;
import java.util.UUID;

import javax.transaction.Transactional;

import org.apache.commons.io.FilenameUtils;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.DateUtil;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.niftem.app.entity.AcademicCalender;
import com.niftem.app.entity.AcademicCalenderActivity;
import com.niftem.app.entity.AcademicYear;
import com.niftem.app.entity.Batch;
import com.niftem.app.entity.Category;
import com.niftem.app.entity.CertificateType;
import com.niftem.app.entity.Colleges;
import com.niftem.app.entity.Courses;
import com.niftem.app.entity.CoursesRegistration;
import com.niftem.app.entity.CoursesType;
import com.niftem.app.entity.CreditHours;
import com.niftem.app.entity.Degree;
import com.niftem.app.entity.Department;
import com.niftem.app.entity.Designation;
import com.niftem.app.entity.DocumentType;
import com.niftem.app.entity.EvaluatorList;
import com.niftem.app.entity.ExamAnnouncement;
import com.niftem.app.entity.ExamAttendance;
import com.niftem.app.entity.ExamBarcodes;
import com.niftem.app.entity.FeeCategory;
import com.niftem.app.entity.FeeHeadMaster;
import com.niftem.app.entity.FeeMaster;
import com.niftem.app.entity.FeeType;
import com.niftem.app.entity.GradeReport;
import com.niftem.app.entity.MidTermMarks;
import com.niftem.app.entity.OrderTransaction;
import com.niftem.app.entity.ProgramType;
import com.niftem.app.entity.ProgrammeYear;
import com.niftem.app.entity.Programmes;
import com.niftem.app.entity.QpSetterLog;
import com.niftem.app.entity.RegistrationType;
import com.niftem.app.entity.Section;
import com.niftem.app.entity.SemesterProgressReport;
import com.niftem.app.entity.SemesterRegistration;
import com.niftem.app.entity.Semster;
import com.niftem.app.entity.StaffEmpDetails;
import com.niftem.app.entity.StaffType;
import com.niftem.app.entity.Staffpersonal;
import com.niftem.app.entity.Stream;
import com.niftem.app.entity.StudentBankDetails;
import com.niftem.app.entity.StudentCertificate;
import com.niftem.app.entity.StudentDocument;
import com.niftem.app.entity.Studentadmission;
import com.niftem.app.entity.StudentadmissionLog;
import com.niftem.app.entity.Studentpersonal;
import com.niftem.app.entity.TeacherCourseMapping;
import com.niftem.app.entity.User;
import com.niftem.app.model.ClassTimeTableRequest;
import com.niftem.app.model.CoursesRequest;
import com.niftem.app.model.ExamAttendanceRequest;
import com.niftem.app.model.ExternalMarksRequest;
import com.niftem.app.model.MidTermMarksRequest;
import com.niftem.app.model.QuestionpaperRequest;
import com.niftem.app.repository.QpSetterLogRepository;
import com.niftem.app.repository.StudentBankDetailsRepository;
import com.niftem.app.service.UploadService;
import com.niftem.app.util.AutoManager;
import com.niftem.app.util.CommonHelper;

@Service
@Transactional
public class UploadImpl extends AutoManager implements UploadService {
	
	@Autowired
	private QpSetterLogRepository qplog;
	
	@Autowired
	private StudentBankDetailsRepository studentBankDetailsRepository;


	private static Logger logger = LoggerFactory.getLogger("master-log");
	private static Logger excellog = LoggerFactory.getLogger("excel-log");

	private Workbook getWorkBook(MultipartFile file) {

		Workbook workbook = null;
		String extention = FilenameUtils.getExtension(file.getOriginalFilename());
		try {
			if (extention.equalsIgnoreCase("xlsx")) {
				workbook = new XSSFWorkbook(file.getInputStream());

			} else if (extention.equalsIgnoreCase("xls")) {
				workbook = new XSSFWorkbook(file.getInputStream());
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return workbook;
	}

	
	@Override
	public Map<String, Object> uploadCourses(MultipartFile exCourseFile, Long User) {
		Map<String, Object> info = new LinkedHashMap<>();
		if (exCourseFile == null || exCourseFile.isEmpty()) {
			info.put("status", "2");
			info.put("message", "Please select file");
			return info;
		}

		String extention = FilenameUtils.getExtension(exCourseFile.getOriginalFilename());
		if (extention.equalsIgnoreCase("xls") || extention.equalsIgnoreCase("xlsx")) {
			Map<String, Object> result = readDataFromCourseExcel(exCourseFile, User);
			System.out.println("Qread the data" + result);
			return result;
		}
		info.put("status", "2");
		info.put("message", "File should be xls / xlsx extention");
		return info;
	}

	private Map<String, Object> readDataFromCourseExcel(MultipartFile exCourseFile, Long user) {

		List<String> failureList = new ArrayList<String>();
		List<String> successList = new ArrayList<String>();
		List<Object> list = new ArrayList<Object>();
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Workbook workbook = getWorkBook(exCourseFile);
			Sheet Sheet = workbook.getSheetAt(0);

			Iterator<Row> rows = Sheet.iterator();
			rows.next();

			for (int rowNum = 1; rowNum < Sheet.getLastRowNum() + 1; rowNum++) {
				Row r = Sheet.getRow(rowNum);
				String temp = "";
				for (int cn = 0; cn < 24; cn++) {

					Cell c = r.getCell(cn, Row.RETURN_BLANK_AS_NULL);

					try {
						if (c == null) {
							// The spreadsheet is empty in this cell
							temp = temp + "#@&" + "NA";
						} else {
							// Do something useful with the cell's contents
							c.setCellType(Cell.CELL_TYPE_STRING);
							temp = temp + "#@&" + super.commonValidations.getCellValue(c);
							System.out.println(">>>>>>>>>req>>>>" + temp);

						}

					} catch (Exception e) {
						StringWriter errors = new StringWriter();
						e.printStackTrace(new PrintWriter(errors));
						e.printStackTrace();
						logger.error("Exception  : " + errors.toString());
						// return "failed";
					}
				}
				String tempA[] = temp.split("#@&");

				Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndExName(false, true,
						tempA[1].trim());
				Optional<Colleges> clgid = super.colleges.findByExIdentifierAndExIsDeleteAndExIsActive(tempA[2].trim(),
						false, true);
				Optional<Programmes> programs = super.programmes.findByExIsDeleteAndExIsActiveAndExIdentifier(false,
						true, tempA[3].trim());
				Optional<AcademicYear> academicYearid = super.academicYear
						.findByExIsDeleteAndExIsActiveAndExIdentifier(false, true, tempA[6].trim());
				Optional<ProgrammeYear> programyear = super.programmeYear
						.findByExNameAndExIsActiveAndExIsDelete(tempA[8].trim(), true, false);
				Optional<Semster> sem = super.semester.findByExNameAndExIsActiveAndExIsDelete(tempA[9].trim(), true,
						false);
				Optional<CreditHours> CreditHour = super.creditHours.findByExIsDeleteAndExIsActiveAndExCreditHourTitle(false, true, tempA[10].trim());
				
				System.out.println("lllllllllllll"+programs.get().getId());
				System.out.println("dddddddddd"+degree.get().getId());
				Optional<Batch> batch = super.batch.findByExNameAndExIsDeleteAndExIsActiveAndProgrammesIdAndDegreeId(tempA[7].trim(), false , true, programs.get().getId(), degree.get().getId() );

			
				String tempcType[] = tempA[14].split("\\$");
				List<String> courseList = Arrays.asList(tempcType);
				System.out.println("tempcType[] " + tempcType.toString());

				System.out.println("courselist " + courseList);
				ArrayList<Object[]> courseresult = super.coursestype.CourseType(courseList, false, true);
				System.out.println(">>>..coursestype  " + courseresult.size());
				
				
				
				boolean IsSatisfactory = true;
				String exIsSatisfactory = tempA[15].trim();
				logger.info("exIsPractical >" + exIsSatisfactory);
				if (exIsSatisfactory.contains(".0")) {
					exIsSatisfactory = exIsSatisfactory.replace(".0", "");
				}
				if (exIsSatisfactory.contentEquals("0")) {
					IsSatisfactory = false;
				}

				boolean IsProject = true;
				String exIsProject = tempA[16].trim();
				logger.info("exIsDrawing >" + exIsProject);
				if (exIsProject.contains(".0")) {
					exIsProject = exIsProject.replace(".0", "");
				}
				if (exIsProject.contentEquals("0")) {
					IsProject = false;
				}
				boolean IsSeminar = true;
				String exIsSeminar = tempA[17].trim();
				logger.info("exIsDrawing >" + exIsSeminar);
				if (exIsSeminar.contains(".0")) {
					exIsSeminar = exIsSeminar.replace(".0", "");
				}
				if (exIsSeminar.contentEquals("0")) {
					IsSeminar = false;
				}
				boolean IsElective = true;
				String exIsElective = tempA[18].trim();
				logger.info("exIsDrawing >" + exIsProject);
				if (exIsElective.contains(".0")) {
					exIsElective = exIsElective.replace(".0", "");
				}
				if (exIsElective.contentEquals("0")) {
					IsElective = false;
				}
				
				//====================
				
				boolean Iscompulsory = true;
				String exIscompulsory = tempA[19].trim();
				logger.info("exIsDrawing >" + exIsProject);
				if (exIscompulsory.contains(".0")) {
					exIscompulsory = exIscompulsory.replace(".0", "");
				}
				if (exIscompulsory.contentEquals("0")) {
					Iscompulsory = false;
				}
				
				
				
				boolean IsIndustrialVisit = true;
				String exIsIndustrialVisit = tempA[20].trim();
				logger.info("exIsDrawing >" + exIsProject);
				if (exIsIndustrialVisit.contains(".0")) {
					exIsIndustrialVisit = exIsIndustrialVisit.replace(".0", "");
				}
				if (exIsIndustrialVisit.contentEquals("0")) {
					IsIndustrialVisit = false;
				}
				
				
				
				boolean IsVillageAdoption = true;
				String exIsVillageAdoption = tempA[21].trim();
				logger.info("exIsDrawing >" + exIsProject);
				if (exIsVillageAdoption.contains(".0")) {
					exIsVillageAdoption = exIsVillageAdoption.replace(".0", "");
				}
				if (exIsVillageAdoption.contentEquals("0")) {
					IsVillageAdoption = false;
				}

				
				boolean IsIndustrialTrainingInternship = true;
				String exIsIndustrialTrainingInternship = tempA[22].trim();
				logger.info("exIsDrawing >" + exIsProject);
				if (exIsIndustrialTrainingInternship.contains(".0")) {
					exIsIndustrialTrainingInternship = exIsIndustrialTrainingInternship.replace(".0", "");
				}
				if (exIsIndustrialTrainingInternship.contentEquals("0")) {
					IsIndustrialTrainingInternship = false;
				}

				
				
				boolean IsResearchProject = true;
				String exIsResearchProject = tempA[23].trim();
				logger.info("exIsDrawing >" + exIsProject);
				if (exIsResearchProject.contains(".0")) {
					exIsResearchProject = exIsResearchProject.replace(".0", "");
				}
				if (exIsResearchProject.contentEquals("0")) {
					IsResearchProject = false;
				}
				
				//=====================
				Date date = new Date();
				
				if (!degree.isPresent()) {
					failureList.add(tempA[1].trim() + " : Degree name not present:");
					System.out.println(">.degreee peresnt or not" + tempA[1].trim());
					list.add(tempA[1]);
				} else if (!clgid.isPresent()) {
					failureList.add(tempA[2].trim() + " : College not present:");

					list.add(tempA[1]);

				} else if (courseresult.size() != courseList.size()) {
					failureList.add(tempA[14].trim() + " : coursetype not present:");

					list.add(tempA[1]);

				} else if (!programs.isPresent()) {
					failureList.add(tempA[3].trim() + " : Programmes Name not present:");
					list.add(tempA[1]);
				}

				else if (!academicYearid.isPresent()) {
					failureList.add(tempA[6].trim() + " : Academic Year not present:");
					list.add(tempA[1]);
				} else if (!programyear.isPresent()) {
					failureList.add(tempA[8].trim() + " : ProgrameYear  not present:");
					list.add(tempA[1]);
				} else if (!sem.isPresent()) {
					failureList.add(tempA[9].trim() + " : Semester  not present:");
					list.add(tempA[1]);
				} else if (!CreditHour.isPresent()) {
					failureList.add(tempA[10].trim() + " : CreditHours not present:");
					list.add(tempA[1]);
				} else if (!batch.isPresent()) {
					failureList.add(tempA[7].trim() + " : batch not present:");
					list.add(tempA[1]);
				}
				else {
				// List<CoursesType> coursestype =
				// super.coursestype.findByIdInAndExIsDeleteAndExIsActive(courseList,false,
				// true);
				
				Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndExIdentifierAndProgrammesId(false,
						true, tempA[4].trim(),programs.get().getId());
				if (!department.isPresent()) {
					failureList.add(tempA[4].trim() + " : Department Identifier not present of particular Programe");
					list.add(tempA[1]);
				}
				else {
				Optional<Stream> stream = super.stream.findByExIdentifierAndExIsActiveAndExIsDeleteAndDepartmentId(tempA[5].trim(),
						true, false,department.get().getId());
				if (!stream.isPresent()) {
					failureList.add(tempA[5].trim() + " : Stream Identifier not present with particular department:");
					list.add(tempA[1]);
				}
				else {
				Courses courses = new Courses();
				List<Courses> result = super.courses
						.findByExNameAndExIsDeleteAndProgrammesIdAndAcademicYearIdAndProgrammeYearIdAndSemesterIdAndExCoursesCodeAndDepartmentIdAndDegreeId(
								tempA[11].trim(), false, programs.get().getId(), academicYearid.get().getId(),
								programyear.get().getId(), sem.get().getId(), tempA[12].trim(),
								department.get().getId(), degree.get().getId());
				if (result.size() > 0) {
					failureList.add(tempA[11] + " : Course already exists:");
					list.add(tempA[1]);
				} else {

					courses.setDegree(degree.get());
					courses.setProgrammes(programs.get());
					courses.setDepartment(department.get());
					courses.setStream(stream.get());
					courses.setAcademicYear(academicYearid.get());
					courses.setProgrammeYear(programyear.get());
					courses.setSemester(sem.get());
					courses.setCreditHours(CreditHour.get());
					courses.setExName(tempA[11].trim());
					courses.setExCoursesCode(tempA[12].trim());
					courses.setExDescription(tempA[13].trim());
					courses.setExIsElective(IsElective);
					courses.setExIsProject(IsProject);
					courses.setExIsSatisfactory(IsSatisfactory);
					courses.setExIsSeminar(IsSeminar);
					courses.setExIsActive(true);
					courses.setExIsDelete(false);
					courses.setColleges(clgid.get());
					courses.setBatch(batch.get());
					courses.setExCreateDate(date);
					courses.setExIsIndustrialVisit(IsIndustrialVisit);
					courses.setExIsIndustrialTrainingInternship(IsIndustrialTrainingInternship);
					courses.setExIscompulsory(Iscompulsory);
					courses.setExIsVillageAdoption(IsVillageAdoption);
					courses.setExIsResearchProject(IsResearchProject);

					courses.setExSubjectCode(tempA[24].trim());
					super.courses.save(courses);
					List<CoursesType> coursestype = new ArrayList<CoursesType>();

					for (String coursesetype : tempcType) {
						Optional<CoursesType> cot = super.coursestype
								.findByExNameAndExIsDeleteAndExIsActive(coursesetype, false, true);
						coursestype.add(cot.get());

					}
					courses.setCoursesType(coursestype);

					successList.add("Success" + courses);
					 }
				  }
				}
				}
				info.put("status", "1");
				info.put("message", exCourseFile.getOriginalFilename() + "Excel Uploaded Succesfully ");
				info.put("success", successList.size() + " Records Inserted Successfully");
				info.put("failure", list.size() + " Records Not Inserted "); //
				// info.put("failureList",failureList);
				excellog.info("Data Not Inserted : " + failureList);
			}
			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			e.printStackTrace();
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> uploadStudentProfile(MultipartFile studentProfilefile) {
		// TODO Auto-generated method stub
		Map<String, Object> info = new LinkedHashMap<>();
		if (studentProfilefile == null || studentProfilefile.isEmpty()) {
			info.put("status", "2");
			info.put("message", "Please select file");
			return info;
		}
		String extention = FilenameUtils.getExtension(studentProfilefile.getOriginalFilename());
		if (extention.equalsIgnoreCase("xls") || extention.equalsIgnoreCase("xlsx")) {
			Map<String, Object> result = readDataFromstudentProfileExcel(studentProfilefile);
			return result;
		}
		info.put("status", "2");
		info.put("message", "File should be xls / xlsx extention");
		return info;
	}

	private Map<String, Object> readDataFromstudentProfileExcel(MultipartFile studentProfilefile) {
		List<String> failureList = new ArrayList<String>();
		List<String> successList = new ArrayList<String>();
		List<Object> list = new ArrayList<Object>();
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Workbook workbook = getWorkBook(studentProfilefile);
			Sheet firstSheet = workbook.getSheetAt(0);
			/*
			 * Optional<RegistrationType> rtype =
			 * super.registrationType.findByExNameAndExIsDeleteAndExIsActive("Regular",
			 * false, true); if (!rtype.isPresent()) { info.put("status", "2");
			 * info.put("message", "Regular Registration Type not present"); return info; }
			 */

			Iterator<Row> rows = firstSheet.iterator();
			rows.next();

			for (int rowNum = 1; rowNum < firstSheet.getLastRowNum() + 1; rowNum++) {
				Row r = firstSheet.getRow(rowNum);
				String temp = "";
				for (int cn = 0; cn < 53; cn++) {
					Cell c = r.getCell(cn, Row.RETURN_BLANK_AS_NULL);
					try {
						if (c == null) {
							// The spreadsheet is empty in this cell
							temp = temp + "#@&" + "NA";
						} else {
							// Do something useful with the cell's contents
							c.setCellType(Cell.CELL_TYPE_STRING);
							temp = temp + "#@&" + super.commonValidations.getCellValue(c);
							System.out.println(">>>>>>>>>req>>>>" + temp);

						}

					} catch (Exception e) {
						StringWriter errors = new StringWriter();
						e.printStackTrace(new PrintWriter(errors));
						e.printStackTrace();
						logger.error("Exception  : " + errors.toString());
						// return "failed";
					}
				}
				String tempA[] = temp.split("#@&");
				System.out.println(">>>>>>>>consloe>>>>" + temp);
				System.out.println(">>sys>>" + tempA.length);

				// Date date = super.commonValidations.checkDate(tempA[]1.toString());
				// Optional<ExamAnnouncement> exam = null;
				if (tempA.length < 55 && tempA.length > 1) {
					System.out.println(">>>>>>>>print>>>>" + tempA[9]);

					for (int i = 0; i < tempA.length; i++) {
						if (tempA[i].equals("NA")) {
							tempA[i] = tempA[i].replace("NA", "");
						}
					}
					System.out.println("??????????????tempA?????????" + tempA);

					Optional<Colleges> collage = super.colleges.findByExNameAndExIsDeleteAndExIsActive(tempA[1].trim(),
							false, true);
					Optional<Degree> degree = super.degree.findByExNameAndExIsDeleteAndExIsActive(tempA[2].trim(),
							false, true);
					//Optional<Batch> batch = super.batch.findByExIdentifierAndExIsDeleteAndExIsActive(tempA[3].trim(),
					//		false, true);
					
					Optional<Programmes> programs = super.programmes
							.findByExIdentifierAndExIsDeleteAndExIsActive(tempA[4].trim(), false, true);

					Optional<Batch> batch = super.batch.findByExIdentifierAndExIsDeleteAndExIsActiveAndProgrammesIdAndDegreeId(tempA[3].trim(), false,true , programs.get().getId()  , degree.get().getId());
					Optional<ProgramType> programtype = super.programtype
							.findByExNameAndExIsDeleteAndExIsActive(tempA[5].trim(), false, true);
					Optional<AcademicYear> academicYearid = super.academicYear
							.findByExIsDeleteAndExIsActiveAndExIdentifier(false, true, tempA[9].trim());
					Optional<Category> allocatedCategory = super.category
							.findByExNameAndExIsDeleteAndExIsActive(tempA[10].trim(), false, true);
					Optional<Category> category = super.category
							.findByExNameAndExIsDeleteAndExIsActive(tempA[11].trim(), false, true);
					List<Object> convertstreamlist = new ArrayList<Object>();

					String[] streams = tempA[8].split("\\$");
					// splits the string based on string
					List<String> streamList = Arrays.asList(streams);

					if (super.studentadmission.findByExIsDeleteAndExUserNameAndExIsActive(false, tempA[16].trim(), true)
							.size() > 0) {
						failureList.add(tempA[16].trim() + "Username are  already exist");
						list.add(tempA[1].trim());
						// System.out.println(">>>>>>>>>request>>>>" + tempA[16]);

					}

					else if (!collage.isPresent()) {
						failureList.add(tempA[1].trim() + "Colleges Name not present");
						list.add(tempA[1].trim());
					}

					else if (!degree.isPresent()) {
						failureList.add(tempA[2].trim() + "Degree Name not present");
						list.add(tempA[1].trim());

					} else if (!batch.isPresent()) {
						failureList.add(tempA[3].trim() + "Batch Identifier  not present");
						list.add(tempA[1].trim());

					}

					else if (!programs.isPresent()) {
						failureList.add(tempA[4].trim() + "Programme Identifier  not present");
						list.add(tempA[1].trim());

					} else if (!programtype.isPresent()) {
						failureList.add(tempA[5].trim() + "programType Name  not present");
						list.add(tempA[1].trim());

					} else if (tempA[6].equals("NA")) {
						failureList.add(tempA[6].trim() + "study status  not present");
						list.add(tempA[1].trim());

					} else if (!academicYearid.isPresent()) {
						failureList.add(tempA[9].trim() + "AcademicYear Name  not present");
						list.add(tempA[1].trim());

					} else if (!allocatedCategory.isPresent()) {
						failureList.add(tempA[10].trim() + "allocatedCategory Name not present");
						list.add(tempA[1].trim());

					} else if (tempA[14].equals("NA") || tempA[14].isEmpty()) {
						failureList.add(tempA[14].trim() + "Name  not present");
						list.add(tempA[1].trim());

					} else if (tempA[16].equals("NA") || tempA[16].isEmpty()) {
						failureList.add(tempA[16].trim() + "Username  not present");
						list.add(tempA[1].trim());

					} else if (tempA[17].equals("NA") || tempA[17].isEmpty()) {
						failureList.add(tempA[17].trim() + "Password  not present");
						list.add(tempA[1].trim());

					} else if (tempA[18].equals("NA")) {
						failureList.add(tempA[18].trim() + "ContactDetails  not present");
						list.add(tempA[1].trim());
					} else if (tempA[19].equals("NA")) {
						failureList.add(tempA[19].trim() + "EmailId  not present");
						list.add(tempA[1].trim());

					} else if (tempA[20].equals("NA") || tempA[20].isEmpty()) {
						failureList.add(tempA[19].trim() + "Gender  not present");
						list.add(tempA[1].trim());

					} else if (tempA[21].equals("NA") || tempA[21].isEmpty()) {
						failureList.add(tempA[21].trim() + "DateofBirth  not present");
						list.add(tempA[1].trim());
					} else if (tempA[23].equals("NA")) {
						failureList.add(tempA[23].trim() + "NativeState  not present");
						list.add(tempA[1].trim());

					} else if (tempA[24].equals("NA")) {
						failureList.add(tempA[24].trim() + "Nationality  not present");
						list.add(tempA[1].trim());

					} else if (tempA[25].equals("NA")) {
						failureList.add(tempA[25].trim() + "Religion  not present");
						list.add(tempA[1].trim());

					} else if (tempA[35].equals("NA")) {
						failureList.add(tempA[35].trim() + "ParentContactDetails  not present");
						list.add(tempA[1].trim());

					} else if (tempA[38].equals("NA")) {
						failureList.add(tempA[38].trim() + "PermanentAddress  not present");
						list.add(tempA[1].trim());

					} else if (tempA[39].equals("NA")) {
						failureList.add(tempA[39].trim() + "PresentAddress  not present");
						list.add(tempA[1].trim());

					} else if (tempA[37].equals("NA")) {
						failureList.add(tempA[37].trim() + "DetailsofQualification  not present");
						list.add(tempA[1].trim());

					} else if (tempA[12].equals("NA") || tempA[12].isEmpty()) {
						failureList.add(tempA[37].trim() + "Enrollment Number  not present");
						list.add(tempA[1].trim());

					} else if (tempA[13].equals("NA") || tempA[13].isEmpty()) {
						failureList.add(tempA[37].trim() + "Roll Number  not present");
						list.add(tempA[1].trim());

					} else {
						Category categorys = null;
						if (tempA[11].equals("NA") || tempA[11].isEmpty()) {
							categorys = null;
						} else {
							Optional<Category> categoryres = super.category
									.findByExNameAndExIsDeleteAndExIsActive(tempA[11], false, true);
							if (!categoryres.isPresent() || !categoryres.get().getExIsActive()) {
								failureList.add(tempA[11].trim() + "Category  not present ");
								list.add(tempA[1].trim());
							} else {
								categorys = categoryres.get();
							}
						}

						Optional<Department> department = super.department
								.findByExIdentifierAndExIsDeleteAndExIsActiveAndProgrammesId(tempA[7].trim(), false,
										true, programs.get().getId());
						if (!department.isPresent()) {
							failureList.add(
									tempA[7].trim() + "DepartmentIdentifier  not present with particular Programme");
							list.add(tempA[1].trim());
						}

						else {
							Optional<Stream> streamresult1 = super.stream
									.findByExIdentifierInAndExIsDeleteAndExIsActiveAndProgrammesIdAndDepartmentIdAndDegreeId(
											streamList, false, true, programs.get().getId(), department.get().getId(),
											degree.get().getId());
							if (!streamresult1.isPresent()) {
								failureList.add(tempA[8].trim() + "stream Identifier not present");
								list.add(tempA[1]);
							}

//									
							List<Stream> streamresult = super.stream.findByIdAndExIsDelete(streamresult1.get().getId(),
									false);
							System.out
									.println(">>...------------------------------------------------------------streams"
											+ streamresult);

							if (streamresult.size() != streamList.size()) {
								failureList.add(tempA[8].trim() + "stream Identifier not present");
								list.add(tempA[1]);
							}
							// if(programs.get().getExIdentifier().equalsIgnoreCase("MBA"))

							else {
								if (programs.get().getExIdentifier().equalsIgnoreCase("MBAAAAA")) {

									for (Stream stream : streamresult) {

										Optional<Stream> res = super.stream
												.findByIdAndExIsDeleteAndExIsActiveAndProgrammesIdAndDegreeIdAndDepartmentId(
														stream.getId(), false, true, stream.getProgrammes().getId(),
														stream.getDegree().getId(), stream.getDepartment().getId());
										System.out.println(">>>>>>>>>stream" + res);

										if (res.isPresent()) {
											convertstreamlist.add(res.get().getId());
										}
									}
								} else if (streamresult.size() == 1) {
									for (Stream stream : streamresult) {

										Optional<Stream> res = super.stream
												.findByIdAndExIsDeleteAndExIsActiveAndProgrammesIdAndDegreeIdAndDepartmentId(
														stream.getId(), false, true, stream.getProgrammes().getId(),
														stream.getDegree().getId(), stream.getDepartment().getId());
										System.out.println(">>>>>>>>>stream" + res);

										if (res.isPresent()) {
											convertstreamlist.add(res.get().getId());
										}

										else {
											failureList.add(tempA[8].trim()
													+ "Provide correct Stream Identifier  as per Programmes");
											list.add(tempA[1]);
										}
									}

									Date date = new Date();
									String EncrypPassword = EncryptionAndDecryption
											.getEncryptedString(tempA[17].trim());
									Studentadmission admision = new Studentadmission();
									admision.setAcademicYear(academicYearid.get());
									admision.setAllocatedCategory(allocatedCategory.get());
									admision.setColleges(collage.get());
									admision.setProgrammes(programs.get());
									admision.setDegree(degree.get());
									admision.setDepartment(department.get());
									admision.setStream(streamresult);
									admision.setCategory(categorys);
									admision.setBatch(batch.get());
									admision.setProgramtype(programtype.get());
									admision.setExStudyStatus((tempA[6].trim()));
									admision.setExIsActive(true);
									admision.setExIsApprove(1);
									admision.setExCreateDate(date);
									admision.setExIsDelete(false);
									admision.setExEnrollementNo(tempA[12].trim());
									admision.setExRollNo(tempA[13].trim());
									admision.setExName(tempA[14].trim());
									admision.setExNameInHindi((tempA[15].trim()));
									admision.setExUserName((tempA[16].trim()));
									admision.setExPassword(EncrypPassword);
									admision.setExDetailsQualification(tempA[42].trim());
									admision.setExAllIndiaRank(tempA[43].trim());
									admision.setExJeeReg(tempA[44].trim());
									admision.setExRollNoInc(Integer
											.parseInt(tempA[13].trim().substring(tempA[13].trim().length() - 3)));

									admision.setExRollNoInc(Integer
											.parseInt(tempA[13].trim().substring(tempA[13].trim().length() - 3)));

									 SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy");
									   double str1 = Double.parseDouble(tempA[21].trim());
									   Date javaDate= DateUtil.getJavaDate((double) str1); 
									    String strDate = dtFormat.format(javaDate);  
									
									super.studentadmission.save(admision);

									Boolean retvalue = validateStudentInfo(admision, tempA[18].trim(), tempA[20].trim(),
											tempA[24].trim(), tempA[23].trim(), tempA[25].trim(), tempA[33].trim(),
											tempA[29].trim(), tempA[19].trim(), tempA[22].trim(), tempA[30].trim(),
											tempA[31].trim(), tempA[32].trim(), tempA[37].trim(), tempA[38].trim(),
											tempA[34].trim(), tempA[35].trim(), tempA[36].trim(), tempA[41].trim(),
											strDate/*tempA[21].trim()*/, tempA[39].trim(), tempA[40].trim(), tempA[28].trim(),
											tempA[26].trim(), tempA[27].trim());

									successList.add("Success" + studentpersonal);
									excellog.info("Student record Saved : " + tempA[14].trim());
								}
							}
						}
					}
				}
			}
			info.put("status", "1");
			info.put("message", studentProfilefile.getOriginalFilename() + "Excel Uploaded Succesfully ");
			info.put("success", successList.size() + " Records Inserted Successfully");
			info.put("failure", list.size() + " Records Not Inserted ");
			excellog.info("Data Not Inserted : " + failureList);
			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			e.printStackTrace();
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}

	}

	private Boolean validateStudentInfo(Studentadmission admision, String contactdetail, String gender,
			String nationality, String nativestate, String religion, String mothername, String bloodgroup,
			String emailid, String adharnum, String identificationmark, String fathername, String fathernameH,
			String ParentContactDetails, String fatheroccupation, String mothernameH, String LocalGurdian,
			String localGurdianInHindi, String PresentAddress, String DateOfBirth, String exAnnualIncome,
			String PermanentAddress, String weight, String mothertounge, String height) {

		System.out.println("???????????????????????????????" + weight);
		Studentpersonal studentpersonal = new Studentpersonal();
		Date date = new Date();
		studentpersonal.setExCreateDate(date);
		studentpersonal.setStudentadmission(admision);
		studentpersonal.setExContactDetails(contactdetail);
		studentpersonal.setExGender(gender);
		studentpersonal.setExNationality(nationality);
		studentpersonal.setExNativeState(nativestate);
		studentpersonal.setExReligion(religion);
		studentpersonal.setExMotherName(mothername);
		studentpersonal.setExWeight(weight.equals("NA") || weight.isEmpty() ? null : Double.parseDouble(weight));
		studentpersonal.setExBloodGroup(bloodgroup);
		studentpersonal.setExEmailId(emailid);
		studentpersonal.setExAdhaarNumber(adharnum);
		studentpersonal.setExIdentificationMark(identificationmark);
		studentpersonal.setExFatherName(fathername);
		studentpersonal.setExFatherNameInHindi(fathernameH);
		studentpersonal.setExParentContactDetails(ParentContactDetails);
		studentpersonal.setExFatherOccupation(fatheroccupation);
		studentpersonal.setExMotherNameInHindi(mothernameH);
		studentpersonal.setExLocalGurdian(LocalGurdian);
		studentpersonal.setExlocalGurdianInHindi(localGurdianInHindi);
		studentpersonal.setExPermanentAddress(PermanentAddress);
		studentpersonal.setExDateOfBirth(DateOfBirth);
		studentpersonal.setExAnnualIncome(
				exAnnualIncome.equals("NA") || exAnnualIncome.isEmpty() ? null : Double.parseDouble(exAnnualIncome));
		studentpersonal.setExPresentAddress(PresentAddress);
		studentpersonal.setExMotherTounge(mothertounge);
		studentpersonal.setExHeight(height == "NA" || height.isEmpty() ? null : Double.parseDouble(height));
		super.studentpersonal.save(studentpersonal);
		return true;

	}

	@Override
	public Map<String, Object> uploadStaffProfile(MultipartFile staffProfilefile) {
		// TODO Auto-generated method stub
		Map<String, Object> info = new LinkedHashMap<>();
		if (staffProfilefile == null || staffProfilefile.isEmpty()) {
			info.put("status", "2");
			info.put("message", "Please select file");
			return info;
		}

		String extention = FilenameUtils.getExtension(staffProfilefile.getOriginalFilename());
		if (extention.equalsIgnoreCase("xls") || extention.equalsIgnoreCase("xlsx")) {
			Map<String, Object> result = readDataFromStaffProfileExcel(staffProfilefile);
			return result;
		}
		info.put("status", "2");
		info.put("message", "File should be xls / xlsx extention");
		return info;
	}

	private Map<String, Object> readDataFromStaffProfileExcel(MultipartFile staffProfilefile) {
		// TODO Auto-generated method stub
		List<String> failureList = new ArrayList<String>();
		List<String> successList = new ArrayList<String>();
		List<Object> list = new ArrayList<Object>();
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Workbook workbook = getWorkBook(staffProfilefile);
			Sheet firstSheet = workbook.getSheetAt(0);

			Iterator<Row> rows = firstSheet.iterator();
			rows.next();

			for (int rowNum = 1; rowNum < firstSheet.getLastRowNum() + 1; rowNum++) {
				Row r = firstSheet.getRow(rowNum);
				String temp = "";
				for (int cn = 0; cn < 27; cn++) {
					Cell c = r.getCell(cn, Row.RETURN_BLANK_AS_NULL);
					try {
						if (c == null) {
							// The spreadsheet is empty in this cell
							temp = temp + "#@&" + "NA";
						} else {
							// Do something useful with the cell's contents
							c.setCellType(Cell.CELL_TYPE_STRING);
							temp = temp + "#@&" + super.commonValidations.getCellValue(c);
						}
						System.out.println(">>>>>>>>>>>>>>>>>>" + temp);

					} catch (Exception e) {
						StringWriter errors = new StringWriter();
						e.printStackTrace(new PrintWriter(errors));
						e.printStackTrace();
						logger.error("Exception  : " + errors.toString());
						// return "failed";
					}
				}
				String tempA[] = temp.split("#@&");

				// System.out.println(">DDDDDDDDDDDDDDD<<<<<<<<<<<<<<<<<<<<?>>>>>>>>>>"+temp);
				// Date dob = CommonHelper.checkDate(tempA[8].toString());
				// Date dateofjoining = CommonHelper.checkDate(tempA[11].toString());
				String EncrypPassword = EncryptionAndDecryption.getEncryptedString(tempA[10]);

				System.out.println(">>>>>>>>>>>>>>>>>>>>" + tempA);

				if (tempA.length < 29 && tempA.length > 1) {
					System.out.println(">>>>>>>>print>>>>" + tempA);

					for (int i = 0; i < tempA.length; i++) {
						if (tempA[i].equals("NA")) {
							tempA[i] = tempA[i].replace("NA", "");
						}
					}

					String[] desig = tempA[6].split("\\$");// splits the string based on string

					Optional<Colleges> college = super.colleges.findByExNameAndExIsDeleteAndExIsActive(tempA[1].trim(),
							false, true);
					Optional<Degree> degre = super.degree.findByExNameAndExIsDeleteAndExIsActive(tempA[2].trim(), false,
							true);
					Optional<Programmes> programs = super.programmes
							.findByExIdentifierAndExIsDeleteAndExIsActive(tempA[3].trim(), false, true);
					Optional<StaffType> stafftype = super.staffType
							.findByExNameAndExIsDeleteAndExIsActive(tempA[5].trim(), false, true);

					List<String> desigList = Arrays.asList(desig);
					List<Staffpersonal> loginname = super.staffpersonal.findByExLoginNameAndExIsDelete(tempA[9], false);
					List<Staffpersonal> employeeno = super.staffpersonal
							.findByExEmployeeIdAndExIsDeleteAndExIsActive(tempA[11], false, true);

					if (!college.isPresent()) {
						failureList.add(tempA[1] + ":College Name not present");
						list.add(tempA[1]);

					} else if (!degre.isPresent()) {
						failureList.add(tempA[2] + ":Degree Name not present");
						list.add(tempA[1]);

					} else if (!programs.isPresent()) {
						failureList.add(tempA[3] + ":programs Name not present");
						list.add(tempA[1]);

					} else if (!stafftype.isPresent()) {
						failureList.add(tempA[6] + ":StaffType Name not present ");
						list.add(tempA[1]);

					} else if (loginname.size() > 0) {
						failureList.add(tempA[9] + ":Login name already present");
						list.add(tempA[1]);

					} else if (employeeno.size() > 0) {
						failureList.add(tempA[11] + ":employeeId  already present");
						list.add(tempA[1]);

					} else if (tempA[7].equals("NA") || tempA[7].isEmpty()) {
						failureList.add(tempA[7].trim() + "Name  not present");

						list.add(tempA[1].trim());

					} else if (tempA[12].equals("NA") || tempA[12].isEmpty()) {
						failureList.add(tempA[12].trim() + "Date of birth  not present");

						list.add(tempA[1].trim());

					} else if (tempA[9].equals("NA") || tempA[9].isEmpty()) {
						failureList.add(tempA[9].trim() + "LoginName  not present");

						list.add(tempA[1].trim());

					} else if (tempA[10].equals("NA") || tempA[10].isEmpty()) {
						failureList.add(tempA[10].trim() + "Password  not present");
						list.add(tempA[1].trim());

					} else if (tempA[11].equals("NA") || tempA[11].isEmpty()) {
						failureList.add(tempA[11].trim() + "Employe No  not present");
						list.add(tempA[1].trim());

					} else if (tempA[15].equals("NA")) {
						failureList.add(tempA[15].trim() + "Date of Joing  not present");
						list.add(tempA[1].trim());

					} else if (tempA[12].equals("NA") || tempA[12].isEmpty()) {
						failureList.add(tempA[12].trim() + " Contact Details not present");
						list.add(tempA[1].trim());
					}

					else {

						Optional<Department> department = super.department
								.findByExIdentifierAndExIsDeleteAndExIsActiveAndProgrammesId(tempA[4].trim(), false,
										true, programs.get().getId());
						if (!department.isPresent()) {
							failureList.add(
									tempA[7].trim() + "DepartmentIdentifier  not present with particular Programme");
							list.add(tempA[1].trim());
						} else {
							List<Designation> convertdeslist = new ArrayList<Designation>();
							List<Designation> designation = super.designation
									.findByExNameInAndExIsDeleteAndExIsActiveAndDepartmentId(desigList, false, true,
											department.get().getId());

							if (designation.size() != desigList.size()) {
								failureList.add(desigList + "Designation  not present with particular Department");
								list.add(tempA[1]);
							} else {
								for (Designation dser : designation) {
									List<Designation> res = super.designation
											.findByExNameAndExIsDeleteAndExIsActiveAndDepartmentId(dser.getExName(),
													false, true, department.get().getId());
									if (res.size() >= 0) {
										convertdeslist.add(res.get(0));
									}
								}

								Date date = new Date();
								SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
								Date bod = super.commonHelper.checkDate(tempA[15].trim());

								Staffpersonal staffpersonal = new Staffpersonal();

								staffpersonal.setExIsDelete(false);
								staffpersonal.setExIsActive(true);
								staffpersonal.setColleges(college.get());
								staffpersonal.setDegree(degre.get());
								staffpersonal.setDepartment(department.get());
								staffpersonal.setExCreateDate(date);
								staffpersonal.setDesignation(convertdeslist);
								staffpersonal.setStafftype(stafftype.get());
								staffpersonal.setProgrammes(programs.get());
								staffpersonal.setExName(tempA[7].trim());
								staffpersonal.setExNameInHindi(tempA[8].trim());
								staffpersonal.setExLoginName(tempA[9].trim());
								staffpersonal.setExPassword(EncrypPassword);
								staffpersonal.setExEmployeeId(tempA[11].trim());
								staffpersonal.setExContactDetails(tempA[12].trim());
								staffpersonal.setExEmail(tempA[13].trim());
								staffpersonal.setExGender(tempA[14].trim());
								staffpersonal.setExDateOfBirth(bod);

								staffpersonal.setExAddress(tempA[20].trim());
								staffpersonal.setExCity(tempA[18].trim());
								// staffpersonal.setExBloodGroup(tempA[18].trim());
								staffpersonal.setExDateOfJoing(tempA[21].trim());
								staffpersonal.setExState(tempA[19].trim());

								super.staffpersonal.save(staffpersonal);
								System.out.println(">>>upload" + staffpersonal);

								Boolean retvalue = validateStaffInfo(staffpersonal, tempA[16].trim(), tempA[17].trim(),
										tempA[22].trim(), tempA[24].trim() , tempA[23] , tempA[25]);

								successList.add("Success" + staffpersonal);

							}
						}
					}
				}
			}
			info.put("status", "1");
			info.put("message", staffProfilefile.getOriginalFilename() + "Excel Uploaded Successfully   ");
			info.put("success", successList.size() + " Records Inserted Successfully");
			excellog.info("Data  Inserted: " + successList);
			info.put("failure", list.size() + " Records Not Inserted ");
			excellog.info("Data Not Inserted : " + failureList);
			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			// e.printStackTrace(new PrintWriter(errors));
			e.printStackTrace();
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}
	}

	private Boolean validateStaffInfo(Staffpersonal staffpersonal, String adharno, String panno, String skill,
			String qualification , String nature , String bloodgroup) {
		StaffEmpDetails StaffEmpDetails = new StaffEmpDetails();
		StaffEmpDetails.setExPanNumber(panno);
		StaffEmpDetails.setExAdhaarNumber(adharno);
		StaffEmpDetails.setExSkill(skill);
		StaffEmpDetails.setExQualification(qualification);
		StaffEmpDetails.setStaffpersonal(staffpersonal);
		StaffEmpDetails.setExNature(nature);
		StaffEmpDetails.setExBloodGroup(bloodgroup);
		
		super.staffEmpDetails.save(StaffEmpDetails);
		return true;
	}

	@Override
	public Map<String, Object> uploadExternalMarks(ExternalMarksRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		if (request.getExExternalFile() == null || request.getExExternalFile().isEmpty()) {
			info.put("status", "2");
			info.put("message", "Please select file");
			return info;
		}

		String extention = FilenameUtils.getExtension(request.getExExternalFile().getOriginalFilename());
		if (extention.equalsIgnoreCase("xls") || extention.equalsIgnoreCase("xlsx")) {
			Map<String, Object> result = readDataFromExcel1(request.getExExternalFile(), request);
			return result;
		}
		info.put("status", "2");
		info.put("message", "File should be xls / xlsx  extention");
		return info;
	}

	private Map<String, Object> readDataFromExcel1(MultipartFile File, ExternalMarksRequest request) {
		List<String> failureList = new ArrayList<String>();
		List<Object> successList = new ArrayList<Object>();
		List<Object> list = new ArrayList<Object>();
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Workbook workbook = getWorkBook(File);
			Sheet Sheet = workbook.getSheetAt(0);

			Optional<ProgrammeYear> programyear = super.programmeYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammeYear());
			if (!programyear.isPresent()) {
				info.put("status", "2");
				info.put("message", "ProgrammeYear not present");
				return info;
			}
			

			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemster());
			if (!sem.isPresent()) {
				info.put("status", "2");
				info.put("message", " Semster not present");
				return info;
			}

			Optional<Colleges> col = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!col.isPresent()) {
				info.put("status", "2");
				info.put("message", "college id not present");
				return info;
			}

			Optional<Programmes> Prog = super.programme.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Prog.isPresent()) {
				info.put("status", "2");
				info.put("message", " Programe not present");
				return info;
			}

			Optional<Courses> courses = super.courses.findByIdAndExIsDeleteAndExIsActive(request.getCourses(), false,
					true);
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}

			List<RegistrationType> registration = super.registrationType
					.findByIdAndExIsDelete(request.getRegistrationType(), false);
			if (registration.size() <= 0) {
				info.put("status", "2");
				info.put("message", "RegistrationType id not present");
				return info;
			}

			User users;
			if (request.getUser() == null || request.getUser().equals("")) {
				users = null;
			} else {
				List<User> user = super.user.findByIdAndExIsDeleteAndExIsActive(request.getUser(), false, true);
				if (user.size() <= 0) {
					info.put("status", "2");
					info.put("message", "User id not present");
					return info;
				}

				users = user.get(0);

			}

			int rowIndex = 0;
			for (int rowNum = Sheet.getLastRowNum(); rowNum >= 0; rowNum--) {
				final Row row = Sheet.getRow(rowNum);
				if (row != null && row.getCell(0) != null) {
					if (row.getCell(0).toString() != "" && row.getCell(0).toString() != null) {
						rowIndex = rowNum;
						logger.info("?????????????Last non empty row????????????????" + rowIndex);
						break;
					}
				}
			}

			for (int rowNum = 1; rowNum < rowIndex + 1; rowNum++) {
				Row r = Sheet.getRow(rowNum);
				String temp = "";
				for (int cn = 0; cn < 5; cn++) {
					Cell c = r.getCell(cn, Row.RETURN_BLANK_AS_NULL);
					try {

						if (c == null) {
							// The spreadsheet is empty in this cell
							temp = temp + "#@&" + "NA";
						} else {
							// Do something useful with the cell's contents
							c.setCellType(Cell.CELL_TYPE_STRING);
							temp = temp + "#@&" + CommonHelper.getCellValue(c);
						}

					} catch (Exception e) {
						StringWriter errors = new StringWriter();
						e.printStackTrace(new PrintWriter(errors));
						logger.error("Exception  : " + errors.toString());
						// return "failed";
					}

				}

				String tempA[] = temp.split("#@&");
				
				if (request.getExamAnnouncement()==null || request.getExamAnnouncement().equals("NA")) {
					
					return  migexternalmarksupload(request , File);
	
				}
				Optional<ExamAnnouncement> examannouncement = super.examAnnouncement
						.findByExIsDeleteAndExIsActiveAndId(false, true, request.getExamAnnouncement());
				if (!examannouncement.isPresent()) {
					info.put("status", "2");
					info.put("message", "Examannouncement  not present");
					return info;
				}
				
				
				
				
				Optional<ExamAttendance> ExamAttendance = super.examAttendance
						.findByExIsDeleteAndExIsActiveAndStudentadmissionExRollNoAndCollegesIdAndDegreeIdAndProgrammesIdAndExamAnnouncementIdAndCoursesId(
								false, true, tempA[1].trim(), request.getColleges(), request.getDegree(),
								request.getProgrammes(), request.getExamAnnouncement(), request.getCourses());
				System.out.println(">>>>>>>.." + ExamAttendance);

				if (!ExamAttendance.isPresent()) {
					failureList.add("Attendance not created for : " + tempA[1]);
					list.add(tempA[1]);
				} else {
					Boolean ex_is_evaluated = true;
				//	Double ExternalScore = 0.0;
					Date date = new Date();

				//	if (tempA[2] == null || tempA[2].toString().trim().equals("") || tempA[2].toString().equals("NA")) {
					//	ExternalScore = null;

					//} else {
						//double endterm = super.commonHelper.getdoubleMarks(tempA[2]);
					//	ExternalScore=endterm;
						
						//ExternalScore = Double.parseDouble(tempA[2]);
				//	}

					
					
					Double ExternalScore = null;
					String exEndTermMarks_remarks = null;

					if (super.commonHelper.isNumeric(tempA[2].trim())) {
						ExternalScore = commonHelper.getMarksValue(tempA[2].trim());
					} else {
						if (tempA[2].equalsIgnoreCase("ABSENT")) {
							exEndTermMarks_remarks = "ABSENT";
						} else if (tempA[2].equalsIgnoreCase("DEBARRED")) {
							exEndTermMarks_remarks = "DEBARRED";
						} else {
							exEndTermMarks_remarks = null;
						}
					}
					
					Boolean is_present = false;
					if (tempA[3] == null || tempA[3].toString().trim().equals("") || tempA[3].toString().equals("NA")) {
						is_present = false;
					} else {
						int val = Integer.parseInt(tempA[3]);
						if (val == 1) {
							is_present = true;
						} else {
							is_present = false;
						}
					}

					int ret = super.ExamBarcodes.UpdateExtrenalMarks(ExternalScore, date, is_present,
							degree.get().getId(), sem.get().getId(), programyear.get().getId(), Prog.get().getId(),
							courses.get().getId(), tempA[1], true, false, registration.get(0).getId(), users,
							request.getExamAnnouncement(),request.getAcademicYear(),request.getDepartment(),exEndTermMarks_remarks);
					if (ret == 1) {
						successList.add(ret);
						excellog.info("Record Update for :" + tempA[1]);

					} else {
						failureList.add(tempA[1].trim() + "Record Not Update for");

						list.add(ret);
					}

				}
			}
			info.put("status", "1");
			info.put("message", File.getOriginalFilename() + "Excel Uploaded Succesfully. ");
			info.put("success", successList.size() + " Records Uploaded Successfully.");
			info.put("failure", list.size() + " Records Not Inserted ");
			excellog.info("Data Not Inserted  : " + failureList);
			excellog.info("sent Response: " + info);

			return info;
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}

	}

	private Map<String, Object> migexternalmarksupload(ExternalMarksRequest request, MultipartFile file) {
		List<String> failureList = new ArrayList<String>();
		List<Object> successList = new ArrayList<Object>();
		List<Object> list = new ArrayList<Object>();
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Workbook workbook = getWorkBook(file);
			Sheet Sheet = workbook.getSheetAt(0);

			Optional<ProgrammeYear> programyear = super.programmeYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammeYear());
			if (!programyear.isPresent()) {
				info.put("status", "2");
				info.put("message", "ProgrammeYear not present");
				return info;
			}
			

			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemster());
			if (!sem.isPresent()) {
				info.put("status", "2");
				info.put("message", " Semster not present");
				return info;
			}

			Optional<Colleges> col = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!col.isPresent()) {
				info.put("status", "2");
				info.put("message", "college id not present");
				return info;
			}

			Optional<AcademicYear> academicYear = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getAcademicYear());
			if (!academicYear.isPresent()) {
				info.put("status", "2");
				info.put("message", " academicyear not present");
				return info;
			}

			
			Optional<Department> department = super.department
					.findByIdAndExIsDeleteAndExIsActive(request.getDepartment(), false, true);
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "department not present");
				return info;
			}

			
			
			
			
			
			
			Optional<Programmes> Prog = super.programme.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Prog.isPresent()) {
				info.put("status", "2");
				info.put("message", " Programe not present");
				return info;
			}

			Optional<Courses> courses = super.courses.findByIdAndExIsDeleteAndExIsActive(request.getCourses(), false,
					true);
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}

			List<RegistrationType> registration = super.registrationType
					.findByIdAndExIsDelete(request.getRegistrationType(), false);
			if (registration.size() <= 0) {
				info.put("status", "2");
				info.put("message", "RegistrationType id not present");
				return info;
			}

			User users;
			if (request.getUser() == null || request.getUser().equals("")) {
				users = null;
			} else {
				List<User> user = super.user.findByIdAndExIsDeleteAndExIsActive(request.getUser(), false, true);
				if (user.size() <= 0) {
					info.put("status", "2");
					info.put("message", "User id not present");
					return info;
				}

				users = user.get(0);

			}

			int rowIndex = 0;
			for (int rowNum = Sheet.getLastRowNum(); rowNum >= 0; rowNum--) {
				final Row row = Sheet.getRow(rowNum);
				if (row != null && row.getCell(0) != null) {
					if (row.getCell(0).toString() != "" && row.getCell(0).toString() != null) {
						rowIndex = rowNum;
						logger.info("?????????????Last non empty row????????????????" + rowIndex);
						break;
					}
				}
			}

			for (int rowNum = 1; rowNum < rowIndex + 1; rowNum++) {
				Row r = Sheet.getRow(rowNum);
				String temp = "";
				for (int cn = 0; cn < 5; cn++) {
					Cell c = r.getCell(cn, Row.RETURN_BLANK_AS_NULL);
					try {

						if (c == null) {
							// The spreadsheet is empty in this cell
							temp = temp + "#@&" + "NA";
						} else {
							// Do something useful with the cell's contents
							c.setCellType(Cell.CELL_TYPE_STRING);
							temp = temp + "#@&" + CommonHelper.getCellValue(c);
						}

					} catch (Exception e) {
						StringWriter errors = new StringWriter();
						e.printStackTrace(new PrintWriter(errors));
						logger.error("Exception  : " + errors.toString());
						// return "failed";
					}

				}

				String tempA[] = temp.split("#@&");
			

				Optional<Studentadmission> student = super.studentadmission
						.findByExIsDeleteAndExIsActiveAndExRollNo(false, true, tempA[1].trim());

				if (student.isPresent()) {
				
				List<ExamBarcodes> ExamAttendance = super.exambarcode
						.findByExIsDeleteAndExIsActiveAndStudentadmissionExRollNoAndCollegesIdAndDegreeIdAndProgrammesIdAndCoursesIdAndAcademicYearIdAndDepartmentIdAndRegistrationTypeId(
								false, true, tempA[1].trim(), request.getColleges(), request.getDegree(),
								request.getProgrammes(), request.getCourses(),request.getAcademicYear(),request.getDepartment() ,registration.get(0).getId());
				System.out.println(">>>>>>>.." + ExamAttendance);

				if (ExamAttendance.size()<=0) {
					Boolean ex_is_evaluated = true;
					
					Double ExternalScore = 0.0;
					Date date = new Date();

					if (tempA[2] == null || tempA[2].toString().trim().equals("") || tempA[2].toString().equals("NA")) {
						ExternalScore = 0.0;

					} else {
						ExternalScore = Double.parseDouble(tempA[2]);
					}

					Boolean is_present = false;
					if (tempA[3] == null || tempA[3].toString().trim().equals("") || tempA[3].toString().equals("NA")) {
						is_present = false;
					} else {
						int val = Integer.parseInt(tempA[3]);
						if (val == 1) {
							is_present = true;
						} else {
							is_present = false;
						}
					}
					
					ExamBarcodes exambarcodes = new ExamBarcodes();
					exambarcodes.setExCreateDate(date);
					exambarcodes.setAcademicYear(academicYear.get());
					exambarcodes.setRegistrationType(registration.get(0));
					exambarcodes.setCourses(courses.get());
					exambarcodes.setColleges(col.get());
					exambarcodes.setDepartment(department.get());
					exambarcodes.setDegree(degree.get());
					exambarcodes.setProgrammes(Prog.get());
					exambarcodes.setSemester(sem.get());
					exambarcodes.setStudentadmission(student.get());
					exambarcodes.setProgrammeYear(programyear.get());
					exambarcodes.setExTimeLimit(null);
					exambarcodes.setExBarcode(null);
					exambarcodes.setExTimeTaken(null);
					exambarcodes.setExIsActive(true);
					exambarcodes.setExIsDelete(false);
					exambarcodes.setExRollNo(tempA[1].trim());
					exambarcodes.setExAnsBookletPath(null);
					exambarcodes.setExEvaluatedPath(null);
					exambarcodes.setExamAnnouncement(null);
					exambarcodes.setExEndTermMarks(ExternalScore);
					exambarcodes.setExIsAttendance(is_present);
					super.ExamBarcodes.save(exambarcodes);

					
					
					
					
					
				} else {
					Date date=new Date();
					Boolean ex_is_evaluated = true;
					Double ExternalScore = 0.0;

					if (tempA[2] == null || tempA[2].toString().trim().equals("") || tempA[2].toString().equals("NA")) {
						ExternalScore = 0.0;

					} else {
						ExternalScore = Double.parseDouble(tempA[2]);
					}

					Boolean is_present = false;
					if (tempA[3] == null || tempA[3].toString().trim().equals("") || tempA[3].toString().equals("NA")) {
						is_present = false;
					} else {
						int val = Integer.parseInt(tempA[3]);
						if (val == 1) {
							is_present = true;
						} else {
							is_present = false;
						}
					}
					int ret = super.ExamBarcodes.UpdateMigExtrenalMarks(ExternalScore, date, is_present,
							degree.get().getId(), sem.get().getId(), programyear.get().getId(), Prog.get().getId(),
							courses.get().getId(), tempA[1], true, false, registration.get(0).getId(), users,
							request.getDepartment());
					if (ret == 1) {
						successList.add(ret);
						excellog.info("Record Update for :" + tempA[1]);

					} else {
						failureList.add(tempA[1].trim() + "Record Not Update for");

						list.add(ret);
					}

				}
			}
				
			else {
					failureList.add(tempA[1] + ": Roll  No Not present :");
					list.add(tempA[1]);
				}
			}
			info.put("status", "1");
			info.put("message", file.getOriginalFilename() + "Excel Uploaded Succesfully. ");
			info.put("success", successList.size() + " Records Uploaded Successfully.");
			System.out.println("ADWE$" + successList.size());
			info.put("failure", list.size() + " Records Not Inserted ");
			excellog.info("Data Not Inserted  : " + failureList);
			excellog.info("sent Response: " + info);
			return info;
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}

	}
	

	@Override
	public Map<String, Object> uploadFeeMaster(MultipartFile exFeeMasterFile, Long user) {
		Map<String, Object> info = new LinkedHashMap<>();
		if (exFeeMasterFile == null || exFeeMasterFile.isEmpty()) {
			info.put("status", "2");
			info.put("message", "Please select file");
			return info;
		}
		String extention = FilenameUtils.getExtension(exFeeMasterFile.getOriginalFilename());
		if (extention.equalsIgnoreCase("xls") || extention.equalsIgnoreCase("xlsx")) {
			Map<String, Object> result = readDataFromFeeMasterExcel(exFeeMasterFile, user);
			System.out.println("Qread the data" + result);
			return result;
		}
		info.put("status", "2");
		info.put("message", "File should be xls / xlsx extention");
		return info;
	}

	private Map<String, Object> readDataFromFeeMasterExcel(MultipartFile exFeeMasterFile, Long user) {
		List<String> failureList = new ArrayList<String>();
		List<String> successList = new ArrayList<String>();
		List<Object> list = new ArrayList<Object>();
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Workbook workbook = getWorkBook(exFeeMasterFile);
			Sheet Sheet = workbook.getSheetAt(0);

			Iterator<Row> rows = Sheet.iterator();
			rows.next();

			for (int rowNum = 1; rowNum < Sheet.getLastRowNum() + 1; rowNum++) {
				Row r = Sheet.getRow(rowNum);
				String temp = "";
				for (int cn = 0; cn < 13; cn++) {
					Cell c = r.getCell(cn, Row.RETURN_BLANK_AS_NULL);
					try {

						if (c == null) {
							// The spreadsheet is empty in this cell
							temp = temp + "#@&" + "NA";
						} else {
							// Do something useful with the cell's contents
							c.setCellType(Cell.CELL_TYPE_STRING);
							temp = temp + "#@&" + super.commonValidations.getCellValue(c);
						}

					} catch (Exception e) {
						StringWriter errors = new StringWriter();
						e.printStackTrace(new PrintWriter(errors));
						logger.error("Exception  : " + errors.toString());
						// return "failed";
					}

				}

				String tempA[] = temp.split("#@&");
				Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndExNames(false, true,tempA[1].trim());
				
				Optional<Programmes> programs = super.programmes.findByExIsDeleteAndExIsActiveAndExIdentifier(false,true, tempA[2].trim());

				Optional<AcademicYear> academicYearid = super.academicYear.findByExIsDeleteAndExIsActiveAndExIdentifier(false, true, tempA[5].trim());
				
				Optional<ProgrammeYear> programyear = super.programmeYear.findByExNameAndExIsActiveAndExIsDelete(tempA[3].trim(), true, false);
				Optional<Semster> sem = super.semester.findByExNameAndExIsActiveAndExIsDelete(tempA[4].trim(), true,false);

				Optional<Batch> batch = super.batch.findByExNameAndExIsDeleteAndExIsActiveAndProgrammesIdAndDegreeId(tempA[6].trim(), false,true , programs.get().getId()  , degree.get().getId());
			
				Optional<FeeHeadMaster> headmaster = super.feeHeadMaster.findByExNameAndExIsDeleteAndExIsActive(tempA[7].trim(), false, true);
			
				Optional<FeeCategory> feecetegory = super.feecategory.findByExNameAndExIsDeleteAndExIsActiveAndFeeheadmasterId(tempA[8].trim(), false, true , headmaster.get().getId());
				
				
				String tempcType[] = tempA[9].split("\\$");
				List<String> categoryList = Arrays.asList(tempcType);

				String[] Fee = tempA[10].split("\\$");
				List<String> FeeList = Arrays.asList(Fee);

				List<Category> category1 = new ArrayList<Category>();
				for (int i = 0; i < categoryList.size(); i++) {
					String number = categoryList.get(i);
					
					Optional<Category> category = super.category.findByExNameAndExIsDeleteAndExIsActive(number, false, true);
					if (!category.isPresent()) {
						info.put("status", "2");
						info.put("message", "category not present");
						return info;
					}
					category1.add(category.get());
				}
				
				List<FeeType> feetype1 = new ArrayList<FeeType>();
				for (int i = 0; i < FeeList.size(); i++) {
					String number = FeeList.get(i);
					Optional<FeeType> feetype = super.feeType.findByExNameAndExIsDeleteAndExIsActive(number, false, true);
					if (!feetype.isPresent()) {
						info.put("status", "2");
						info.put("message", "Selected FeeType not present");
						return info;
					}
					feetype1.add(feetype.get());
				}
				
				if (!degree.isPresent()) {
					failureList.add(tempA[1].trim() + " : Degree name not present:");
					System.out.println(">.degreee peresnt or not" + tempA[1].trim());
					list.add(tempA[1]);
				} else if (!programs.isPresent()) {
					failureList.add(tempA[2].trim() + " : programs not present:");
					list.add(tempA[1]);

				}
				else if (!academicYearid.isPresent()) {
					failureList.add(tempA[5].trim() + " : Academic Year not present:");
					list.add(tempA[1]);

				}
				
				else if (!feecetegory.isPresent()) {
					failureList.add(tempA[8].trim() + " : feecetegory Year not present:");
					list.add(tempA[1]);

				}
				
				else if (!programyear.isPresent()) {
					failureList.add(tempA[3].trim() + " : programyear Name not present:");
					list.add(tempA[1]);
				} else if (!sem.isPresent()) {
					failureList.add(tempA[4].trim() + " : semester Identifier not present:");
					list.add(tempA[1]);

				} else if (!batch.isPresent()) {
					failureList.add(tempA[5].trim() + " : batch not present:");
					list.add(tempA[1]);

				} else if (!headmaster.isPresent()) {
					failureList.add(tempA[12].trim() + " : HeadMaster not present:");
					System.out.println(">>>>>..headmaster" + tempA[12].trim());
					list.add(tempA[1]);
				} else {
					List<FeeMaster> result = super.feeMaster
							.findByExFeeNameAndExIsDeleteAndProgrammesIdAndProgrammeyearIdAndBatchIdAndDegreeIdAndSemsterIdAndFeecategoryIdAndCategoryIn(
									tempA[11].trim(), false, programs.get().getId(), programyear.get().getId(),
									batch.get().getId(), degree.get().getId(), sem.get().getId() , feecetegory.get().getId() , category1);
					if (result.size() > 0) {
						failureList.add(tempA[11] + " : fee name already exists:");
						list.add(tempA[1]);
					}else {
												
						FeeMaster feemasater = new FeeMaster();
						Date date = new Date();
						feemasater.setDegree(degree.get());					
						feemasater.setProgrammes(programs.get());
						feemasater.setProgrammeyear(programyear.get());
						feemasater.setSemster(sem.get());
						feemasater.setBatch(batch.get());
						feemasater.setExFeeAmount(tempA[12].trim());
						feemasater.setExFeeName(tempA[11].trim());
						feemasater.setExFeeCode(tempA[13].trim());
						feemasater.setAcademicYear(academicYearid.get());
						feemasater.setFeetype(feetype1);
						feemasater.setCategory(category1);
						feemasater.setFeecategory(feecetegory.get());
						feemasater.setExCreateDate(date);
						feemasater.setExIsActive(true);
						feemasater.setExIsDelete(false);
						super.feeMaster.save(feemasater);					
						successList.add("Success" + feemasater);						
					}

				}

			}

			info.put("status", "1");
			info.put("message", exFeeMasterFile.getOriginalFilename() + "Excel Uploaded Succesfully ");
			info.put("success", successList.size() + " Records Inserted Successfully");
			info.put("failure", list.size() + " Records Not Inserted ");
			// info.put("failureList",failureList);
			excellog.info("Data Not Inserted : " + failureList);
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> uploadTeacherCourse(MultipartFile exTeacherCourseFile, Long user) {
		Map<String, Object> info = new LinkedHashMap<>();
		if (exTeacherCourseFile == null || exTeacherCourseFile.isEmpty()) {
			info.put("status", "2");
			info.put("message", "Please select file");
			return info;
		}

		String extention = FilenameUtils.getExtension(exTeacherCourseFile.getOriginalFilename());
		if (extention.equalsIgnoreCase("xls") || extention.equalsIgnoreCase("xlsx")) {
			Map<String, Object> result = readDataFromTeacherCourseExcel(exTeacherCourseFile, user);
			System.out.println("Qread the data" + result);
			return result;
		}
		info.put("status", "2");
		info.put("message", "File should be xls / xlsx extention");
		return info;
	}

	private Map<String, Object> readDataFromTeacherCourseExcel(MultipartFile exTeacherCourseFile, Long user) {
		List<String> failureList = new ArrayList<String>();
		List<String> successList = new ArrayList<String>();
		List<Object> list = new ArrayList<Object>();
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Workbook workbook = getWorkBook(exTeacherCourseFile);
			Sheet Sheet = workbook.getSheetAt(0);

			Iterator<Row> rows = Sheet.iterator();
			rows.next();

			for (int rowNum = 1; rowNum < Sheet.getLastRowNum() + 1; rowNum++) {
				Row r = Sheet.getRow(rowNum);
				String temp = "";
				for (int cn = 0; cn < 15; cn++) {
					Cell c = r.getCell(cn, Row.RETURN_BLANK_AS_NULL);
					try {

						if (c == null) {
							// The spreadsheet is empty in this cell
							temp = temp + "#@&" + "NA";
						} else {
							// Do something useful with the cell's contents
							c.setCellType(Cell.CELL_TYPE_STRING);
							temp = temp + "#@&" + super.commonValidations.getCellValue(c);
						}

					} catch (Exception e) {
						StringWriter errors = new StringWriter();
						e.printStackTrace(new PrintWriter(errors));
						logger.error("Exception  : " + errors.toString());
						// return "failed";
					}

				}
				String tempA[] = temp.split("#@&");

				Optional<Colleges> clgid = super.colleges.findByExIdentifierAndExIsDeleteAndExIsActive(tempA[1].trim(),
						false, true);
				System.out.println(">..collegeid." + clgid);
				Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndExNames(false, true,
						tempA[2].trim());
				Optional<Programmes> programs = super.programmes.findByExIsDeleteAndExIsActiveAndExIdentifier(false,
						true, tempA[3].trim());
				Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndExIdentifierAndDegreeIdAndProgrammesId(false,
						true, tempA[4].trim() , degree.get().getId() ,programs.get().getId());

				// Optional<ExamAnnouncement> examAnnouncment =
				// super.examAnnouncement.findByExIsDeleteAndExIsActiveAndExName(false ,true
				// ,tempA[3]);
				Optional<AcademicYear> academicYearid = super.academicYear
						.findByExIsDeleteAndExIsActiveAndExIdentifier(false, true, tempA[6].trim());
				Optional<ProgrammeYear> programyear = super.programmeYear
						.findByExNameAndExIsActiveAndExIsDelete(tempA[7].trim(), true, false);

				Optional<Section> section = super.section.findByExIsDeleteAndExIsActiveAndExName(false, true,
						tempA[14].trim());
				Optional<Semster> Semster = super.semester.findByExNameAndExIsActiveAndExIsDelete(tempA[8], true,
						false);
				Optional<StaffType> staff = super.staffType.findByExIsDeleteAndExIsActiveAndExName(false, true,
						tempA[9]);
				Optional<CoursesType> coursetype = super.coursestype.findByExNameAndExIsDeleteAndExIsActive(tempA[12],
						false, true);
				Optional<Staffpersonal> Staffpersonal = super.staffpersonal
						.findByExIsDeleteAndExIsActiveAndExEmployeeId(false, true, tempA[10]);

				Optional<RegistrationType> registrationType = super.registrationType
						.findByExIsDeleteAndExIsActiveAndExName(false, true, tempA[13]);

				List<Object> convertcourselist = new ArrayList<Object>();

				String[] cours = tempA[11].split("\\$");// splits the string based on string
				List<String> courseList = Arrays.asList(cours);

				 List<Courses> courseresult = super.courses.findByExCoursesCodeInAndExIsDeleteAndExIsActiveAndProgrammesIdAndAcademicYearIdAndProgrammeYearIdAndSemesterIdAndDepartmentId(courseList,false,true,programs.get().getId(),academicYearid.get().getId(),programyear.get().getId(),Semster.get().getId() , department.get().getId());

				 
				 //String[] cours = tempA[11].split("\\$");// splits the string based on string
					//List<String> courseList = Arrays.asList(cours);
				//Optional<Batch> batch = super.batch.findByExNameAndExIsDeleteAndExIsActiveAndProgrammesIdAndDegreeId(tempA[6].trim(), false,true , programs.get().getId()  , degree.get().getId());

					// List<Courses> courseresult = super.courses.findByExCoursesCodeInAndExIsDeleteAndExIsActiveAndProgrammesIdAndAcademicYearIdAndProgrammeYearIdAndSemesterIdAndDepartmentIdAndBatchId(tempA[11].trim(),false,true,programs.get().getId(),academicYearid.get().getId(),programyear.get().getId(),Semster.get().getId() , department.get().getId(),batch.get().getId());

				 //List<Courses> courseresult = super.courses.findByExCoursesCodeInAndExIsDeleteAndExIsActive(courseList,false, true);

				if (!clgid.isPresent()) {
					failureList.add(tempA[1].trim() + " : College not present:");
					list.add(tempA[1]);
				} else if (!degree.isPresent()) {
					failureList.add(tempA[2].trim() + " : Degree name not present:");
					list.add(tempA[1]);

				} else if (!registrationType.isPresent()) {
					failureList.add(tempA[13].trim() + " : registrationType name not present:");
					// System.out.println(">.coursetype peresnt or not"+tempA[1].trim());
					list.add(tempA[1]);

				} else if (!coursetype.isPresent()) {
					failureList.add(tempA[12].trim() + " : coursetype name not present:");
					list.add(tempA[1]);

				} else if (!academicYearid.isPresent()) {
					failureList.add(tempA[6].trim() + " : Academic Year not present:");
					list.add(tempA[1]);
				} else if (!programyear.isPresent()) {
					failureList.add(tempA[7].trim() + " : ProgrameYear  not present:");
					list.add(tempA[1]);

				} else if (!programs.isPresent()) {
					failureList.add(tempA[3].trim() + " : Programmes Name not present:");
					list.add(tempA[1]);
				} else if (!Semster.isPresent()) {
					failureList.add(tempA[8].trim() + " : semester Identifier not present:");
					list.add(tempA[1]);
				} else if (!staff.isPresent()) {
					failureList.add(tempA[9].trim() + " : stafftype Identifier not present:");
					list.add(tempA[1]);
				} else if (!Staffpersonal.isPresent()) {
					failureList.add(tempA[10].trim() + " : staffpersonal  not present:");
					list.add(tempA[1]);
				} else if (!department.isPresent()) {
					failureList.add(tempA[4].trim() + " : Department Identifier not present:");
					list.add(tempA[1]);
				} else if (courseresult.size() <= 0) {
					failureList.add(tempA[11].trim() + "Courses Code not present");
					list.add(tempA[1]);
				}

				else {
					Optional<Stream> stream = super.stream
							.findByExIdentifierAndExIsDeleteAndExIsActiveAndProgrammesIdAndDepartmentIdAndDegreeId(
									tempA[5].trim(), false, true, programs.get().getId(), department.get().getId(),
									degree.get().getId());
					if (!stream.isPresent()) {
						failureList.add(tempA[5].trim()
								+ " : Stream Identifier not present for practicular department /programe");
						list.add(tempA[1]);
					} else {
						for (Courses course : courseresult) {
							Optional<Courses> res = super.courses
									.findByIdAndExIsDeleteAndExIsActiveAndProgrammesIdAndAcademicYearIdAndProgrammeYearIdAndSemesterId(
											course.getId(), false, true, programs.get().getId(),
											academicYearid.get().getId(), programyear.get().getId(),
											Semster.get().getId());
							System.out.println(">>>>>>>>>coursese" + res);

							if (res.isPresent()) {
								convertcourselist.add(res.get().getId());
							}
						}
						ArrayList<String> tasks = super.teacherCourseMapping.checkDuplicationCourseImport(
								convertcourselist, false, true, clgid.get().getId(), academicYearid.get().getId(),
								programyear.get().getId(), Semster.get().getId(), Staffpersonal.get().getId(),
								staff.get().getId(), programs.get().getId(), section.get().getId(), coursetype.get().getId());
						if (tasks.size() > 0) {
							for (String results : tasks) {
								failureList.add("Course already mapped:." + results);
							}
							list.add(tempA[1]);

						}

						else {
							for (String cour : cours) {

								Optional<Courses> res2 = super.courses
										.findByExCoursesCodeAndExIsDeleteAndExIsActiveAndProgrammesIdAndAcademicYearIdAndProgrammeYearIdAndSemesterIdAndDepartmentId(
												cour, false, true, programs.get().getId(), academicYearid.get().getId(),
												programyear.get().getId(), Semster.get().getId() , department.get().getId());

								if (!res2.isPresent()) {
									failureList.add(cour + "Courses Code not present particula Program/Academic year");
									list.add(tempA[1]);
								}
							}
							System.out.println(">>>>courseresult" + courseresult);
							TeacherCourseMapping teacherCourse = new TeacherCourseMapping();
							Date date = new Date();
							SimpleDateFormat date1 = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
							teacherCourse.setAcademicYear(academicYearid.get());
							teacherCourse.setExIsActive(true);
							teacherCourse.setExIsDelete(false);
							teacherCourse.setExCreateDate(date);
							teacherCourse.setColleges(clgid.get());
							teacherCourse.setStaffpersonal(Staffpersonal.get());
							teacherCourse.setStaffType(staff.get());
							teacherCourse.setDegree(degree.get());
							teacherCourse.setCourseType(coursetype.get());
							teacherCourse.setDepartment(department.get());
							teacherCourse.setRegistrationType(registrationType.get());
							teacherCourse.setProgrammeYear(programyear.get());
							teacherCourse.setSemster(Semster.get());
							teacherCourse.setProgrammes(programs.get());
							teacherCourse.setCourses(courseresult);
							teacherCourse.setDepartment(department.get());
							teacherCourse.setStream(stream.get());
							teacherCourse.setSection(section.get());
							super.teacherCourseMapping.save(teacherCourse);
							successList.add("Success." + teacherCourse);

						}

					}
				}
			}
			info.put("status", "1");
			info.put("message", exTeacherCourseFile.getOriginalFilename() + "Excel Uploaded Succesfully ");
			info.put("success", successList.size() + " Records Inserted Successfully");
			info.put("failure", list.size() + " Records Not Inserted ");
			excellog.info("Data Not Inserted : " + failureList);
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> uploadImage(MultipartFile file, Long id, String userType) {
		Map<String, Object> info = new LinkedHashMap<>();
		System.out.println(">>>>..file" + file);
		if (file == null || file.isEmpty()) {
			info.put("status", "2");
			info.put("message", "Please select file");
			return info;
		}

		Map<String, Object> result = UploadImagetofolder(file, id, userType);
		return result;

	}

	private Map<String, Object> UploadImagetofolder(MultipartFile file, Long id, String userType) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Optional<Studentadmission> task = null;
			System.out.println(">>.studentadmission" + task);
			Optional<Staffpersonal> staff = null;
			Optional<EvaluatorList> expert = null;
			Optional<User> user = null;

			String UPLOADED_FOLDER = "";

			if (userType.equalsIgnoreCase("student")) {
				task = super.studentadmission.findById(id);
				System.out.println(">>...student i d" + task);
				if (!task.isPresent()) {
					info.put("status", "2");
					info.put("message", "Id not present");
					return info;
				}
				UPLOADED_FOLDER = createFolder(task.get().getAcademicYear().getExYear(),
						task.get().getColleges().getExIdentifier(), task.get().getExRollNo().replace(" ", "-"),
						userType);
				System.out.println(">>...upload folders" + UPLOADED_FOLDER);
			}
			if (userType.equalsIgnoreCase("staff")) {
				staff = super.staffpersonal.findById(id);
				if (!staff.isPresent()) {
					info.put("status", "2");
					info.put("message", "Staff Id not present");
					return info;
				}
				UPLOADED_FOLDER = createFolder("staffphoto", staff.get().getColleges().getExIdentifier(),
						staff.get().getExEmployeeId(), userType);
			}
			if (userType.equalsIgnoreCase("regular")) {
				user = super.user.findById(id);
				if (!user.isPresent()) {
					info.put("status", "2");
					info.put("message", "User Id not present");
					return info;
				}
				UPLOADED_FOLDER = createFolder("userphoto", user.get().getExName(), user.get().getExUserName(),
						userType);
			}
			if (userType.equalsIgnoreCase("expert")) {
				expert = super.expertlist.findById(id);
				if (!expert.isPresent()) {
					info.put("status", "2");
					info.put("message", "expert Id not present");
					return info;
				}
				UPLOADED_FOLDER = createFolder("expertphoto", 
						expert.get().getExName(),expert.get().getExUserName(), userType);
			}
			if (UPLOADED_FOLDER.equals("NA")) {
				info.put("status", "0");
				info.put("message", "something went wrong");
				return info;
			}
			Random random = new Random(System.nanoTime() % 100000);
			int randomInt = random.nextInt(1000000000);
			System.out.println(">..randomint" + randomInt);
			System.out.println(">>>....files" + file);
			byte[] bytes = file.getBytes();
			System.out.println(">..randomint" + file.getBytes());
			String newfilename = randomInt + "-" + file.getOriginalFilename();
			Path path = Paths.get(UPLOADED_FOLDER + newfilename);
			Files.write(path, bytes);
			excellog.info("savePhoto Path :" + UPLOADED_FOLDER + newfilename);
			String imagepath = "";// "/"+task.get().getUniversity().getExIdentifier()+"/"+task.get().getColleges().getExIdentifier()+"/"+task.get().getAcademicyear().getExYear()+"/"+userType+"/"+task.get().getStudentId()+"/"+newfilename;
			int i = 0;
			if (userType.equalsIgnoreCase("student")) {
				imagepath = "/" + task.get().getAcademicYear().getExYear() + "/"
						+ task.get().getColleges().getExIdentifier() + "/" + userType + "/"
						+ task.get().getExRollNo().replace(" ", "-") + "/" + newfilename;
				i = super.studentadmission.updatePhoto(imagepath, id);
			}
			if (userType.equalsIgnoreCase("staff")) {
				imagepath = "/" + "staffphoto" + "/" + staff.get().getColleges().getExIdentifier() + "/" + userType
						+ "/" + staff.get().getExEmployeeId() + "/" + newfilename;
				i = super.staffpersonal.updatePhoto(imagepath, id);
			}
			if (userType.equalsIgnoreCase("regular")) {
				imagepath = "/" + "userphoto" + "/" + user.get().getExName() + "/" + userType + "/"
						+ user.get().getExUserName() + "/" + newfilename;
				i = super.user.updatePhoto(imagepath, id);
			}
			
			if (userType.equalsIgnoreCase("expert")) {
				imagepath = "/" + "expertphoto" + "/" + expert.get().getExName()+ "/" + userType
						+ "/" + newfilename;
				i = super.expertlist.updatePhoto(imagepath, id);
			}
			if (i == 1) {
				File filenew = new File(path.toString());
				if (filenew.exists()) {
					filenew.setExecutable(true, false);
					filenew.setReadable(true, false);
					filenew.setWritable(true, false);
				}
				info.put("status", "1");
				info.put("message", "Image uploded successfully");
				return info;
			} else {
				info.put("status", "1");
				info.put("message", "Image not uploded ");
				return info;
			}

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}
	}

	private String createFolder(String string, String exName, String userType) {
		try {

			String UPLOADED_FOLDER = commonHelper.getSettingValue("DOCUMENT_PATH");
			System.out.println(">>>>>.doc pat" + UPLOADED_FOLDER);
			File file1 = new File(UPLOADED_FOLDER + "/" + string);
			if (file1.mkdir()) {
				file1.setExecutable(true, false);
				file1.setReadable(true, false);
				file1.setWritable(true, false);
			}
			String stringname = file1.getPath();
			File file2 = new File(stringname + "/" + exName);
			if (file2.mkdir()) {
				file2.setExecutable(true, false);
				file2.setReadable(true, false);
				file2.setWritable(true, false);

			}
			
			return UPLOADED_FOLDER + string + "/" + exName + "/" + userType + "/" ;
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
		}
		return "NA";
	}

	

	private String createFolder(String academicyear, String collegename, String studentid, String userType) {
		try {

			String UPLOADED_FOLDER = commonHelper.getSettingValue("DOCUMENT_PATH");
			System.out.println(">>>>>.doc pat" + UPLOADED_FOLDER);
			File file1 = new File(UPLOADED_FOLDER + "/" + academicyear);
			if (file1.mkdir()) {
				file1.setExecutable(true, false);
				file1.setReadable(true, false);
				file1.setWritable(true, false);
			}
			String academicyearname = file1.getPath();
			File file2 = new File(academicyearname + "/" + collegename);
			if (file2.mkdir()) {
				file2.setExecutable(true, false);
				file2.setReadable(true, false);
				file2.setWritable(true, false);

			}
			String collegenames = file2.getPath();
			File file3 = new File(collegenames + "/" + userType + "/");
			if (file3.mkdir()) {
				System.out.println(">>>>>>colleg" + file3);
				file3.setExecutable(true, false);
				file3.setReadable(true, false);
				file3.setWritable(true, false);
			}
			String student = file3.getPath();
			File file4 = new File(student + "/" + studentid);
			System.out.println(">>>>>...studentid" + file4);
			if (file4.mkdir()) {
				file4.setExecutable(true, false);
				file4.setReadable(true, false);
				file4.setWritable(true, false);
			}

			return UPLOADED_FOLDER + academicyear + "/" + collegename + "/" + userType + "/" + studentid + "/";
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
		}
		return "NA";
	}

	private Map<String, Object> readQuizDataFromExcel(MultipartFile exQuizFile, MidTermMarksRequest request) {
		List<String> failureList = new ArrayList<String>();
		List<String> successList = new ArrayList<String>();
		List<Object> list = new ArrayList<Object>();
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Workbook workbook = getWorkBook(exQuizFile);
			Sheet Sheet = workbook.getSheetAt(0);

			Iterator<Row> rows = Sheet.iterator();
			rows.next();

			Optional<ProgrammeYear> programyear = super.programmeYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammeYear());
			if (!programyear.isPresent()) {
				info.put("status", "2");
				info.put("message", "ProgrammeYear not present");
				return info;
			}
		

			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemster());
			if (!sem.isPresent()) {
				info.put("status", "2");
				info.put("message", " Semster not present");
				return info;
			}
			Optional<AcademicYear> academicYear = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getAcademicYear());
			if (!academicYear.isPresent()) {
				info.put("status", "2");
				info.put("message", " academicyear not present");
				return info;
			}

			Optional<Colleges> col = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!col.isPresent()) {
				info.put("status", "2");
				info.put("message", "college not present");
				return info;
			}
			Optional<Department> department = super.department
					.findByIdAndExIsDeleteAndExIsActive(request.getDepartment(), false, true);
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "department not present");
				return info;
			}

			Optional<Stream> stream = super.stream.findByIdAndExIsDeleteAndExIsActive(request.getStream(), false, true);
			if (!stream.isPresent()) {
				info.put("status", "2");
				info.put("message", "stream not present");
				return info;
			}
			Optional<Programmes> Prog = super.programme.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Prog.isPresent()) {
				info.put("status", "2");
				info.put("message", " Programe not present");
				return info;
			}

			Optional<Courses> courses = super.courses.findByIdAndExIsDeleteAndExIsActive(request.getCourses(), false,
					true);
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not present");
				return info;
			}

			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}

			int updaterecord = 0;
			Boolean is_update = false;

			int rowIndex = 0;
			for (int rowNum = Sheet.getLastRowNum(); rowNum >= 0; rowNum--) {
				final Row row = Sheet.getRow(rowNum);
				if (row != null && row.getCell(0) != null) {
					if (row.getCell(0).toString() != "" && row.getCell(0).toString() != null) {
						rowIndex = rowNum;
						logger.info("?????????????Last non empty row????????????????" + rowIndex);
						break;
					}
				}
			}
			for (int rowNum = 1; rowNum < rowIndex + 1; rowNum++) {
				Row r = Sheet.getRow(rowNum);
				String temp = "";
				for (int cn = 0; cn < 4; cn++) {
					Cell c = r.getCell(cn, Row.RETURN_BLANK_AS_NULL);
					try {

						if (c == null) {
							// The spreadsheet is empty in this cell
							temp = temp + "#@&" + "NA";
						} else {
							// Do something useful with the cell's contents
							c.setCellType(Cell.CELL_TYPE_STRING);
							temp = temp + "#@&" + super.commonValidations.getCellValue(c);
						}

					} catch (Exception e) {
						StringWriter errors = new StringWriter();
						e.printStackTrace(new PrintWriter(errors));
						logger.error("Exception  : " + errors.toString());
						// return "failed";
					}

				}
				String tempA[] = temp.split("#@&");
				MidTermMarks midMarks = new MidTermMarks();

	           if (request.getExamAnnouncement()==null || request.getExamAnnouncement().equals("NA")) {
					return  migQuizupload(request , exQuizFile);
				}
				Optional<ExamAnnouncement> examannouncement = super.examAnnouncement
						.findByExIsDeleteAndExIsActiveAndId(false, true, request.getExamAnnouncement());
				if (!examannouncement.isPresent()) {
					info.put("status", "2");
					info.put("message", "Examannouncement  not present");
					return info;
				}
				
				
				
				
				Optional<Studentadmission> student = super.studentadmission
						.findByExIsDeleteAndExIsActiveAndExRollNo(false, true, tempA[1].trim());

				if (student.isPresent()) {
					Date date = new Date();

					List<MidTermMarks> quiz = super.midtermmarksMarks
							.findByStudentadmissionIdAndCoursesIdAndAcademicYearIdAndExIsActiveAndExIsDelete(
									student.get().getId(), courses.get().getId(), academicYear.get().getId(), true,
									false);

					Staffpersonal staff = null;
					if (request.getStaff() == null || request.getStaff().equals("")) {
						staff = null;
					} else {
						Optional<Staffpersonal> staffres = super.staffpersonal
								.findByIdAndExIsDeleteAndExIsActive(request.getStaff(), false, true);
						if (!staffres.isPresent()) {
							info.put("status", "2");
							info.put("message", "staff not present");
							return info;
						}
						staff = staffres.get();
					}

					
					List<CoursesRegistration> coursereg = super.coursesRegistration
							.findByExIsDeleteAndExIsActiveAndCoursesIdAndStudentadmissionId(false, true,
									courses.get().getId(), student.get().getId());

					if (coursereg.size() <= 0) {

						failureList.add(tempA[1] + ": Particular student not Registered for courses:");
						list.add(tempA[1]);

					}

					else {

						double exQuizMarks = super.commonHelper.getdoubleMarks(tempA[2]);

						if (quiz.size() <= 0) {

							midMarks.setCourses(courses.get());
							midMarks.setExQuizMarks(exQuizMarks);
							midMarks.setAcademicYear(academicYear.get());
							midMarks.setProgrammes(Prog.get());
							midMarks.setSection(student.get().getSection());
							midMarks.setColleges(col.get());
							midMarks.setDegree(degree.get());
							midMarks.setDepartment(department.get());
							midMarks.setStaff(staff);
							midMarks.setExRollNo(student.get().getExRollNo());
							midMarks.setExCreateDate(date);
							midMarks.setSemester(sem.get());
							midMarks.setStream(stream.get());
							midMarks.setExamAnnouncement(examannouncement.get());
							midMarks.setStudentadmission(student.get());
							// midMarks.setCoursesType(coursestype.get());
							midMarks.setProgrammeYear(programyear.get());
							midMarks.setExIsActive(true);
							midMarks.setExIsDelete(false);
							super.midtermmarksMarks.save(midMarks);
							successList.add("Success" + midMarks);
							System.out.println("succes" + successList);

						} else {

							is_update = true;

							int i = super.midtermmarksMarks.updatequizDetails(exQuizMarks, request.getAcademicYear(),
									request.getColleges(), request.getProgrammes(), request.getCourses(),
									student.get().getExRollNo(), date, staff, student.get().getSection(),request.getExamAnnouncement(),request.getDegree());
							if (i == 1) {
								updaterecord = updaterecord + 1;
								excellog.info("Updated Record: " + tempA[1].trim());

							}
							// list.add(row.getCell(1).getStringCellValue());
						}
					}

				} else {
					failureList.add(tempA[1] + ": Roll No Not present :");
					list.add(tempA[1]);
				}

				info.put("status", "1");
				info.put("message", exQuizFile.getOriginalFilename() + "Excel Uploaded Succesfully ");
				if (is_update) {
					info.put("success", updaterecord + " Records Updated Successfully");

					info.put("failure", list.size() + " Records Not Updated ");
				} else {
					info.put("success", successList.size() + " Records Inserted Successfully");
					info.put("failure", list.size() + " Records Not Inserted ");
				}
			}
			excellog.info("Data Not Inserted : " + failureList);
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;

		}

	}

	private Map<String, Object> migQuizupload(MidTermMarksRequest request, MultipartFile exQuizFile) {
		List<String> failureList = new ArrayList<String>();
		List<String> successList = new ArrayList<String>();
		List<Object> list = new ArrayList<Object>();
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Workbook workbook = getWorkBook(exQuizFile);
			Sheet Sheet = workbook.getSheetAt(0);

			Iterator<Row> rows = Sheet.iterator();
			rows.next();

			Optional<ProgrammeYear> programyear = super.programmeYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammeYear());
			if (!programyear.isPresent()) {
				info.put("status", "2");
				info.put("message", "ProgrammeYear not present");
				return info;
			}
		

			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemster());
			if (!sem.isPresent()) {
				info.put("status", "2");
				info.put("message", " Semster not present");
				return info;
			}
			Optional<AcademicYear> academicYear = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getAcademicYear());
			if (!academicYear.isPresent()) {
				info.put("status", "2");
				info.put("message", " academicyear not present");
				return info;
			}

			Optional<Colleges> col = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!col.isPresent()) {
				info.put("status", "2");
				info.put("message", "college not present");
				return info;
			}
			Optional<Department> department = super.department
					.findByIdAndExIsDeleteAndExIsActive(request.getDepartment(), false, true);
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "department not present");
				return info;
			}

			Optional<Stream> stream = super.stream.findByIdAndExIsDeleteAndExIsActive(request.getStream(), false, true);
			if (!stream.isPresent()) {
				info.put("status", "2");
				info.put("message", "stream not present");
				return info;
			}
			Optional<Programmes> Prog = super.programme.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Prog.isPresent()) {
				info.put("status", "2");
				info.put("message", " Programe not present");
				return info;
			}

			Optional<Courses> courses = super.courses.findByIdAndExIsDeleteAndExIsActive(request.getCourses(), false,
					true);
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not present");
				return info;
			}

			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}

			int updaterecord = 0;
			Boolean is_update = false;

			int rowIndex = 0;
			for (int rowNum = Sheet.getLastRowNum(); rowNum >= 0; rowNum--) {
				final Row row = Sheet.getRow(rowNum);
				if (row != null && row.getCell(0) != null) {
					if (row.getCell(0).toString() != "" && row.getCell(0).toString() != null) {
						rowIndex = rowNum;
						logger.info("?????????????Last non empty row????????????????" + rowIndex);
						break;
					}
				}
			}
			for (int rowNum = 1; rowNum < rowIndex + 1; rowNum++) {
				Row r = Sheet.getRow(rowNum);
				String temp = "";
				for (int cn = 0; cn < 4; cn++) {
					Cell c = r.getCell(cn, Row.RETURN_BLANK_AS_NULL);
					try {

						if (c == null) {
							// The spreadsheet is empty in this cell
							temp = temp + "#@&" + "NA";
						} else {
							// Do something useful with the cell's contents
							c.setCellType(Cell.CELL_TYPE_STRING);
							temp = temp + "#@&" + super.commonValidations.getCellValue(c);
						}

					} catch (Exception e) {
						StringWriter errors = new StringWriter();
						e.printStackTrace(new PrintWriter(errors));
						logger.error("Exception  : " + errors.toString());
						// return "failed";
					}

				}
				String tempA[] = temp.split("#@&");
				MidTermMarks midMarks = new MidTermMarks();

	           
				
				
				
				Optional<Studentadmission> student = super.studentadmission
						.findByExIsDeleteAndExIsActiveAndExRollNo(false, true, tempA[1].trim());

				if (student.isPresent()) {
					Date date = new Date();

					List<MidTermMarks> quiz = super.midtermmarksMarks
							.findByStudentadmissionIdAndCoursesIdAndAcademicYearIdAndExIsActiveAndExIsDelete(
									student.get().getId(), courses.get().getId(), academicYear.get().getId(), true,
									false);

					Staffpersonal staff = null;
					if (request.getStaff() == null || request.getStaff().equals("")) {
						staff = null;
					} else {
						Optional<Staffpersonal> staffres = super.staffpersonal
								.findByIdAndExIsDeleteAndExIsActive(request.getStaff(), false, true);
						if (!staffres.isPresent()) {
							info.put("status", "2");
							info.put("message", "staff not present");
							return info;
						}
						staff = staffres.get();
					}

					
					

						double exQuizMarks = super.commonHelper.getdoubleMarks(tempA[2]);

						if (quiz.size() <= 0) {

							midMarks.setCourses(courses.get());
							midMarks.setExQuizMarks(exQuizMarks);
							midMarks.setAcademicYear(academicYear.get());
							midMarks.setProgrammes(Prog.get());
							midMarks.setSection(student.get().getSection());
							midMarks.setColleges(col.get());
							midMarks.setDegree(degree.get());
							midMarks.setDepartment(department.get());
							midMarks.setStaff(staff);
							midMarks.setExRollNo(student.get().getExRollNo());
							midMarks.setExCreateDate(date);
							midMarks.setSemester(sem.get());
							midMarks.setStream(stream.get());
							midMarks.setExamAnnouncement(null);
							midMarks.setStudentadmission(student.get());
							// midMarks.setCoursesType(coursestype.get());
							midMarks.setProgrammeYear(programyear.get());
							midMarks.setExIsActive(true);
							midMarks.setExIsDelete(false);
							super.midtermmarksMarks.save(midMarks);
							successList.add("Success" + midMarks);
							System.out.println("succes" + successList);

						} else {

							is_update = true;

							int i = super.midtermmarksMarks.updateMigquizDetails(exQuizMarks, request.getAcademicYear(),
									request.getColleges(), request.getProgrammes(), request.getCourses(),
									student.get().getExRollNo(), date, staff, student.get().getSection(),request.getDegree());
							if (i == 1) {
								updaterecord = updaterecord + 1;
								excellog.info("Updated Record: " + tempA[1].trim());

							}
							// list.add(row.getCell(1).getStringCellValue());
						}
					

				} else {
					failureList.add(tempA[1] + ": Roll No Not present :");
					list.add(tempA[1]);
				}

				info.put("status", "1");
				info.put("message", exQuizFile.getOriginalFilename() + "Excel Uploaded Succesfully ");
				if (is_update) {
					info.put("success", updaterecord + " Records Updated Successfully");

					info.put("failure", list.size() + " Records Not Updated ");
				} else {
					info.put("success", successList.size() + " Records Inserted Successfully");
					info.put("failure", list.size() + " Records Not Inserted ");
				}
			}
			excellog.info("Data Not Inserted : " + failureList);
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;

		}

	}

	@Override
	public Map<String, Object> uploadMidTermMarks(MidTermMarksRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		if (request.getExMidTermFile() == null || request.getExMidTermFile().isEmpty()) {
			info.put("status", "2");
			info.put("message", "Please select file");
			return info;
		}

		String extention = FilenameUtils.getExtension(request.getExMidTermFile().getOriginalFilename());
		if (extention.equalsIgnoreCase("xls") || extention.equalsIgnoreCase("xlsx")) {

			Map<String, Object> result = readMidTermDataFromExcel(request.getExMidTermFile(), request);

			return result;
		}
		info.put("status", "2");
		info.put("message", "File should be xls / xlsx  extention");
		return info;
	}

	private Map<String, Object> readMidTermDataFromExcel(MultipartFile exMidTermFile, MidTermMarksRequest request) {
		List<String> failureList = new ArrayList<String>();
		List<String> successList = new ArrayList<String>();
		List<Object> list = new ArrayList<Object>();
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Workbook workbook = getWorkBook(exMidTermFile);
			Sheet Sheet = workbook.getSheetAt(0);

			Iterator<Row> rows = Sheet.iterator();
			rows.next();

			Optional<ProgrammeYear> programyear = super.programmeYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammeYear());
			if (!programyear.isPresent()) {
				info.put("status", "2");
				info.put("message", "ProgrammeYear not present");
				return info;
			}
			
			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemster());
			if (!sem.isPresent()) {
				info.put("status", "2");
				info.put("message", " Semster not present");
				return info;
			}
			Optional<AcademicYear> academicYear = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getAcademicYear());
			if (!academicYear.isPresent()) {
				info.put("status", "2");
				info.put("message", " academicyear not present");
				return info;
			}

			Optional<Colleges> col = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!col.isPresent()) {
				info.put("status", "2");
				info.put("message", "college  not present");
				return info;
			}
			Optional<Department> department = super.department
					.findByIdAndExIsDeleteAndExIsActive(request.getDepartment(), false, true);
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "department not present");
				return info;
			}

		
			
			Optional<Stream> stream = super.stream.findByIdAndExIsDeleteAndExIsActive(request.getStream(), false, true);
			if (!stream.isPresent()) {
				info.put("status", "2");
				info.put("message", "stream not present");
				return info;
			}
			Optional<Programmes> Prog = super.programme.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Prog.isPresent()) {
				info.put("status", "2");
				info.put("message", " Programe not present");
				return info;
			}

			Optional<Courses> courses = super.courses.findByIdAndExIsDeleteAndExIsActive(request.getCourses(), false,
					true);
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not present");
				return info;
			}

			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}

			int updaterecord = 0;
			Boolean is_update = false;

			int rowIndex = 0;
			for (int rowNum = Sheet.getLastRowNum(); rowNum >= 0; rowNum--) {
				final Row row = Sheet.getRow(rowNum);
				if (row != null && row.getCell(0) != null) {
					if (row.getCell(0).toString() != "" && row.getCell(0).toString() != null) {
						rowIndex = rowNum;
						logger.info("?????????????Last non empty row????????????????" + rowIndex);
						break;
					}
				}
			}
			for (int rowNum = 1; rowNum < rowIndex + 1; rowNum++) {
				Row r = Sheet.getRow(rowNum);
				String temp = "";
				for (int cn = 0; cn < 4; cn++) {
					Cell c = r.getCell(cn, Row.RETURN_BLANK_AS_NULL);
					try {

						if (c == null) {
							// The spreadsheet is empty in this cell
							temp = temp + "#@&" + "NA";
						} else {
							// Do something useful with the cell's contents
							c.setCellType(Cell.CELL_TYPE_STRING);
							temp = temp + "#@&" + super.commonValidations.getCellValue(c);
						}

					} catch (Exception e) {
						StringWriter errors = new StringWriter();
						e.printStackTrace(new PrintWriter(errors));
						logger.error("Exception  : " + errors.toString());
						// return "failed";
					}

				}
				String tempA[] = temp.split("#@&");
				if (request.getExamAnnouncement()==null || request.getExamAnnouncement().equals("NA")) {
					
					return  migMidtermupload(request , exMidTermFile);
					
					
				}
				Optional<ExamAnnouncement> examannouncement = super.examAnnouncement
						.findByExIsDeleteAndExIsActiveAndId(false, true, request.getExamAnnouncement());
				if (!examannouncement.isPresent()) {
					info.put("status", "2");
					info.put("message", "Examannouncement  not present");
					return info;
				}
				
				
				
				
				
				MidTermMarks midMarks = new MidTermMarks();

				Optional<Studentadmission> student = super.studentadmission
						.findByExIsDeleteAndExIsActiveAndExRollNo(false, true, tempA[1].trim());

				if (student.isPresent()) {
					Date date = new Date();

					List<MidTermMarks> midterm = super.midtermmarksMarks
							.findByStudentadmissionIdAndCoursesIdAndAcademicYearIdAndExIsActiveAndExIsDelete(
									student.get().getId(), courses.get().getId(), academicYear.get().getId(), true,
									false);
					Staffpersonal staff = null;
					if (request.getStaff() == null || request.getStaff().equals("")) {
						staff = null;
					} else {
						Optional<Staffpersonal> staffres = super.staffpersonal
								.findByIdAndExIsDeleteAndExIsActive(request.getStaff(), false, true);
						if (!staffres.isPresent()) {
							info.put("status", "2");
							info.put("message", "staff not present");
							return info;
						}
						staff = staffres.get();
					}

					List<CoursesRegistration> coursereg = super.coursesRegistration
							.findByExIsDeleteAndExIsActiveAndCoursesIdAndStudentadmissionId(false, true,
									courses.get().getId(), student.get().getId());

					if (coursereg.size() <= 0) {

						failureList.add(tempA[1] + ":Particular student not Registered for courses:");
						list.add(tempA[1]);

					}

					else {

						double exMidTermMarks = super.commonHelper.getdoubleMarks(tempA[2]);
						double exAssignmentMarks=super.commonHelper.getdoubleMarks(tempA[4]);
						if (midterm.size() <= 0) {
							midMarks.setCourses(courses.get());
							midMarks.setExMidTermMarks(exMidTermMarks);
							midMarks.setAcademicYear(academicYear.get());
							midMarks.setProgrammes(Prog.get());
							midMarks.setColleges(col.get());
							midMarks.setDegree(degree.get());
							midMarks.setDepartment(department.get());
							midMarks.setSection(student.get().getSection());
							midMarks.setStaff(staff);
							midMarks.setExRollNo(student.get().getExRollNo());
							midMarks.setExCreateDate(date);
							midMarks.setSemester(sem.get());
							midMarks.setStream(stream.get());
							midMarks.setExamAnnouncement(examannouncement.get());
							midMarks.setStudentadmission(student.get());
							// midMarks.setCoursesType(coursestype.get());
							midMarks.setExMidTermRemarks(tempA[3] == null ? null : tempA[3]);
							midMarks.setProgrammeYear(programyear.get());
							midMarks.setExIsActive(true);
							midMarks.setExIsDelete(false);
							midMarks.setExAssignmentMarks(exAssignmentMarks);
							super.midtermmarksMarks.save(midMarks);

							successList.add("Success" + midMarks);

						} else {

							is_update = true;

							int i = super.midtermmarksMarks.updateMidtermDetails(exMidTermMarks,
									request.getAcademicYear(), request.getColleges(), request.getProgrammes(),
									request.getCourses(), student.get().getExRollNo(), date, tempA[3].trim(), staff,
									student.get().getSection(),request.getExamAnnouncement(),request.getDegree(),exAssignmentMarks);
							if (i == 1) {
								updaterecord = updaterecord + 1;
								excellog.info("Updated Record: " + tempA[1].trim());

							}
							// list.add(row.getCell(1).getStringCellValue());
						}
					}

				} else {
					failureList.add(tempA[1] + ": Roll  No Not present :");
					list.add(tempA[1]);
				}

				info.put("status", "1");
				info.put("message", exMidTermFile.getOriginalFilename() + "Excel Uploaded Succesfully ");
				if (is_update) {
					info.put("success", updaterecord + " Records Updated Successfully");
					info.put("failure", list.size() + " Records Not Updated ");
				} else {
					info.put("success", successList.size() + " Records Inserted Successfully");
					info.put("failure", list.size() + " Records Not Inserted ");
					System.out.println("Missed RollNumber " + failureList);
				}
			}
			excellog.info("Data Not Inserted : " + failureList);
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;

		}

	}

	private Map<String, Object> migMidtermupload(MidTermMarksRequest request, MultipartFile exMidTermFile) {
		List<String> failureList = new ArrayList<String>();
		List<String> successList = new ArrayList<String>();
		List<Object> list = new ArrayList<Object>();
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Workbook workbook = getWorkBook(exMidTermFile);
			Sheet Sheet = workbook.getSheetAt(0);

			Iterator<Row> rows = Sheet.iterator();
			rows.next();

			Optional<ProgrammeYear> programyear = super.programmeYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammeYear());
			if (!programyear.isPresent()) {
				info.put("status", "2");
				info.put("message", "ProgrammeYear not present");
				return info;
			}
			
			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemster());
			if (!sem.isPresent()) {
				info.put("status", "2");
				info.put("message", " Semster not present");
				return info;
			}
			Optional<AcademicYear> academicYear = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getAcademicYear());
			if (!academicYear.isPresent()) {
				info.put("status", "2");
				info.put("message", " academicyear not present");
				return info;
			}

			Optional<Colleges> col = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!col.isPresent()) {
				info.put("status", "2");
				info.put("message", "college  not present");
				return info;
			}
			Optional<Department> department = super.department
					.findByIdAndExIsDeleteAndExIsActive(request.getDepartment(), false, true);
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "department not present");
				return info;
			}

			Optional<Stream> stream = super.stream.findByIdAndExIsDeleteAndExIsActive(request.getStream(), false, true);
			if (!stream.isPresent()) {
				info.put("status", "2");
				info.put("message", "stream not present");
				return info;
			}
			Optional<Programmes> Prog = super.programme.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Prog.isPresent()) {
				info.put("status", "2");
				info.put("message", " Programe not present");
				return info;
			}

			Optional<Courses> courses = super.courses.findByIdAndExIsDeleteAndExIsActive(request.getCourses(), false,
					true);
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not present");
				return info;
			}

			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}

			int updaterecord = 0;
			Boolean is_update = false;

			int rowIndex = 0;
			for (int rowNum = Sheet.getLastRowNum(); rowNum >= 0; rowNum--) {
				final Row row = Sheet.getRow(rowNum);
				if (row != null && row.getCell(0) != null) {
					if (row.getCell(0).toString() != "" && row.getCell(0).toString() != null) {
						rowIndex = rowNum;
						logger.info("?????????????Last non empty row????????????????" + rowIndex);
						break;
					}
				}
			}
			for (int rowNum = 1; rowNum < rowIndex + 1; rowNum++) {
				Row r = Sheet.getRow(rowNum);
				String temp = "";
				for (int cn = 0; cn < 4; cn++) {
					Cell c = r.getCell(cn, Row.RETURN_BLANK_AS_NULL);
					try {

						if (c == null) {
							// The spreadsheet is empty in this cell
							temp = temp + "#@&" + "NA";
						} else {
							// Do something useful with the cell's contents
							c.setCellType(Cell.CELL_TYPE_STRING);
							temp = temp + "#@&" + super.commonValidations.getCellValue(c);
						}

					} catch (Exception e) {
						StringWriter errors = new StringWriter();
						e.printStackTrace(new PrintWriter(errors));
						logger.error("Exception  : " + errors.toString());
						// return "failed";
					}

				}
				String tempA[] = temp.split("#@&");
				
				MidTermMarks midMarks = new MidTermMarks();

				Optional<Studentadmission> student = super.studentadmission
						.findByExIsDeleteAndExIsActiveAndExRollNo(false, true, tempA[1].trim());

				if (student.isPresent()) {
					Date date = new Date();

					List<MidTermMarks> midterm = super.midtermmarksMarks
							.findByStudentadmissionIdAndCoursesIdAndAcademicYearIdAndExIsActiveAndExIsDelete(
									student.get().getId(), courses.get().getId(), academicYear.get().getId(), true,
									false);
					Staffpersonal staff = null;
					if (request.getStaff() == null || request.getStaff().equals("")) {
						staff = null;
					} else {
						Optional<Staffpersonal> staffres = super.staffpersonal
								.findByIdAndExIsDeleteAndExIsActive(request.getStaff(), false, true);
						if (!staffres.isPresent()) {
							info.put("status", "2");
							info.put("message", "staff not present");
							return info;
						}
						staff = staffres.get();
					}

					

						double exMidTermMarks = super.commonHelper.getdoubleMarks(tempA[2]);

						if (midterm.size() <= 0) {

							midMarks.setCourses(courses.get());
							midMarks.setExMidTermMarks(exMidTermMarks);
							midMarks.setAcademicYear(academicYear.get());
							midMarks.setProgrammes(Prog.get());
							midMarks.setColleges(col.get());
							midMarks.setDegree(degree.get());
							midMarks.setDepartment(department.get());
							midMarks.setSection(student.get().getSection());
							midMarks.setStaff(staff);
							midMarks.setExRollNo(student.get().getExRollNo());
							midMarks.setExCreateDate(date);
							midMarks.setSemester(sem.get());
							midMarks.setStream(stream.get());
							midMarks.setExamAnnouncement(null);
							midMarks.setStudentadmission(student.get());
							// midMarks.setCoursesType(coursestype.get());
							midMarks.setExMidTermRemarks(tempA[3] == null ? null : tempA[3]);
							midMarks.setProgrammeYear(programyear.get());
							midMarks.setExIsActive(true);
							midMarks.setExIsDelete(false);
							super.midtermmarksMarks.save(midMarks);

							successList.add("Success" + midMarks);

						} else {

							is_update = true;

							int i = super.midtermmarksMarks.updateMigMidtermDetails(exMidTermMarks,
									request.getAcademicYear(), request.getColleges(), request.getProgrammes(),
									request.getCourses(), student.get().getExRollNo(), date, tempA[3].trim(), staff,
									student.get().getSection(),request.getDegree());
							if (i == 1) {
								updaterecord = updaterecord + 1;
								excellog.info("Updated Record: " + tempA[1].trim());

							}
							// list.add(row.getCell(1).getStringCellValue());
						}
					

				} else {
					failureList.add(tempA[1] + ": Roll  No Not present :");
					list.add(tempA[1]);
				}

				info.put("status", "1");
				info.put("message", exMidTermFile.getOriginalFilename() + "Excel Uploaded Succesfully ");
				if (is_update) {
					info.put("success", updaterecord + " Records Updated Successfully");
					info.put("failure", list.size() + " Records Not Updated ");
				} else {
					info.put("success", successList.size() + " Records Inserted Successfully");
					info.put("failure", list.size() + " Records Not Inserted ");
				}
			}
			excellog.info("Data Not Inserted : " + failureList);
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;

		}

	}

	@Override
	public Map<String, Object> uploadQuizMarks(MidTermMarksRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		if (request.getExQuizFile() == null || request.getExQuizFile().isEmpty()) {
			info.put("status", "2");
			info.put("message", "Please select file");
			return info;
		}

		String extention = FilenameUtils.getExtension(request.getExQuizFile().getOriginalFilename());
		if (extention.equalsIgnoreCase("xls") || extention.equalsIgnoreCase("xlsx")) {

			Map<String, Object> result = readQuizDataFromExcel(request.getExQuizFile(), request);

			return result;
		}
		info.put("status", "2");
		info.put("message", "File should be xls / xlsx  extention");
		return info;
	}

	@Override
	public Map<String, Object> uploadAssignmentMarks(MidTermMarksRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		if (request.getExAssignmentFile() == null || request.getExAssignmentFile().isEmpty()) {
			info.put("status", "2");
			info.put("message", "Please select file");
			return info;
		}

		String extention = FilenameUtils.getExtension(request.getExAssignmentFile().getOriginalFilename());
		if (extention.equalsIgnoreCase("xls") || extention.equalsIgnoreCase("xlsx")) {

			Map<String, Object> result = readAssignmentDataFromExcel(request.getExAssignmentFile(), request);

			return result;
		}
		info.put("status", "2");
		info.put("message", "File should be xls / xlsx  extention");
		return info;
	}

	private Map<String, Object> readAssignmentDataFromExcel(MultipartFile exAssignmentFile,MidTermMarksRequest request) {
		List<String> failureList = new ArrayList<String>();
		List<String> successList = new ArrayList<String>();
		List<Object> list = new ArrayList<Object>();
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Workbook workbook = getWorkBook(exAssignmentFile);
			Sheet Sheet = workbook.getSheetAt(0);

			Iterator<Row> rows = Sheet.iterator();
			rows.next();

			Optional<ProgrammeYear> programyear = super.programmeYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammeYear());
			if (!programyear.isPresent()) {
				info.put("status", "2");
				info.put("message", "ProgrammeYear not present");
				return info;
			}
			

			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemster());
			if (!sem.isPresent()) {
				info.put("status", "2");
				info.put("message", " Semster not present");
				return info;
			}
			Optional<AcademicYear> academicYear = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getAcademicYear());
			if (!academicYear.isPresent()) {
				info.put("status", "2");
				info.put("message", " academicyear not present");
				return info;
			}

			Optional<Colleges> col = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!col.isPresent()) {
				info.put("status", "2");
				info.put("message", "college not present");
				return info;
			}
			Optional<Department> department = super.department
					.findByIdAndExIsDeleteAndExIsActive(request.getDepartment(), false, true);
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "department not present");
				return info;
			}

			Optional<Stream> stream = super.stream.findByIdAndExIsDeleteAndExIsActive(request.getStream(), false, true);
			if (!stream.isPresent()) {
				info.put("status", "2");
				info.put("message", "stream  not present");
				return info;
			}
			Optional<Programmes> Prog = super.programme.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Prog.isPresent()) {
				info.put("status", "2");
				info.put("message", " Programe not present");
				return info;
			}

			Optional<Courses> courses = super.courses.findByIdAndExIsDeleteAndExIsActive(request.getCourses(), false,
					true);
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not present");
				return info;
			}

			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}

			int updaterecord = 0;
			Boolean is_update = false;

			int rowIndex = 0;
			for (int rowNum = Sheet.getLastRowNum(); rowNum >= 0; rowNum--) {
				final Row row = Sheet.getRow(rowNum);
				if (row != null && row.getCell(0) != null) {
					if (row.getCell(0).toString() != "" && row.getCell(0).toString() != null) {
						rowIndex = rowNum;
						break;
					}
				}
			}
			for (int rowNum = 1; rowNum < rowIndex + 1; rowNum++) {
				Row r = Sheet.getRow(rowNum);
				String temp = "";
				for (int cn = 0; cn < 4; cn++) {
					Cell c = r.getCell(cn, Row.RETURN_BLANK_AS_NULL);
					try {

						if (c == null) {
							// The spreadsheet is empty in this cell
							temp = temp + "#@&" + "NA";
						} else {
							// Do something useful with the cell's contents
							c.setCellType(Cell.CELL_TYPE_STRING);
							temp = temp + "#@&" + super.commonValidations.getCellValue(c);
						}

					} catch (Exception e) {
						StringWriter errors = new StringWriter();
						e.printStackTrace(new PrintWriter(errors));
						logger.error("Exception  : " + errors.toString());
						// return "failed";
					}

				}
				String tempA[] = temp.split("#@&");
					if (request.getExamAnnouncement()==null || request.getExamAnnouncement().equals("NA")) {
						
						return  migassignmentupload(request , exAssignmentFile);
						
						
					}
					Optional<ExamAnnouncement> examannouncement = super.examAnnouncement
							.findByExIsDeleteAndExIsActiveAndId(false, true, request.getExamAnnouncement());
					if (!examannouncement.isPresent()) {
						info.put("status", "2");
						info.put("message", "Examannouncement  not present");
						return info;
					}
				
				
				
				
				MidTermMarks midMarks = new MidTermMarks();

				Optional<Studentadmission> student = super.studentadmission
						.findByExIsDeleteAndExIsActiveAndExRollNo(false, true, tempA[1].trim());
				if (student.isPresent()) {
					Date date = new Date();

					List<MidTermMarks> midterm = super.midtermmarksMarks
							.findByStudentadmissionIdAndCoursesIdAndAcademicYearIdAndExIsActiveAndExIsDelete(
									student.get().getId(), courses.get().getId(), academicYear.get().getId(), true,
									false);
					Staffpersonal staff = null;
					if (request.getStaff() == null || request.getStaff().equals("")) {
						staff = null;
					} else {
						Optional<Staffpersonal> staffres = super.staffpersonal
								.findByIdAndExIsDeleteAndExIsActive(request.getStaff(), false, true);
						if (!staffres.isPresent()) {
							info.put("status", "2");
							info.put("message", "staff not present");
							return info;
						}
						staff = staffres.get();
					}

					List<CoursesRegistration> coursereg = super.coursesRegistration
							.findByExIsDeleteAndExIsActiveAndCoursesIdAndStudentadmissionId(false, true,
									courses.get().getId(), student.get().getId());
					System.out.println("courseeregistration" + coursereg);
					if (coursereg.size() <= 0) {

						failureList.add(tempA[1] + ": Particular student not Registered for courses:");
						list.add(tempA[1]);
						System.out.println(">failurelist" + failureList);
					}

					else {

						double exAssignmentMarks = super.commonHelper.getdoubleMarks(tempA[2]);

						if (midterm.size() <= 0) {

							midMarks.setCourses(courses.get());
							midMarks.setExAssignmentMarks(exAssignmentMarks);
							midMarks.setAcademicYear(academicYear.get());
							midMarks.setProgrammes(Prog.get());
							midMarks.setColleges(col.get());
							midMarks.setDegree(degree.get());
							midMarks.setDepartment(department.get());
							midMarks.setStaff(staff);
							midMarks.setSection(student.get().getSection());
							midMarks.setExRollNo(student.get().getExRollNo());
							midMarks.setExCreateDate(date);
							midMarks.setSemester(sem.get());
							midMarks.setStream(stream.get());
							midMarks.setExamAnnouncement(examannouncement.get());
							midMarks.setStudentadmission(student.get());
							// midMarks.setCoursesType(coursestype.get());
							midMarks.setProgrammeYear(programyear.get());
							midMarks.setExIsActive(true);
							midMarks.setExIsDelete(false);
							super.midtermmarksMarks.save(midMarks);

							successList.add("Success" + midMarks);

						} else {
							is_update = true;

							int i = super.midtermmarksMarks.updateAssignmentDetails(exAssignmentMarks,
									request.getAcademicYear(), request.getColleges(), request.getProgrammes(),
									request.getCourses(), student.get().getId(), date, staff,
									request.getExamAnnouncement(), student.get().getSection());
							if (i == 1) {
								updaterecord = updaterecord + 1;
								excellog.info("Updated Record: " + tempA[1].trim());

							}
							// list.add(row.getCell(1).getStringCellValue());
						}
					}

				} else {
					failureList.add(tempA[1] + ": Roll  No Not present :");
					list.add(tempA[1]);
				}

				info.put("status", "1");
				info.put("message", exAssignmentFile.getOriginalFilename() + "Excel Uploaded Succesfully ");
				if (is_update) {
					info.put("success", updaterecord + " Records Updated Successfully");

					info.put("failure", list.size() + " Records Not Updated ");
				} else {
					info.put("success", successList.size() + " Records Inserted Successfully");
					info.put("failure", list.size() + " Records Not Inserted ");
				}
			}
			excellog.info("Data Not Inserted : " + failureList);
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;

		}

	}

	private Map<String, Object> migassignmentupload(MidTermMarksRequest request, MultipartFile exAssignmentFile) {
		List<String> failureList = new ArrayList<String>();
		List<String> successList = new ArrayList<String>();
		List<Object> list = new ArrayList<Object>();
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Workbook workbook = getWorkBook(exAssignmentFile);
			Sheet Sheet = workbook.getSheetAt(0);

			Iterator<Row> rows = Sheet.iterator();
			rows.next();

			Optional<ProgrammeYear> programyear = super.programmeYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammeYear());
			if (!programyear.isPresent()) {
				info.put("status", "2");
				info.put("message", "ProgrammeYear not present");
				return info;
			}
			

			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemster());
			if (!sem.isPresent()) {
				info.put("status", "2");
				info.put("message", " Semster not present");
				return info;
			}
			Optional<AcademicYear> academicYear = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getAcademicYear());
			if (!academicYear.isPresent()) {
				info.put("status", "2");
				info.put("message", " academicyear not present");
				return info;
			}

			Optional<Colleges> col = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!col.isPresent()) {
				info.put("status", "2");
				info.put("message", "college not present");
				return info;
			}
			Optional<Department> department = super.department
					.findByIdAndExIsDeleteAndExIsActive(request.getDepartment(), false, true);
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "department not present");
				return info;
			}

			Optional<Stream> stream = super.stream.findByIdAndExIsDeleteAndExIsActive(request.getStream(), false, true);
			if (!stream.isPresent()) {
				info.put("status", "2");
				info.put("message", "stream  not present");
				return info;
			}
			Optional<Programmes> Prog = super.programme.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Prog.isPresent()) {
				info.put("status", "2");
				info.put("message", " Programe not present");
				return info;
			}

			Optional<Courses> courses = super.courses.findByIdAndExIsDeleteAndExIsActive(request.getCourses(), false,
					true);
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not present");
				return info;
			}

			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}

			
			int updaterecord = 0;
			Boolean is_update = false;

			int rowIndex = 0;
			for (int rowNum = Sheet.getLastRowNum(); rowNum >= 0; rowNum--) {
				final Row row = Sheet.getRow(rowNum);
				if (row != null && row.getCell(0) != null) {
					if (row.getCell(0).toString() != "" && row.getCell(0).toString() != null) {
						rowIndex = rowNum;
						break;
					}
				}
			}
			for (int rowNum = 1; rowNum < rowIndex + 1; rowNum++) {
				Row r = Sheet.getRow(rowNum);
				String temp = "";
				for (int cn = 0; cn < 4; cn++) {
					Cell c = r.getCell(cn, Row.RETURN_BLANK_AS_NULL);
					try {

						if (c == null) {
							// The spreadsheet is empty in this cell
							temp = temp + "#@&" + "NA";
						} else {
							// Do something useful with the cell's contents
							c.setCellType(Cell.CELL_TYPE_STRING);
							temp = temp + "#@&" + super.commonValidations.getCellValue(c);
						}

					} catch (Exception e) {
						StringWriter errors = new StringWriter();
						e.printStackTrace(new PrintWriter(errors));
						logger.error("Exception  : " + errors.toString());
						// return "failed";
					}

				}
				String tempA[] = temp.split("#@&");
				
				
				
				
				MidTermMarks midMarks = new MidTermMarks();

				Optional<Studentadmission> student = super.studentadmission
						.findByExIsDeleteAndExIsActiveAndExRollNo(false, true, tempA[1].trim());
				if (student.isPresent()) {
					Date date = new Date();

					List<MidTermMarks> midterm = super.midtermmarksMarks
							.findByStudentadmissionIdAndCoursesIdAndAcademicYearIdAndExIsActiveAndExIsDelete(
									student.get().getId(), request.getCourses(), request.getAcademicYear(), true,
									false);
					Staffpersonal staff = null;
					if (request.getStaff() == null || request.getStaff().equals("")) {
						staff = null;
					} else {
						Optional<Staffpersonal> staffres = super.staffpersonal
								.findByIdAndExIsDeleteAndExIsActive(request.getStaff(), false, true);
						if (!staffres.isPresent()) {
							info.put("status", "2");
							info.put("message", "staff not present");
							return info;
						}
						staff = staffres.get();
					}

			

						double exAssignmentMarks = super.commonHelper.getdoubleMarks(tempA[2]);

						if (midterm.size() <= 0) {

							midMarks.setCourses(courses.get());
							midMarks.setExAssignmentMarks(exAssignmentMarks);
							midMarks.setAcademicYear(academicYear.get());
							midMarks.setProgrammes(Prog.get());
							midMarks.setColleges(col.get());
							midMarks.setDegree(degree.get());
							midMarks.setDepartment(department.get());
							midMarks.setStaff(staff);
							midMarks.setSection(student.get().getSection());
							midMarks.setExRollNo(student.get().getExRollNo());
							midMarks.setExCreateDate(date);
							midMarks.setSemester(sem.get());
							midMarks.setStream(stream.get());
							midMarks.setExamAnnouncement(null);
							midMarks.setStudentadmission(student.get());
							// midMarks.setCoursesType(coursestype.get());
							midMarks.setProgrammeYear(programyear.get());
							midMarks.setExIsActive(true);
							midMarks.setExIsDelete(false);
							super.midtermmarksMarks.save(midMarks);

							successList.add("Success" + midMarks);

						} else {
							is_update = true;

							int i = super.midtermmarksMarks.updateMIGAssignmentDetails(exAssignmentMarks,
									request.getAcademicYear(), request.getColleges(), request.getProgrammes(),
									request.getCourses(), student.get().getId(), date, staff,
						            student.get().getSection(),request.getDegree());
							
							
							if (i == 1) {
								updaterecord = updaterecord + 1;
								excellog.info("Updated Record: " + tempA[1].trim());

							}
							// list.add(row.getCell(1).getStringCellValue());
						}
					

				} else {
					failureList.add(tempA[1] + ": Roll  No Not present :");
					list.add(tempA[1]);
				}

				info.put("status", "1");
				info.put("message", exAssignmentFile.getOriginalFilename() + "Excel Uploaded Succesfully ");
				if (is_update) {
					info.put("success", updaterecord + " Records Updated Successfully");

					info.put("failure", list.size() + " Records Not Updated ");
				} else {
					info.put("success", successList.size() + " Records Inserted Successfully");
					info.put("failure", list.size() + " Records Not Inserted ");
				}
			}
			excellog.info("Data Not Inserted : " + failureList);
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;

		}

		}

	@Override
	public Map<String, Object> uploadPracticalMarks(MidTermMarksRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();

		if (request.getExPracticalFile() == null || request.getExPracticalFile().isEmpty()) {
			info.put("status", "2");
			info.put("message", "please select file");
		}

		String extention = FilenameUtils.getExtension(request.getExPracticalFile().getOriginalFilename());
		if (extention.equalsIgnoreCase("xls") || extention.equalsIgnoreCase("xlsx")) {

			Map<String, Object> result = readPracticalDataFromExcel(request.getExPracticalFile(), request);

			return result;
		}
		info.put("status", "2");
		info.put("message", "File should be xls / xlsx  extention");
		return info;
	}

	private Map<String, Object> readPracticalDataFromExcel(MultipartFile exPracticalFile, MidTermMarksRequest request) {
		List<String> failureList = new ArrayList<String>();
		List<String> successList = new ArrayList<String>();
		List<Object> list = new ArrayList<Object>();
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			logger.info(">>>...." + request.toString());
			Workbook workbook = getWorkBook(exPracticalFile);
			Sheet Sheet = workbook.getSheetAt(0);

			Iterator<Row> rows = Sheet.iterator();
			rows.next();

			Optional<ProgrammeYear> programyear = super.programmeYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammeYear());
			if (!programyear.isPresent()) {
				info.put("status", "2");
				info.put("message", "ProgrammeYear not present");
				return info;
			}
			
			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemster());
			if (!sem.isPresent()) {
				info.put("status", "2");
				info.put("message", " Semster not present");
				return info;
			}
			Optional<AcademicYear> academicYear = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getAcademicYear());
			if (!academicYear.isPresent()) {
				info.put("status", "2");
				info.put("message", " academicyear not present");
				return info;
			}

			Optional<Colleges> col = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!col.isPresent()) {
				info.put("status", "2");
				info.put("message", "college  not present");
				return info;
			}
			Optional<Department> department = super.department
					.findByIdAndExIsDeleteAndExIsActive(request.getDepartment(), false, true);
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "department  not present");
				return info;
			}

			Optional<Stream> stream = super.stream.findByIdAndExIsDeleteAndExIsActive(request.getStream(), false, true);
			if (!stream.isPresent()) {
				info.put("status", "2");
				info.put("message", "stream  not present");
				return info;
			}
			Optional<Programmes> Prog = super.programme.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Prog.isPresent()) {
				info.put("status", "2");
				info.put("message", " Programe not present");
				return info;
			}

			Optional<Courses> courses = super.courses.findByIdAndExIsDeleteAndExIsActive(request.getCourses(), false,
					true);
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			int updaterecord = 0;
			Boolean is_update = false;

			int rowIndex = 0;
			for (int rowNum = Sheet.getLastRowNum(); rowNum >= 0; rowNum--) {
				final Row row = Sheet.getRow(rowNum);
				if (row != null && row.getCell(0) != null) {
					if (row.getCell(0).toString() != "" && row.getCell(0).toString() != null) {
						rowIndex = rowNum;
						logger.info("?????????????Last non empty row????????????????" + rowIndex);
						break;
					}
				}
			}
			for (int rowNum = 1; rowNum < rowIndex + 1; rowNum++) {
				Row r = Sheet.getRow(rowNum);
				String temp = "";
				for (int cn = 0; cn < 4; cn++) {
					Cell c = r.getCell(cn, Row.RETURN_BLANK_AS_NULL);
					try {

						if (c == null) {
							// The spreadsheet is empty in this cell
							temp = temp + "#@&" + "NA";
						} else {
							// Do something useful with the cell's contents
							c.setCellType(Cell.CELL_TYPE_STRING);
							temp = temp + "#@&" + super.commonValidations.getCellValue(c);
						}

					} catch (Exception e) {
						StringWriter errors = new StringWriter();
						e.printStackTrace(new PrintWriter(errors));
						logger.error("Exception  : " + errors.toString());
						// return "failed";
					}

				}
				String tempA[] = temp.split("#@&");
				MidTermMarks midMarks = new MidTermMarks();
               if (request.getExamAnnouncement()==null || request.getExamAnnouncement().equals("NA")) {
					
					return  migPracticalupload(request , exPracticalFile);
					
					
				}
				Optional<ExamAnnouncement> examannouncement = super.examAnnouncement
						.findByExIsDeleteAndExIsActiveAndId(false, true, request.getExamAnnouncement());
				if (!examannouncement.isPresent()) {
					info.put("status", "2");
					info.put("message", "Examannouncement  not present");
					return info;
				}
		
				Optional<Studentadmission> student = super.studentadmission
						.findByExIsDeleteAndExIsActiveAndExRollNo(false, true, tempA[1].trim());

				if (student.isPresent()) {
					Date date = new Date();
					List<MidTermMarks> midterm = super.midtermmarksMarks
							.findByExIsActiveAndExIsDeleteAndExRollNoAndCoursesId(true, false, tempA[1].trim(),
									request.getCourses());

					System.out.println(">...mid" + midterm);
					// List<MidTermMarks> midterm =
					// super.midtermmarksMarks.findByExIsActiveAndExIsDelete( true ,false);
					Staffpersonal staff = null;
					if (request.getStaff() == null || request.getStaff().equals("")) {
						staff = null;
					} else {
						Optional<Staffpersonal> staffres = super.staffpersonal
								.findByIdAndExIsDeleteAndExIsActive(request.getStaff(), false, true);
						if (!staffres.isPresent()) {
							info.put("status", "2");
							info.put("message", "staff not present");
							return info;
						}
						staff = staffres.get();
					}

					List<CoursesRegistration> coursereg = super.coursesRegistration
							.findByExIsDeleteAndExIsActiveAndCoursesIdAndStudentadmissionId(false, true,
									courses.get().getId(), student.get().getId());
					if (coursereg.size() <= 0) {
						failureList.add(tempA[1] + ": student not registered for courses:");
						list.add(tempA[1]);

					} else {
						double exPracticalRecordMarks = super.commonHelper.getdoubleMarks(tempA[2]);
						double exPracticallearningMarks = super.commonHelper.getdoubleMarks(tempA[3]);

						if (midterm.size() <= 0) {
							System.out.println(">>>>>.smidetersize" + midterm.size());
							midMarks.setCourses(courses.get());
							midMarks.setExPracticalRecordMarks(exPracticalRecordMarks);
							midMarks.setAcademicYear(academicYear.get());
							midMarks.setProgrammes(Prog.get());
							midMarks.setColleges(col.get());
							midMarks.setDegree(degree.get());
							midMarks.setDepartment(department.get());
							midMarks.setSection(student.get().getSection());
							midMarks.setExRollNo(student.get().getExRollNo());
							midMarks.setExCreateDate(date);
							midMarks.setSemester(sem.get());
							midMarks.setStream(stream.get());
							midMarks.setStaff(staff);
							midMarks.setExamAnnouncement(examannouncement.get());
							midMarks.setStudentadmission(student.get());
							midMarks.setExPracticalLearning(exPracticallearningMarks);
							midMarks.setProgrammeYear(programyear.get());
							midMarks.setExIsActive(true);
							midMarks.setExIsDelete(false);
							super.midtermmarksMarks.save(midMarks);

							successList.add("Success" + midMarks);
						} else {
							is_update = true;

							int i = super.midtermmarksMarks.updatePracticalDetails(exPracticalRecordMarks,
									exPracticallearningMarks, request.getAcademicYear(), request.getColleges(),
									request.getProgrammes(), request.getCourses(), student.get().getExRollNo(), date,
									staff, student.get().getSection());

							if (i == 1) {
								updaterecord = updaterecord + 1;
								excellog.info("Updated Record: " + tempA[1].trim());

							}
							// list.add(row.getCell(1).getStringCellValue());
						}
					}

				} else {
					failureList.add(tempA[1] + ": Roll.No Not present :");
					list.add(tempA[1]);
				}
				info.put("status", "1");
				info.put("message", exPracticalFile.getOriginalFilename() + "Excel Uploaded Succesfully ");
				if (is_update) {
					info.put("success", updaterecord + " Records Updated Successfully");

					info.put("failure", list.size() + " Records Not Updated ");
				} else {
					info.put("success", successList.size() + " Records Inserted Successfully");
					info.put("failure", list.size() + " Records Not Inserted ");
				}
			}
			excellog.info("Data Not Inserted : " + failureList);
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;

		}

	}

	private Map<String, Object> migPracticalupload(MidTermMarksRequest request, MultipartFile exPracticalFile) {
		List<String> failureList = new ArrayList<String>();
		List<String> successList = new ArrayList<String>();
		List<Object> list = new ArrayList<Object>();
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			logger.info(">>>...." + request.toString());
			Workbook workbook = getWorkBook(exPracticalFile);
			Sheet Sheet = workbook.getSheetAt(0);

			Iterator<Row> rows = Sheet.iterator();
			rows.next();

			Optional<ProgrammeYear> programyear = super.programmeYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammeYear());
			if (!programyear.isPresent()) {
				info.put("status", "2");
				info.put("message", "ProgrammeYear not present");
				return info;
			}
			
			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemster());
			if (!sem.isPresent()) {
				info.put("status", "2");
				info.put("message", " Semster not present");
				return info;
			}
			Optional<AcademicYear> academicYear = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getAcademicYear());
			if (!academicYear.isPresent()) {
				info.put("status", "2");
				info.put("message", " academicyear not present");
				return info;
			}

			Optional<Colleges> col = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!col.isPresent()) {
				info.put("status", "2");
				info.put("message", "college  not present");
				return info;
			}
			Optional<Department> department = super.department
					.findByIdAndExIsDeleteAndExIsActive(request.getDepartment(), false, true);
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "department  not present");
				return info;
			}

			Optional<Stream> stream = super.stream.findByIdAndExIsDeleteAndExIsActive(request.getStream(), false, true);
			if (!stream.isPresent()) {
				info.put("status", "2");
				info.put("message", "stream  not present");
				return info;
			}
			Optional<Programmes> Prog = super.programme.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Prog.isPresent()) {
				info.put("status", "2");
				info.put("message", " Programe not present");
				return info;
			}

			Optional<Courses> courses = super.courses.findByIdAndExIsDeleteAndExIsActive(request.getCourses(), false,
					true);
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			int updaterecord = 0;
			Boolean is_update = false;

			int rowIndex = 0;
			for (int rowNum = Sheet.getLastRowNum(); rowNum >= 0; rowNum--) {
				final Row row = Sheet.getRow(rowNum);
				if (row != null && row.getCell(0) != null) {
					if (row.getCell(0).toString() != "" && row.getCell(0).toString() != null) {
						rowIndex = rowNum;
						logger.info("?????????????Last non empty row????????????????" + rowIndex);
						break;
					}
				}
			}
			for (int rowNum = 1; rowNum < rowIndex + 1; rowNum++) {
				Row r = Sheet.getRow(rowNum);
				String temp = "";
				for (int cn = 0; cn < 4; cn++) {
					Cell c = r.getCell(cn, Row.RETURN_BLANK_AS_NULL);
					try {

						if (c == null) {
							// The spreadsheet is empty in this cell
							temp = temp + "#@&" + "NA";
						} else {
							// Do something useful with the cell's contents
							c.setCellType(Cell.CELL_TYPE_STRING);
							temp = temp + "#@&" + super.commonValidations.getCellValue(c);
						}

					} catch (Exception e) {
						StringWriter errors = new StringWriter();
						e.printStackTrace(new PrintWriter(errors));
						logger.error("Exception  : " + errors.toString());
						// return "failed";
					}

				}
				String tempA[] = temp.split("#@&");
				MidTermMarks midMarks = new MidTermMarks();
    

				Optional<Studentadmission> student = super.studentadmission
						.findByExIsDeleteAndExIsActiveAndExRollNo(false, true, tempA[1].trim());

				if (student.isPresent()) {
					Date date = new Date();
					List<MidTermMarks> midterm = super.midtermmarksMarks
							.findByExIsActiveAndExIsDeleteAndExRollNoAndCoursesId(true, false, tempA[1].trim(),
									request.getCourses());

					System.out.println(">...mid" + midterm);
					// List<MidTermMarks> midterm =
					// super.midtermmarksMarks.findByExIsActiveAndExIsDelete( true ,false);
					Staffpersonal staff = null;
					if (request.getStaff() == null || request.getStaff().equals("")) {
						staff = null;
					} else {
						Optional<Staffpersonal> staffres = super.staffpersonal
								.findByIdAndExIsDeleteAndExIsActive(request.getStaff(), false, true);
						if (!staffres.isPresent()) {
							info.put("status", "2");
							info.put("message", "staff not present");
							return info;
						}
						staff = staffres.get();
					}

				
						double exPracticalRecordMarks = super.commonHelper.getdoubleMarks(tempA[2]);
						double exPracticallearningMarks = super.commonHelper.getdoubleMarks(tempA[3]);

						if (midterm.size() <= 0) {
							System.out.println(">>>>>.smidetersize" + midterm.size());
							midMarks.setCourses(courses.get());
							midMarks.setExPracticalRecordMarks(exPracticalRecordMarks);
							midMarks.setAcademicYear(academicYear.get());
							midMarks.setProgrammes(Prog.get());
							midMarks.setColleges(col.get());
							midMarks.setDegree(degree.get());
							midMarks.setDepartment(department.get());
							midMarks.setSection(student.get().getSection());
							midMarks.setExRollNo(student.get().getExRollNo());
							midMarks.setExCreateDate(date);
							midMarks.setSemester(sem.get());
							midMarks.setStream(stream.get());
							midMarks.setStaff(staff);
							midMarks.setExamAnnouncement(null);
							midMarks.setStudentadmission(student.get());
							// midMarks.setCoursesType(coursestype.get());
							// midMarks.setExPracticalRemarks(tempA[4]==null?null:tempA[4]);
							midMarks.setExPracticalLearning(exPracticallearningMarks);
							midMarks.setProgrammeYear(programyear.get());
							midMarks.setExIsActive(true);
							midMarks.setExIsDelete(false);
							super.midtermmarksMarks.save(midMarks);

							successList.add("Success" + midMarks);
						} else {
							is_update = true;

							int i = super.midtermmarksMarks.updateMigPracticalDetails(exPracticalRecordMarks,
									exPracticallearningMarks, request.getAcademicYear(), request.getColleges(),
									request.getProgrammes(), request.getCourses(), student.get().getExRollNo(), date,
									staff, student.get().getSection(),request.getDepartment(),request.getDegree());

							if (i == 1) {
								updaterecord = updaterecord + 1;
								excellog.info("Updated Record: " + tempA[1].trim());

							}
							// list.add(row.getCell(1).getStringCellValue());
						}
					

				} else {
					failureList.add(tempA[1] + ": Roll.No Not present :");
					list.add(tempA[1]);
				}
				info.put("status", "1");
				info.put("message", exPracticalFile.getOriginalFilename() + "Excel Uploaded Succesfully ");
				if (is_update) {
					info.put("success", updaterecord + " Records Updated Successfully");

					info.put("failure", list.size() + " Records Not Updated ");
				} else {
					info.put("success", successList.size() + " Records Inserted Successfully");
					info.put("failure", list.size() + " Records Not Inserted ");
				}
			}
			excellog.info("Data Not Inserted : " + failureList);
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;

		}

	}
	@Override
	public Map<String, Object> uploadClassAttendance(ClassTimeTableRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();

		if (request.getClassAttendance() == null || request.getClassAttendance().isEmpty()) {
			info.put("status", "2");
			info.put("message", "please select file");
		}

		String extention = FilenameUtils.getExtension(request.getClassAttendance().getOriginalFilename());
		if (extention.equalsIgnoreCase("xls") || extention.equalsIgnoreCase("xlsx")) {

			Map<String, Object> result = uploadClassAttendanceExcel(request.getClassAttendance(), request);

			return result;
		}
		info.put("status", "2");
		info.put("message", "File should be xls / xlsx  extention");
		return info;
	}

	private Map<String, Object> uploadClassAttendanceExcel(MultipartFile classAttendance,
			ClassTimeTableRequest request) {
		List<String> failureList = new ArrayList<String>();
		List<String> successList = new ArrayList<String>();
		List<Object> list = new ArrayList<Object>();
		Map<String, Object> info = new LinkedHashMap<>();
		Date date = new Date();
		try {
			logger.info("request >" + request.toString());
			Workbook workbook = getWorkBook(classAttendance);
			Sheet Sheet = workbook.getSheetAt(0);

			Iterator<Row> rows = Sheet.iterator();
			rows.next();
			int rowIndex = 0;
			for (int rowNum = Sheet.getLastRowNum(); rowNum >= 0; rowNum--) {
				final Row row = Sheet.getRow(rowNum);
				if (row != null && row.getCell(0) != null) {
					rowIndex = rowNum;
					logger.info("?????????????Last non empty row????????????????" + rowIndex);
					break;
				}
			}

			Optional<Programmes> Programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Programmes.isPresent() || !Programmes.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}

			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}

			Optional<AcademicYear> academic = super.academicYear
					.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
			if (!academic.isPresent() || !academic.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "academicYear not present");
				return info;
			}

			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!sem.isPresent() || !sem.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Semster not present");
				return info;
			}

			Optional<ProgrammeYear> programmeYear = super.programmeYear
					.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
			if (!programmeYear.isPresent() || !programmeYear.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}

			Optional<Courses> course = super.courses.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getCourses());
			logger.info(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" + request.getCourses());
			if (!course.isPresent()) {
				info.put("status", "2");
				info.put("message", "Courses not present ");
				return info;
			}

			int updaterecord = 0;
			Boolean is_update = false;
			Boolean ExIsReGenerated = false;

			for (int rowNum = 1; rowNum < rowIndex + 1; rowNum++) {
				Row r = Sheet.getRow(rowNum);
				String temp = "";
				for (int cn = 0; cn < 11; cn++) {
					Cell c = r.getCell(cn, Row.RETURN_BLANK_AS_NULL);
					try {

						if (c == null) {
							// The spreadsheet is empty in this cell
							temp = temp + "#@&" + "NA";
						} else {
							// Do something useful with the cell's contents
							c.setCellType(Cell.CELL_TYPE_STRING);
							temp = temp + "#@&" + super.commonValidations.getCellValue(c);
						}

					} catch (Exception e) {
						StringWriter errors = new StringWriter();
						e.printStackTrace(new PrintWriter(errors));
						logger.error("Exception  : " + errors.toString());
						// return "failed";
					}

				}
				String tempA[] = temp.split("#@&");
				// Get Student Details Based on Roll Number
				System.out.println(">>>>>>>>1>>>>>>>>>>" + tempA[1].trim());
				System.out.println(">>>>>>>>2>>>>>>>>>>" + tempA[2].trim());
				System.out.println(">>>>>>>>3>>>>>>>>>>" + tempA[3].trim());

				Optional<Studentadmission> student = super.studentadmission
						.findByExIsDeleteAndExIsActiveAndExRollNo(false, true, tempA[2].trim());
				if (student.isPresent()) {
					// update
					// DateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
					excellog.info("prestempA[3].trim()entdate : " + tempA[3].trim());

					Date date1 = checkDate(tempA[3].trim());
					// Date presentdate = sdf.parse(tempA[3].trim());
					excellog.info("presentdate : " + date1);
					int i = super.classattend.updateClassAttendanceRecord(true, date, date1, student.get().getId(),
							request.getAcademicYear(), request.getCourses(), request.getCoursesType(),
							request.getProgrammeYear(), request.getSemester());
					excellog.info("iiiiiiiiiiiiii : " + i);
					if (i == 1) {
						successList.add("Success" + student.isPresent());
					} else {
						failureList.add(tempA[3] + ": Date record in not updated :");
						list.add(tempA[1]);
					}
				} else {
					failureList.add(tempA[1] + ": Enrollment No Not present :");
					list.add(tempA[1]);
				}

				info.put("status", "1");
				info.put("message", classAttendance.getOriginalFilename() + "Excel Uploaded Succesfully ");
				if (is_update) {
					info.put("success", updaterecord + " Records Updated Successfully");
					info.put("failure", list.size() + " Records Not Updated ");
				} else {
					info.put("success", successList.size() + " Records Updated Successfully");
					info.put("failure", list.size() + " Records Not Inserted ");
				}
			}
			excellog.info("Data Not Inserted : " + failureList);
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;

		}
	}

	public Date checkDate(String value) {
		Date date = null;
		try {
			if (isNumeric(value) && !value.trim().equals("NA")) {
				double doublevalue = Double.parseDouble(value.toString());
				date = DateUtil.getJavaDate((double) doublevalue);
			} else if (!value.toString().trim().equals("NA")) {
				SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
				date = dateFormat.parse(value.toString());
			} else {
				date = null;
			}
			return date;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return date;

	}

	public boolean isNumeric(String strNum) {
		if (strNum == null) {
			return false;
		}
		try {
			double d = Double.parseDouble(strNum);
		} catch (NumberFormatException nfe) {
			return false;
		}
		return true;
	}

	@Override
	public Map<String, Object> uploadAttendenceMarks(MidTermMarksRequest request) {

		Map<String, Object> info = new LinkedHashMap<>();
		if (request.getExAttendenceFile() == null || request.getExAttendenceFile().isEmpty()) {
			info.put("status", "2");
			info.put("message", "Please select file");
			return info;
		}

		String extention = FilenameUtils.getExtension(request.getExAttendenceFile().getOriginalFilename());
		if (extention.equalsIgnoreCase("xls") || extention.equalsIgnoreCase("xlsx")) {

			Map<String, Object> result = readAttendenceMarks(request.getExAttendenceFile(), request);

			return result;
		}
		info.put("status", "2");
		info.put("message", "File should be xls / xlsx  extention");
		return info;
	}

	private Map<String, Object> readAttendenceMarks(MultipartFile exAttendenceFile, MidTermMarksRequest request) {
		List<String> failureList = new ArrayList<String>();
		List<String> successList = new ArrayList<String>();
		List<Object> list = new ArrayList<Object>();
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Workbook workbook = getWorkBook(exAttendenceFile);
			Sheet Sheet = workbook.getSheetAt(0);

			Iterator<Row> rows = Sheet.iterator();
			rows.next();

			Optional<ProgrammeYear> programyear = super.programmeYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammeYear());
			if (!programyear.isPresent()) {
				info.put("status", "2");
				info.put("message", "ProgrammeYear not present");
				return info;
			}
			

			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemster());
			if (!sem.isPresent()) {
				info.put("status", "2");
				info.put("message", " Semster not present");
				return info;
			}
			Optional<AcademicYear> academicYear = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getAcademicYear());
			if (!academicYear.isPresent()) {
				info.put("status", "2");
				info.put("message", " academicyear not present");
				return info;
			}

			Optional<Colleges> col = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!col.isPresent()) {
				info.put("status", "2");
				info.put("message", "college not present");
				return info;
			}
			Optional<Department> department = super.department
					.findByIdAndExIsDeleteAndExIsActive(request.getDepartment(), false, true);
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "department not present");
				return info;
			}

			Optional<Stream> stream = super.stream.findByIdAndExIsDeleteAndExIsActive(request.getStream(), false, true);
			if (!stream.isPresent()) {
				info.put("status", "2");
				info.put("message", "stream  not present");
				return info;
			}
			Optional<Programmes> Prog = super.programme.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Prog.isPresent()) {
				info.put("status", "2");
				info.put("message", " Programe not present");
				return info;
			}

			Optional<Courses> courses = super.courses.findByIdAndExIsDeleteAndExIsActive(request.getCourses(), false,
					true);
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not present");
				return info;
			}

			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}

			int updaterecord = 0;
			Boolean is_update = false;

			int rowIndex = 0;
			for (int rowNum = Sheet.getLastRowNum(); rowNum >= 0; rowNum--) {
				final Row row = Sheet.getRow(rowNum);
				if (row != null && row.getCell(0) != null) {
					if (row.getCell(0).toString() != "" && row.getCell(0).toString() != null) {
						rowIndex = rowNum;
						break;
					}
				}
			}
			for (int rowNum = 1; rowNum < rowIndex + 1; rowNum++) {
				Row r = Sheet.getRow(rowNum);
				String temp = "";
				for (int cn = 0; cn < 4; cn++) {
					Cell c = r.getCell(cn, Row.RETURN_BLANK_AS_NULL);
					try {

						if (c == null) {
							// The spreadsheet is empty in this cell
							temp = temp + "#@&" + "NA";
						} else {
							// Do something useful with the cell's contents
							c.setCellType(Cell.CELL_TYPE_STRING);
							temp = temp + "#@&" + super.commonValidations.getCellValue(c);
						}

					} catch (Exception e) {
						StringWriter errors = new StringWriter();
						e.printStackTrace(new PrintWriter(errors));
						logger.error("Exception  : " + errors.toString());
						// return "failed";
					}

				}

				String tempA[] = temp.split("#@&");
                if (request.getExamAnnouncement()==null || request.getExamAnnouncement().equals("NA")) {
					
					return  migattendenceupload(request , exAttendenceFile);
					
					
				}
				Optional<ExamAnnouncement> examannouncement = super.examAnnouncement
						.findByExIsDeleteAndExIsActiveAndId(false, true, request.getExamAnnouncement());
				if (!examannouncement.isPresent()) {
					info.put("status", "2");
					info.put("message", "Examannouncement  not present");
					return info;
				}
				
				
				
				
				MidTermMarks midMarks = new MidTermMarks();
				Optional<Studentadmission> student = super.studentadmission
						.findByExIsDeleteAndExIsActiveAndExRollNo(false, true, tempA[1].trim());
				if (student.isPresent()) {
					Date date = new Date();

					List<MidTermMarks> midterm = super.midtermmarksMarks
							.findByStudentadmissionIdAndCoursesIdAndAcademicYearIdAndExIsActiveAndExIsDelete(
									student.get().getId(), courses.get().getId(), academicYear.get().getId(), true,
									false);

					List<CoursesRegistration> coursereg = super.coursesRegistration
							.findByExIsDeleteAndExIsActiveAndCoursesIdAndStudentadmissionId(false, true,
									courses.get().getId(), student.get().getId());
					System.out.println("courseeregistration" + coursereg);
					if (coursereg.size() <= 0) {

						failureList.add(tempA[1] + ": Particular student not Registered for courses:");
						list.add(tempA[1]);
						System.out.println(">failurelist" + failureList);
					}

					else {

						double exattendenceMarks = super.commonHelper.getdoubleMarks(tempA[2]);

						if (midterm.size() <= 0) {

							midMarks.setCourses(courses.get());
							midMarks.setExAttendenceMarks(exattendenceMarks);
							midMarks.setAcademicYear(academicYear.get());
							midMarks.setProgrammes(Prog.get());
							midMarks.setColleges(col.get());
							midMarks.setDegree(degree.get());
							midMarks.setDepartment(department.get());
							midMarks.setExRollNo(student.get().getExRollNo());
							midMarks.setExCreateDate(date);
							midMarks.setSemester(sem.get());
							midMarks.setStream(stream.get());
							midMarks.setExamAnnouncement(examannouncement.get());
							midMarks.setSection(student.get().getSection());
							midMarks.setStudentadmission(student.get());
							// midMarks.setCoursesType(coursestype.get());
							midMarks.setProgrammeYear(programyear.get());
							midMarks.setExIsActive(true);
							midMarks.setExIsDelete(false);
							super.midtermmarksMarks.save(midMarks);

							successList.add("Success" + midMarks);

						} else {

							is_update = true;

							int i = super.midtermmarksMarks.updateAttendencetDetails(exattendenceMarks,
									request.getAcademicYear(), request.getColleges(), request.getProgrammes(),
									request.getCourses(), student.get().getId(), date, student.get().getSection(),request.getExamAnnouncement(),request.getDegree());
							if (i == 1) {
								updaterecord = updaterecord + 1;
								excellog.info("Updated Record: " + tempA[1].trim());

							}
							// list.add(row.getCell(1).getStringCellValue());
						}
					}

				} else {
					failureList.add(tempA[1] + ": Roll  No Not present :");
					list.add(tempA[1]);
				}

				info.put("status", "1");
				info.put("message", exAttendenceFile.getOriginalFilename() + "Excel Uploaded Succesfully ");
				if (is_update) {
					info.put("success", updaterecord + " Records Updated Successfully");

					info.put("failure", list.size() + " Records Not Updated ");
				} else {
					info.put("success", successList.size() + " Records Inserted Successfully");
					info.put("failure", list.size() + " Records Not Inserted ");
				}
			}
			excellog.info("Data Not Inserted : " + failureList);
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;

		}

	}
//practical learning

	private Map<String, Object> migattendenceupload(MidTermMarksRequest request, MultipartFile exAttendenceFile) {
		List<String> failureList = new ArrayList<String>();
		List<String> successList = new ArrayList<String>();
		List<Object> list = new ArrayList<Object>();
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Workbook workbook = getWorkBook(exAttendenceFile);
			Sheet Sheet = workbook.getSheetAt(0);

			Iterator<Row> rows = Sheet.iterator();
			rows.next();

			Optional<ProgrammeYear> programyear = super.programmeYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammeYear());
			if (!programyear.isPresent()) {
				info.put("status", "2");
				info.put("message", "ProgrammeYear not present");
				return info;
			}
			

			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemster());
			if (!sem.isPresent()) {
				info.put("status", "2");
				info.put("message", " Semster not present");
				return info;
			}
			Optional<AcademicYear> academicYear = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getAcademicYear());
			if (!academicYear.isPresent()) {
				info.put("status", "2");
				info.put("message", " academicyear not present");
				return info;
			}

			Optional<Colleges> col = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!col.isPresent()) {
				info.put("status", "2");
				info.put("message", "college not present");
				return info;
			}
			Optional<Department> department = super.department
					.findByIdAndExIsDeleteAndExIsActive(request.getDepartment(), false, true);
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "department not present");
				return info;
			}

			Optional<Stream> stream = super.stream.findByIdAndExIsDeleteAndExIsActive(request.getStream(), false, true);
			if (!stream.isPresent()) {
				info.put("status", "2");
				info.put("message", "stream  not present");
				return info;
			}
			Optional<Programmes> Prog = super.programme.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Prog.isPresent()) {
				info.put("status", "2");
				info.put("message", " Programe not present");
				return info;
			}

			Optional<Courses> courses = super.courses.findByIdAndExIsDeleteAndExIsActive(request.getCourses(), false,
					true);
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not present");
				return info;
			}

			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}

			int updaterecord = 0;
			Boolean is_update = false;

			int rowIndex = 0;
			for (int rowNum = Sheet.getLastRowNum(); rowNum >= 0; rowNum--) {
				final Row row = Sheet.getRow(rowNum);
				if (row != null && row.getCell(0) != null) {
					if (row.getCell(0).toString() != "" && row.getCell(0).toString() != null) {
						rowIndex = rowNum;
						break;
					}
				}
			}
			for (int rowNum = 1; rowNum < rowIndex + 1; rowNum++) {
				Row r = Sheet.getRow(rowNum);
				String temp = "";
				for (int cn = 0; cn < 4; cn++) {
					Cell c = r.getCell(cn, Row.RETURN_BLANK_AS_NULL);
					try {

						if (c == null) {
							// The spreadsheet is empty in this cell
							temp = temp + "#@&" + "NA";
						} else {
							// Do something useful with the cell's contents
							c.setCellType(Cell.CELL_TYPE_STRING);
							temp = temp + "#@&" + super.commonValidations.getCellValue(c);
						}

					} catch (Exception e) {
						StringWriter errors = new StringWriter();
						e.printStackTrace(new PrintWriter(errors));
						logger.error("Exception  : " + errors.toString());
						// return "failed";
					}

				}

				String tempA[] = temp.split("#@&");
               
				
				
				
				MidTermMarks midMarks = new MidTermMarks();
				Optional<Studentadmission> student = super.studentadmission
						.findByExIsDeleteAndExIsActiveAndExRollNo(false, true, tempA[1].trim());
				if (student.isPresent()) {
					Date date = new Date();

					List<MidTermMarks> midterm = super.midtermmarksMarks
							.findByStudentadmissionIdAndCoursesIdAndAcademicYearIdAndExIsActiveAndExIsDelete(
									student.get().getId(), courses.get().getId(), academicYear.get().getId(), true,
									false);

					

						double exattendenceMarks = super.commonHelper.getdoubleMarks(tempA[2]);

						if (midterm.size() <= 0) {

							midMarks.setCourses(courses.get());
							midMarks.setExAttendenceMarks(exattendenceMarks);
							midMarks.setAcademicYear(academicYear.get());
							midMarks.setProgrammes(Prog.get());
							midMarks.setColleges(col.get());
							midMarks.setDegree(degree.get());
							midMarks.setDepartment(department.get());
							midMarks.setExRollNo(student.get().getExRollNo());
							midMarks.setExCreateDate(date);
							midMarks.setSemester(sem.get());
							midMarks.setStream(stream.get());
							midMarks.setExamAnnouncement(null);
							midMarks.setSection(student.get().getSection());
							midMarks.setStudentadmission(student.get());
							// midMarks.setCoursesType(coursestype.get());
							midMarks.setProgrammeYear(programyear.get());
							midMarks.setExIsActive(true);
							midMarks.setExIsDelete(false);
							super.midtermmarksMarks.save(midMarks);

							successList.add("Success" + midMarks);

						} else {

							is_update = true;

							int i = super.midtermmarksMarks.updateMigAttendencetDetails(exattendenceMarks,
									request.getAcademicYear(), request.getColleges(), request.getProgrammes(),
									request.getCourses(), student.get().getId(), date, student.get().getSection(),request.getDegree());
							if (i == 1) {
								updaterecord = updaterecord + 1;
								excellog.info("Updated Record: " + tempA[1].trim());

							}
							// list.add(row.getCell(1).getStringCellValue());
						}
					

				} else {
					failureList.add(tempA[1] + ": Roll  No Not present :");
					list.add(tempA[1]);
				}

				info.put("status", "1");
				info.put("message", exAttendenceFile.getOriginalFilename() + "Excel Uploaded Succesfully ");
				if (is_update) {
					info.put("success", updaterecord + " Records Updated Successfully");

					info.put("failure", list.size() + " Records Not Updated ");
				} else {
					info.put("success", successList.size() + " Records Inserted Successfully");
					info.put("failure", list.size() + " Records Not Inserted ");
				}
			}
			excellog.info("Data Not Inserted : " + failureList);
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;

		}

	}
	@Override
	public Map<String, Object> uploadPracticalLabExperminent(ExamAttendanceRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		if (request.getExlabFile() == null || request.getExlabFile().isEmpty()) {
			info.put("status", "2");
			info.put("message", "Please select file");
			return info;
		}

		String extention = FilenameUtils.getExtension(request.getExlabFile().getOriginalFilename());
		if (extention.equalsIgnoreCase("xls") || extention.equalsIgnoreCase("xlsx")) {
			Map<String, Object> result = readDataFromExcel1(request.getExlabFile(), request);
			return result;
		}
		info.put("status", "2");
		info.put("message", "File should be xls / xlsx  extention");
		return info;
	}

	private Map<String, Object> readDataFromExcel1(MultipartFile exlabFile, ExamAttendanceRequest request) {
		List<String> failureList = new ArrayList<String>();
		List<Object> successList = new ArrayList<Object>();
		List<Object> list = new ArrayList<Object>();
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Workbook workbook = getWorkBook(exlabFile);
			Sheet Sheet = workbook.getSheetAt(0);

			Optional<ProgrammeYear> programyear = super.programmeYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammeYear());
			if (!programyear.isPresent()) {
				info.put("status", "2");
				info.put("message", "ProgrammeYear not present");
				return info;
			}
			

			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!sem.isPresent()) {
				info.put("status", "2");
				info.put("message", " Semster not present");
				return info;
			}

			Optional<Colleges> col = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!col.isPresent()) {
				info.put("status", "2");
				info.put("message", "college id not present");
				return info;
			}

			Optional<Programmes> Prog = super.programme.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Prog.isPresent()) {
				info.put("status", "2");
				info.put("message", " Programe not present");
				return info;
			}
			Optional<AcademicYear> academic = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getAcademicYear());
			if (!Prog.isPresent()) {
				info.put("status", "2");
				info.put("message", " academic year not present");
				return info;
			}

			Optional<Courses> courses = super.courses.findByIdAndExIsDeleteAndExIsActive(request.getCourses(), false,
					true);
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<Department> department = super.department
					.findByIdAndExIsDeleteAndExIsActive(request.getDepartment(), false, true);
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "department  not present");
				return info;
			}

			List<RegistrationType> registration = super.registrationType
					.findByIdAndExIsDelete(request.getRegistrationType(), false);
			if (registration.size() <= 0) {
				info.put("status", "2");
				info.put("message", "RegistrationType id not present");
				return info;
			}

			User users;
			if (request.getUser() == null || request.getUser().equals("")) {
				users = null;
			} else {
				List<User> user = super.user.findByIdAndExIsDeleteAndExIsActive(request.getUser(), false, true);
				if (user.size() <= 0) {
					info.put("status", "2");
					info.put("message", "User id not present");
					return info;
				}

				users = user.get(0);

			}
			int updaterecord = 0;
			Boolean is_update = false;
			int rowIndex = 0;
			for (int rowNum = Sheet.getLastRowNum(); rowNum >= 0; rowNum--) {
				final Row row = Sheet.getRow(rowNum);
				if (row != null && row.getCell(0) != null) {
					if (row.getCell(0).toString() != "" && row.getCell(0).toString() != null) {
						rowIndex = rowNum;
						logger.info("?????????????Last non empty row????????????????" + rowIndex);
						break;
					}
				}
			}

			for (int rowNum = 1; rowNum < rowIndex + 1; rowNum++) {
				Row r = Sheet.getRow(rowNum);
				String temp = "";
				for (int cn = 0; cn < 5; cn++) {
					Cell c = r.getCell(cn, Row.RETURN_BLANK_AS_NULL);
					try {

						if (c == null) {
							// The spreadsheet is empty in this cell
							temp = temp + "#@&" + "NA";
						} else {
							// Do something useful with the cell's contents
							c.setCellType(Cell.CELL_TYPE_STRING);
							temp = temp + "#@&" + CommonHelper.getCellValue(c);
						}

					} catch (Exception e) {
						StringWriter errors = new StringWriter();
						e.printStackTrace(new PrintWriter(errors));
						logger.error("Exception  : " + errors.toString());
						// return "failed";
					}

				}
				String tempA[] = temp.split("#@&");
	            if (request.getExamAnnouncement()==null || request.getExamAnnouncement().equals("NA")) {
					
					return  migPracticaluExterupload(request , exlabFile);
					
					
				}
				Optional<ExamAnnouncement> examannouncement = super.examAnnouncement
						.findByExIsDeleteAndExIsActiveAndId(false, true, request.getExamAnnouncement());
				if (!examannouncement.isPresent()) {
					info.put("status", "2");
					info.put("message", "Examannouncement  not present");
					return info;
				}
				
				
				
				
				ExamBarcodes midMarks = new ExamBarcodes();
				Optional<Studentadmission> student = super.studentadmission
						.findByExIsDeleteAndExIsActiveAndExRollNo(false, true, tempA[1].trim());

				List<ExamBarcodes> midterm = super.exambarcode.findByExIsActiveAndExIsDeleteAndExRollNo(true, false,
						tempA[1].trim());

				Date date = new Date();
				Optional<ExamAttendance> ExamAttendance = super.examAttendance
						.findByExIsDeleteAndExIsActiveAndStudentadmissionExRollNoAndCollegesIdAndDegreeIdAndProgrammesIdAndExamAnnouncementIdAndCoursesId(
								false, true, tempA[1].trim(), request.getColleges(), request.getDegree(),
								request.getProgrammes(), request.getExamAnnouncement(), request.getCourses());

				if (!ExamAttendance.isPresent()) {
					failureList.add("Attendance not created for : " + tempA[1]);
					list.add(tempA[1]);
				} else {
					double exLabExperiment = super.commonHelper.getdoubleMarks(tempA[2]);
					if (midterm.size() >= 0) {
						System.out.println(">>>>>>>>>>..lab" + exLabExperiment);
						double exViva = super.commonHelper.getdoubleMarks(tempA[3]);

						Boolean is_present = false;
						if (tempA[4] == null || tempA[4].toString().trim().equals("")
								|| tempA[4].toString().equals("NA")) {
							is_present = false;
						} else {
							int val = Integer.parseInt(tempA[4]);
							if (val == 1) {
								is_present = true;
							} else {
								is_present = false;
							}
						}

						is_update = true;
						int ret = super.ExamBarcodes.UpdatelabExperiment(exLabExperiment, exViva, date,
								degree.get().getId(), sem.get().getId(), programyear.get().getId(), Prog.get().getId(),
								courses.get().getId(), tempA[1], true, false, registration.get(0).getId(), users,
								request.getExamAnnouncement(), is_present);
						System.out.println("ret$" + ret);
						if (ret == 1) {
							successList.add(ret);
							excellog.info("Record Update for :" + tempA[1]);

							// list.add(row.getCell(1).getStringCellValue());

						} else {
							failureList.add(tempA[1].trim() + "Record Not Update for");

							list.add(ret);
						}

					}
				}
			}
			info.put("status", "1");
			info.put("message", exlabFile.getOriginalFilename() + "Excel Uploaded Succesfully. ");
			info.put("success", successList.size() + " Records Uploaded Successfully.");
			System.out.println("ADWE$" + successList.size());

			info.put("failure", list.size() + " Records Not Inserted ");
			excellog.info("Data Not Inserted  : " + failureList);
			excellog.info("sent Response: " + info);

			return info;
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;

		}

	}

	private Map<String, Object> migPracticaluExterupload(ExamAttendanceRequest request, MultipartFile exlabFile) {
		
		List<String> failureList = new ArrayList<String>();
		List<Object> successList = new ArrayList<Object>();
		List<Object> list = new ArrayList<Object>();
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Workbook workbook = getWorkBook(exlabFile);
			Sheet Sheet = workbook.getSheetAt(0);

			Optional<ProgrammeYear> programyear = super.programmeYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammeYear());
			if (!programyear.isPresent()) {
				info.put("status", "2");
				info.put("message", "ProgrammeYear not present");
				return info;
			}
			

			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!sem.isPresent()) {
				info.put("status", "2");
				info.put("message", " Semster not present");
				return info;
			}

			Optional<Colleges> col = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!col.isPresent()) {
				info.put("status", "2");
				info.put("message", "college id not present");
				return info;
			}

			Optional<Programmes> Prog = super.programme.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!Prog.isPresent()) {
				info.put("status", "2");
				info.put("message", " Programe not present");
				return info;
			}
			Optional<AcademicYear> academic = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getAcademicYear());
			if (!Prog.isPresent()) {
				info.put("status", "2");
				info.put("message", " academic year not present");
				return info;
			}

			Optional<Courses> courses = super.courses.findByIdAndExIsDeleteAndExIsActive(request.getCourses(), false,
					true);
			if (!courses.isPresent()) {
				info.put("status", "2");
				info.put("message", "courses not present");
				return info;
			}
			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<Department> department = super.department
					.findByIdAndExIsDeleteAndExIsActive(request.getDepartment(), false, true);
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "department  not present");
				return info;
			}

			List<RegistrationType> registration = super.registrationType
					.findByIdAndExIsDelete(request.getRegistrationType(), false);
			if (registration.size() <= 0) {
				info.put("status", "2");
				info.put("message", "RegistrationType id not present");
				return info;
			}

			User users;
			if (request.getUser() == null || request.getUser().equals("")) {
				users = null;
			} else {
				List<User> user = super.user.findByIdAndExIsDeleteAndExIsActive(request.getUser(), false, true);
				if (user.size() <= 0) {
					info.put("status", "2");
					info.put("message", "User id not present");
					return info;
				}

				users = user.get(0);

			}
			int updaterecord = 0;
			Boolean is_update = false;
			int rowIndex = 0;
			for (int rowNum = Sheet.getLastRowNum(); rowNum >= 0; rowNum--) {
				final Row row = Sheet.getRow(rowNum);
				if (row != null && row.getCell(0) != null) {
					if (row.getCell(0).toString() != "" && row.getCell(0).toString() != null) {
						rowIndex = rowNum;
						logger.info("?????????????Last non empty row????????????????" + rowIndex);
						break;
					}
				}
			}

			for (int rowNum = 1; rowNum < rowIndex + 1; rowNum++) {
				Row r = Sheet.getRow(rowNum);
				String temp = "";
				for (int cn = 0; cn < 5; cn++) {
					Cell c = r.getCell(cn, Row.RETURN_BLANK_AS_NULL);
					try {

						if (c == null) {
							// The spreadsheet is empty in this cell
							temp = temp + "#@&" + "NA";
						} else {
							// Do something useful with the cell's contents
							c.setCellType(Cell.CELL_TYPE_STRING);
							temp = temp + "#@&" + CommonHelper.getCellValue(c);
						}

					} catch (Exception e) {
						StringWriter errors = new StringWriter();
						e.printStackTrace(new PrintWriter(errors));
						logger.error("Exception  : " + errors.toString());
						// return "failed";
					}

				}
				String tempA[] = temp.split("#@&");
	       
				
				
				
				ExamBarcodes midMarks = new ExamBarcodes();
				
				Optional<Studentadmission> student = super.studentadmission
						.findByExIsDeleteAndExIsActiveAndExRollNo(false, true, tempA[1].trim());

				if (student.isPresent()) {
				
				List<ExamBarcodes> ExamAttendance = super.exambarcode
						.findByExIsDeleteAndExIsActiveAndStudentadmissionExRollNoAndCollegesIdAndDegreeIdAndProgrammesIdAndCoursesIdAndAcademicYearIdAndDepartmentId(
								false, true, tempA[1].trim(), request.getColleges(), request.getDegree(),
								request.getProgrammes(), request.getCourses(),request.getAcademicYear(),request.getDepartment());
                Date date =new Date();
				if (ExamAttendance.size()<=0) {
					double exLabExperiment = super.commonHelper.getdoubleMarks(tempA[2]);
					System.out.println(">>>>>>>>>>..lab" + exLabExperiment);
					double exViva = super.commonHelper.getdoubleMarks(tempA[3]);

					Boolean is_present = false;
					if (tempA[4] == null || tempA[4].toString().trim().equals("")
							|| tempA[4].toString().equals("NA")) {
						is_present = false;
					} else {
						int val = Integer.parseInt(tempA[4]);
						if (val == 1) {
							is_present = true;
						} else {
							is_present = false;
						}
					}

					
					
					
					ExamBarcodes exambarcodes = new ExamBarcodes();
					exambarcodes.setExCreateDate(date);
					exambarcodes.setAcademicYear(academic.get());
					exambarcodes.setRegistrationType(registration.get(0));
					exambarcodes.setCourses(courses.get());
					exambarcodes.setColleges(col.get());
					exambarcodes.setDepartment(department.get());
					exambarcodes.setDegree(degree.get());
					exambarcodes.setProgrammes(Prog.get());
					exambarcodes.setSemester(sem.get());
					exambarcodes.setStudentadmission(student.get());
					exambarcodes.setProgrammeYear(programyear.get());
					exambarcodes.setExTimeLimit(null);
					exambarcodes.setExBarcode(null);
					exambarcodes.setExTimeTaken(null);
					exambarcodes.setExIsActive(true);
					exambarcodes.setExIsDelete(false);
					exambarcodes.setExRollNo(tempA[1].trim());
					exambarcodes.setExAnsBookletPath(null);
					exambarcodes.setExEvaluatedPath(null);
					exambarcodes.setExamAnnouncement(null);
					exambarcodes.setExLabExperiment(exLabExperiment);
					exambarcodes.setExIsPracticalAttendance(is_present);
					exambarcodes.setExViva(exViva);
					
					super.ExamBarcodes.save(exambarcodes);
					successList.add(exambarcodes);

					
				} else {
					double exLabExperiment = super.commonHelper.getdoubleMarks(tempA[2]);
						System.out.println(">>>>>>>>>>..lab" + exLabExperiment);
						double exViva = super.commonHelper.getdoubleMarks(tempA[3]);

						Boolean is_present = false;
						if (tempA[4] == null || tempA[4].toString().trim().equals("")
								|| tempA[4].toString().equals("NA")) {
							is_present = false;
						} else {
							int val = Integer.parseInt(tempA[4]);
							if (val == 1) {
								is_present = true;
							} else {
								is_present = false;
							}
						}
			is_update = true;
						int ret = super.ExamBarcodes.UpdatelabExperiment(exLabExperiment, exViva, date,
								degree.get().getId(), sem.get().getId(), programyear.get().getId(), Prog.get().getId(),
								courses.get().getId(), tempA[1], true, false, registration.get(0).getId(), users,
								request.getExamAnnouncement(), is_present);
						System.out.println("ret$" + ret);
						if (ret == 1) {
							successList.add(ret);
							excellog.info("Record Update for :" + tempA[1]);

							// list.add(row.getCell(1).getStringCellValue());

						} else {
							failureList.add(tempA[1].trim() + "Record Not Update for");

							list.add(ret);
						}
					}
				}
			}
			info.put("status", "1");
			info.put("message", exlabFile.getOriginalFilename() + "Excel Uploaded Succesfully. ");
			info.put("success", successList.size() + " Records Uploaded Successfully.");
			System.out.println("ADWE$" + successList.size());

			info.put("failure", list.size() + " Records Not Inserted ");
			excellog.info("Data Not Inserted  : " + failureList);
			excellog.info("sent Response: " + info);

			return info;
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;

		}

	}
	
	@Override
	public Map<String, Object> uploadGradePoint(MultipartFile exGradePointFile, Long user) {
		Map<String, Object> info = new LinkedHashMap<>();
		if (exGradePointFile == null || exGradePointFile.isEmpty()) {
			info.put("status", "2");
			info.put("message", "Please select file");
			return info;
		}

		String extention = FilenameUtils.getExtension(exGradePointFile.getOriginalFilename());
		if (extention.equalsIgnoreCase("xls") || extention.equalsIgnoreCase("xlsx")) {
			Map<String, Object> result = readDataFromGradePointExcel(exGradePointFile, user);
			System.out.println("Qread the data" + result);
			return result;
		}
		info.put("status", "2");
		info.put("message", "File should be xls / xlsx extention");
		return info;
	}

	private Map<String, Object> readDataFromGradePointExcel(MultipartFile exGradePointFile, Long user) {

		List<String> failureList = new ArrayList<String>();
		List<String> successList = new ArrayList<String>();
		List<Object> list = new ArrayList<Object>();
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Workbook workbook = getWorkBook(exGradePointFile);
			Sheet Sheet = workbook.getSheetAt(0);

			Iterator<Row> rows = Sheet.iterator();
			rows.next();

			for (int rowNum = 1; rowNum < Sheet.getLastRowNum() + 1; rowNum++) {
				Row r = Sheet.getRow(rowNum);
				String temp = "";
				for (int cn = 0; cn < 14; cn++) {

					Cell c = r.getCell(cn, Row.RETURN_BLANK_AS_NULL);

					try {
						if (c == null) {
							// The spreadsheet is empty in this cell
							temp = temp + "#@&" + "NA";
						} else {
							// Do something useful with the cell's contents
							c.setCellType(Cell.CELL_TYPE_STRING);
							temp = temp + "#@&" + super.commonValidations.getCellValue(c);
							System.out.println(">>>>>>>>>req>>>>" + temp);

						}

					} catch (Exception e) {
						StringWriter errors = new StringWriter();
						e.printStackTrace(new PrintWriter(errors));
						e.printStackTrace();
						logger.error("Exception  : " + errors.toString());
						// return "failed";
					}
				}
				String tempA[] = temp.split("#@&");

				User userresult = null;
				String ExIsReGenerated = "Generated";
				if (user == null || user.equals("")) {
					userresult = null;
				} else {
					List<User> users = super.user.findByIdAndExIsDeleteAndExIsActive(user, false, true);
					if (users.size() <= 0) {
						info.put("status", "2");
						info.put("message", "User id not present");
						return info;
					}
					userresult = users.get(0);
				}
				Optional<Colleges> colleges = super.colleges
						.findByExIdentifierAndExIsDeleteAndExIsActive(tempA[1].trim(), false, true);
				Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndExName(false, true,
						tempA[2].trim());
				Optional<Programmes> programs = super.programmes.findByExIsDeleteAndExIsActiveAndExIdentifier(false,
						true, tempA[3].trim());
				Optional<AcademicYear> academicYearid = super.academicYear
						.findByExIsDeleteAndExIsActiveAndExIdentifier(false, true, tempA[5].trim());
				Optional<ProgrammeYear> programyear = super.programmeYear.findByExNameAndExIsActiveAndExIsDelete(tempA[6].trim(), true, false);
				Optional<Semster> sem = super.semester.findByExNameAndExIsActiveAndExIsDelete(tempA[7].trim(), true,
						false);
				//Optional<Courses> course = super.courses.findByExIsDeleteAndExIsActiveAndExCoursesCodeAndAcademicYearIdAndProgrammesIdAndSemesterIdAndDepartmentId(false, true,tempA[8].trim() , academicYearid.get().getId() , programs.get().getId() , sem.get().getId());
			
				Optional<Studentadmission> student = super.studentadmission
						.findByExIsDeleteAndExIsActiveAndExRollNo(false, true, tempA[9].trim());
				Optional<RegistrationType> regType = super.registrationType
						.findByExIsDeleteAndExIsActiveAndExName(false, true, tempA[14].trim());

				if (!degree.isPresent()) {
					failureList.add(tempA[2].trim() + " : Degree name not present:");
					list.add(tempA[1]);
				} else if (!regType.isPresent()) {
					failureList.add(tempA[14].trim() + " : RegistrationType name not present:");
					list.add(tempA[1]);
				} else if (!colleges.isPresent()) {
					failureList.add(tempA[1].trim() + " : College not present:");
					list.add(tempA[1]);
				} else if (!programs.isPresent()) {
					failureList.add(tempA[3].trim() + " : Programmes Name not present:");
					list.add(tempA[1]);
				} else if (!academicYearid.isPresent()) {
					failureList.add(tempA[5].trim() + " : Academic Year not present:");
					list.add(tempA[1]);
				} else if (!programyear.isPresent()) {
					failureList.add(tempA[6].trim() + " : ProgrameYear  not present:");
					list.add(tempA[1]);
				//} else if (!course.isPresent()) {
					//failureList.add(tempA[8].trim() + " : course code not present:");
					//list.add(tempA[1]);
				} else if (!sem.isPresent()) {
					failureList.add(tempA[7].trim() + " : Semester  not present:");
					list.add(tempA[1]);
				} else if (!student.isPresent()) {
					failureList.add(tempA[9].trim() + " : student  not present:");
					list.add(tempA[1]);
				}

				else {
					Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndExIdentifierAndDegreeIdAndProgrammesId(false, true, tempA[4].trim(),degree.get().getId() , programs.get().getId());
					if (!department.isPresent()) {
						failureList.add(tempA[4].trim() + " : Department Identifier not present of particular Programe");
						list.add(tempA[1]);
					} else {
						Optional<Courses> res = super.courses.findByExIsDeleteAndExIsActiveAndExCoursesCodeAndAcademicYearIdAndProgrammesIdAndSemesterIdAndDepartmentId(
								false, true,tempA[8].trim() , academicYearid.get().getId() , programs.get().getId() , sem.get().getId(), department.get().getId());
						if (!res.isPresent()) {
							failureList.add(tempA[8].trim() + " :Courses  not present of particular Programe");
							list.add(tempA[1]);
						} else {
							List<GradeReport> gradereport = super.gradeReport
									.findByExRollNoAndCollegesIdAndCoursesIdAndProgrammesIdAndSemesterIdAndProgrammeYearIdAndDepartmentIdAndDegreeId(
											student.get().getExRollNo(), colleges.get().getId(), res.get().getId(),
											programs.get().getId(), sem.get().getId(), programyear.get().getId(),
											department.get().getId(), degree.get().getId());
							if (gradereport.size() <= 0) {

								
								Date date = new Date();
								GradeReport GradeReport = new GradeReport();
								GradeReport.setColleges(colleges.get());
								GradeReport.setDegree(degree.get());
								GradeReport.setProgrammes(programs.get());
								GradeReport.setDepartment(department.get());

								GradeReport.setExamAnnouncement(null);
								GradeReport.setAcademicYear(academicYearid.get());
								GradeReport.setProgrammeYear(programyear.get());
								GradeReport.setSemester(sem.get());
								GradeReport.setRegistrationType(regType.get());
								GradeReport.setExRollNo(student.get().getExRollNo());
								GradeReport.setStudentadmission(student.get());
								GradeReport.setSection(student.get().getSection());

								GradeReport.setCourses(res.get());
								GradeReport.setExCoursesCode(res.get().getExCoursesCode());
								GradeReport.setExCoursesName(res.get().getExName());
								GradeReport.setExCreateDate(date);

								GradeReport.setUser(userresult);
								GradeReport.setExIsActive(true);
								GradeReport.setExIsDelete(false);
								GradeReport.setExGrandTotal(Double.parseDouble(tempA[10].trim()));
								GradeReport.setExLetterGrades(tempA[12].trim());
								GradeReport.setExGradePoint(Double.parseDouble(tempA[11].trim()));
								GradeReport.setExRemark(tempA[13].trim());
								GradeReport.setExCoursesStatus(tempA[13].trim().equalsIgnoreCase("Pass") ? 1 : 0);
								GradeReport.setExCreditPoint(GradeReport.getExGradePoint()
										* (res.get().getCreditHours().getExCreditHourPractical()
												+ res.get().getCreditHours().getExCreditHourLecture()));
								super.gradeReport.save(GradeReport);

								successList.add("Success" + GradeReport);
							} else {
								Date date = new Date();

								Double creditpoint = Double.parseDouble(tempA[11].trim())
										* (res.get().getCreditHours().getExCreditHourPractical()
												+ res.get().getCreditHours().getExCreditHourLecture());

								Integer course_status = tempA[13].trim().equalsIgnoreCase("Pass") ? 1 : 0;

								int retval = super.gradeReport.updateexcelGradeReport(course_status, tempA[12].trim(),
										tempA[13].trim(), Double.parseDouble(tempA[11].trim()),
										Double.parseDouble(tempA[10].trim()), date, creditpoint, sem.get().getId(),
										programs.get().getId(), res.get().getId(), student.get().getExRollNo(),
										colleges.get().getId(), userresult, department.get().getId(),
										degree.get().getId(), programyear.get().getId(), academicYearid.get().getId());
								logger.info("Grade Report updated for  " + student.get().getExRollNo());
								successList.add("Success" + retval);

							}

						}

					}

				}

			}
			info.put("status", "1");
			info.put("message", exGradePointFile.getOriginalFilename() + "Excel Uploaded Succesfully ");
			info.put("success", successList.size() + " Records Inserted Successfully");
			info.put("failure", list.size() + " Records Not Inserted "); //
			excellog.info("Data Not Inserted : " + failureList);
			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			e.printStackTrace();
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> uploadMagrationExcel(MultipartFile studentProfilefile) {
		// TODO Auto-generated method stub
		Map<String, Object> info = new LinkedHashMap<>();
		if (studentProfilefile == null || studentProfilefile.isEmpty()) {
			info.put("status", "2");
			info.put("message", "Please select file");
			return info;
		}
		String extention = FilenameUtils.getExtension(studentProfilefile.getOriginalFilename());
		if (extention.equalsIgnoreCase("xls") || extention.equalsIgnoreCase("xlsx")) {
			Map<String, Object> result = readMagratnExcel(studentProfilefile);
			return result;
		}
		info.put("status", "2");
		info.put("message", "File should be xls / xlsx extention");
		return info;
	}

	private Map<String, Object> readMagratnExcel(MultipartFile studentProfilefile) {
		List<String> failureList = new ArrayList<String>();
		List<String> successList = new ArrayList<String>();
		List<Object> list = new ArrayList<Object>();
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Workbook workbook = getWorkBook(studentProfilefile);
			Sheet firstSheet = workbook.getSheetAt(0);			
			Iterator<Row> rows = firstSheet.iterator();
			rows.next();
					Date  date = new Date();
			for (int rowNum = 1; rowNum < firstSheet.getLastRowNum() + 1; rowNum++) {
				Row r = firstSheet.getRow(rowNum);
				String temp = "";
				for (int cn = 0; cn < 53; cn++) {
					Cell c = r.getCell(cn, Row.RETURN_BLANK_AS_NULL);
					try {
						if (c == null) {
							// The spreadsheet is empty in this cell
							temp = temp + "#@&" + "NA";
						} else {
							// Do something useful with the cell's contents
							c.setCellType(Cell.CELL_TYPE_STRING);
							temp = temp + "#@&" + super.commonValidations.getCellValue(c);
							System.out.println(">>>>>>>>>req>>>>" + temp);

						}

					} catch (Exception e) {
						StringWriter errors = new StringWriter();
						e.printStackTrace(new PrintWriter(errors));
						e.printStackTrace();
						logger.error("Exception  : " + errors.toString());
						// return "failed";
					}
				}
				String tempA[] = temp.split("#@&");
				System.out.println(">>>>>>>>consloe>>>>" + temp);
				System.out.println(">>sys>>" + tempA.length);

				// Date date = super.commonValidations.checkDate(tempA[].toString());
				// Optional<ExamAnnouncement> exam = null;
				if (tempA.length < 55 && tempA.length > 1) {
					for (int i = 0; i < tempA.length; i++) {
						if (tempA[i].equals("NA")) {
							tempA[i] = tempA[i].replace("NA", "");
						}
					}
					Optional<Colleges> collage = super.colleges.findByExIdentifierAndExIsDeleteAndExIsActive(tempA[1].trim(),false, true);
					
					Optional<Degree> degree = super.degree.findByExNameAndExIsDeleteAndExIsActive(tempA[2].trim(),false, true);
					Optional<Programmes> programs = super.programmes.findByExIdentifierAndExIsDeleteAndExIsActive(tempA[3].trim(), false, true);
					
					System.out.println("Degree Id" + degree.get().getId());
					System.out.println("Degree Id" + programs.get().getId());
					
					Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndExIdentifierAndDegreeIdAndProgrammesId(false, true, tempA[4].trim() , degree.get().getId() , programs.get().getId());
					Optional<AcademicYear> academicYearid = super.academicYear.findByExIsDeleteAndExIsActiveAndExIdentifier(false, true, tempA[5].trim());
					Optional<ProgrammeYear> programyear = super.programmeYear.findByExNameAndExIsActiveAndExIsDelete(tempA[6].trim(), true, false);
					Optional<Semster> sem = super.semester.findByExNameAndExIsActiveAndExIsDelete(tempA[7].trim(), true,false);
					
					Optional<RegistrationType> regType = super.registrationType.findByExIsDeleteAndExIsActiveAndExName(false, true, tempA[8].trim());
					Optional<Studentadmission> student = super.studentadmission.findByExIsDeleteAndExIsActiveAndExRollNo(false, true, tempA[10].trim());
					Optional<Batch> batch = super.batch.findByExNameAndExIsDeleteAndExIsActive(tempA[18].trim() ,false, true);
					
					Optional<Courses> course = null;
					// course = super.courses.findByExIsDeleteAndExIsActiveAndExCoursesCodeAndBatchIdAndSemesterIdAndProgrammesIdAndDepartmentId(false, true,tempA[9].trim() , batch.get().getId() , sem.get().getId(),programs.get().getId() , department.get().getId());
				
					System.out.println("Nameofsubject " +tempA[9].trim());
					System.out.println("Batch " +batch.get().getId());
					System.out.println("Semester " +sem.get().getId());
					System.out.println("programmes " +programs.get().getId());
					System.out.println("department " +department.get().getId());
					System.out.println("Coursecode " +tempA[19].trim());
					
					
					 course = super.courses.findByExIsDeleteAndExIsActiveAndExNameAndBatchIdAndSemesterIdAndProgrammesIdAndDepartmentIdAndExCoursesCode(false, true,tempA[9].trim() , batch.get().getId() , sem.get().getId(),programs.get().getId() , department.get().getId() , tempA[19].trim());
						
					 if (!course.isPresent()) {
						failureList.add(tempA[9].trim() + " : course code not present:");
						list.add(tempA[1]);
					}
					 
					 else if (!batch.isPresent()) {
							failureList.add(tempA[18].trim() + " : batch not present:");
							list.add(tempA[1]);
						}

					else if (!collage.isPresent()) {
						failureList.add(tempA[1].trim() + "Colleges Name not present");
						list.add(tempA[1].trim());
					}
					 
					else if (!department.isPresent()) {
						failureList.add(tempA[1].trim() + "department Name not present");
						list.add(tempA[1].trim());
					}
					 
					else if (!sem.isPresent()) {
						failureList.add(tempA[1].trim() + "sem Name not present");
						list.add(tempA[1].trim());
					}
					 
					else if (!programyear.isPresent()) {
						failureList.add(tempA[1].trim() + "programyear Name not present");
						list.add(tempA[1].trim());
					}

					else if (!degree.isPresent()) {
						failureList.add(tempA[2].trim() + "Degree Name not present");
						list.add(tempA[1].trim());

					} else if (!regType.isPresent()) {
						failureList.add(tempA[3].trim() + "RegistrationType not present");
						list.add(tempA[1].trim());

					}
					else if (!programs.isPresent()) {
						failureList.add(tempA[4].trim() + "Programme Identifier  not present");
						list.add(tempA[1].trim());

					}  else if (!academicYearid.isPresent()) {
						failureList.add(tempA[9].trim() + "AcademicYear Name  not present");
						list.add(tempA[1].trim());

					} else if (!student.isPresent()) {
						failureList.add(tempA[9].trim() + " : student  not present:");
						list.add(tempA[1]);
					} 
					 else{
						 MidTermMarks midMarks = new MidTermMarks();
						// nsert nternal cmnent marks 
						 logger.info(student.get().getExRollNo()+" :student");
							List<MidTermMarks> midterm = super.midtermmarksMarks.findByStudentadmissionIdAndCoursesIdAndExIsActiveAndExIsDelete(student.get().getId(), course.get().getId(), true,false);
							if (midterm.size() <= 0) {
								midMarks.setCourses(course.get());								
								midMarks.setAcademicYear(academicYearid.get());
								midMarks.setProgrammes(programs.get());
								midMarks.setColleges(collage.get());
								midMarks.setDegree(degree.get());
								midMarks.setDepartment(department.get());
								midMarks.setStaff(null);
								midMarks.setSection(student.get().getSection());
								midMarks.setExRollNo(student.get().getExRollNo());
								midMarks.setExCreateDate(date);
								midMarks.setSemester(sem.get());
								midMarks.setStream(course.get().getStream());
								midMarks.setExamAnnouncement(null);
								midMarks.setStudentadmission(student.get());
								midMarks.setProgrammeYear(programyear.get());
								midMarks.setExIsActive(true);
								midMarks.setExIsDelete(false);								
								midMarks.setExAssignmentMarks(getvalue(tempA[13].trim()));
								midMarks.setExMidTermMarks(getvalue(tempA[12].trim()));
								midMarks.setExQuizMarks((getvalue(tempA[14].trim())+getvalue(tempA[15].trim())));
								midMarks.setExAttendenceMarks(getvalue(tempA[16].trim()));	
								midMarks.setExPracticalRecordMarks(0.0);
								midMarks.setExPracticalLearning(0.0);
								super.midtermmarksMarks.save(midMarks);
								

							} else {
								// 
							}
							
							List<ExamBarcodes> ExamAttendance = super.exambarcode.findByExIsDeleteAndExIsActiveAndStudentadmissionExRollNoAndCollegesIdAndDegreeIdAndProgrammesIdAndCoursesIdAndAcademicYearIdAndDepartmentIdAndRegistrationTypeId(false, true, student.get().getExRollNo(), collage.get().getId(), degree.get().getId(),programs.get().getId(), course.get().getId(),academicYearid.get().getId(),department.get().getId() ,regType.get().getId());
				
							if (ExamAttendance.size()<=0) {
								Boolean ex_is_evaluated = true;								
								ExamBarcodes exambarcodes = new ExamBarcodes();
								exambarcodes.setExCreateDate(date);
								exambarcodes.setAcademicYear(academicYearid.get());
								exambarcodes.setRegistrationType(regType.get());
								exambarcodes.setCourses(course.get());
								exambarcodes.setColleges(collage.get());
								exambarcodes.setDepartment(department.get());
								exambarcodes.setDegree(degree.get());
								exambarcodes.setProgrammes(programs.get());
								exambarcodes.setSemester(sem.get());
								exambarcodes.setStudentadmission(student.get());
								exambarcodes.setProgrammeYear(programyear.get());
								exambarcodes.setExTimeLimit(null);
								exambarcodes.setExBarcode(null);
								exambarcodes.setExTimeTaken(null);
								exambarcodes.setExIsActive(true);
								exambarcodes.setExIsDelete(false);
								exambarcodes.setExRollNo(student.get().getExRollNo());
								exambarcodes.setExAnsBookletPath(null);
								exambarcodes.setExEvaluatedPath(null);
								exambarcodes.setExamAnnouncement(null);
								exambarcodes.setExEndTermMarks(getvalue(tempA[11].trim()));
								exambarcodes.setExLabExperiment(getvalue(tempA[17].trim()));
								exambarcodes.setExIsPracticalAttendance(true);
								exambarcodes.setExIsAttendance(true);
								exambarcodes.setExViva(0.0);
								super.ExamBarcodes.save(exambarcodes);
								successList.add("Success" + midMarks);
								
							}else {
								excellog.info(course.get().getExCoursesCode()+" not updated" +student.get().getExRollNo());
							}														
					 }		
				}
			}
			info.put("status", "1");
			info.put("message", studentProfilefile.getOriginalFilename() + "Excel Uploaded Succesfully ");
			info.put("success", successList.size() + " Records Inserted Successfully");
			info.put("failure", list.size() + " Records Not Inserted ");
			excellog.info("Data Not Inserted : " + failureList);
			return info;

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			e.printStackTrace();
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}
	}

		private double getvalue(String marks) {			
			    try {
			        double number = Double.parseDouble(marks);
			        return number;
			    } catch (NumberFormatException nfe) {
			        return 0.0;
			    }
		}

		@Override
		public Map<String, Object> uploadModerationExcel(MultipartFile excel) {
			// TODO Auto-generated method stub
			Map<String, Object> info = new LinkedHashMap<>();
			if (excel == null || excel.isEmpty()) {
				info.put("status", "2");
				info.put("message", "Please select file");
				return info;
			}
			String extention = FilenameUtils.getExtension(excel.getOriginalFilename());
			if (extention.equalsIgnoreCase("xls") || extention.equalsIgnoreCase("xlsx")) {
				Map<String, Object> result = readModerationExcel(excel);
				return result;
			}
			info.put("status", "2");
			info.put("message", "File should be xls / xlsx extention");
			return info;
		}

		
		private Map<String, Object> readModerationExcel(MultipartFile studentProfilefile) {
			List<String> failureList = new ArrayList<String>();
			List<String> successList = new ArrayList<String>();
			List<Object> list = new ArrayList<Object>();
			Map<String, Object> info = new LinkedHashMap<>();
			try {
				Workbook workbook = getWorkBook(studentProfilefile);
				Sheet firstSheet = workbook.getSheetAt(0);			
				Iterator<Row> rows = firstSheet.iterator();
				rows.next();
						Date  date = new Date();
				for (int rowNum = 1; rowNum < firstSheet.getLastRowNum() + 1; rowNum++) {
					Row r = firstSheet.getRow(rowNum);
					String temp = "";
					for (int cn = 0; cn < 53; cn++) {
						Cell c = r.getCell(cn, Row.RETURN_BLANK_AS_NULL);
						try {
							if (c == null) {
								// The spreadsheet is empty in this cell
								temp = temp + "#@&" + "NA";
							} else {
								// Do something useful with the cell's contents
								c.setCellType(Cell.CELL_TYPE_STRING);
								temp = temp + "#@&" + super.commonValidations.getCellValue(c);
								System.out.println(">>>>>>>>>req>>>>" + temp);

							}

						} catch (Exception e) {
							StringWriter errors = new StringWriter();
							e.printStackTrace(new PrintWriter(errors));
							e.printStackTrace();
							logger.error("Exception  : " + errors.toString());
							// return "failed";
						}
					}
					String tempA[] = temp.split("#@&");
					System.out.println(">>>>>>>>consloe>>>>" + temp);
					System.out.println(">>sys>>" + tempA.length);

					// Date date = super.commonValidations.checkDate(tempA[].toString());
					// Optional<ExamAnnouncement> exam = null;
					if (tempA.length < 55 && tempA.length > 1) {
						for (int i = 0; i < tempA.length; i++) {
							if (tempA[i].equals("NA")) {
								tempA[i] = tempA[i].replace("NA", "");
							}
						}
						Optional<Colleges> collage = super.colleges.findByExIdentifierAndExIsDeleteAndExIsActive(tempA[1].trim(),false, true);
						Optional<Degree> degree = super.degree.findByExNameAndExIsDeleteAndExIsActive(tempA[2].trim(),false, true);
						Optional<Programmes> programs = super.programmes.findByExIdentifierAndExIsDeleteAndExIsActive(tempA[3].trim(), false, true);
						Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndExIdentifier(false, true, tempA[4].trim());
						Optional<AcademicYear> academicYearid = super.academicYear.findByExIsDeleteAndExIsActiveAndExIdentifier(false, true, tempA[5].trim());
						Optional<ProgrammeYear> programyear = super.programmeYear.findByExNameAndExIsActiveAndExIsDelete(tempA[6].trim(), true, false);
						Optional<Semster> sem = super.semester.findByExNameAndExIsActiveAndExIsDelete(tempA[7].trim(), true,false);
						Optional<Courses> course = super.courses.findByExIsDeleteAndExIsActiveAndExCoursesCodeAndAcademicYearIdAndProgrammesIdAndSemesterIdAndDepartmentId(false, true,tempA[9].trim() , academicYearid.get().getId() , programs.get().getId() , sem.get().getId(),department.get().getId());
						Optional<RegistrationType> regType = super.registrationType.findByExIsDeleteAndExIsActiveAndExName(false, true, tempA[8].trim());
						Optional<Studentadmission> student = super.studentadmission.findByExIsDeleteAndExIsActiveAndExRollNo(false, true, tempA[10].trim());
						
						
						 if (!course.isPresent()) {
							failureList.add(tempA[9].trim() + " : course code not present:");
							list.add(tempA[1]);
						}

						else if (!collage.isPresent()) {
							failureList.add(tempA[1].trim() + "Colleges Name not present");
							list.add(tempA[1].trim());
						}
						 
						else if (!department.isPresent()) {
							failureList.add(tempA[1].trim() + "department Name not present");
							list.add(tempA[1].trim());
						}
						 
						else if (!sem.isPresent()) {
							failureList.add(tempA[1].trim() + "sem Name not present");
							list.add(tempA[1].trim());
						}
						 
						else if (!programyear.isPresent()) {
							failureList.add(tempA[1].trim() + "programyear Name not present");
							list.add(tempA[1].trim());
						}

						else if (!degree.isPresent()) {
							failureList.add(tempA[2].trim() + "Degree Name not present");
							list.add(tempA[1].trim());

						} else if (!regType.isPresent()) {
							failureList.add(tempA[3].trim() + "RegistrationType not present");
							list.add(tempA[1].trim());

						}
						else if (!programs.isPresent()) {
							failureList.add(tempA[4].trim() + "Programme Identifier  not present");
							list.add(tempA[1].trim());

						}  else if (!academicYearid.isPresent()) {
							failureList.add(tempA[9].trim() + "AcademicYear Name  not present");
							list.add(tempA[1].trim());

						} else if (!student.isPresent()) {
							failureList.add(tempA[9].trim() + " : student  not present:");
							list.add(tempA[1]);
						} 
						 else{
							List<ExamBarcodes> ExamAttendance = super.exambarcode
										.findByExIsDeleteAndExIsActiveAndStudentadmissionExRollNoAndCollegesIdAndDegreeIdAndProgrammesIdAndCoursesIdAndAcademicYearIdAndDepartmentIdAndRegistrationTypeId(
												false, true, student.get().getExRollNo(), collage.get().getId(), degree.get().getId(),
												programs.get().getId(), course.get().getId(),academicYearid.get().getId(),department.get().getId() ,regType.get().getId());
					
								if (ExamAttendance.size()<=0) {
																		
								}else {
									//update record 
									Double endtermsmarks = ExamAttendance.get(0).getExEndTermMarks();
									if (endtermsmarks != null && endtermsmarks !=0) {
										endtermsmarks = endtermsmarks+getvalue(tempA[11].trim());
										// 
										super.exambarcode.updeterModeration(endtermsmarks , ExamAttendance.get(0).getId());
									
										successList.add("Success");
									}
								}
								
								
								
						 }		
					}
				}
				info.put("status", "1");
				info.put("message", studentProfilefile.getOriginalFilename() + "Excel Uploaded Succesfully ");
				info.put("success", successList.size() + " Records Inserted Successfully");
				info.put("failure", list.size() + " Records Not Inserted ");
				excellog.info("Data Not Inserted : " + failureList);
				return info;

			} catch (Exception e) {
				logger.error("Exception occured" + e);
				StringWriter errors = new StringWriter();
				e.printStackTrace(new PrintWriter(errors));
				e.printStackTrace();
				logger.error(errors.toString());
				info.put("status", "0");
				info.put("message", "something went wrong");
				return info;
			}
		}

		@Override
		public Map<String, Object> downloadQuestionPapers(QuestionpaperRequest request) {
			List tasks = new ArrayList();
			Map<String, Object> info = new LinkedHashMap<>();	
			try {	
				Optional<QpSetterLog> examann = qplog.findById(request.getId());
				if (!examann.isPresent()) {
					info.put("status", "2");
					info.put("message", "id not present");
					return info;
				}
				
				String DIRECTORY = commonHelper.getSettingValue("DOCUMENT_PATH");
				
				File tempFile = new File(DIRECTORY+examann.get().getExUrl());
				System.out.println("ddddddcccccccccccddddddddd"+tempFile.exists());
				if(!tempFile.exists()) {
					info.put("status", "2");
					info.put("message", "QuestionPapers Not Present");
					return info;
				}			
				
					info.put("status", "1");
					info.put("url",examann.get().getExUrl());
					info.put("message", "Report successfully generated");
					return info;
							
			} catch (Exception e) {
				e.printStackTrace();
				logger.error("Exception occured" + e);
				StringWriter errors = new StringWriter();
				e.printStackTrace(new PrintWriter(errors));
				logger.error(errors.toString());
				info.put("status", "0");
				info.put("message", "Something went wrong");
				return info;
			}
		}

		@Override
		public Map<String, Object> uploadSemesterSerialNumberExcel(MultipartFile excel) {
			// TODO Auto-generated method stub
			Map<String, Object> info = new LinkedHashMap<>();
			if (excel == null || excel.isEmpty()) {
				info.put("status", "2");
				info.put("message", "Please select file");
				return info;
			}
			String extention = FilenameUtils.getExtension(excel.getOriginalFilename());
			if (extention.equalsIgnoreCase("xls") || extention.equalsIgnoreCase("xlsx")) {
				Map<String, Object> result = uploadSemesterSerialNumber(excel);
				return result;
			}
			info.put("status", "2");
			info.put("message", "File should be xls / xlsx extention");
			return info;
		}
		
		
		
		private Map<String, Object> uploadSemesterSerialNumber(MultipartFile studentProfilefile) {
			List<String> failureList = new ArrayList<String>();
			List<String> successList = new ArrayList<String>();
			List<Object> list = new ArrayList<Object>();
			Map<String, Object> info = new LinkedHashMap<>();
			try {
				Workbook workbook = getWorkBook(studentProfilefile);
				Sheet firstSheet = workbook.getSheetAt(0);			
				Iterator<Row> rows = firstSheet.iterator();
				rows.next();
						Date  date = new Date();
				for (int rowNum = 1; rowNum < firstSheet.getLastRowNum() + 1; rowNum++) {
					Row r = firstSheet.getRow(rowNum);
					String temp = "";
					for (int cn = 0; cn < 53; cn++) {
						Cell c = r.getCell(cn, Row.RETURN_BLANK_AS_NULL);
						try {
							if (c == null) {
								// The spreadsheet is empty in this cell
								temp = temp + "#@&" + "NA";
							} else {
								// Do something useful with the cell's contents
								c.setCellType(Cell.CELL_TYPE_STRING);
								temp = temp + "#@&" + super.commonValidations.getCellValue(c);
								System.out.println(">>>>>>>>>req>>>>" + temp);

							}

						} catch (Exception e) {
							StringWriter errors = new StringWriter();
							e.printStackTrace(new PrintWriter(errors));
							e.printStackTrace();
							logger.error("Exception  : " + errors.toString());
							// return "failed";
						}
					}
					String tempA[] = temp.split("#@&");
					System.out.println(">>>>>>>>consloe>>>>" + temp);
					System.out.println(">>sys>>" + tempA.length);

					// Date date = super.commonValidations.checkDate(tempA[].toString());
					// Optional<ExamAnnouncement> exam = null;
					if (tempA.length < 55 && tempA.length > 1) {
						for (int i = 0; i < tempA.length; i++) {
							if (tempA[i].equals("NA")) {
								tempA[i] = tempA[i].replace("NA", "");
							}
						}
						Optional<Colleges> collage = super.colleges.findByExIdentifierAndExIsDeleteAndExIsActive(tempA[1].trim(),false, true);
						Optional<Degree> degree = super.degree.findByExNameAndExIsDeleteAndExIsActive(tempA[2].trim(),false, true);
						Optional<Programmes> programs = super.programmes.findByExIdentifierAndExIsDeleteAndExIsActive(tempA[3].trim(), false, true);
						//Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndExIdentifier(false, true, tempA[4].trim());
						Optional<AcademicYear> academicYearid = super.academicYear.findByExIsDeleteAndExIsActiveAndExIdentifier(false, true, tempA[5].trim());
						Optional<ProgrammeYear> programyear = super.programmeYear.findByExNameAndExIsActiveAndExIsDelete(tempA[6].trim(), true, false);
						Optional<Semster> sem = super.semester.findByExNameAndExIsActiveAndExIsDelete(tempA[7].trim(), true,false);

						Optional<Studentadmission> student = super.studentadmission.findByExIsDeleteAndExIsActiveAndExRollNo(false, true, tempA[8].trim());
						
						if (!collage.isPresent()) {
							failureList.add(tempA[1].trim() + "Colleges Name not present");
							list.add(tempA[1].trim());
						}
						 
					/*
					 * else if (!department.isPresent()) { failureList.add(tempA[1].trim() +
					 * "department Name not present"); list.add(tempA[1].trim()); }
					 */
						 
						else if (!sem.isPresent()) {
							failureList.add(tempA[1].trim() + "sem Name not present");
							list.add(tempA[1].trim());
						}
						 
						else if (!programyear.isPresent()) {
							failureList.add(tempA[1].trim() + "programyear Name not present");
							list.add(tempA[1].trim());
						}

						else if (!degree.isPresent()) {
							failureList.add(tempA[2].trim() + "Degree Name not present");
							list.add(tempA[1].trim());

						} 
						else if (!programs.isPresent()) {
							failureList.add(tempA[4].trim() + "Programme Identifier  not present");
							list.add(tempA[1].trim());

						}  else if (!academicYearid.isPresent()) {
							failureList.add(tempA[9].trim() + "AcademicYear Name  not present");
							list.add(tempA[1].trim());

						} else if (!student.isPresent()) {
							failureList.add(tempA[9].trim() + " : student  not present:");
							list.add(tempA[1]);
						} 
						 else{
							 // Update semester progress report							 
							 int l = super.semesterProgressReport.updateSerialNumber(tempA[9].trim(), programs.get().getId(), sem.get().getId(), programyear.get().getId(), tempA[8].trim() ,tempA[10].trim());
							 
							 if(l >=0) {
								 successList.add("Success");
							 }else {
								 list.add(tempA[8].trim());
								 failureList.add(tempA[8].trim());
							 }
						 }		
					}
				}
				info.put("status", "1");
				info.put("message", studentProfilefile.getOriginalFilename() + "Excel Uploaded Succesfully ");
				info.put("success", successList.size() + " Records Updated Successfully");
				info.put("failure", list.size() + " Records Not Inserted ");
				excellog.info("Data Not Inserted : " + failureList);
				return info;

			} catch (Exception e) {
				logger.error("Exception occured" + e);
				StringWriter errors = new StringWriter();
				e.printStackTrace(new PrintWriter(errors));
				e.printStackTrace();
				logger.error(errors.toString());
				info.put("status", "0");
				info.put("message", "something went wrong");
				return info;
			}
		}

		@Override
		public Map<String, Object> uploadEvaluatorList(MultipartFile exEvaluatorFile, Long user) {
			Map<String, Object> info = new LinkedHashMap<>();
			if (exEvaluatorFile == null || exEvaluatorFile.isEmpty()) {
				info.put("status", "2");
				info.put("message", "Please select file");
				return info;
			}

			String extention = FilenameUtils.getExtension(exEvaluatorFile.getOriginalFilename());
			if (extention.equalsIgnoreCase("xls") || extention.equalsIgnoreCase("xlsx")) {
				Map<String, Object> result = readDataFromEvaluatorListExcel(exEvaluatorFile);
				return result;
			}
			info.put("status", "2");
			info.put("message", "File should be xls / xlsx extention");
			return info;
		}

		private Map<String, Object> readDataFromEvaluatorListExcel(MultipartFile exEvaluatorFile) {
			List<String> failureList = new ArrayList<String>();
			List<String> successList = new ArrayList<String>();
			List<Object> list = new ArrayList<Object>();
			Map<String, Object> info = new LinkedHashMap<>();
			try {
				Workbook workbook = getWorkBook(exEvaluatorFile);
				Sheet firstSheet = workbook.getSheetAt(0);

				Iterator<Row> rows = firstSheet.iterator();
				rows.next();

				for (int rowNum = 1; rowNum < firstSheet.getLastRowNum() + 1; rowNum++) {
					Row r = firstSheet.getRow(rowNum);
					String temp = "";
					for (int cn = 0; cn < 19; cn++) {
						Cell c = r.getCell(cn, Row.RETURN_BLANK_AS_NULL);
						try {
							if (c == null) {
								// The spreadsheet is empty in this cell
								temp = temp + "#@&" + "NA";
							} else {
								// Do something useful with the cell's contents
								c.setCellType(Cell.CELL_TYPE_STRING);
								temp = temp + "#@&" + super.commonValidations.getCellValue(c);
							}
							System.out.println(">>>>>>>>>>>>>>>>>>" + temp);

						} catch (Exception e) {
							StringWriter errors = new StringWriter();
							e.printStackTrace(new PrintWriter(errors));
							e.printStackTrace();
							logger.error("Exception  : " + errors.toString());
							// return "failed";
						}
					}
					String tempA[] = temp.split("#@&");

					// System.out.println(">DDDDDDDDDDDDDDD<<<<<<<<<<<<<<<<<<<<?>>>>>>>>>>"+temp);
					// Date dob = CommonHelper.checkDate(tempA[8].toString());
					// Date dateofjoining = CommonHelper.checkDate(tempA[11].toString());
			//		String EncrypPassword = EncryptionAndDecryption.getEncryptedString(tempA[10]);

					System.out.println(">>>>>>>>>>>>>>>>>>>>" + tempA);

					if (tempA.length < 19 && tempA.length > 1) {
						System.out.println(">>>>>>>>print>>>>" + tempA);

						for (int i = 0; i < tempA.length; i++) {
							if (tempA[i].equals("NA")) {
								tempA[i] = tempA[i].replace("NA", "");
							}
						}

					
						
						} else if (tempA[2].equals("NA") || tempA[2].isEmpty()) {
							failureList.add(tempA[2].trim() + "Name  not present");

							list.add(tempA[1].trim());

						} else if (tempA[3].equals("NA") || tempA[3].isEmpty()) {
							failureList.add(tempA[3].trim() + "Full Name  not present");

							list.add(tempA[1].trim());

						} else if (tempA[4].equals("NA") || tempA[4].isEmpty()) {
							failureList.add(tempA[4].trim() + "Designation  not present");
							list.add(tempA[1].trim());

					
				}else if (tempA[10].equals("NA") || tempA[10].isEmpty()) {
					failureList.add(tempA[10].trim() + "Contact No not present");
					list.add(tempA[1].trim());
				}else if (tempA[11].equals("NA") || tempA[11].isEmpty()) {
					failureList.add(tempA[11].trim() + "Email Id not present");
					list.add(tempA[1].trim());
				} else if (tempA[15].equals("NA") || tempA[15].isEmpty()) {
					failureList.add(tempA[15].trim() + "Username  not present");
					list.add(tempA[1].trim());

				} else if (tempA[16].equals("NA") || tempA[16].isEmpty()) {
					failureList.add(tempA[16].trim() + "Password  not present");
					list.add(tempA[1].trim());
				
					/*
					 * }else if (tempA[12].equals("NA") || tempA[12].isEmpty()) {
					 * failureList.add(tempA[12].trim() + "Name of the bank not present");
					 * list.add(tempA[1].trim()); }else if (tempA[13].equals("NA") ||
					 * tempA[13].isEmpty()) { failureList.add(tempA[13].trim() +
					 * "Account No not present"); list.add(tempA[1].trim()); }else if
					 * (tempA[14].equals("NA") || tempA[14].isEmpty()) {
					 * failureList.add(tempA[14].trim() + "IFSC code not present");
					 * list.add(tempA[1].trim());
					 */
				}
						else {

									Date date = new Date();
									SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
									String EncrypPassword = EncryptionAndDecryption
											.getEncryptedString(tempA[16].trim());
									
									EvaluatorList evaluator= new EvaluatorList();

									evaluator.setExIsDelete(false);
									evaluator.setExIsActive(true);
									evaluator.setExInitialName(tempA[1].trim());
									evaluator.setExName(tempA[2].trim());
									evaluator.setExCreateDate(date);
									evaluator.setExFullName(tempA[3].trim());
									evaluator.setExdesignation(tempA[4].trim());
									evaluator.setExAddressLine1(tempA[5].trim());
									evaluator.setExAddressLin2(tempA[6].trim());
									evaluator.setExAddressLine3(tempA[7].trim());
									evaluator.setExState(tempA[8].trim());
									evaluator.setExPinCode(tempA[9].trim());
								
									evaluator.setExContactDetails(tempA[10].trim());
									evaluator.setExEmail(tempA[11].trim());
								
									evaluator.setExBankName(tempA[12].trim());
									evaluator.setExBankAccountNo(tempA[13].trim());
									evaluator.setExIfscCode(tempA[14].trim());
									
									evaluator.setExUserName((tempA[15].trim()));
									evaluator.setExPassword(EncrypPassword);

									evaluator.setExCustomField1(tempA[17].trim());
									evaluator.setExCustomField2(tempA[18].trim());
									evaluator.setExCustomField3(tempA[19].trim());
									super.expertlist.save(evaluator);
									System.out.println(">>>upload" + evaluator);

									
									successList.add("Success" + evaluator);

								}
							}
						
					
				
				info.put("status", "1");
				info.put("message", exEvaluatorFile.getOriginalFilename() + "Excel Uploaded Succesfully ");
				info.put("success", successList.size() + " Records Inserted Successfully");
				excellog.info("Data  Inserted: " + successList);
				info.put("failure", list.size() + " Records Not Inserted ");
				excellog.info("Data Not Inserted : " + failureList);
				return info;

			} catch (Exception e) {
				logger.error("Exception occured" + e);
				StringWriter errors = new StringWriter();
				// e.printStackTrace(new PrintWriter(errors));
				e.printStackTrace();
				logger.error(errors.toString());
				info.put("status", "0");
				info.put("message", "something went wrong");
				return info;
			}
		}

		@Override
		public Map<String, Object> bulkRegistration(MultipartFile exGradePointFile, Long user) {
			Map<String, Object> info = new LinkedHashMap<>();
			if (exGradePointFile == null || exGradePointFile.isEmpty()) {
				info.put("status", "2");
				info.put("message", "Please select file");
				return info;
			}

			String extention = FilenameUtils.getExtension(exGradePointFile.getOriginalFilename());
			if (extention.equalsIgnoreCase("xls") || extention.equalsIgnoreCase("xlsx")) {
				Map<String, Object> result = bulkRegistrationExcel(exGradePointFile, user);
				System.out.println("Qread the data" + result);
				return result;
			}
			info.put("status", "2");
			info.put("message", "File should be xls / xlsx extention");
			return info;
		}
		
		private Map<String, Object> bulkRegistrationExcel(MultipartFile studentProfilefile, Long user) {
			List<String> failureList = new ArrayList<String>();
			List<String> successList = new ArrayList<String>();
			List<Object> list = new ArrayList<Object>();
			Map<String, Object> info = new LinkedHashMap<>();
			try {
				Workbook workbook = getWorkBook(studentProfilefile);
				Sheet firstSheet = workbook.getSheetAt(0);			
				Iterator<Row> rows = firstSheet.iterator();
				rows.next();
						Date  date = new Date();
				for (int rowNum = 1; rowNum < firstSheet.getLastRowNum() + 1; rowNum++) {
					Row r = firstSheet.getRow(rowNum);
					String temp = "";
					for (int cn = 0; cn < 53; cn++) {
						Cell c = r.getCell(cn, Row.RETURN_BLANK_AS_NULL);
						try {
							if (c == null) {
								// The spreadsheet is empty in this cell
								temp = temp + "#@&" + "NA";
							} else {
								// Do something useful with the cell's contents
								c.setCellType(Cell.CELL_TYPE_STRING);
								temp = temp + "#@&" + super.commonValidations.getCellValue(c);
								System.out.println(">>>>>>>>>req>>>>" + temp);

							}

						} catch (Exception e) {
							StringWriter errors = new StringWriter();
							e.printStackTrace(new PrintWriter(errors));
							e.printStackTrace();
							logger.error("Exception  : " + errors.toString());
							// return "failed";
						}
					}
					String tempA[] = temp.split("#@&");
					System.out.println(">>>>>>>>consloe>>>>" + temp);
					System.out.println(">>sys>>" + tempA.length);

					// Date date = super.commonValidations.checkDate(tempA[].toString());
					// Optional<ExamAnnouncement> exam = null;
					if (tempA.length < 55 && tempA.length > 1) {
						for (int i = 0; i < tempA.length; i++) {
							if (tempA[i].equals("NA")) {
								tempA[i] = tempA[i].replace("NA", "");
							}
						}
						Optional<Colleges> collage = super.colleges.findByExIdentifierAndExIsDeleteAndExIsActive(tempA[1].trim(),false, true);
						Optional<Degree> degree = super.degree.findByExNameAndExIsDeleteAndExIsActive(tempA[2].trim(),false, true);
						Optional<Programmes> programs = super.programmes.findByExIdentifierAndExIsDeleteAndExIsActive(tempA[3].trim(), false, true);
						Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndExIdentifierAndDegreeIdAndProgrammesId(false, true, tempA[4].trim() , degree.get().getId() , programs.get().getId());
						Optional<AcademicYear> academicYearid = super.academicYear.findByExIsDeleteAndExIsActiveAndExIdentifier(false, true, tempA[5].trim());
						Optional<Batch> batch = super.batch.findByExNameAndExIsDeleteAndExIsActiveAndProgrammesIdAndDegreeId(tempA[6].trim() ,false, true , programs.get().getId() , degree.get().getId());
						Optional<RegistrationType> regType = super.registrationType.findByExIsDeleteAndExIsActiveAndExName(false, true, tempA[7].trim());
						
						Optional<ProgrammeYear> programyear = super.programmeYear.findByExNameAndExIsActiveAndExIsDelete(tempA[8].trim(), true, false);
						Optional<Semster> sem = super.semester.findByExNameAndExIsActiveAndExIsDelete(tempA[9].trim(), true,false);
						Optional<ExamAnnouncement> exam = super.examAnnouncement.findByExIsDeleteAndExIsActiveAndExName(false, true, tempA[10].trim());
						
						Optional<Studentadmission> student = super.studentadmission.findByExIsDeleteAndExIsActiveAndExRollNo(false, true, tempA[11].trim());
						
									
						
						//Optional<Courses> course = null;
						// course = super.courses.findByExIsDeleteAndExIsActiveAndExCoursesCodeAndBatchIdAndSemesterIdAndProgrammesIdAndDepartmentId(false, true,tempA[9].trim() , batch.get().getId() , sem.get().getId(),programs.get().getId() , department.get().getId());
					
						// course = super.courses.findByExIsDeleteAndExIsActiveAndExNameAndBatchIdAndSemesterIdAndProgrammesIdAndDepartmentIdAndExCoursesCode(false, true,tempA[9].trim() , batch.get().getId() , sem.get().getId(),programs.get().getId() , department.get().getId() , tempA[19].trim());
							
						
						String tempcType[] = tempA[12].split("\\$");
						List<String> courseList = Arrays.asList(tempcType);
						System.out.println("tempcType[] " + tempcType.toString());
						
						System.out.println("courselist " + courseList);
						System.out.println("courselist " + programs.get().getId());
						System.out.println("courselist " + programyear.get().getId());
						System.out.println("courselist " + sem.get().getId());
						System.out.println("courselist " + batch.get().getId());
						System.out.println("courselist " + department.get().getId());
						ArrayList<Object[]> courseresult = super.courses.getCourseResult(courseList, false, true, programs.get().getId(),programyear.get().getId() , sem.get().getId() ,batch.get().getId() , department.get().getId());
						System.out.println(">>>..coursestype  " + courseresult.size());		
						
						  if (!batch.isPresent()) {
								failureList.add(tempA[18].trim() + " : batch not present:");
								list.add(tempA[1]);
							}
						  
						  else if (!exam.isPresent()) {
								failureList.add(tempA[1].trim() + "exam Name not present");
								list.add(tempA[1].trim());
							}

						else if (!collage.isPresent()) {
							failureList.add(tempA[1].trim() + "Colleges Name not present");
							list.add(tempA[1].trim());
						}
						 
						else if (!department.isPresent()) {
							failureList.add(tempA[1].trim() + "department Name not present");
							list.add(tempA[1].trim());
						}
						 
						else if (!sem.isPresent()) {
							failureList.add(tempA[1].trim() + "sem Name not present");
							list.add(tempA[1].trim());
						}
						 
						else if (!programyear.isPresent()) {
							failureList.add(tempA[1].trim() + "programyear Name not present");
							list.add(tempA[1].trim());
						}

						else if (!degree.isPresent()) {
							failureList.add(tempA[2].trim() + "Degree Name not present");
							list.add(tempA[1].trim());

						} else if (!regType.isPresent()) {
							failureList.add(tempA[3].trim() + "RegistrationType not present");
							list.add(tempA[1].trim());

						}
						else if (!programs.isPresent()) {
							failureList.add(tempA[4].trim() + "Programme Identifier  not present");
							list.add(tempA[1].trim());

						}  else if (!academicYearid.isPresent()) {
							failureList.add(tempA[5].trim() + "AcademicYear Name  not present");
							list.add(tempA[1].trim());

						} else if (!student.isPresent()) {
							failureList.add(tempA[9].trim() + " : student  not present:");
							list.add(tempA[1]);
						} 
						 else{
								List<SemesterRegistration> duplicate = super.semesterRegistration
										.findByExIsDeleteAndExIsActiveAndProgrammesIdAndCollegesIdAndDegreeIdAndAcademicYearIdAndProgrammeYearIdAndSemesterIdAndDepartmentIdAndStudentadmissionIdAndExIsRegistration(
												false, true, programs.get().getId(), collage.get().getId(), degree.get().getId(),
												academicYearid.get().getId(), programyear.get().getId(), sem.get().getId(),
												department.get().getId(), student.get().getId(), true);
								if(duplicate.size() <=0) {
									 List dataList = new LinkedList();
										for (String coursesetype : tempcType) {
											System.out.println("mmmmmmmmm"+coursesetype);
											Optional<Courses> cot = super.courses.findByExIsDeleteAndExIsActiveAndExCoursesCodeAndBatchIdAndSemesterIdAndProgrammesIdAndDepartmentId(false, true,coursesetype, batch.get().getId() , sem.get().getId(),programs.get().getId() , department.get().getId());
											CoursesRegistration data = new CoursesRegistration();
											data.setColleges(collage.get());
											data.setDegree(degree.get());
											data.setAcademicYear(academicYearid.get());
											data.setProgrammes(programs.get());
											data.setDepartment(department.get());
											data.setStream(student.get().getStream().get(0));
											data.setProgrammeYear(programyear.get());
											data.setSemester(sem.get());
											data.setExCreateDate(date);
											data.setExIsActive(true);
											data.setStudentadmission(student.get());
											data.setExIsRegistration(true);
											data.setExIsDelete(false);
											data.setExIsApproved(false);
											data.setExIsAttendence(false);
											data.setExIsEligible(false);
											data.setExSemesterStatus(false);
											data.setExSemesterStatus(false);
											data.setRegistration(regType.get());
											data.setCourses(cot.get());
											data.setExamAnnouncement(exam.get());
											dataList.add(data);

										}
										coursesRegistration.saveAll(dataList);
																		
										SemesterRegistration data = new SemesterRegistration();
										data.setColleges(collage.get());
										data.setDegree(degree.get());
										data.setAcademicYear(academicYearid.get());
										data.setProgrammes(programs.get());
										data.setDepartment(department.get());
										data.setStream(student.get().getStream().get(0));
										data.setProgrammeYear(programyear.get());
										data.setSemester(sem.get());
										data.setExCreateDate(date);
										data.setExIsActive(true);
										data.setStudentadmission(student.get());
										data.setExIsRegistration(true);
										data.setExIsDelete(false);
										data.setExIsApproved(false);
										data.setExIsAttendence(false);
										data.setExIsEligible(false);
										data.setExSemesterStatus(false);
										data.setExIsHostelApprove(false);
										data.setExIsLibraryApprove(false);
										data.setExSemesterStatus(false);
										data.setExIsComputerlabApprove(false);
										data.setExIsDeanApprove(false);
										data.setExIsExaminationApprove(false);
										data.setExIsItDepartmentApprove(false);
										data.setExIsMentorApprove(false);
										data.setExIsMentorApprove(false);
										data.setExIsPaid(false);
										data.setRegistrationType(regType.get());
										data.setExIsAccountsApprove(false);
										semesterRegistration.save(data);
										
										 successList.add("Success");
										
								}	else {
									list.add(tempA[11].trim());
									 failureList.add(tempA[11].trim());
								} 
							 
						 }		
					}
				}
				info.put("status", "1");
				info.put("message", studentProfilefile.getOriginalFilename() + "Excel Uploaded Succesfully ");
				info.put("success", successList.size() + " Records Inserted Successfully");
				info.put("failure", list.size() + " Records Not Inserted ");
				excellog.info("Data Not Inserted : " + failureList);
				return info;

			} catch (Exception e) {
				logger.error("Exception occured" + e);
				StringWriter errors = new StringWriter();
				e.printStackTrace(new PrintWriter(errors));
				e.printStackTrace();
				logger.error(errors.toString());
				info.put("status", "0");
				info.put("message", "something went wrong");
				return info;
			}
		}


		@Override
		public Map<String, Object> uploadSyllabus(CoursesRequest request)  {
			Map<String, Object> info = new LinkedHashMap<>();
			try {		
				 Optional<Courses> task = null ; 
				 task = super.courses.findByExIsDeleteAndBatchIdAndSemesterIdAndProgrammeYearIdAndProgrammesIdAndAcademicYearIdAndId(false,request.getBatch(),request.getSemester(),request.getProgrammeYear(),request.getProgrammes(),request.getAcademicYear(),request.getCourses());
					if(!task.isPresent()) {
						info.put("status", "2");
						info.put("message", "course  not present");
						return info;
					}	
					String  UPLOADED_FOLDER =  createFolder(task.get().getAcademicYear().getExYear(), task.get().getSemester().getExName(), "syllabus" ,task.get().getExCoursesCode());			
							if(UPLOADED_FOLDER.equals("NA")) {
					info.put("status", "0");
					info.put("message", "something went wrong");
					return info;
				}			
		           String imagepath = "/"+task.get().getAcademicYear().getExYear()+"/"+task.get().getSemester().getExName()+"/"+task.get().getExCoursesCode()+"/syllabus/";
					
				
				     uploadDocument(request.getExSyllabus(),request,request.getCourses(), request,UPLOADED_FOLDER,imagepath);
				
						      
						  	info.put("status", "1");
							info.put("message", "Documnet uploaded successfully");
							return info;
			}catch(Exception e) {
				e.printStackTrace();
				logger.error("Exception occured" + e);
				StringWriter errors = new StringWriter();
				e.printStackTrace(new PrintWriter(errors));
				logger.error(errors.toString());
				info.put("status", "0");
				info.put("message", "something went wrong");
				return info;
			}
		
		}


	

		private void uploadDocument(MultipartFile exsyllabus, CoursesRequest request, Long long1, CoursesRequest request2, String UPLOADED_FOLDER, String imagepath) throws IOException  {
			if (exsyllabus != null) {
				if (!exsyllabus.isEmpty()) {
					byte[] bytes = exsyllabus.getBytes();
					String newfilename =  exsyllabus.getOriginalFilename();
					Path path = Paths.get(UPLOADED_FOLDER + newfilename);
					Files.write(path, bytes);
					String photopath = imagepath + newfilename;
					super.courses.updateDocument(photopath, request.getCourses(),request.getBatch(),request.getAcademicYear(),request.getSemester());
				}
			}

		}


		@Override
		public Map<String, Object> uploadMarksheet(CoursesRequest request) {
			Map<String, Object> info = new LinkedHashMap<>();
			try {					
				Optional<AcademicYear> academic = super.academicYear.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
				if (!academic.isPresent()) {
					info.put("status", "2");
					info.put("message", "academicYear not present");
					return info;
				}
				Optional<Programmes> programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,request.getProgrammes());
				if (!programmes.isPresent()) {
					info.put("status", "2");
					info.put("message", "Programme not present");
					return info;
				}
				Optional<ProgrammeYear> programmeYear = super.programmeYear.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
				if (!programmeYear.isPresent()) {
					info.put("status", "2");
					info.put("message", "programmeYear not present");
					return info;
				}
				Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,request.getSemester());
				if (!sem.isPresent()) {
					info.put("status", "2");
					info.put("message", "Semster not present");
					return info;
				}
					
					String  UPLOADED_FOLDER =  createFolder(academic.get().getExYear(), programmes.get().getExIdentifier(), "u_marksheet" , sem.get().getExName());			
							if(UPLOADED_FOLDER.equals("NA")) {
					info.put("status", "0");
					info.put("message", "something went wrong");
					return info;
				}			
		           String imagepath = "/"+academic.get().getExYear()+"/"+programmes.get().getExIdentifier()+"/"+sem.get().getExName()+"/u_marksheet/";				
				   return  uploadMarksheet(request.getExMarksheet(),request,UPLOADED_FOLDER,imagepath);
				
						   
			}catch(Exception e) {
				e.printStackTrace();
				logger.error("Exception occured" + e);
				StringWriter errors = new StringWriter();
				e.printStackTrace(new PrintWriter(errors));
				logger.error(errors.toString());
				info.put("status", "0");
				info.put("message", "something went wrong");
				return info;
			}
		}

		private Map<String, Object> uploadMarksheet(MultipartFile marksheet, CoursesRequest request, String UPLOADED_FOLDER, String imagepath) throws Exception  {
			Map<String, Object> info = new LinkedHashMap<>();
			if (marksheet != null) {
				if (!marksheet.isEmpty()) {
					DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd-HH.mm.ss.SSSSSS");		
					Date date=new Date();		
					String datecreate = dateFormat.format(date);
					
					
					 String uuid = UUID.randomUUID().toString();
					 String out =  commonHelper.generateKey("MKLLDDK",uuid,datecreate , 8).toUpperCase();
					 
					byte[] bytes = marksheet.getBytes();
					String newfilename =  marksheet.getOriginalFilename();
					String result = newfilename.substring(0, newfilename.lastIndexOf("."));									
					Path path = Paths.get(UPLOADED_FOLDER + out+".pdf");
					Files.write(path, bytes);
					String photopath = imagepath + out+".pdf";
					int i = super.semesterProgressReport.updateMarksheetPath(photopath, request.getProgrammes(), request.getSemester(), request.getProgrammeYear(), result);
				if(i == 1) {
					info.put("status", "1");
					info.put("message", "marksheet uploded");
					info.put("rollNo", "");
					info.put("semester", request.getSemester());
					return info;
				}else {
					info.put("status", "0");
					info.put("message", "something went wrong");
					return info;
				}
			}
		}
			info.put("status", "2");
			info.put("message", "Please select mark sheet");
			return info;

		}


		@Override
		public Map<String, Object> uploadCoursesType(MultipartFile file, Long user) {
			Map<String, Object> info = new LinkedHashMap<>();
			if (file == null || file.isEmpty()) {
				info.put("status", "2");
				info.put("message", "Please select file");
				return info;
			}

			String extention = FilenameUtils.getExtension(file.getOriginalFilename());
			if (extention.equalsIgnoreCase("xls") || extention.equalsIgnoreCase("xlsx")) {
				Map<String, Object> result = uploadCourseType(file, user);
				System.out.println("Qread the data" + result);
				return result;
			}
			info.put("status", "2");
			info.put("message", "File should be xls / xlsx extention");
			return info;
		}
		
		private Map<String, Object> uploadCourseType(MultipartFile exCourseFile, Long user) {

			List<String> failureList = new ArrayList<String>();
			List<String> successList = new ArrayList<String>();
			List<Object> list = new ArrayList<Object>();
			Map<String, Object> info = new LinkedHashMap<>();
			try {
				Workbook workbook = getWorkBook(exCourseFile);
				Sheet Sheet = workbook.getSheetAt(0);

				Iterator<Row> rows = Sheet.iterator();
				rows.next();

				for (int rowNum = 1; rowNum < Sheet.getLastRowNum() + 1; rowNum++) {
					Row r = Sheet.getRow(rowNum);
					String temp = "";
					for (int cn = 0; cn < 18; cn++) {

						Cell c = r.getCell(cn, Row.RETURN_BLANK_AS_NULL);

						try {
							if (c == null) {
								// The spreadsheet is empty in this cell
								temp = temp + "#@&" + "NA";
							} else {
								// Do something useful with the cell's contents
								c.setCellType(Cell.CELL_TYPE_STRING);
								temp = temp + "#@&" + super.commonValidations.getCellValue(c);
								System.out.println(">>>>>>>>>req>>>>" + temp);

							}

						} catch (Exception e) {
							StringWriter errors = new StringWriter();
							e.printStackTrace(new PrintWriter(errors));
							e.printStackTrace();
							logger.error("Exception  : " + errors.toString());
							// return "failed";
						}
					}
					String tempA[] = temp.split("#@&");

					Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndExName(false, true,
							tempA[1].trim());
					
					Optional<Programmes> programs = super.programmes.findByExIsDeleteAndExIsActiveAndExIdentifier(false,
							true, tempA[2].trim());
					Optional<AcademicYear> academicYearid = super.academicYear
							.findByExIsDeleteAndExIsActiveAndExIdentifier(false, true, tempA[5].trim());
					Optional<ProgrammeYear> programyear = super.programmeYear
							.findByExNameAndExIsActiveAndExIsDelete(tempA[7].trim(), true, false);
					Optional<Semster> sem = super.semester.findByExNameAndExIsActiveAndExIsDelete(tempA[8].trim(), true,
							false);
					
					Optional<Batch> batch = super.batch.findByExNameAndExIsDeleteAndExIsActiveAndProgrammesIdAndDegreeId(tempA[6].trim(), false , true, programs.get().getId(), degree.get().getId() );

				
					if (!degree.isPresent()) {
						failureList.add(tempA[1].trim() + " : Degree name not present:");
						System.out.println(">.degreee peresnt or not" + tempA[1].trim());
						list.add(tempA[1]);
					}  else if (!programs.isPresent()) {
						failureList.add(tempA[2].trim() + " : Programmes Name not present:");
						list.add(tempA[1]);
					}

					else if (!academicYearid.isPresent()) {
						failureList.add(tempA[5].trim() + " : Academic Year not present:");
						list.add(tempA[1]);
					} else if (!programyear.isPresent()) {
						failureList.add(tempA[7].trim() + " : ProgrameYear  not present:");
						list.add(tempA[1]);
					} else if (!sem.isPresent()) {
						failureList.add(tempA[8].trim() + " : Semester  not present:");
						list.add(tempA[1]);
					}  else if (!batch.isPresent()) {
						failureList.add(tempA[6].trim() + " : batch not present:");
						list.add(tempA[1]);
					}
					else {
					
					
					Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndExIdentifierAndProgrammesId(false,
							true, tempA[3].trim(),programs.get().getId());
					if (!department.isPresent()) {
						failureList.add(tempA[3].trim() + " : Department Identifier not present of particular Programe");
						list.add(tempA[1]);
					}
					else {
					Optional<Stream> stream = super.stream.findByExIdentifierAndExIsActiveAndExIsDeleteAndDepartmentId(tempA[4].trim(),true, false,department.get().getId());
					if (!stream.isPresent()) {
						failureList.add(tempA[4].trim() + " : Stream Identifier not present with particular department:");
						list.add(tempA[1]);
					}
					else {
							// update the record 
						int i = super.courses.updateSubjectType(tempA[10].trim(), tempA[9].trim(), programyear.get().getId(), sem.get().getId(), academicYearid.get().getId() , batch.get().getId() , department.get().getId() ,programs.get().getId() );
						if(i == 1) {
							successList.add("success");
						}else {
							failureList.add(tempA[9].trim());
							list.add("Fail");
						}
						
					  }
					}
					}
					info.put("status", "1");
					info.put("message", exCourseFile.getOriginalFilename() + "Excel Uploaded Succesfully ");
					info.put("success", successList.size() + " Records Inserted Successfully");
					info.put("failure", list.size() + " Records Not Inserted "); //
					// info.put("failureList",failureList);
					excellog.info("Data Not Inserted : " + failureList);
				}
				return info;

			} catch (Exception e) {
				logger.error("Exception occured" + e);
				StringWriter errors = new StringWriter();
				e.printStackTrace(new PrintWriter(errors));
				e.printStackTrace();
				logger.error(errors.toString());
				info.put("status", "0");
				info.put("message", "something went wrong");
				return info;
			}

		}


		@Override
		public Map<String, Object> downloadMarksheet(CoursesRequest request) {
			Map<String, Object> info = new LinkedHashMap<>();
			try {					
				Optional<AcademicYear> academic = super.academicYear.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
				if (!academic.isPresent()) {
					info.put("status", "2");
					info.put("message", "academicYear not present");
					return info;
				}
				Optional<Programmes> programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,request.getProgrammes());
				if (!programmes.isPresent()) {
					info.put("status", "2");
					info.put("message", "Programme not present");
					return info;
				}
				Optional<ProgrammeYear> programmeYear = super.programmeYear.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
				if (!programmeYear.isPresent()) {
					info.put("status", "2");
					info.put("message", "programmeYear not present");
					return info;
				}
				Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,request.getSemester());
				if (!sem.isPresent()) {
					info.put("status", "2");
					info.put("message", "Semster not present");
					return info;
				}
					
				List<SemesterProgressReport> task =super.semesterProgressReport.findByAcademicYearIdAndProgrammesIdAndSemesterIdAndExRollNoAndProgrammeYearId(request.getAcademicYear() , request.getProgrammes() , request.getSemester() , request.getExRollNo() , request.getProgrammeYear());
				if(task.size() <=0) {					
					info.put("status", "2");
					info.put("message", "record not found");
					return info;
					}else {
						String serverurl = commonHelper.getSettingValue("SERVER_IP");
						info.put("url", ( task.get(0).getMarksheetPath() == null || task.get(0).getMarksheetPath() == "NA")?"NA" :serverurl+task.get(0).getMarksheetPath());															
						info.put("status", "1");
						info.put("message", "Please download marksheet");
						return info;
					}
					   
			}catch(Exception e) {
				e.printStackTrace();
				logger.error("Exception occured" + e);
				StringWriter errors = new StringWriter();
				e.printStackTrace(new PrintWriter(errors));
				logger.error(errors.toString());
				info.put("status", "0");
				info.put("message", "something went wrong");
				return info;
			}
		}


		@Override
		public Map<String, Object> uploadStudentDocument(MultipartFile file, String exRollNo, Long documentType) {
			Map<String, Object> info = new LinkedHashMap<>();
			try {					
				Optional<Studentadmission> status = super.studentadmission.findByExIsDeleteAndExIsActiveAndExRollNo(false, true, exRollNo);
				if(!status.isPresent()) {
					info.put("status", "2");
					info.put("message", "Student is not present.");
					return info;
				}	
				
				Optional<DocumentType> documenttype = super.documentType.findById(documentType);
				if(!documenttype.isPresent()) {
					info.put("status", "2");
					info.put("message", "DocumentType not present.");
					return info;
				}
					
					String  UPLOADED_FOLDER =  createFolder(status.get().getAcademicYear().getExYear(), status.get().getProgrammes().getExIdentifier(), status.get().getExRollNo(), "document");			
							if(UPLOADED_FOLDER.equals("NA")) {
					info.put("status", "0");
					info.put("message", "something went wrong");
					return info;
				}			
		           String imagepath = "/"+status.get().getAcademicYear().getExYear()+"/"+status.get().getProgrammes().getExIdentifier()+"/"+"document"+"/"+status.get().getExRollNo()+"/";				
					if (file != null) {
						if (!file.isEmpty()) {
							DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd-HH.mm.ss.SSSSSS");		
							byte[] bytes = file.getBytes();
							String newfilename =  file.getOriginalFilename();
							String uuid = UUID.randomUUID().toString();
							Date date=new Date();		
							String datecreate = dateFormat.format(date);
							 String out =  commonHelper.generateKey("KILOUT",uuid,datecreate , 8).toUpperCase();
							newfilename = out+"-"+newfilename;
							Path path = Paths.get(UPLOADED_FOLDER + newfilename);
							Files.write(path, bytes);
							
							String photopath = imagepath + newfilename;					
						// check already uploded document 
							if(studentDocument.findByStudentadmissionIdAndDocumenttypeId(status.get().getId(), documentType).size() <=0) {
								
								StudentDocument document = new StudentDocument();
								document.setExRollNo(status.get().getExRollNo());
								document.setExCreateDate(date);
								document.setDocumenttype(documenttype.get());
								document.setStudentadmission(status.get());
								document.setExdocumentPath(photopath);
								studentDocument.save(document);
								
								info.put("status", "1");
								info.put("message", "Document uploaded successfully");
								return info;
							}else {
								info.put("status", "2");
								info.put("message", "Document already uploaded");
								return info;
							}
					}
				}
					info.put("status", "2");
					info.put("message", "Please select Document");
					return info;
						   
			}catch(Exception e) {
				e.printStackTrace();
				logger.error("Exception occured" + e);
				StringWriter errors = new StringWriter();
				e.printStackTrace(new PrintWriter(errors));
				logger.error(errors.toString());
				info.put("status", "0");
				info.put("message", "something went wrong");
				return info;
			}
		}


		@Override
		public Map<String, Object> uploadDateOfBirth(MultipartFile excel) {
			Map<String, Object> info = new LinkedHashMap<>();
			if (excel == null || excel.isEmpty()) {
				info.put("status", "2");
				info.put("message", "Please select file");
				return info;
			}

			String extention = FilenameUtils.getExtension(excel.getOriginalFilename());
			if (extention.equalsIgnoreCase("xls") || extention.equalsIgnoreCase("xlsx")) {
				Map<String, Object> result = readDataDOB(excel);
				System.out.println("Qread the data" + result);
				return result;
			}
			info.put("status", "2");
			info.put("message", "File should be xls / xlsx extention");
			return info;
		}		
		
		
		private Map<String, Object> readDataDOB(MultipartFile studentProfilefile) {
			List<String> failureList = new ArrayList<String>();
			List<String> successList = new ArrayList<String>();
			List<Object> list = new ArrayList<Object>();
			Map<String, Object> info = new LinkedHashMap<>();
			try {
				Workbook workbook = getWorkBook(studentProfilefile);
				Sheet firstSheet = workbook.getSheetAt(0);			
				Iterator<Row> rows = firstSheet.iterator();
				rows.next();
						Date  date = new Date();
				for (int rowNum = 1; rowNum < firstSheet.getLastRowNum() + 1; rowNum++) {
					Row r = firstSheet.getRow(rowNum);
					String temp = "";
					for (int cn = 0; cn < 53; cn++) {
						Cell c = r.getCell(cn, Row.RETURN_BLANK_AS_NULL);
						try {
							if (c == null) {
								// The spreadsheet is empty in this cell
								temp = temp + "#@&" + "NA";
							} else {
								// Do something useful with the cell's contents
								c.setCellType(Cell.CELL_TYPE_STRING);
								temp = temp + "#@&" + super.commonValidations.getCellValue(c);
								System.out.println(">>>>>>>>>req>>>>" + temp);

							}

						} catch (Exception e) {
							StringWriter errors = new StringWriter();
							e.printStackTrace(new PrintWriter(errors));
							e.printStackTrace();
							logger.error("Exception  : " + errors.toString());
							// return "failed";
						}
					}
					String tempA[] = temp.split("#@&");
					System.out.println(">>>>>>>>consloe>>>>" + temp);
					System.out.println(">>sys>>" + tempA.length);

					// Date date = super.commonValidations.checkDate(tempA[].toString());
					// Optional<ExamAnnouncement> exam = null;
					if (tempA.length < 55 && tempA.length > 1) {
						for (int i = 0; i < tempA.length; i++) {
							if (tempA[i].equals("NA")) {
								tempA[i] = tempA[i].replace("NA", "");
							}
						}						
						Optional<Studentadmission> student = super.studentadmission.findByExIsDeleteAndExIsActiveAndExRollNo(false, true, tempA[1].trim());			 
						if (!student.isPresent()) {
							failureList.add(tempA[9].trim() + " : student  not present:");
							list.add(tempA[1]);
						} 
						 else{
							 // Update semester progress report		
							 System.out.println("mmmmmmmmmmmm"+tempA[2].trim());
							 int l = super.studentpersonal.updateDobv(tempA[2].trim(), student.get().getId());							 
							 if(l >=0) {
								 successList.add("Success");
							 }else {
								 list.add(tempA[8].trim());
								 failureList.add(tempA[8].trim());
							 }
						 }		
					}
				}
				info.put("status", "1");
				info.put("message", studentProfilefile.getOriginalFilename() + "Excel Uploaded Succesfully ");
				info.put("success", successList.size() + " Records Updated Successfully");
				info.put("failure", list.size() + " Records Not Inserted ");
				excellog.info("Data Not Inserted : " + failureList);
				return info;

			} catch (Exception e) {
				logger.error("Exception occured" + e);
				StringWriter errors = new StringWriter();
				e.printStackTrace(new PrintWriter(errors));
				e.printStackTrace();
				logger.error(errors.toString());
				info.put("status", "0");
				info.put("message", "something went wrong");
				return info;
			}
		}


		@Override
		public Map<String, Object> uploadStudentCertificate(MultipartFile[] file, String exRollNo, Long documentType) {
			Map<String, Object> info = new LinkedHashMap<>();
			try {					
				
				
				System.out.println("ddddddddddddddddffffffffffddddddddd"+file.length);
				Optional<CertificateType> documenttype = super.certificate.findById(documentType);
				if(!documenttype.isPresent()) {
					info.put("status", "2");
					info.put("message", "CertificateType not present.");
					return info;
				}
					
					String  UPLOADED_FOLDER =  createFolder("Niftem", "upload", documenttype.get().getExCertificateType(), "document");			
							if(UPLOADED_FOLDER.equals("NA")) {
					info.put("status", "0");
					info.put("message", "something went wrong");
					return info;
				}			
		           String imagepath = "/Niftem/upload/"+"document"+"/"+documenttype.get().getExCertificateType()+"/";				
					if (file != null) {
						 for(int i =0 ;i< file.length ; i++) {
							
							 info =   uploadMulticerti(file[i],documenttype,UPLOADED_FOLDER,imagepath);
								}
							
						 return info;
				}
					info.put("status", "2");
					info.put("message", "Please select Certificate");
					return info;
						   
			}catch(Exception e) {
				e.printStackTrace();
				logger.error("Exception occured" + e);
				StringWriter errors = new StringWriter();
				e.printStackTrace(new PrintWriter(errors));
				logger.error(errors.toString());
				info.put("status", "0");
				info.put("message", "something went wrong");
				return info;
			}
		}
		
		private Map<String, Object> uploadMulticerti(MultipartFile marksheet, Optional<CertificateType> documenttype, String UPLOADED_FOLDER, String imagepath) throws Exception  {
			Map<String, Object> info = new LinkedHashMap<>();
			
				if (!marksheet.isEmpty()) {
					
					DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd-HH.mm.ss.SSSSSS");		
					Date date=new Date();		
					String datecreate = dateFormat.format(date);										
					 String uuid = UUID.randomUUID().toString();
					 
					byte[] bytes = marksheet.getBytes();
					String newfilename =  marksheet.getOriginalFilename();
					String result = newfilename.substring(0, newfilename.lastIndexOf("."));	
					 String out =  commonHelper.generateKey("XYZBBC",uuid,datecreate , 8).toUpperCase();
					Path path = Paths.get(UPLOADED_FOLDER + out+".pdf");
					Files.write(path, bytes);
					String photopath = imagepath + out+".pdf";
					//int i = super.semesterProgressReport.updateMarksheetPath(photopath, request.getProgrammes(), request.getSemester(), request.getProgrammeYear(), result);
					// check already uploded document 
					Optional<Studentadmission> status = super.studentadmission.findByExRollNo(result);
					if(!status.isPresent()) {
						info.put("status", "2");
						info.put("message", "Student is not present.");
						return info;
					}
					if(certificaterepo.findByStudentadmissionIdAndCertificateTypeId(status.get().getId(), documenttype.get().getId()).size() <=0) {
					
						
						
						StudentCertificate document = new StudentCertificate();
						document.setExRollNo(result);
						document.setExCreateDate(date);
						document.setCertificateType(documenttype.get());
						document.setStudentadmission(status.get());
						document.setExdocumentPath(photopath);
						certificaterepo.save(document);
						
						info.put("status", "1");
						info.put("message", "Certificate uploaded successfully");
						return info;
					}else {
						info.put("status", "2");
						info.put("message", "Certificate already uploaded");
						return info;
					}
				}else {
					info.put("status", "0");
					info.put("message", "something went wrong");
					return info;
				}
				}
			
			
			


		@Override
		public Map<String, Object> uploadStudentMarks(MidTermMarksRequest request) {
			Map<String, Object> info = new LinkedHashMap<>();
			if (request.getExFile() == null || request.getExFile().isEmpty()) {
				info.put("status", "2");
				info.put("message", "Please select file");
				return info;
			}

			String extention = FilenameUtils.getExtension(request.getExFile().getOriginalFilename());
			if (extention.equalsIgnoreCase("xls") || extention.equalsIgnoreCase("xlsx")) {

				Map<String, Object> result = readStudentDataFromExcel(request.getExFile(), request);

				return result;
			}
			info.put("status", "2");
			info.put("message", "File should be xls / xlsx  extention");
			return info;
		}
		
		private Map<String, Object> readStudentDataFromExcel(MultipartFile exAssignmentFile,MidTermMarksRequest request) {
			List<String> failureList = new ArrayList<String>();
			List<String> successList = new ArrayList<String>();
			List<Object> list = new ArrayList<Object>();
			Map<String, Object> info = new LinkedHashMap<>();
			try {
				Workbook workbook = getWorkBook(exAssignmentFile);
				Sheet Sheet = workbook.getSheetAt(0);

				Iterator<Row> rows = Sheet.iterator();
				rows.next();

				Optional<ProgrammeYear> programyear = super.programmeYear.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getProgrammeYear());
				if (!programyear.isPresent()) {
					info.put("status", "2");
					info.put("message", "ProgrammeYear not present");
					return info;
				}
				

				Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getSemster());
				if (!sem.isPresent()) {
					info.put("status", "2");
					info.put("message", " Semster not present");
					return info;
				}
				Optional<AcademicYear> academicYear = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getAcademicYear());
				if (!academicYear.isPresent()) {
					info.put("status", "2");
					info.put("message", " academicyear not present");
					return info;
				}

				Optional<Colleges> col = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
						true);
				if (!col.isPresent()) {
					info.put("status", "2");
					info.put("message", "college not present");
					return info;
				}
				Optional<Department> department = super.department
						.findByIdAndExIsDeleteAndExIsActive(request.getDepartment(), false, true);
				if (!department.isPresent()) {
					info.put("status", "2");
					info.put("message", "department not present");
					return info;
				}

				
				Optional<Programmes> Prog = super.programme.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getProgrammes());
				if (!Prog.isPresent()) {
					info.put("status", "2");
					info.put("message", " Programe not present");
					return info;
				}

				Optional<Courses> courses = super.courses.findByIdAndExIsDeleteAndExIsActive(request.getCourses(), false,
						true);
				if (!courses.isPresent()) {
					info.put("status", "2");
					info.put("message", "courses not present");
					return info;
				}

				Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
				if (!degree.isPresent()) {
					info.put("status", "2");
					info.put("message", "Degree not present");
					return info;
				}

				int updaterecord = 0;
				Boolean is_update = false;

				int rowIndex = 0;
				for (int rowNum = Sheet.getLastRowNum(); rowNum >= 0; rowNum--) {
					final Row row = Sheet.getRow(rowNum);
					if (row != null && row.getCell(0) != null) {
						if (row.getCell(0).toString() != "" && row.getCell(0).toString() != null) {
							rowIndex = rowNum;
							break;
						}
					}
				}
				for (int rowNum = 1; rowNum < rowIndex + 1; rowNum++) {
					Row r = Sheet.getRow(rowNum);
					String temp = "";
					for (int cn = 0; cn < 20; cn++) {
						Cell c = r.getCell(cn, Row.RETURN_BLANK_AS_NULL);
						try {

							if (c == null) {
								// The spreadsheet is empty in this cell
								temp = temp + "#@&" + "NA";
							} else {
								// Do something useful with the cell's contents
								c.setCellType(Cell.CELL_TYPE_STRING);
								temp = temp + "#@&" + super.commonValidations.getCellValue(c);
							}

						} catch (Exception e) {
							StringWriter errors = new StringWriter();
							e.printStackTrace(new PrintWriter(errors));
							logger.error("Exception  : " + errors.toString());
							// return "failed";
						}

					}
					
					String tempA[] = temp.split("#@&");		
					System.out.println("sccccssssssmmmmmmmmmmmssssssssss"+tempA);
						Optional<ExamAnnouncement> examannouncement = super.examAnnouncement
								.findByExIsDeleteAndExIsActiveAndId(false, true, request.getExamAnnouncement());
						if (!examannouncement.isPresent()) {
							info.put("status", "2");
							info.put("message", "Examannouncement  not present");
							return info;
						}	
					MidTermMarks midMarks = new MidTermMarks();

					Optional<Studentadmission> student = super.studentadmission
							.findByExIsDeleteAndExIsActiveAndExRollNo(false, true, tempA[1].trim());
					if (student.isPresent()) {
						Date date = new Date();

						List<MidTermMarks> midterm = super.midtermmarksMarks.findByStudentadmissionIdAndCoursesIdAndAcademicYearIdAndExIsActiveAndExIsDelete(student.get().getId(), courses.get().getId(), academicYear.get().getId(), true,false);
						Staffpersonal staff = null;
						if (request.getStaff() == null || request.getStaff().equals("")) {
							staff = null;
						} else {
							Optional<Staffpersonal> staffres = super.staffpersonal.findByIdAndExIsDeleteAndExIsActive(request.getStaff(), false, true);
							if (!staffres.isPresent()) {
								info.put("status", "2");
								info.put("message", "staff not present");
								return info;
							}
							staff = staffres.get();
						}

						List<CoursesRegistration> coursereg = super.coursesRegistration.findByExIsDeleteAndExIsActiveAndCoursesIdAndStudentadmissionId(false, true,courses.get().getId(), student.get().getId());
						System.out.println("courseeregistration" + coursereg);
						if (coursereg.size() <= 0) {
							failureList.add(tempA[1] + ": Particular student not Registered for courses:");
							list.add(tempA[1]);
							System.out.println(">failurelist" + failureList);
						}

						else {						
							if (midterm.size() <= 0) {
								midMarks.setCourses(courses.get());								
								midMarks.setAcademicYear(academicYear.get());
								midMarks.setProgrammes(Prog.get());
								midMarks.setColleges(col.get());
								midMarks.setDegree(degree.get());
								midMarks.setDepartment(department.get());
								midMarks.setStaff(staff);
								midMarks.setSection(student.get().getSection());
								midMarks.setExRollNo(student.get().getExRollNo());
								midMarks.setExCreateDate(date);
								midMarks.setSemester(sem.get());
								midMarks.setStream(student.get().getStream().get(0));
								midMarks.setExIsSave(false);
								midMarks.setExIsSubmit(false);
								midMarks.setExamAnnouncement(examannouncement.get());
								midMarks.setStudentadmission(student.get());
								// midMarks.setCoursesType(coursestype.get());
								midMarks.setProgrammeYear(programyear.get());
								midMarks.setExIsActive(true);
								midMarks.setExIsDelete(false);
								super.midtermmarksMarks.save(midMarks);
								successList.add("Success" + midMarks);

							} 
							// Update the marks
							Double asiment_marks = 0.0;
							String asiment_remarks = "NA";
							if(super.commonHelper.isNumeric(tempA[2].trim())) {
								asiment_marks = commonHelper.getMarksValue(tempA[2].trim());
							}else {
								if(tempA[2].trim().equals("A")) {
									asiment_remarks = "ABSENT";
								}else {
									asiment_remarks = "NA";
								}			
							}
							
							Double mid_marks = 0.0;
							String mid_remarks = "NA";
							if(super.commonHelper.isNumeric(tempA[3].trim())) {
								mid_marks = commonHelper.getMarksValue(tempA[3].trim());
							}else {
								if(tempA[3].trim().equalsIgnoreCase("A")) {
									mid_remarks = "ABSENT";
								}else {
									mid_remarks = "NA";
								}			
							}
							
							Double attendance_marks = 0.0;
							String attendance_remarks = "NA";
							if(super.commonHelper.isNumeric(tempA[4].trim())) {
								attendance_marks = commonHelper.getMarksValue(tempA[4].trim());
							}else {
								if(tempA[4].trim().equals("A")) {
									attendance_remarks = "ABSENT";
								}else {
									attendance_remarks = "NA";
								}			
							}
							
							Double practical_record = 0.0;
							String practical_record_remarks = "NA";
							if(super.commonHelper.isNumeric(tempA[5])) {
								practical_record = commonHelper.getMarksValue(tempA[5].trim());
							}else {
								if(tempA[5].trim().equals("A")) {
									practical_record_remarks = "ABSENT";
								}else {
									practical_record_remarks = "NA";
								}			
							}
							
							Double practical_learning = 0.0;
							String practical_learning_remarks = "NA";
							if(super.commonHelper.isNumeric(tempA[6].trim())) {
								practical_learning = commonHelper.getMarksValue(tempA[6].trim());
							}else {
								if(tempA[6].trim().equals("A")) {
									practical_learning_remarks = "ABSENT";
								}else {
									practical_learning_remarks = "NA";
								}			
							}
							
							Double case_study = 0.0;
							String case_study_remarks = "NA";
							if(super.commonHelper.isNumeric(tempA[7].trim())) {
								case_study = commonHelper.getMarksValue(tempA[7].trim());
							}else {
								if( tempA[7].trim().equals("A")) {
									case_study_remarks = "ABSENT";
								}else {
									case_study_remarks = "NA";
								}			
							}
							
							Double quiz_marks = 0.0;
							String quiz_marks_remarks = "NA";
							if(super.commonHelper.isNumeric(tempA[8].trim())) {
								quiz_marks = commonHelper.getMarksValue(tempA[8].trim());
							}else {
								if(tempA[8].trim().equals("A")) {
									quiz_marks_remarks = "ABSENT";
								}else {
									quiz_marks_remarks = "NA";
								}			
							}
							
							Double labexp_marks = 0.0;
							String labexp_remarks = "NA";
							if(super.commonHelper.isNumeric(tempA[9].trim())) {
								labexp_marks = commonHelper.getMarksValue(tempA[9].trim());
							}else {
								if(tempA[9].trim().equals("A")) {
									labexp_remarks = "ABSENT";
								}else {
									labexp_remarks = "NA";
								}			
							}
							
							Double viva_marks = 0.0;
							String viva_remarks = "NA";
							if(super.commonHelper.isNumeric(tempA[10].trim())) {
								viva_marks = commonHelper.getMarksValue(tempA[10].trim());
							}else {
								if(tempA[10].trim().equals("A")) {
									viva_remarks = "ABSENT";
								}else {
									viva_remarks = "NA";
								}			
							}						
								is_update = true;

							
								int i = super.midtermmarksMarks.updateStudentMarksDetails(  asiment_marks , 
										asiment_remarks ,   mid_marks ,  mid_remarks ,  attendance_marks , 
										attendance_remarks ,  practical_record ,  practical_record_remarks ,
										
										practical_learning ,  practical_learning_remarks ,  case_study , 
										case_study_remarks ,  quiz_marks ,  quiz_marks_remarks ,  request.getCourses() ,  student.get().getId() , 
										request.getExamAnnouncement() , student.get().getSection().getId(), date, staff);
								
								
								super.ExamBarcodes.updatevaivaMarks( viva_marks  ,request.getAcademicYear(),
										request.getColleges(), request.getProgrammes(), request.getCourses(),
										 student.get().getId(), date,request.getDegree() ,request.getExamAnnouncement());	
								
								super.ExamBarcodes.updateLabExprimentMarks(labexp_marks    ,request.getAcademicYear(),
										request.getColleges(), request.getProgrammes(), request.getCourses(),
										 student.get().getId(), date,request.getDegree() ,request.getExamAnnouncement());	
								
								if (i == 1) {
									
									updaterecord = updaterecord + 1;
									excellog.info("Updated Record: " + tempA[1].trim());

								}
								// list.add(row.getCell(1).getStringCellValue());
							
						}

					} else {
						failureList.add(tempA[1] + ": Roll  No Not present :");
						list.add(tempA[1]);
					}

					info.put("status", "1");
					info.put("message", exAssignmentFile.getOriginalFilename() + "Excel Uploaded Succesfully ");
					if (is_update) {
						info.put("success", updaterecord + " Records Updated Successfully");

						info.put("failure", list.size() + " Records Not Updated ");
					} else {
						info.put("success", successList.size() + " Records Inserted Successfully");
						info.put("failure", list.size() + " Records Not Inserted ");
					}
				}
				excellog.info("Data Not Inserted : " + failureList);
				return info;

			} catch (Exception e) {
				e.printStackTrace();
				logger.error("Exception occured" + e);
				StringWriter errors = new StringWriter();
				e.printStackTrace(new PrintWriter(errors));
				logger.error(errors.toString());
				info.put("status", "0");
				info.put("message", "something went wrong");
				return info;

			}

		}


		@Override
		public Map<String, Object> uploadMultipleMarksheet(CoursesRequest request) {
			Map<String, Object> info = new LinkedHashMap<>();
			try {					
				Optional<AcademicYear> academic = super.academicYear.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear(), false, true);
				if (!academic.isPresent()) {
					info.put("status", "2");
					info.put("message", "academicYear not present");
					return info;
				}
				Optional<Programmes> programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,request.getProgrammes());
				if (!programmes.isPresent()) {
					info.put("status", "2");
					info.put("message", "Programme not present");
					return info;
				}
				Optional<ProgrammeYear> programmeYear = super.programmeYear.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
				if (!programmeYear.isPresent()) {
					info.put("status", "2");
					info.put("message", "programmeYear not present");
					return info;
				}
				Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,request.getSemester());
				if (!sem.isPresent()) {
					info.put("status", "2");
					info.put("message", "Semster not present");
					return info;
				}
					
					String  UPLOADED_FOLDER =  createFolder(academic.get().getExYear(), programmes.get().getExIdentifier(), "u_marksheet" , sem.get().getExName());			
							if(UPLOADED_FOLDER.equals("NA")) {
					info.put("status", "0");
					info.put("message", "something went wrong");
					return info;
				}		
							
		           String imagepath = "/"+academic.get().getExYear()+"/"+programmes.get().getExIdentifier()+"/"+sem.get().getExName()+"/u_marksheet/";				
				   for(int i =0 ;i< request.getFiles().length ; i++) {
					   info =   uploadMarksheet(request.getFiles()[i],request,UPLOADED_FOLDER,imagepath);
				   }
		           	return info;
						   
			}catch(Exception e) {
				e.printStackTrace();
				logger.error("Exception occured" + e);
				StringWriter errors = new StringWriter();
				e.printStackTrace(new PrintWriter(errors));
				logger.error(errors.toString());
				info.put("status", "0");
				info.put("message", "something went wrong");
				return info;
			}
		}
		
		
		
		@Override
		public Map<String, Object> uploadIAMarks(MidTermMarksRequest request) {
			Map<String, Object> info = new LinkedHashMap<>();
			if (request.getExIAMarksFile() == null || request.getExIAMarksFile().isEmpty()) {
				info.put("status", "2");
				info.put("message", "Please Choose file");
				return info;
			}

			String extention = FilenameUtils.getExtension(request.getExIAMarksFile().getOriginalFilename());
			if (extention.equalsIgnoreCase("xls") || extention.equalsIgnoreCase("xlsx")) {

				Map<String, Object> result = readIAMarksFromExcel(request.getExIAMarksFile(), request);

				return result;
			}
			info.put("status", "2");
			info.put("message", "File should be xls / xlsx  extention");
			return info;
		}

		private Map<String, Object> readIAMarksFromExcel(MultipartFile exIAMarksFile, MidTermMarksRequest request) {
			List<String> failureList = new ArrayList<String>();
			List<String> successList = new ArrayList<String>();
			List<Object> list = new ArrayList<Object>();
			Map<String, Object> info = new LinkedHashMap<>();
			try {
				Workbook workbook = getWorkBook(exIAMarksFile);
				Sheet Sheet = workbook.getSheetAt(0);

				Iterator<Row> rows = Sheet.iterator();
				rows.next();

				Optional<ProgrammeYear> programyear = super.programmeYear.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getProgrammeYear());
				if (!programyear.isPresent()) {
					info.put("status", "2");
					info.put("message", "ProgrammeYear not present");
					return info;
				}
				
				Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getSemster());
				if (!sem.isPresent()) {
					info.put("status", "2");
					info.put("message", " Semster not present");
					return info;
				}
				Optional<AcademicYear> academicYear = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getAcademicYear());
				if (!academicYear.isPresent()) {
					info.put("status", "2");
					info.put("message", " academicyear not present");
					return info;
				}

				Optional<Colleges> col = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
						true);
				if (!col.isPresent()) {
					info.put("status", "2");
					info.put("message", "college  not present");
					return info;
				}
				Optional<Department> department = super.department
						.findByIdAndExIsDeleteAndExIsActive(request.getDepartment(), false, true);
				if (!department.isPresent()) {
					info.put("status", "2");
					info.put("message", "department not present");
					return info;
				}

			
				
				Optional<Stream> stream = super.stream.findByIdAndExIsDeleteAndExIsActive(request.getStream(), false, true);
				if (!stream.isPresent()) {
					info.put("status", "2");
					info.put("message", "stream not present");
					return info;
				}
				Optional<Programmes> Prog = super.programme.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getProgrammes());
				if (!Prog.isPresent()) {
					info.put("status", "2");
					info.put("message", " Programe not present");
					return info;
				}

				Optional<Courses> courses = super.courses.findByIdAndExIsDeleteAndExIsActive(request.getCourses(), false,
						true);
				if (!courses.isPresent()) {
					info.put("status", "2");
					info.put("message", "courses not present");
					return info;
				}

				Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
				if (!degree.isPresent()) {
					info.put("status", "2");
					info.put("message", "Degree not present");
					return info;
				}
				
				List<MidTermMarks> validate = super.midtermmarksMarks
						.findByCoursesIdAndStaffId(request.getCourses() , request.getStaff());
				

				int updaterecord = 0;
				Boolean is_update = false;
				Boolean is_already = false;

				int rowIndex = 0;
				for (int rowNum = Sheet.getLastRowNum(); rowNum >= 0; rowNum--) {
					final Row row = Sheet.getRow(rowNum);
					if (row != null && row.getCell(0) != null) {
						if (row.getCell(0).toString() != "" && row.getCell(0).toString() != null) {
							rowIndex = rowNum;
							logger.info("?????????????Last non empty row????????????????" + rowIndex);
							break;
						}
					}
				}
				for (int rowNum = 3; rowNum < rowIndex + 1; rowNum++) {
					Row r = Sheet.getRow(rowNum);
					String temp = "";
					for (int cn = 0; cn < 10; cn++) {
						Cell c = r.getCell(cn, Row.RETURN_BLANK_AS_NULL);
						try {

							if (c == null) {
								// The spreadsheet is empty in this cell
								temp = temp + "#@&" + "NA";
							} else {
								// Do something useful with the cell's contents
								c.setCellType(Cell.CELL_TYPE_STRING);
								temp = temp + "#@&" + super.commonValidations.getCellValue(c);
							}

						} catch (Exception e) {
							StringWriter errors = new StringWriter();
							e.printStackTrace(new PrintWriter(errors));
							logger.error("Exception  : " + errors.toString());
							// return "failed";
						}

					}
					String tempA[] = temp.split("#@&");
					if (request.getExamAnnouncement()==null || request.getExamAnnouncement().equals("NA")) {
						
						return  migIAMarkupload(exIAMarksFile , request);
					}
					Optional<ExamAnnouncement> examannouncement = super.examAnnouncement
							.findByExIsDeleteAndExIsActiveAndId(false, true, request.getExamAnnouncement());
					if (!examannouncement.isPresent()) {
						info.put("status", "2");
						info.put("message", "Examannouncement  not present");
						return info;
					}
					
					MidTermMarks midMarks = new MidTermMarks();
						
					 
					
					
					Optional<Studentadmission> student = super.studentadmission
							.findByExIsDeleteAndExIsActiveAndExRollNo(false, true, tempA[1].trim());
					
					if (student.isPresent()) {
						Date date = new Date();
						List<MidTermMarks> midterm = super.midtermmarksMarks
								.findByStudentadmissionIdAndCoursesIdAndAcademicYearIdAndExIsActiveAndExIsDelete(
										student.get().getId(), courses.get().getId(), academicYear.get().getId(), true,
										false);
						Staffpersonal staff = null;
						if (request.getStaff() == null || request.getStaff().equals("")) {
							staff = null;
						} else {
							Optional<Staffpersonal> staffres = super.staffpersonal
									.findByIdAndExIsDeleteAndExIsActive(request.getStaff(), false, true);
							if (!staffres.isPresent()) {
								info.put("status", "2");
								info.put("message", "staff not present");
								return info;
							}
							staff = staffres.get();
						}

						List<CoursesRegistration> coursereg = super.coursesRegistration
								.findByExIsDeleteAndExIsActiveAndCoursesIdAndStudentadmissionId(false, true,
										courses.get().getId(), student.get().getId());

						if (coursereg.size() <= 0) {

							failureList.add(tempA[1]+"::".concat(tempA[2]) + ":Particular student not Registered for courses:");
							list.add(tempA[1]);

						}

						else {

							Boolean is_submit = false;
							if (tempA[3] == null || tempA[3].toString().trim().equals("")
									|| tempA[3].toString().equals("NA")) {
								is_submit = false;
							} else {
								int val = Integer.parseInt(tempA[3]);
								if (val == 1) {
									is_submit = true;
								} else {
									is_submit = false;
								}
							}
							
							
							
							Double exAssignmentMarks=0.00;
							String exAssignmentMarks_remarks = "NA";
							if(super.commonHelper.isNumeric(tempA[4].trim())) {
								exAssignmentMarks = commonHelper.getMarksValue(tempA[4].trim());
							}else {
								if(tempA[4].trim().equalsIgnoreCase("A")) {
									exAssignmentMarks_remarks = "ABSENT";
								}else {
									exAssignmentMarks_remarks = "NA";
								}			
							}
							
							Double exQuizMarks=0.00;
							String exQuizMarks_remarks = "NA";
							if(super.commonHelper.isNumeric(tempA[5].trim())) {
								exQuizMarks = commonHelper.getMarksValue(tempA[5].trim());
							}else {
								if(tempA[5].trim().equalsIgnoreCase("A")) {
									exQuizMarks_remarks = "ABSENT";
								}else {
									exQuizMarks_remarks = "NA";
								}			
							}
							
							Double exAttendanceMarks=0.00;
							String exAttendanceMarks_remarks = "NA";
							if(super.commonHelper.isNumeric(tempA[6].trim())) {
								exAttendanceMarks = commonHelper.getMarksValue(tempA[6].trim());
							}else {
								if(tempA[6].trim().equalsIgnoreCase("A")) {
									exAttendanceMarks_remarks = "ABSENT";
								}else {
									exAttendanceMarks_remarks = "NA";
								}			
							}
						
							
							
							Double exCaseStudy=0.00;
							String exCaseStudy_remarks = "NA";
							if(super.commonHelper.isNumeric(tempA[7].trim())) {
								exCaseStudy = commonHelper.getMarksValue(tempA[7].trim());
							}else {
								if(tempA[7].trim().equalsIgnoreCase("A")) {
									exCaseStudy_remarks = "ABSENT";
								}else {
									exCaseStudy_remarks = "NA";
								}			
							}
						
							
							
							//double exQuizMarks = super.commonHelper.getdoubleMarks(tempA[5]);
							//double exAssignmentMarks=super.commonHelper.getdoubleMarks(tempA[3]);
							//double exCaseStudy = super.commonHelper.getdoubleMarks(tempA[9]);
							//double exAttendanceMarks = super.commonHelper.getdoubleMarks(tempA[7]);
							if (midterm.size() <= 0) {
								midMarks.setCourses(courses.get());
								midMarks.setExIsSubmit(is_submit);
								midMarks.setExAssignmentMarks(exAssignmentMarks);
								midMarks.setExQuizMarks(exQuizMarks);
								midMarks.setExAttendenceMarks(exAttendanceMarks);
								midMarks.setExCaseStudy(exCaseStudy);
								midMarks.setExAssignmentMarkRemark(exAssignmentMarks_remarks);
								midMarks.setExQuizRemark(exQuizMarks_remarks);
								midMarks.setExCaseStudyRemark(exCaseStudy_remarks);
								midMarks.setExAttendenceRemark(exAttendanceMarks_remarks);								
								midMarks.setAcademicYear(academicYear.get());
								midMarks.setProgrammes(Prog.get());
								midMarks.setColleges(col.get());
								midMarks.setDegree(degree.get());
								midMarks.setDepartment(department.get());
								midMarks.setSection(student.get().getSection());
								midMarks.setStaff(staff);
								midMarks.setExRollNo(student.get().getExRollNo());
								midMarks.setExCreateDate(date);
								midMarks.setSemester(sem.get());
								midMarks.setStream(stream.get());
								midMarks.setExamAnnouncement(examannouncement.get());
								midMarks.setStudentadmission(student.get());
								midMarks.setProgrammeYear(programyear.get());
								midMarks.setExIsActive(true);
								midMarks.setExIsDelete(false);							
								super.midtermmarksMarks.save(midMarks);
								successList.add("Success" + midMarks);

							} else {
								// check is submit 
								if(midterm.get(0).getExIsSubmit() != null && midterm.get(0).getExIsSubmit() == true) {
									is_already = true;
								}else {
									is_already = false;
									is_update = true;
									int i = super.midtermmarksMarks.updateIATheoryMarksDetails(exQuizMarks,
											request.getAcademicYear(), request.getColleges(), request.getProgrammes(),
											request.getCourses(), student.get().getExRollNo(), date, staff,
											student.get().getSection(),request.getExamAnnouncement(),request.getDegree(),exAssignmentMarks,
											exCaseStudy,exAttendanceMarks,exAssignmentMarks_remarks,exQuizMarks_remarks,exAttendanceMarks_remarks,exCaseStudy_remarks,is_submit);
									if (i == 1) {
										updaterecord = updaterecord + 1;
										excellog.info("Updated Record: " + tempA[1].trim());

									}
								}
								

							}
						}

					 
					}else {
						failureList.add(tempA[1] + ": Roll Number Is Not present :");
						list.add(tempA[1]);
					}
					info.put("status", "1");
					info.put("message", exIAMarksFile.getOriginalFilename() + "Excel Uploaded Succesfully ");
					
					if(list.size()>0) {
						if (is_update) {
							info.put("success", updaterecord +" Records "+"::" +" Updated Successfully");
							info.put("failure", list.size() + " Records "+"::" +" Not Updated Error");
						} else {
							info.put("success", successList.size()+ " Records Inserted Successfully");
							info.put("failure", list.size() + " Records Not Inserted ");
						}
					}
					else {
						if (is_update) {
							info.put("success", updaterecord +" Records "+"::" +" Updated Successfully");
						} else {
							info.put("success", successList.size() +" Records Inserted Successfully");
							
						}
					} 										
				}
				if(is_already) {
					info.put("status", "1");
					info.put("success", "--");
					info.put("message", "Marks already uploded");
					return info;
				}				
				excellog.info("Data Not Inserted : " + failureList);
				return info;

			} catch (Exception e) {
				e.printStackTrace();
				logger.error("Exception occured" + e);
				StringWriter errors = new StringWriter();
				e.printStackTrace(new PrintWriter(errors));
				logger.error(errors.toString());
				info.put("status", "0");
				info.put("message", "something went wrong");
				return info;

			}

		}


		private Map<String, Object> migIAMarkupload(MultipartFile exIAMarksFile,MidTermMarksRequest request ) {
			List<String> failureList = new ArrayList<String>();
			List<String> successList = new ArrayList<String>();
			List<Object> list = new ArrayList<Object>();
			Map<String, Object> info = new LinkedHashMap<>();
			try {
				Workbook workbook = getWorkBook(exIAMarksFile);
				Sheet Sheet = workbook.getSheetAt(0);

				Iterator<Row> rows = Sheet.iterator();
				rows.next();

				Optional<ProgrammeYear> programyear = super.programmeYear.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getProgrammeYear());
				if (!programyear.isPresent()) {
					info.put("status", "2");
					info.put("message", "ProgrammeYear not present");
					return info;
				}
				
				Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getSemster());
				if (!sem.isPresent()) {
					info.put("status", "2");
					info.put("message", " Semster not present");
					return info;
				}
				Optional<AcademicYear> academicYear = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getAcademicYear());
				if (!academicYear.isPresent()) {
					info.put("status", "2");
					info.put("message", " academicyear not present");
					return info;
				}

				Optional<Colleges> col = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
						true);
				if (!col.isPresent()) {
					info.put("status", "2");
					info.put("message", "college  not present");
					return info;
				}
				Optional<Department> department = super.department
						.findByIdAndExIsDeleteAndExIsActive(request.getDepartment(), false, true);
				if (!department.isPresent()) {
					info.put("status", "2");
					info.put("message", "department not present");
					return info;
				}

			
				
				Optional<Stream> stream = super.stream.findByIdAndExIsDeleteAndExIsActive(request.getStream(), false, true);
				if (!stream.isPresent()) {
					info.put("status", "2");
					info.put("message", "stream not present");
					return info;
				}
				Optional<Programmes> Prog = super.programme.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getProgrammes());
				if (!Prog.isPresent()) {
					info.put("status", "2");
					info.put("message", " Programe not present");
					return info;
				}

				Optional<Courses> courses = super.courses.findByIdAndExIsDeleteAndExIsActive(request.getCourses(), false,
						true);
				if (!courses.isPresent()) {
					info.put("status", "2");
					info.put("message", "courses not present");
					return info;
				}

				Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
				if (!degree.isPresent()) {
					info.put("status", "2");
					info.put("message", "Degree not present");
					return info;
				}

				int updaterecord = 0;
				Boolean is_update = false;

				int rowIndex = 0;
				for (int rowNum = Sheet.getLastRowNum(); rowNum >= 0; rowNum--) {
					final Row row = Sheet.getRow(rowNum);
					if (row != null && row.getCell(0) != null) {
						if (row.getCell(0).toString() != "" && row.getCell(0).toString() != null) {
							rowIndex = rowNum;
							logger.info("?????????????Last non empty row????????????????" + rowIndex);
							break;
						}
					}
				}
				for (int rowNum = 3; rowNum < rowIndex + 1; rowNum++) {
					Row r = Sheet.getRow(rowNum);
					String temp = "";
					for (int cn = 0; cn < 10; cn++) {
						Cell c = r.getCell(cn, Row.RETURN_BLANK_AS_NULL);
						try {

							if (c == null) {
								// The spreadsheet is empty in this cell
								temp = temp + "#@&" + "NA";
							} else {
								// Do something useful with the cell's contents
								c.setCellType(Cell.CELL_TYPE_STRING);
								temp = temp + "#@&" + super.commonValidations.getCellValue(c);
							}

						} catch (Exception e) {
							StringWriter errors = new StringWriter();
							e.printStackTrace(new PrintWriter(errors));
							logger.error("Exception  : " + errors.toString());
							// return "failed";
						}

					}
					String tempA[] = temp.split("#@&");
					MidTermMarks midMarks = new MidTermMarks();
					Optional<Studentadmission> student = super.studentadmission
							.findByExIsDeleteAndExIsActiveAndExRollNo(false, true, tempA[1].trim());
					
					if (student.isPresent()) {
						Date date = new Date();
						List<MidTermMarks> midterm = super.midtermmarksMarks
								.findByStudentadmissionIdAndCoursesIdAndAcademicYearIdAndExIsActiveAndExIsDelete(
										student.get().getId(), courses.get().getId(), academicYear.get().getId(), true,
										false);
						Staffpersonal staff = null;
						if (request.getStaff() == null || request.getStaff().equals("")) {
							staff = null;
						} else {
							Optional<Staffpersonal> staffres = super.staffpersonal
									.findByIdAndExIsDeleteAndExIsActive(request.getStaff(), false, true);
							if (!staffres.isPresent()) {
								info.put("status", "2");
								info.put("message", "staff not present");
								return info;
							}
							staff = staffres.get();
						}

						List<CoursesRegistration> coursereg = super.coursesRegistration
								.findByExIsDeleteAndExIsActiveAndCoursesIdAndStudentadmissionId(false, true,
										courses.get().getId(), student.get().getId());

						if (coursereg.size() <= 0) {

							failureList.add(tempA[1]+"::".concat(tempA[2]) + ":Particular student not Registered for courses:");
							list.add(tempA[1]);

						}

						else {

							Boolean is_submit = false;
							if (tempA[3] == null || tempA[3].toString().trim().equals("")
									|| tempA[3].toString().equals("NA")) {
								is_submit = false;
							} else {
								int val = Integer.parseInt(tempA[3]);
								if (val == 1) {
									is_submit = true;
								} else {
									is_submit = false;
								}
							}
							
							
							
							Double exAssignmentMarks = 0.0;
							String exAssignmentMarks_remarks = "NA";
							if(super.commonHelper.isNumeric(tempA[4].trim())) {
								exAssignmentMarks = commonHelper.getMarksValue(tempA[4].trim());
							}else {
								if(tempA[4].trim().equalsIgnoreCase("A")) {
									exAssignmentMarks_remarks = "ABSENT";
								}else {
									exAssignmentMarks_remarks = "NA";
								}			
							}
							
							Double exQuizMarks = 0.0;
							String exQuizMarks_remarks = "NA";
							if(super.commonHelper.isNumeric(tempA[5].trim())) {
								exQuizMarks = commonHelper.getMarksValue(tempA[5].trim());
							}else {
								if(tempA[5].trim().equalsIgnoreCase("A")) {
									exQuizMarks_remarks = "ABSENT";
								}else {
									exQuizMarks_remarks = "NA";
								}			
							}
							
							Double exAttendanceMarks = 0.0;
							String exAttendanceMarks_remarks = "NA";
							if(super.commonHelper.isNumeric(tempA[6].trim())) {
								exAttendanceMarks = commonHelper.getMarksValue(tempA[6].trim());
							}else {
								if(tempA[6].trim().equalsIgnoreCase("A")) {
									exAttendanceMarks_remarks = "ABSENT";
								}else {
									exAttendanceMarks_remarks = "NA";
								}			
							}
						
							
							
							Double exCaseStudy = 0.0;
							String exCaseStudy_remarks = "NA";
							if(super.commonHelper.isNumeric(tempA[7].trim())) {
								exCaseStudy = commonHelper.getMarksValue(tempA[7].trim());
							}else {
								if(tempA[7].trim().equalsIgnoreCase("A")) {
									exCaseStudy_remarks = "ABSENT";
								}else {
									exCaseStudy_remarks = "NA";
								}			
							}
						
							if (midterm.size() <= 0) {
								midMarks.setCourses(courses.get());
								midMarks.setExIsSubmit(is_submit);
								midMarks.setExAssignmentMarks(exAssignmentMarks);
								midMarks.setExQuizMarks(exQuizMarks);
								midMarks.setExAttendenceMarks(exAttendanceMarks);
								midMarks.setExCaseStudy(exCaseStudy);
								midMarks.setExAssignmentMarkRemark(exAssignmentMarks_remarks);
								midMarks.setExQuizRemark(exQuizMarks_remarks);
								midMarks.setExCaseStudyRemark(exCaseStudy_remarks);
								midMarks.setExAttendenceRemark(exAttendanceMarks_remarks);	
								midMarks.setAcademicYear(academicYear.get());
								midMarks.setProgrammes(Prog.get());
								midMarks.setColleges(col.get());
								midMarks.setDegree(degree.get());
								midMarks.setDepartment(department.get());
								midMarks.setSection(student.get().getSection());
								midMarks.setStaff(staff);
								midMarks.setExRollNo(student.get().getExRollNo());
								midMarks.setExCreateDate(date);
								midMarks.setSemester(sem.get());
								midMarks.setStream(stream.get());
								midMarks.setStudentadmission(student.get());
								midMarks.setProgrammeYear(programyear.get());
								midMarks.setExIsActive(true);
								midMarks.setExIsDelete(false);
							
								super.midtermmarksMarks.save(midMarks);

								successList.add("Success" + midMarks);

							} else {

								is_update = true;

								int i = super.midtermmarksMarks.updatemigIATheoryMarksDetails(exQuizMarks,
										request.getAcademicYear(), request.getColleges(), request.getProgrammes(),
										request.getCourses(), student.get().getExRollNo(), date, staff,
										student.get().getSection(),request.getDegree(),exAssignmentMarks,
										exCaseStudy,exAttendanceMarks,exAssignmentMarks_remarks,exQuizMarks_remarks,exAttendanceMarks_remarks,exCaseStudy_remarks,is_submit);
								if (i == 1) {
									updaterecord = updaterecord + 1;
									excellog.info("Updated Record: " + tempA[1].trim());

								}
							}
						}

					} else {
						failureList.add(tempA[1] + ": Roll Number Is Not present :");
						list.add(tempA[1]);
					}
					info.put("status", "1");
					info.put("message", exIAMarksFile.getOriginalFilename() + "Excel Uploaded Succesfully ");
					if(list.size()>0) {
						if (is_update) {
							info.put("success", updaterecord +" Records "+"::" +" Updated Successfully");
							info.put("failure", list.size() + " Records "+"::" +" Not Updated Error");
						} else {
							info.put("success", successList.size()+ " Records Inserted Successfully");
							info.put("failure", list.size() + " Records Not Inserted ");
						}
					}
					else {
						if (is_update) {
							info.put("success", updaterecord +" Records "+"::" +" Updated Successfully");
						} else {
							info.put("success", successList.size() +" Records Inserted Successfully");
							
						}
					} 
					}
				excellog.info("Data Not Inserted : " + failureList);
				return info;

			} catch (Exception e) {
				e.printStackTrace();
				logger.error("Exception occured" + e);
				StringWriter errors = new StringWriter();
				e.printStackTrace(new PrintWriter(errors));
				logger.error(errors.toString());
				info.put("status", "0");
				info.put("message", "something went wrong");
				return info;

			}

		}


		@Override
		public Map<String, Object> uploadIAMarksPractical(MidTermMarksRequest request) {
			Map<String, Object> info = new LinkedHashMap<>();

			if (request.getExPracticalIAMarksFile() == null || request.getExPracticalIAMarksFile().isEmpty()) {
				info.put("status", "2");
				info.put("message", "please select file");
			}

			String extention = FilenameUtils.getExtension(request.getExPracticalIAMarksFile().getOriginalFilename());
			if (extention.equalsIgnoreCase("xls") || extention.equalsIgnoreCase("xlsx")) {

				Map<String, Object> result = readIAPracticalMarksFromExcel(request.getExPracticalIAMarksFile(), request);

				return result;
			}
			info.put("status", "2");
			info.put("message", "File should be xls / xlsx  extention");
			return info;
		}

		private Map<String, Object> readIAPracticalMarksFromExcel(MultipartFile exPracticalIAMarksFile, MidTermMarksRequest request) {
			List<String> failureList = new ArrayList<String>();
			List<String> successList = new ArrayList<String>();
			List<Object> list = new ArrayList<Object>();
			Map<String, Object> info = new LinkedHashMap<>();
			try {
				logger.info(">>>...." + request.toString());
				Workbook workbook = getWorkBook(exPracticalIAMarksFile);
				Sheet Sheet = workbook.getSheetAt(0);

				Iterator<Row> rows = Sheet.iterator();
				rows.next();

				Optional<ProgrammeYear> programyear = super.programmeYear.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getProgrammeYear());
				if (!programyear.isPresent()) {
					info.put("status", "2");
					info.put("message", "ProgrammeYear not present");
					return info;
				}
				
				Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getSemster());
				if (!sem.isPresent()) {
					info.put("status", "2");
					info.put("message", " Semster not present");
					return info;
				}
				Optional<AcademicYear> academicYear = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getAcademicYear());
				if (!academicYear.isPresent()) {
					info.put("status", "2");
					info.put("message", " academicyear not present");
					return info;
				}

				Optional<Colleges> col = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
						true);
				if (!col.isPresent()) {
					info.put("status", "2");
					info.put("message", "college  not present");
					return info;
				}
				Optional<Department> department = super.department
						.findByIdAndExIsDeleteAndExIsActive(request.getDepartment(), false, true);
				if (!department.isPresent()) {
					info.put("status", "2");
					info.put("message", "department  not present");
					return info;
				}

				Optional<Stream> stream = super.stream.findByIdAndExIsDeleteAndExIsActive(request.getStream(), false, true);
				if (!stream.isPresent()) {
					info.put("status", "2");
					info.put("message", "stream  not present");
					return info;
				}
				Optional<Programmes> Prog = super.programme.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getProgrammes());
				if (!Prog.isPresent()) {
					info.put("status", "2");
					info.put("message", " Programe not present");
					return info;
				}

				Optional<Courses> courses = super.courses.findByIdAndExIsDeleteAndExIsActive(request.getCourses(), false,
						true);
				if (!courses.isPresent()) {
					info.put("status", "2");
					info.put("message", "courses not present");
					return info;
				}
				
				Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
				if (!degree.isPresent()) {
					info.put("status", "2");
					info.put("message", "Degree not present");
					return info;
				}
				
				int updaterecord = 0;
				Boolean is_update = false;


				int rowIndex = 0;
				for (int rowNum = Sheet.getLastRowNum(); rowNum >= 0; rowNum--) {
					final Row row = Sheet.getRow(rowNum);
					if (row != null && row.getCell(0) != null) {
						if (row.getCell(0).toString() != "" && row.getCell(0).toString() != null) {
							rowIndex = rowNum;
							logger.info("?????????????Last non empty row????????????????" + rowIndex);
							break;
						}
					}
				}
				for (int rowNum = 3; rowNum < rowIndex + 1; rowNum++) {
					Row r = Sheet.getRow(rowNum);
					String temp = "";
					for (int cn = 0; cn < 10; cn++) {
						Cell c = r.getCell(cn, Row.RETURN_BLANK_AS_NULL);
						try {

							if (c == null) {
								// The spreadsheet is empty in this cell
								temp = temp + "#@&" + "NA";
							} else {
								// Do something useful with the cell's contents
								c.setCellType(Cell.CELL_TYPE_STRING);
								temp = temp + "#@&" + super.commonValidations.getCellValue(c);
							}

						} catch (Exception e) {
							StringWriter errors = new StringWriter();
							e.printStackTrace(new PrintWriter(errors));
							logger.error("Exception  : " + errors.toString());
							// return "failed";
						}

					}
					String tempA[] = temp.split("#@&");
					MidTermMarks midMarks = new MidTermMarks();
					ExamBarcodes exambarcodes = new ExamBarcodes();
	               if (request.getExamAnnouncement()==null || request.getExamAnnouncement().equals("NA")) {
						
						return  migIAPracticalMarksupload(request , exPracticalIAMarksFile);
					}
	               
	               Optional<ExamAnnouncement> examannouncement = super.examAnnouncement
							.findByExIsDeleteAndExIsActiveAndId(false, true, request.getExamAnnouncement());
					if (!examannouncement.isPresent()) {
						info.put("status", "2");
						info.put("message", "Examannouncement  not present");
						return info;
					}
	               
	               //===================================================
	               if(courses.get().getExIsIndustrialVisit()==true) {
	            	   
	            	   return IAPracticalIsIndustrialVisitupload(request , exPracticalIAMarksFile);
	               }
	               
	               if(courses.get().getExIsIndustrialTrainingInternship() == true) {
	            	   
	            	   return IAPracticalIsIndustrialTrainingOrInternshipupload(request , exPracticalIAMarksFile); 
	               }
	               
	               if(courses.get().getExIsProject() ==  true) {
	            	   return IAPracticalIsProjectupload(request , exPracticalIAMarksFile); 
	            	   
	               }
	               
	               if(courses.get().getExIsVillageAdoption() == true) {
	            	   
	            	   return IAPracticalIsVillageAdoptionupload(request , exPracticalIAMarksFile); 
	               }
	               
	               if(courses.get().getExIsResearchProject() == true) {
	            	   
	            	   return IAPracticalIsResearchProjectupload(request , exPracticalIAMarksFile); 
	               }
	               
	               
	               if(courses.get().getExIsSeminar() == true) {
	            	   
	            	   return IAPracticalIsSeminarupload(request , exPracticalIAMarksFile); 
	               }
	               
	               //===================================================
					
	
					Optional<Studentadmission> student = super.studentadmission
							.findByExIsDeleteAndExIsActiveAndExRollNo(false, true, tempA[1].trim());
					

					Optional<ExamAttendance> ExamAttendance = super.examAttendance
							.findByExIsDeleteAndExIsActiveAndStudentadmissionExRollNoAndCollegesIdAndDegreeIdAndProgrammesIdAndExamAnnouncementIdAndCoursesId(
									false, true, tempA[1].trim(), request.getColleges(), request.getDegree(),
									request.getProgrammes(), request.getExamAnnouncement(), request.getCourses());

					if (student.isPresent()) {
						Date date = new Date();
						
	
						List<MidTermMarks> midterm = super.midtermmarksMarks
								.findByExIsActiveAndExIsDeleteAndExRollNoAndCoursesId(true, false, tempA[1].trim(),
										request.getCourses());
						System.out.println(">...mid" + midterm);
						
						List<ExamBarcodes> exambar = super.exambarcode.findByExIsActiveAndExIsDeleteAndExRollNoAndCoursesId(true, false, tempA[1].trim(),
								request.getCourses());
	
						Staffpersonal staff = null;
						if (request.getStaff() == null || request.getStaff().equals("")) {
							staff = null;
						} else {
							Optional<Staffpersonal> staffres = super.staffpersonal
									.findByIdAndExIsDeleteAndExIsActive(request.getStaff(), false, true);
							if (!staffres.isPresent()) {
								info.put("status", "2");
								info.put("message", "staff not present");
								return info;
							}
							staff = staffres.get();
						}
						 if (!ExamAttendance.isPresent()) {
						 failureList.add("Attendance not created for Particular Subject : " +tempA[1]+"::"+tempA[2]);
						 list.add(tempA[1]); 
						 }
						List<CoursesRegistration> coursereg = super.coursesRegistration
								.findByExIsDeleteAndExIsActiveAndCoursesIdAndStudentadmissionId(false, true,
										courses.get().getId(), student.get().getId());
						if (coursereg.size() <= 0) {
							failureList.add(tempA[1] + ": student not registered for courses:");
							list.add(tempA[1]);
						
						}else {
							 Boolean is_submit = false;
								if (tempA[3] == null || tempA[3].toString().trim().equals("")
										|| tempA[3].toString().equals("NA")) {
									is_submit = false;
								} else {
									int val = Integer.parseInt(tempA[3]);
									if (val == 1) {
										is_submit = true;
									} else {
										is_submit = false;
									}
								}
								
								
								Boolean is_PracticalAttendance = false;
								if (tempA[4] == null || tempA[3].toString().trim().equals("")
										|| tempA[4].toString().equals("NA")) {
									is_PracticalAttendance = false;
								} else {
									int val = Integer.parseInt(tempA[4]);
									if (val == 1) {
										is_PracticalAttendance = true;
									} else {
										is_PracticalAttendance = false;
									}
								}	 
								Double exPracticalRecordMarks = 0.00;
								String exPracticalRecordMarks_remarks = "NA";
								if(super.commonHelper.isNumeric(tempA[5].trim())) {
									exPracticalRecordMarks = commonHelper.getMarksValue(tempA[5].trim());
								}else {
									if(tempA[5].trim().equalsIgnoreCase("A")) {
										exPracticalRecordMarks_remarks = "ABSENT";
									}else {
										exPracticalRecordMarks_remarks = "NA";
									}			
								}
								

								Double exPracticallearningMarks = 0.00;
								String exPracticallearningMarks_remarks = "NA";
								if(super.commonHelper.isNumeric(tempA[6].trim())) {
									exPracticallearningMarks = commonHelper.getMarksValue(tempA[6].trim());
								}else {
									if(tempA[6].trim().equalsIgnoreCase("A")) {
										exPracticallearningMarks_remarks = "ABSENT";
									}else {
										exPracticallearningMarks_remarks = "NA";
									}			
								}
								
								Double exLabExperiment = 0.00;
								String exLabExperiment_remarks = "NA";
								if(super.commonHelper.isNumeric(tempA[7].trim())) {
									exLabExperiment = commonHelper.getMarksValue(tempA[7].trim());
								}else {
									if(tempA[8].trim().equalsIgnoreCase("A")) {
										exLabExperiment_remarks = "ABSENT";
									}else {
										exLabExperiment_remarks = "NA";
									}			
								}
							 
								

								Double exViva = 0.00;
								String exViva_remarks = "NA";
								if(super.commonHelper.isNumeric(tempA[8].trim())) {
									exViva = commonHelper.getMarksValue(tempA[8].trim());
								}else {
									if(tempA[8].trim().equalsIgnoreCase("A")) {
										exViva_remarks = "ABSENT";
									}else {
										exViva_remarks = "NA";
									}			
								}
							
							//double exPracticalRecordMarks = super.commonHelper.getdoubleMarks(tempA[3]);
							//double exPracticallearningMarks = super.commonHelper.getdoubleMarks(tempA[5]);
							//double exLabExperiment = super.commonHelper.getdoubleMarks(tempA[7]);
							//double exViva = super.commonHelper.getdoubleMarks(tempA[9]);

							if (midterm.size() <= 0) {
								midMarks.setCourses(courses.get());
								midMarks.setExIsSubmit(is_submit);
								midMarks.setExPracticalRecordMarks(exPracticalRecordMarks);
								midMarks.setExPracticalLearning(exPracticallearningMarks);
								midMarks.setExpracticalRecordRemarks(exPracticalRecordMarks_remarks);
								midMarks.setExpracticalLearningRemarks(exPracticallearningMarks_remarks);
								midMarks.setAcademicYear(academicYear.get());
								midMarks.setProgrammes(Prog.get());
								midMarks.setColleges(col.get());
								midMarks.setDegree(degree.get());	
								midMarks.setDepartment(department.get());
								midMarks.setSection(student.get().getSection());
								midMarks.setExRollNo(student.get().getExRollNo());
								midMarks.setExCreateDate(date);
								midMarks.setSemester(sem.get());
								midMarks.setStream(stream.get());
								midMarks.setStaff(staff);
								midMarks.setExamAnnouncement(examannouncement.get());
								midMarks.setStudentadmission(student.get());
								midMarks.setProgrammeYear(programyear.get());
								midMarks.setExIsActive(true);
								midMarks.setExIsDelete(false);
								super.midtermmarksMarks.save(midMarks);
								successList.add("Success" + midMarks);
								excellog.info("Inserted Records into MidtermTable: " + tempA[1].trim());
							}
							if( exambar.size()<=0) {
								exambarcodes.setCourses(courses.get());
								exambarcodes.setExIsPracticalAttendance(is_PracticalAttendance);
								exambarcodes.setExLabExperiment(exLabExperiment);
								exambarcodes.setExViva(exViva);
								exambarcodes.setExLabExperimentRemarks(exLabExperiment_remarks);
								exambarcodes.setExVivaRemarks(exViva_remarks);
								exambarcodes.setAcademicYear(academicYear.get());
								exambarcodes.setProgrammes(Prog.get());
								exambarcodes.setColleges(col.get());
								exambarcodes.setDegree(degree.get());
								exambarcodes.setDepartment(department.get());
								exambarcodes.setExRollNo(student.get().getExRollNo());
								exambarcodes.setExCreateDate(date);
								exambarcodes.setSemester(sem.get());
								exambarcodes.setExamAnnouncement(examannouncement.get());
								exambarcodes.setStudentadmission(student.get());
								exambarcodes.setProgrammeYear(programyear.get());
								exambarcodes.setRegistrationType(coursereg.get(0).getRegistration());
								exambarcodes.setExIsActive(true);
								exambarcodes.setExIsDelete(false);
								super.ExamBarcodes.save(exambarcodes);
								excellog.info("Inserted Records into ExamBarcodesTable: " + tempA[1].trim());
							}
							else {
								is_update = true;

								
								int i = super.midtermmarksMarks.updatePracticalDetailfaculty(exPracticalRecordMarks,
										exPracticallearningMarks, request.getAcademicYear(), request.getColleges(),
										request.getProgrammes(), request.getCourses(), student.get().getExRollNo(), date,
										staff, student.get().getSection(),exPracticalRecordMarks_remarks,exPracticallearningMarks_remarks
										,is_submit,request.getExamAnnouncement(),request.getDegree());
							

								int j = super.ExamBarcodes.updatePracticalrecordsfacultiesss(exLabExperiment,
										exViva, request.getAcademicYear(), request.getColleges(),
										request.getProgrammes(), request.getCourses(), student.get().getExRollNo(), date,
										exLabExperiment_remarks,exViva_remarks
										,is_PracticalAttendance,request.getExamAnnouncement(),request.getDegree());
								
								if (i == 1&&j==1) {
									updaterecord = updaterecord + 1;
									excellog.info("Updated Record: " + tempA[1].trim());

								}
							}
						}

					}  else {
						failureList.add(tempA[1] + ": Roll.No Not present :");
						list.add(tempA[1]);
					}
					info.put("status", "1");
					info.put("message", exPracticalIAMarksFile.getOriginalFilename() + "Excel Uploaded Succesfully ");
					if(list.size()>0) {
						if (is_update) {
							info.put("success", updaterecord +" Records "+"::" +" Updated Successfully");
							info.put("failure", list.size() + " Records "+"::" +" Not Updated Error");
						} else {
							info.put("success", successList.size()+ " Records Inserted Successfully");
							info.put("failure", list.size() + " Records Not Inserted ");
						}
					}
					else {
						if (is_update) {
							info.put("success", updaterecord +" Records "+"::" +" Updated Successfully");
						} else {
							info.put("success", successList.size() +" Records Inserted Successfully");
						}
					} 
					
				}
				excellog.info("Data Not Inserted : " + failureList);
				return info;

			} catch (Exception e) {
				e.printStackTrace();
				logger.error("Exception occured" + e);
				StringWriter errors = new StringWriter();
				e.printStackTrace(new PrintWriter(errors));
				logger.error(errors.toString());
				info.put("status", "0");
				info.put("message", "something went wrong");
				return info;

			}

		}
					
								
		private Map<String, Object> IAPracticalIsSeminarupload(MidTermMarksRequest request,
				MultipartFile exPracticalIAMarksFile) {
			List<String> failureList = new ArrayList<String>();
			List<String> successList = new ArrayList<String>();
			List<Object> list = new ArrayList<Object>();
			Map<String, Object> info = new LinkedHashMap<>();
			try {
				logger.info(">>>...." + request.toString());
				Workbook workbook = getWorkBook(exPracticalIAMarksFile);
				Sheet Sheet = workbook.getSheetAt(0);

				Iterator<Row> rows = Sheet.iterator();
				rows.next();

				Optional<ProgrammeYear> programyear = super.programmeYear.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getProgrammeYear());
				if (!programyear.isPresent()) {
					info.put("status", "2");
					info.put("message", "ProgrammeYear not present");
					return info;
				}
				
				Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getSemster());
				if (!sem.isPresent()) {
					info.put("status", "2");
					info.put("message", " Semster not present");
					return info;
				}
				Optional<AcademicYear> academicYear = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getAcademicYear());
				if (!academicYear.isPresent()) {
					info.put("status", "2");
					info.put("message", " academicyear not present");
					return info;
				}

				Optional<Colleges> col = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
						true);
				if (!col.isPresent()) {
					info.put("status", "2");
					info.put("message", "college  not present");
					return info;
				}
				Optional<Department> department = super.department
						.findByIdAndExIsDeleteAndExIsActive(request.getDepartment(), false, true);
				if (!department.isPresent()) {
					info.put("status", "2");
					info.put("message", "department  not present");
					return info;
				}

				Optional<Stream> stream = super.stream.findByIdAndExIsDeleteAndExIsActive(request.getStream(), false, true);
				if (!stream.isPresent()) {
					info.put("status", "2");
					info.put("message", "stream  not present");
					return info;
				}
				Optional<Programmes> Prog = super.programme.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getProgrammes());
				if (!Prog.isPresent()) {
					info.put("status", "2");
					info.put("message", " Programe not present");
					return info;
				}

				Optional<Courses> courses = super.courses.findByIdAndExIsDeleteAndExIsActive(request.getCourses(), false,
						true);
				if (!courses.isPresent()) {
					info.put("status", "2");
					info.put("message", "courses not present");
					return info;
				}
				
				Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
				if (!degree.isPresent()) {
					info.put("status", "2");
					info.put("message", "Degree not present");
					return info;
				}
				
				int updaterecord = 0;
				Boolean is_update = false;


				int rowIndex = 0;
				for (int rowNum = Sheet.getLastRowNum(); rowNum >= 0; rowNum--) {
					final Row row = Sheet.getRow(rowNum);
					if (row != null && row.getCell(0) != null) {
						if (row.getCell(0).toString() != "" && row.getCell(0).toString() != null) {
							rowIndex = rowNum;
							logger.info("?????????????Last non empty row????????????????" + rowIndex);
							break;
						}
					}
				}
				for (int rowNum = 3; rowNum < rowIndex + 1; rowNum++) {
					Row r = Sheet.getRow(rowNum);
					String temp = "";
					for (int cn = 0; cn < 10; cn++) {
						Cell c = r.getCell(cn, Row.RETURN_BLANK_AS_NULL);
						try {

							if (c == null) {
								// The spreadsheet is empty in this cell
								temp = temp + "#@&" + "NA";
							} else {
								// Do something useful with the cell's contents
								c.setCellType(Cell.CELL_TYPE_STRING);
								temp = temp + "#@&" + super.commonValidations.getCellValue(c);
							}

						} catch (Exception e) {
							StringWriter errors = new StringWriter();
							e.printStackTrace(new PrintWriter(errors));
							logger.error("Exception  : " + errors.toString());
							// return "failed";
						}

					}
					String tempA[] = temp.split("#@&");
					MidTermMarks midMarks = new MidTermMarks();
					ExamBarcodes exambarcodes = new ExamBarcodes();
	           //    if (request.getExamAnnouncement()==null || request.getExamAnnouncement().equals("NA")) {
						
					//	return  migIAPracticalMarksupload(request , exPracticalIAMarksFile);
				//	}
	               
					Optional<ExamAnnouncement> examannouncement = super.examAnnouncement
							.findByExIsDeleteAndExIsActiveAndId(false, true, request.getExamAnnouncement());
					if (!examannouncement.isPresent()) {
						info.put("status", "2");
						info.put("message", "Examannouncement  not present");
						return info;
					}
	
					Optional<Studentadmission> student = super.studentadmission
							.findByExIsDeleteAndExIsActiveAndExRollNo(false, true, tempA[1].trim());
					

					Optional<ExamAttendance> ExamAttendance = super.examAttendance
							.findByExIsDeleteAndExIsActiveAndStudentadmissionExRollNoAndCollegesIdAndDegreeIdAndProgrammesIdAndExamAnnouncementIdAndCoursesId(
									false, true, tempA[1].trim(), request.getColleges(), request.getDegree(),
									request.getProgrammes(), request.getExamAnnouncement(), request.getCourses());

					if (student.isPresent()) {
						Date date = new Date();
						
	
						List<MidTermMarks> midterm = super.midtermmarksMarks
								.findByExIsActiveAndExIsDeleteAndExRollNoAndCoursesId(true, false, tempA[1].trim(),
										request.getCourses());
						System.out.println(">...mid" + midterm);
						
						List<ExamBarcodes> exambar = super.exambarcode.findByExIsActiveAndExIsDeleteAndExRollNoAndCoursesId(true, false, tempA[1].trim(),
								request.getCourses());
	
						Staffpersonal staff = null;
						if (request.getStaff() == null || request.getStaff().equals("")) {
							staff = null;
						} else {
							Optional<Staffpersonal> staffres = super.staffpersonal
									.findByIdAndExIsDeleteAndExIsActive(request.getStaff(), false, true);
							if (!staffres.isPresent()) {
								info.put("status", "2");
								info.put("message", "staff not present");
								return info;
							}
							staff = staffres.get();
						}
						 if (!ExamAttendance.isPresent()) {
						 failureList.add("Attendance not created for Particular Subject : " +tempA[1]+"::"+tempA[2]);
						 list.add(tempA[1]); 
						 }
						List<CoursesRegistration> coursereg = super.coursesRegistration
								.findByExIsDeleteAndExIsActiveAndCoursesIdAndStudentadmissionId(false, true,
										courses.get().getId(), student.get().getId());
						if (coursereg.size() <= 0) {
							failureList.add(tempA[1] + ": student not registered for courses:");
							list.add(tempA[1]);
						
						}else {
							 Boolean is_submit = false;
								if (tempA[3] == null || tempA[3].toString().trim().equals("")
										|| tempA[3].toString().equals("NA")) {
									is_submit = false;
								} else {
									int val = Integer.parseInt(tempA[3]);
									if (val == 1) {
										is_submit = true;
									} else {
										is_submit = false;
									}
								}
								
								
								Boolean is_PracticalAttendance = false;
								if (tempA[4] == null || tempA[3].toString().trim().equals("")
										|| tempA[4].toString().equals("NA")) {
									is_PracticalAttendance = false;
								} else {
									int val = Integer.parseInt(tempA[4]);
									if (val == 1) {
										is_PracticalAttendance = true;
									} else {
										is_PracticalAttendance = false;
									}
								}
								
							 
							 
								Double exWriteupReportMM30 = null;
								String exWriteupReportMM30Remark = "NA";
								if(super.commonHelper.isNumeric(tempA[5].trim())) {
									exWriteupReportMM30 = commonHelper.getMarksValue(tempA[5].trim());
								}else {
									if(tempA[5].trim().equalsIgnoreCase("A")) {
										exWriteupReportMM30Remark = "ABSENT";
									}else {
										exWriteupReportMM30Remark = "NA";
									}			
								}
								

								Double exPresentationandVivaVoiceMM50 =null;
								String exPresentationandVivaVoiceMM50Remark = "NA";
								if(super.commonHelper.isNumeric(tempA[6].trim())) {
									exPresentationandVivaVoiceMM50 = commonHelper.getMarksValue(tempA[6].trim());
								}else {
									if(tempA[6].trim().equalsIgnoreCase("A")) {
										exPresentationandVivaVoiceMM50Remark = "ABSENT";
									}else {
										exPresentationandVivaVoiceMM50Remark = "NA";
									}			
								}
								
								
								Double exParticipationintheCourseMM20 = null;
								String exParticipationintheCourseMM20Remark = "NA";
								if(super.commonHelper.isNumeric(tempA[7].trim())) {
									exParticipationintheCourseMM20 = commonHelper.getMarksValue(tempA[7].trim());
								}else {
									if(tempA[6].trim().equalsIgnoreCase("A")) {
										exParticipationintheCourseMM20Remark = "ABSENT";
									}else {
										exParticipationintheCourseMM20Remark = "NA";
									}			
								}
								
								
							if (midterm.size() <= 0) {
								midMarks.setCourses(courses.get());
								midMarks.setExIsSubmit(is_submit);
								midMarks.setExPracticalRecordMarks(exWriteupReportMM30);
								midMarks.setExpracticalRecordRemarks(exWriteupReportMM30Remark);
								midMarks.setAcademicYear(academicYear.get());
								midMarks.setProgrammes(Prog.get());
								midMarks.setColleges(col.get());
								midMarks.setDegree(degree.get());	
								midMarks.setDepartment(department.get());
								midMarks.setSection(student.get().getSection());
								midMarks.setExRollNo(student.get().getExRollNo());
								midMarks.setExCreateDate(date);
								midMarks.setSemester(sem.get());
								midMarks.setStream(stream.get());
								midMarks.setStaff(staff);
								midMarks.setExamAnnouncement(examannouncement.get());
								midMarks.setStudentadmission(student.get());
								midMarks.setProgrammeYear(programyear.get());
								midMarks.setExIsActive(true);
								midMarks.setExIsDelete(false);
								super.midtermmarksMarks.save(midMarks);
								successList.add("Success" + midMarks);
								excellog.info("Inserted Records into MidtermTable: " + tempA[1].trim());
							}
							if( exambar.size()<=0) {
								exambarcodes.setCourses(courses.get());
								exambarcodes.setExIsPracticalAttendance(is_PracticalAttendance);
								exambarcodes.setExLabExperiment(exPresentationandVivaVoiceMM50);
								exambarcodes.setExLabExperimentRemarks(exPresentationandVivaVoiceMM50Remark);
								exambarcodes.setExViva(exParticipationintheCourseMM20);
								exambarcodes.setExVivaRemarks(exParticipationintheCourseMM20Remark);
								exambarcodes.setAcademicYear(academicYear.get());
								exambarcodes.setProgrammes(Prog.get());
								exambarcodes.setColleges(col.get());
								exambarcodes.setDegree(degree.get());
								exambarcodes.setDepartment(department.get());
								exambarcodes.setExRollNo(student.get().getExRollNo());
								exambarcodes.setExCreateDate(date);
								exambarcodes.setSemester(sem.get());
								exambarcodes.setExamAnnouncement(examannouncement.get());
								exambarcodes.setStudentadmission(student.get());
								exambarcodes.setProgrammeYear(programyear.get());
								exambarcodes.setRegistrationType(coursereg.get(0).getRegistration());
								exambarcodes.setExIsActive(true);
								exambarcodes.setExIsDelete(false);
								super.ExamBarcodes.save(exambarcodes);
								excellog.info("Inserted Records into ExamBarcodesTable: " + tempA[1].trim());
							}
							else {
								is_update = true;	
								int i = super.midtermmarksMarks.Seminar(exWriteupReportMM30,
										 request.getAcademicYear(), request.getColleges(),
										request.getProgrammes(), request.getCourses(), student.get().getExRollNo(), date,
										staff, student.get().getSection(),exWriteupReportMM30Remark
										,is_submit,request.getExamAnnouncement(),request.getDegree());
							

								int j = super.ExamBarcodes.Seminar(exPresentationandVivaVoiceMM50,
										 request.getAcademicYear(), request.getColleges(),
										request.getProgrammes(), request.getCourses(), student.get().getExRollNo(), date,
										exPresentationandVivaVoiceMM50Remark
										,is_PracticalAttendance,request.getExamAnnouncement(),request.getDegree(),exParticipationintheCourseMM20,exParticipationintheCourseMM20Remark);
								
								if (i == 1&&j==1) {
									updaterecord = updaterecord + 1;
									excellog.info("Updated Record: " + tempA[1].trim());

								}
							}
						}

					}  else {
						failureList.add(tempA[1] + ": Roll.No Not present :");
						list.add(tempA[1]);
					}
					info.put("status", "1");
					info.put("message", exPracticalIAMarksFile.getOriginalFilename() + "Excel Uploaded Succesfully ");
					if(list.size()>0) {
						if (is_update) {
							info.put("success", updaterecord +" Records "+"::" +" Updated Successfully");
							info.put("failure", list.size() + " Records "+"::" +" Not Updated Error");
						} else {
							info.put("success", successList.size()+ " Records Inserted Successfully");
							info.put("failure", list.size() + " Records Not Inserted ");
						}
					}
					else {
						if (is_update) {
							info.put("success", updaterecord +" Records "+"::" +" Updated Successfully");
						} else {
							info.put("success", successList.size() +" Records Inserted Successfully");
						}
					} 
					
				}
				excellog.info("Data Not Inserted : " + failureList);
				return info;

			} catch (Exception e) {
				e.printStackTrace();
				logger.error("Exception occured" + e);
				StringWriter errors = new StringWriter();
				e.printStackTrace(new PrintWriter(errors));
				logger.error(errors.toString());
				info.put("status", "0");
				info.put("message", "something went wrong");
				return info;

			}
		}


		private Map<String, Object> IAPracticalIsResearchProjectupload(MidTermMarksRequest request,
				MultipartFile exPracticalIAMarksFile) {
			List<String> failureList = new ArrayList<String>();
			List<String> successList = new ArrayList<String>();
			List<Object> list = new ArrayList<Object>();
			Map<String, Object> info = new LinkedHashMap<>();
			try {
				logger.info(">>>...." + request.toString());
				Workbook workbook = getWorkBook(exPracticalIAMarksFile);
				Sheet Sheet = workbook.getSheetAt(0);

				Iterator<Row> rows = Sheet.iterator();
				rows.next();

				Optional<ProgrammeYear> programyear = super.programmeYear.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getProgrammeYear());
				if (!programyear.isPresent()) {
					info.put("status", "2");
					info.put("message", "ProgrammeYear not present");
					return info;
				}
				
				Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getSemster());
				if (!sem.isPresent()) {
					info.put("status", "2");
					info.put("message", " Semster not present");
					return info;
				}
				Optional<AcademicYear> academicYear = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getAcademicYear());
				if (!academicYear.isPresent()) {
					info.put("status", "2");
					info.put("message", " academicyear not present");
					return info;
				}

				Optional<Colleges> col = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
						true);
				if (!col.isPresent()) {
					info.put("status", "2");
					info.put("message", "college  not present");
					return info;
				}
				Optional<Department> department = super.department
						.findByIdAndExIsDeleteAndExIsActive(request.getDepartment(), false, true);
				if (!department.isPresent()) {
					info.put("status", "2");
					info.put("message", "department  not present");
					return info;
				}

				Optional<Stream> stream = super.stream.findByIdAndExIsDeleteAndExIsActive(request.getStream(), false, true);
				if (!stream.isPresent()) {
					info.put("status", "2");
					info.put("message", "stream  not present");
					return info;
				}
				Optional<Programmes> Prog = super.programme.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getProgrammes());
				if (!Prog.isPresent()) {
					info.put("status", "2");
					info.put("message", " Programe not present");
					return info;
				}

				Optional<Courses> courses = super.courses.findByIdAndExIsDeleteAndExIsActive(request.getCourses(), false,
						true);
				if (!courses.isPresent()) {
					info.put("status", "2");
					info.put("message", "courses not present");
					return info;
				}
				
				Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
				if (!degree.isPresent()) {
					info.put("status", "2");
					info.put("message", "Degree not present");
					return info;
				}
				
				int updaterecord = 0;
				Boolean is_update = false;


				int rowIndex = 0;
				for (int rowNum = Sheet.getLastRowNum(); rowNum >= 0; rowNum--) {
					final Row row = Sheet.getRow(rowNum);
					if (row != null && row.getCell(0) != null) {
						if (row.getCell(0).toString() != "" && row.getCell(0).toString() != null) {
							rowIndex = rowNum;
							logger.info("?????????????Last non empty row????????????????" + rowIndex);
							break;
						}
					}
				}
				for (int rowNum = 3; rowNum < rowIndex + 1; rowNum++) {
					Row r = Sheet.getRow(rowNum);
					String temp = "";
					for (int cn = 0; cn < 10; cn++) {
						Cell c = r.getCell(cn, Row.RETURN_BLANK_AS_NULL);
						try {

							if (c == null) {
								// The spreadsheet is empty in this cell
								temp = temp + "#@&" + "NA";
							} else {
								// Do something useful with the cell's contents
								c.setCellType(Cell.CELL_TYPE_STRING);
								temp = temp + "#@&" + super.commonValidations.getCellValue(c);
							}

						} catch (Exception e) {
							StringWriter errors = new StringWriter();
							e.printStackTrace(new PrintWriter(errors));
							logger.error("Exception  : " + errors.toString());
							// return "failed";
						}

					}
					String tempA[] = temp.split("#@&");
					MidTermMarks midMarks = new MidTermMarks();
					ExamBarcodes exambarcodes = new ExamBarcodes();
					
					
	             //  if (request.getExamAnnouncement()==null || request.getExamAnnouncement().equals("NA")) {
						
				//		return  migIAPracticalMarksupload(request , exPracticalIAMarksFile);
				//	}
	               
					Optional<ExamAnnouncement> examannouncement = super.examAnnouncement
							.findByExIsDeleteAndExIsActiveAndId(false, true, request.getExamAnnouncement());
					if (!examannouncement.isPresent()) {
						info.put("status", "2");
						info.put("message", "Examannouncement  not present");
						return info;
					}
	
					Optional<Studentadmission> student = super.studentadmission
							.findByExIsDeleteAndExIsActiveAndExRollNo(false, true, tempA[1].trim());
					

					Optional<ExamAttendance> ExamAttendance = super.examAttendance
							.findByExIsDeleteAndExIsActiveAndStudentadmissionExRollNoAndCollegesIdAndDegreeIdAndProgrammesIdAndExamAnnouncementIdAndCoursesId(
									false, true, tempA[1].trim(), request.getColleges(), request.getDegree(),
									request.getProgrammes(), request.getExamAnnouncement(), request.getCourses());

					if (student.isPresent()) {
						Date date = new Date();
						
	
						List<MidTermMarks> midterm = super.midtermmarksMarks
								.findByExIsActiveAndExIsDeleteAndExRollNoAndCoursesId(true, false, tempA[1].trim(),
										request.getCourses());
						System.out.println(">...mid" + midterm);
						
						List<ExamBarcodes> exambar = super.exambarcode.findByExIsActiveAndExIsDeleteAndExRollNoAndCoursesId(true, false, tempA[1].trim(),
								request.getCourses());
	
						Staffpersonal staff = null;
						if (request.getStaff() == null || request.getStaff().equals("")) {
							staff = null;
						} else {
							Optional<Staffpersonal> staffres = super.staffpersonal
									.findByIdAndExIsDeleteAndExIsActive(request.getStaff(), false, true);
							if (!staffres.isPresent()) {
								info.put("status", "2");
								info.put("message", "staff not present");
								return info;
							}
							staff = staffres.get();
						}
						 if (!ExamAttendance.isPresent()) {
						 failureList.add("Attendance not created for Particular Subject : " +tempA[1]+"::"+tempA[2]);
						 list.add(tempA[1]); 
						 }
						List<CoursesRegistration> coursereg = super.coursesRegistration
								.findByExIsDeleteAndExIsActiveAndCoursesIdAndStudentadmissionId(false, true,
										courses.get().getId(), student.get().getId());
						if (coursereg.size() <= 0) {
							failureList.add(tempA[1] + ": student not registered for courses:");
							list.add(tempA[1]);
						
						}else {
							 Boolean is_submit = false;
								if (tempA[3] == null || tempA[3].toString().trim().equals("")
										|| tempA[3].toString().equals("NA")) {
									is_submit = false;
								} else {
									int val = Integer.parseInt(tempA[3]);
									if (val == 1) {
										is_submit = true;
									} else {
										is_submit = false;
									}
								}
								
								
								Boolean is_PracticalAttendance = false;
								if (tempA[4] == null || tempA[3].toString().trim().equals("")
										|| tempA[4].toString().equals("NA")) {
									is_PracticalAttendance = false;
								} else {
									int val = Integer.parseInt(tempA[4]);
									if (val == 1) {
										is_PracticalAttendance = true;
									} else {
										is_PracticalAttendance = false;
									}
								}
								
							 
							 
								Double exInternalAssessmentMM40 = null;
								String exInternalAssessmentMM40Remark = "NA";
								if(super.commonHelper.isNumeric(tempA[5].trim())) {
									exInternalAssessmentMM40 = commonHelper.getMarksValue(tempA[5].trim());
								}else {
									if(tempA[5].trim().equalsIgnoreCase("A")) {
										exInternalAssessmentMM40Remark = "ABSENT";
									}else {
										exInternalAssessmentMM40Remark = "NA";
									}			
								}
								

								Double exExternalAssessmentMM60 = null;
								String exExternalAssessmentMM60Remark = "NA";
								if(super.commonHelper.isNumeric(tempA[6].trim())) {
									exExternalAssessmentMM60 = commonHelper.getMarksValue(tempA[6].trim());
								}else {
									if(tempA[6].trim().equalsIgnoreCase("A")) {
										exExternalAssessmentMM60Remark = "ABSENT";
									}else {
										exExternalAssessmentMM60Remark = "NA";
									}			
								}
								
							if (midterm.size() <= 0) {
								midMarks.setCourses(courses.get());
								midMarks.setExIsSubmit(is_submit);
								midMarks.setExPracticalRecordMarks(exInternalAssessmentMM40);
								midMarks.setExpracticalRecordRemarks(exInternalAssessmentMM40Remark);
								midMarks.setAcademicYear(academicYear.get());
								midMarks.setProgrammes(Prog.get());
								midMarks.setColleges(col.get());
								midMarks.setDegree(degree.get());	
								midMarks.setDepartment(department.get());
								midMarks.setSection(student.get().getSection());
								midMarks.setExRollNo(student.get().getExRollNo());
								midMarks.setExCreateDate(date);
								midMarks.setSemester(sem.get());
								midMarks.setStream(stream.get());
								midMarks.setStaff(staff);
								midMarks.setExamAnnouncement(examannouncement.get());
								midMarks.setStudentadmission(student.get());
								midMarks.setProgrammeYear(programyear.get());
								midMarks.setExIsActive(true);
								midMarks.setExIsDelete(false);
								super.midtermmarksMarks.save(midMarks);
								successList.add("Success" + midMarks);
								excellog.info("Inserted Records into MidtermTable: " + tempA[1].trim());
							}
							if( exambar.size()<=0) {
								exambarcodes.setCourses(courses.get());
								exambarcodes.setExIsPracticalAttendance(is_PracticalAttendance);
								exambarcodes.setExLabExperiment(exExternalAssessmentMM60);
								exambarcodes.setExLabExperimentRemarks(exExternalAssessmentMM60Remark);
								exambarcodes.setAcademicYear(academicYear.get());
								exambarcodes.setProgrammes(Prog.get());
								exambarcodes.setColleges(col.get());
								exambarcodes.setDegree(degree.get());
								exambarcodes.setDepartment(department.get());
								exambarcodes.setExRollNo(student.get().getExRollNo());
								exambarcodes.setExCreateDate(date);
								exambarcodes.setSemester(sem.get());
								exambarcodes.setExamAnnouncement(examannouncement.get());
								exambarcodes.setStudentadmission(student.get());
								exambarcodes.setProgrammeYear(programyear.get());
								exambarcodes.setRegistrationType(coursereg.get(0).getRegistration());
								exambarcodes.setExIsActive(true);
								exambarcodes.setExIsDelete(false);
								super.ExamBarcodes.save(exambarcodes);
								excellog.info("Inserted Records into ExamBarcodesTable: " + tempA[1].trim());
							}
							else {
								is_update = true;

								
								int i = super.midtermmarksMarks.updatePracticalIResearchProject(exInternalAssessmentMM40,
										 request.getAcademicYear(), request.getColleges(),
										request.getProgrammes(), request.getCourses(), student.get().getExRollNo(), date,
										staff, student.get().getSection(),exInternalAssessmentMM40Remark
										,is_submit,request.getExamAnnouncement(),request.getDegree());
							

								int j = super.ExamBarcodes.updatePracticalIResearchProject(exExternalAssessmentMM60,
										 request.getAcademicYear(), request.getColleges(),
										request.getProgrammes(), request.getCourses(), student.get().getExRollNo(), date,
										exExternalAssessmentMM60Remark
										,is_PracticalAttendance,request.getExamAnnouncement(),request.getDegree());
								
								if (i == 1&&j==1) {
									updaterecord = updaterecord + 1;
									excellog.info("Updated Record: " + tempA[1].trim());

								}
							}
						}

					}  else {
						failureList.add(tempA[1] + ": Roll.No Not present :");
						list.add(tempA[1]);
					}
					info.put("status", "1");
					info.put("message", exPracticalIAMarksFile.getOriginalFilename() + "Excel Uploaded Succesfully ");
					if(list.size()>0) {
						if (is_update) {
							info.put("success", updaterecord +" Records "+"::" +" Updated Successfully");
							info.put("failure", list.size() + " Records "+"::" +" Not Updated Error");
						} else {
							info.put("success", successList.size()+ " Records Inserted Successfully");
							info.put("failure", list.size() + " Records Not Inserted ");
						}
					}
					else {
						if (is_update) {
							info.put("success", updaterecord +" Records "+"::" +" Updated Successfully");
						} else {
							info.put("success", successList.size() +" Records Inserted Successfully");
						}
					} 
					
				}
				excellog.info("Data Not Inserted : " + failureList);
				return info;

			} catch (Exception e) {
				e.printStackTrace();
				logger.error("Exception occured" + e);
				StringWriter errors = new StringWriter();
				e.printStackTrace(new PrintWriter(errors));
				logger.error(errors.toString());
				info.put("status", "0");
				info.put("message", "something went wrong");
				return info;

			}
		}


		private Map<String, Object> IAPracticalIsVillageAdoptionupload(MidTermMarksRequest request,
				MultipartFile exPracticalIAMarksFile) {
			List<String> failureList = new ArrayList<String>();
			List<String> successList = new ArrayList<String>();
			List<Object> list = new ArrayList<Object>();
			Map<String, Object> info = new LinkedHashMap<>();
			try {
				logger.info(">>>...." + request.toString());
				Workbook workbook = getWorkBook(exPracticalIAMarksFile);
				Sheet Sheet = workbook.getSheetAt(0);

				Iterator<Row> rows = Sheet.iterator();
				rows.next();

				Optional<ProgrammeYear> programyear = super.programmeYear.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getProgrammeYear());
				if (!programyear.isPresent()) {
					info.put("status", "2");
					info.put("message", "ProgrammeYear not present");
					return info;
				}
				
				Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getSemster());
				if (!sem.isPresent()) {
					info.put("status", "2");
					info.put("message", " Semster not present");
					return info;
				}
				Optional<AcademicYear> academicYear = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getAcademicYear());
				if (!academicYear.isPresent()) {
					info.put("status", "2");
					info.put("message", " academicyear not present");
					return info;
				}

				Optional<Colleges> col = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
						true);
				if (!col.isPresent()) {
					info.put("status", "2");
					info.put("message", "college  not present");
					return info;
				}
				Optional<Department> department = super.department
						.findByIdAndExIsDeleteAndExIsActive(request.getDepartment(), false, true);
				if (!department.isPresent()) {
					info.put("status", "2");
					info.put("message", "department  not present");
					return info;
				}

				Optional<Stream> stream = super.stream.findByIdAndExIsDeleteAndExIsActive(request.getStream(), false, true);
				if (!stream.isPresent()) {
					info.put("status", "2");
					info.put("message", "stream  not present");
					return info;
				}
				Optional<Programmes> Prog = super.programme.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getProgrammes());
				if (!Prog.isPresent()) {
					info.put("status", "2");
					info.put("message", " Programe not present");
					return info;
				}

				Optional<Courses> courses = super.courses.findByIdAndExIsDeleteAndExIsActive(request.getCourses(), false,
						true);
				if (!courses.isPresent()) {
					info.put("status", "2");
					info.put("message", "courses not present");
					return info;
				}
				
				Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
				if (!degree.isPresent()) {
					info.put("status", "2");
					info.put("message", "Degree not present");
					return info;
				}
				
				int updaterecord = 0;
				Boolean is_update = false;


				int rowIndex = 0;
				for (int rowNum = Sheet.getLastRowNum(); rowNum >= 0; rowNum--) {
					final Row row = Sheet.getRow(rowNum);
					if (row != null && row.getCell(0) != null) {
						if (row.getCell(0).toString() != "" && row.getCell(0).toString() != null) {
							rowIndex = rowNum;
							logger.info("?????????????Last non empty row????????????????" + rowIndex);
							break;
						}
					}
				}
				for (int rowNum = 3; rowNum < rowIndex + 1; rowNum++) {
					Row r = Sheet.getRow(rowNum);
					String temp = "";
					for (int cn = 0; cn < 10; cn++) {
						Cell c = r.getCell(cn, Row.RETURN_BLANK_AS_NULL);
						try {

							if (c == null) {
								// The spreadsheet is empty in this cell
								temp = temp + "#@&" + "NA";
							} else {
								// Do something useful with the cell's contents
								c.setCellType(Cell.CELL_TYPE_STRING);
								temp = temp + "#@&" + super.commonValidations.getCellValue(c);
							}

						} catch (Exception e) {
							StringWriter errors = new StringWriter();
							e.printStackTrace(new PrintWriter(errors));
							logger.error("Exception  : " + errors.toString());
							// return "failed";
						}

					}
					String tempA[] = temp.split("#@&");
					MidTermMarks midMarks = new MidTermMarks();
					ExamBarcodes exambarcodes = new ExamBarcodes();
					
					
	             //  if (request.getExamAnnouncement()==null || request.getExamAnnouncement().equals("NA")) {
						
				//		return  migIAPracticalMarksupload(request , exPracticalIAMarksFile);
				//	}
	               
					Optional<ExamAnnouncement> examannouncement = super.examAnnouncement
							.findByExIsDeleteAndExIsActiveAndId(false, true, request.getExamAnnouncement());
					if (!examannouncement.isPresent()) {
						info.put("status", "2");
						info.put("message", "Examannouncement  not present");
						return info;
					}
	
					Optional<Studentadmission> student = super.studentadmission
							.findByExIsDeleteAndExIsActiveAndExRollNo(false, true, tempA[1].trim());
					

					Optional<ExamAttendance> ExamAttendance = super.examAttendance
							.findByExIsDeleteAndExIsActiveAndStudentadmissionExRollNoAndCollegesIdAndDegreeIdAndProgrammesIdAndExamAnnouncementIdAndCoursesId(
									false, true, tempA[1].trim(), request.getColleges(), request.getDegree(),
									request.getProgrammes(), request.getExamAnnouncement(), request.getCourses());

					if (student.isPresent()) {
						Date date = new Date();
						
	
						List<MidTermMarks> midterm = super.midtermmarksMarks
								.findByExIsActiveAndExIsDeleteAndExRollNoAndCoursesId(true, false, tempA[1].trim(),
										request.getCourses());
						System.out.println(">...mid" + midterm);
						
						List<ExamBarcodes> exambar = super.exambarcode.findByExIsActiveAndExIsDeleteAndExRollNoAndCoursesId(true, false, tempA[1].trim(),
								request.getCourses());
	
						Staffpersonal staff = null;
						if (request.getStaff() == null || request.getStaff().equals("")) {
							staff = null;
						} else {
							Optional<Staffpersonal> staffres = super.staffpersonal
									.findByIdAndExIsDeleteAndExIsActive(request.getStaff(), false, true);
							if (!staffres.isPresent()) {
								info.put("status", "2");
								info.put("message", "staff not present");
								return info;
							}
							staff = staffres.get();
						}
						 if (!ExamAttendance.isPresent()) {
						 failureList.add("Attendance not created for Particular Subject : " +tempA[1]+"::"+tempA[2]);
						 list.add(tempA[1]); 
						 }
						List<CoursesRegistration> coursereg = super.coursesRegistration
								.findByExIsDeleteAndExIsActiveAndCoursesIdAndStudentadmissionId(false, true,
										courses.get().getId(), student.get().getId());
						if (coursereg.size() <= 0) {
							failureList.add(tempA[1] + ": student not registered for courses:");
							list.add(tempA[1]);
						
						}else {
							 Boolean is_submit = false;
								if (tempA[3] == null || tempA[3].toString().trim().equals("")
										|| tempA[3].toString().equals("NA")) {
									is_submit = false;
								} else {
									int val = Integer.parseInt(tempA[3]);
									if (val == 1) {
										is_submit = true;
									} else {
										is_submit = false;
									}
								}
								
								
								Boolean is_PracticalAttendance = false;
								if (tempA[4] == null || tempA[3].toString().trim().equals("")
										|| tempA[4].toString().equals("NA")) {
									is_PracticalAttendance = false;
								} else {
									int val = Integer.parseInt(tempA[4]);
									if (val == 1) {
										is_PracticalAttendance = true;
									} else {
										is_PracticalAttendance = false;
									}
								}
								
							 
							 
								Double exMentorMarksMM60 = null;
								String exMentorMarksMM60Remark = "NA";
								if(super.commonHelper.isNumeric(tempA[5].trim())) {
									exMentorMarksMM60 = commonHelper.getMarksValue(tempA[5].trim());
								}else {
									if(tempA[5].trim().equalsIgnoreCase("A")) {
										exMentorMarksMM60Remark = "ABSENT";
									}else {
										exMentorMarksMM60Remark = "NA";
									}			
								}
								

								Double exJuryMarksMM40 = null;
								String exJuryMarksMM40Remark = "NA";
								if(super.commonHelper.isNumeric(tempA[6].trim())) {
									exJuryMarksMM40 = commonHelper.getMarksValue(tempA[6].trim());
								}else {
									if(tempA[6].trim().equalsIgnoreCase("A")) {
										exJuryMarksMM40Remark = "ABSENT";
									}else {
										exJuryMarksMM40Remark = "NA";
									}			
								}
								
							if (midterm.size() <= 0) {
								midMarks.setCourses(courses.get());
								midMarks.setExIsSubmit(is_submit);
								midMarks.setExPracticalRecordMarks(exMentorMarksMM60);
								midMarks.setExpracticalRecordRemarks(exMentorMarksMM60Remark);
								midMarks.setAcademicYear(academicYear.get());
								midMarks.setProgrammes(Prog.get());
								midMarks.setColleges(col.get());
								midMarks.setDegree(degree.get());	
								midMarks.setDepartment(department.get());
								midMarks.setSection(student.get().getSection());
								midMarks.setExRollNo(student.get().getExRollNo());
								midMarks.setExCreateDate(date);
								midMarks.setSemester(sem.get());
								midMarks.setStream(stream.get());
								midMarks.setStaff(staff);
								midMarks.setExamAnnouncement(examannouncement.get());
								midMarks.setStudentadmission(student.get());
								midMarks.setProgrammeYear(programyear.get());
								midMarks.setExIsActive(true);
								midMarks.setExIsDelete(false);
								super.midtermmarksMarks.save(midMarks);
								successList.add("Success" + midMarks);
								excellog.info("Inserted Records into MidtermTable: " + tempA[1].trim());
							}
							if( exambar.size()<=0) {
								exambarcodes.setCourses(courses.get());
								exambarcodes.setExIsPracticalAttendance(is_PracticalAttendance);
								exambarcodes.setExLabExperiment(exJuryMarksMM40);
								exambarcodes.setExLabExperimentRemarks(exJuryMarksMM40Remark);
								exambarcodes.setAcademicYear(academicYear.get());
								exambarcodes.setProgrammes(Prog.get());
								exambarcodes.setColleges(col.get());
								exambarcodes.setDegree(degree.get());
								exambarcodes.setDepartment(department.get());
								exambarcodes.setExRollNo(student.get().getExRollNo());
								exambarcodes.setExCreateDate(date);
								exambarcodes.setSemester(sem.get());
								exambarcodes.setExamAnnouncement(examannouncement.get());
								exambarcodes.setStudentadmission(student.get());
								exambarcodes.setProgrammeYear(programyear.get());
								exambarcodes.setRegistrationType(coursereg.get(0).getRegistration());
								exambarcodes.setExIsActive(true);
								exambarcodes.setExIsDelete(false);
								super.ExamBarcodes.save(exambarcodes);
								excellog.info("Inserted Records into ExamBarcodesTable: " + tempA[1].trim());
							}
							else {
								is_update = true;

								
								int i = super.midtermmarksMarks.updatePracticalIVillageAdoption(exMentorMarksMM60,
										 request.getAcademicYear(), request.getColleges(),
										request.getProgrammes(), request.getCourses(), student.get().getExRollNo(), date,
										staff, student.get().getSection(),exMentorMarksMM60Remark
										,is_submit,request.getExamAnnouncement(),request.getDegree());
							

								int j = super.ExamBarcodes.updatePracticalIVillageAdoption(exJuryMarksMM40,
										 request.getAcademicYear(), request.getColleges(),
										request.getProgrammes(), request.getCourses(), student.get().getExRollNo(), date,
										exJuryMarksMM40Remark
										,is_PracticalAttendance,request.getExamAnnouncement(),request.getDegree());
								
								if (i == 1&&j==1) {
									updaterecord = updaterecord + 1;
									excellog.info("Updated Record: " + tempA[1].trim());

								}
							}
						}

					}  else {
						failureList.add(tempA[1] + ": Roll.No Not present :");
						list.add(tempA[1]);
					}
					info.put("status", "1");
					info.put("message", exPracticalIAMarksFile.getOriginalFilename() + "Excel Uploaded Succesfully ");
					if(list.size()>0) {
						if (is_update) {
							info.put("success", updaterecord +" Records "+"::" +" Updated Successfully");
							info.put("failure", list.size() + " Records "+"::" +" Not Updated Error");
						} else {
							info.put("success", successList.size()+ " Records Inserted Successfully");
							info.put("failure", list.size() + " Records Not Inserted ");
						}
					}
					else {
						if (is_update) {
							info.put("success", updaterecord +" Records "+"::" +" Updated Successfully");
						} else {
							info.put("success", successList.size() +" Records Inserted Successfully");
						}
					} 
					
				}
				excellog.info("Data Not Inserted : " + failureList);
				return info;

			} catch (Exception e) {
				e.printStackTrace();
				logger.error("Exception occured" + e);
				StringWriter errors = new StringWriter();
				e.printStackTrace(new PrintWriter(errors));
				logger.error(errors.toString());
				info.put("status", "0");
				info.put("message", "something went wrong");
				return info;

			}
		}


		private Map<String, Object> IAPracticalIsProjectupload(MidTermMarksRequest request,
				MultipartFile exPracticalIAMarksFile) {
			List<String> failureList = new ArrayList<String>();
			List<String> successList = new ArrayList<String>();
			List<Object> list = new ArrayList<Object>();
			Map<String, Object> info = new LinkedHashMap<>();
			try {
				logger.info(">>>...." + request.toString());
				Workbook workbook = getWorkBook(exPracticalIAMarksFile);
				Sheet Sheet = workbook.getSheetAt(0);

				Iterator<Row> rows = Sheet.iterator();
				rows.next();

				Optional<ProgrammeYear> programyear = super.programmeYear.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getProgrammeYear());
				if (!programyear.isPresent()) {
					info.put("status", "2");
					info.put("message", "ProgrammeYear not present");
					return info;
				}
				
				Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getSemster());
				if (!sem.isPresent()) {
					info.put("status", "2");
					info.put("message", " Semster not present");
					return info;
				}
				Optional<AcademicYear> academicYear = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getAcademicYear());
				if (!academicYear.isPresent()) {
					info.put("status", "2");
					info.put("message", " academicyear not present");
					return info;
				}

				Optional<Colleges> col = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
						true);
				if (!col.isPresent()) {
					info.put("status", "2");
					info.put("message", "college  not present");
					return info;
				}
				Optional<Department> department = super.department
						.findByIdAndExIsDeleteAndExIsActive(request.getDepartment(), false, true);
				if (!department.isPresent()) {
					info.put("status", "2");
					info.put("message", "department  not present");
					return info;
				}

				Optional<Stream> stream = super.stream.findByIdAndExIsDeleteAndExIsActive(request.getStream(), false, true);
				if (!stream.isPresent()) {
					info.put("status", "2");
					info.put("message", "stream  not present");
					return info;
				}
				Optional<Programmes> Prog = super.programme.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getProgrammes());
				if (!Prog.isPresent()) {
					info.put("status", "2");
					info.put("message", " Programe not present");
					return info;
				}

				Optional<Courses> courses = super.courses.findByIdAndExIsDeleteAndExIsActive(request.getCourses(), false,
						true);
				if (!courses.isPresent()) {
					info.put("status", "2");
					info.put("message", "courses not present");
					return info;
				}
				
				Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
				if (!degree.isPresent()) {
					info.put("status", "2");
					info.put("message", "Degree not present");
					return info;
				}
				
				int updaterecord = 0;
				Boolean is_update = false;


				int rowIndex = 0;
				for (int rowNum = Sheet.getLastRowNum(); rowNum >= 0; rowNum--) {
					final Row row = Sheet.getRow(rowNum);
					if (row != null && row.getCell(0) != null) {
						if (row.getCell(0).toString() != "" && row.getCell(0).toString() != null) {
							rowIndex = rowNum;
							logger.info("?????????????Last non empty row????????????????" + rowIndex);
							break;
						}
					}
				}
				for (int rowNum = 3; rowNum < rowIndex + 1; rowNum++) {
					Row r = Sheet.getRow(rowNum);
					String temp = "";
					for (int cn = 0; cn < 10; cn++) {
						Cell c = r.getCell(cn, Row.RETURN_BLANK_AS_NULL);
						try {

							if (c == null) {
								// The spreadsheet is empty in this cell
								temp = temp + "#@&" + "NA";
							} else {
								// Do something useful with the cell's contents
								c.setCellType(Cell.CELL_TYPE_STRING);
								temp = temp + "#@&" + super.commonValidations.getCellValue(c);
							}

						} catch (Exception e) {
							StringWriter errors = new StringWriter();
							e.printStackTrace(new PrintWriter(errors));
							logger.error("Exception  : " + errors.toString());
							// return "failed";
						}

					}
					String tempA[] = temp.split("#@&");
					MidTermMarks midMarks = new MidTermMarks();
					ExamBarcodes exambarcodes = new ExamBarcodes();
	           //    if (request.getExamAnnouncement()==null || request.getExamAnnouncement().equals("NA")) {
						
					//	return  migIAPracticalMarksupload(request , exPracticalIAMarksFile);
				//	}
	               
					Optional<ExamAnnouncement> examannouncement = super.examAnnouncement
							.findByExIsDeleteAndExIsActiveAndId(false, true, request.getExamAnnouncement());
					if (!examannouncement.isPresent()) {
						info.put("status", "2");
						info.put("message", "Examannouncement  not present");
						return info;
					}
	
					Optional<Studentadmission> student = super.studentadmission
							.findByExIsDeleteAndExIsActiveAndExRollNo(false, true, tempA[1].trim());
					

					Optional<ExamAttendance> ExamAttendance = super.examAttendance
							.findByExIsDeleteAndExIsActiveAndStudentadmissionExRollNoAndCollegesIdAndDegreeIdAndProgrammesIdAndExamAnnouncementIdAndCoursesId(
									false, true, tempA[1].trim(), request.getColleges(), request.getDegree(),
									request.getProgrammes(), request.getExamAnnouncement(), request.getCourses());

					if (student.isPresent()) {
						Date date = new Date();
						
	
						List<MidTermMarks> midterm = super.midtermmarksMarks
								.findByExIsActiveAndExIsDeleteAndExRollNoAndCoursesId(true, false, tempA[1].trim(),
										request.getCourses());
						System.out.println(">...mid" + midterm);
						
						List<ExamBarcodes> exambar = super.exambarcode.findByExIsActiveAndExIsDeleteAndExRollNoAndCoursesId(true, false, tempA[1].trim(),
								request.getCourses());
	
						Staffpersonal staff = null;
						if (request.getStaff() == null || request.getStaff().equals("")) {
							staff = null;
						} else {
							Optional<Staffpersonal> staffres = super.staffpersonal
									.findByIdAndExIsDeleteAndExIsActive(request.getStaff(), false, true);
							if (!staffres.isPresent()) {
								info.put("status", "2");
								info.put("message", "staff not present");
								return info;
							}
							staff = staffres.get();
						}
						 if (!ExamAttendance.isPresent()) {
						 failureList.add("Attendance not created for Particular Subject : " +tempA[1]+"::"+tempA[2]);
						 list.add(tempA[1]); 
						 }
						List<CoursesRegistration> coursereg = super.coursesRegistration
								.findByExIsDeleteAndExIsActiveAndCoursesIdAndStudentadmissionId(false, true,
										courses.get().getId(), student.get().getId());
						if (coursereg.size() <= 0) {
							failureList.add(tempA[1] + ": student not registered for courses:");
							list.add(tempA[1]);
						
						}else {
							 Boolean is_submit = false;
								if (tempA[3] == null || tempA[3].toString().trim().equals("")
										|| tempA[3].toString().equals("NA")) {
									is_submit = false;
								} else {
									int val = Integer.parseInt(tempA[3]);
									if (val == 1) {
										is_submit = true;
									} else {
										is_submit = false;
									}
								}
								
								
								Boolean is_PracticalAttendance = false;
								if (tempA[4] == null || tempA[3].toString().trim().equals("")
										|| tempA[4].toString().equals("NA")) {
									is_PracticalAttendance = false;
								} else {
									int val = Integer.parseInt(tempA[4]);
									if (val == 1) {
										is_PracticalAttendance = true;
									} else {
										is_PracticalAttendance = false;
									}
								}
								
							 
							 
								Double exWriteupReportMM40 = null;
								String exWriteupReportMM40Remark = "NA";
								if(super.commonHelper.isNumeric(tempA[5].trim())) {
									exWriteupReportMM40 = commonHelper.getMarksValue(tempA[5].trim());
								}else {
									if(tempA[5].trim().equalsIgnoreCase("A")) {
										exWriteupReportMM40Remark = "ABSENT";
									}else {
										exWriteupReportMM40Remark = "NA";
									}			
								}
								

								Double exPresentationMM30 = null;
								String exPresentationMM30Remark = "NA";
								if(super.commonHelper.isNumeric(tempA[6].trim())) {
									exPresentationMM30 = commonHelper.getMarksValue(tempA[6].trim());
								}else {
									if(tempA[6].trim().equalsIgnoreCase("A")) {
										exPresentationMM30Remark = "ABSENT";
									}else {
										exPresentationMM30Remark = "NA";
									}			
								}
								
								
								Double exVivaVoceMM30 = null;
								String exVivaVoceMM30Remark = "NA";
								if(super.commonHelper.isNumeric(tempA[7].trim())) {
									exVivaVoceMM30 = commonHelper.getMarksValue(tempA[7].trim());
								}else {
									if(tempA[6].trim().equalsIgnoreCase("A")) {
										exVivaVoceMM30Remark = "ABSENT";
									}else {
										exVivaVoceMM30Remark = "NA";
									}			
								}
								
								
							if (midterm.size() <= 0) {
								midMarks.setCourses(courses.get());
								midMarks.setExIsSubmit(is_submit);
								midMarks.setExPracticalRecordMarks(exWriteupReportMM40);
								midMarks.setExpracticalRecordRemarks(exWriteupReportMM40Remark);
								midMarks.setAcademicYear(academicYear.get());
								midMarks.setProgrammes(Prog.get());
								midMarks.setColleges(col.get());
								midMarks.setDegree(degree.get());	
								midMarks.setDepartment(department.get());
								midMarks.setSection(student.get().getSection());
								midMarks.setExRollNo(student.get().getExRollNo());
								midMarks.setExCreateDate(date);
								midMarks.setSemester(sem.get());
								midMarks.setStream(stream.get());
								midMarks.setStaff(staff);
								midMarks.setExamAnnouncement(examannouncement.get());
								midMarks.setStudentadmission(student.get());
								midMarks.setProgrammeYear(programyear.get());
								midMarks.setExIsActive(true);
								midMarks.setExIsDelete(false);
								super.midtermmarksMarks.save(midMarks);
								successList.add("Success" + midMarks);
								excellog.info("Inserted Records into MidtermTable: " + tempA[1].trim());
							}
							if( exambar.size()<=0) {
								exambarcodes.setCourses(courses.get());
								exambarcodes.setExIsPracticalAttendance(is_PracticalAttendance);
								exambarcodes.setExLabExperiment(exPresentationMM30);
								exambarcodes.setExLabExperimentRemarks(exPresentationMM30Remark);
								exambarcodes.setExViva(exVivaVoceMM30);
								exambarcodes.setExVivaRemarks(exVivaVoceMM30Remark);
								exambarcodes.setAcademicYear(academicYear.get());
								exambarcodes.setProgrammes(Prog.get());
								exambarcodes.setColleges(col.get());
								exambarcodes.setDegree(degree.get());
								exambarcodes.setDepartment(department.get());
								exambarcodes.setExRollNo(student.get().getExRollNo());
								exambarcodes.setExCreateDate(date);
								exambarcodes.setSemester(sem.get());
								exambarcodes.setExamAnnouncement(examannouncement.get());
								exambarcodes.setStudentadmission(student.get());
								exambarcodes.setProgrammeYear(programyear.get());
								exambarcodes.setRegistrationType(coursereg.get(0).getRegistration());
								exambarcodes.setExIsActive(true);
								exambarcodes.setExIsDelete(false);
								super.ExamBarcodes.save(exambarcodes);
								excellog.info("Inserted Records into ExamBarcodesTable: " + tempA[1].trim());
							}
							else {
								is_update = true;

								
								int i = super.midtermmarksMarks.Project(exWriteupReportMM40,
										 request.getAcademicYear(), request.getColleges(),
										request.getProgrammes(), request.getCourses(), student.get().getExRollNo(), date,
										staff, student.get().getSection(),exWriteupReportMM40Remark
										,is_submit,request.getExamAnnouncement(),request.getDegree());
							

								int j = super.ExamBarcodes.Project(exPresentationMM30,
										 request.getAcademicYear(), request.getColleges(),
										request.getProgrammes(), request.getCourses(), student.get().getExRollNo(), date,
										exPresentationMM30Remark
										,is_PracticalAttendance,request.getExamAnnouncement(),request.getDegree(),exVivaVoceMM30,exVivaVoceMM30Remark);
								
								if (i == 1&&j==1) {
									updaterecord = updaterecord + 1;
									excellog.info("Updated Record: " + tempA[1].trim());

								}
							}
						}

					}  else {
						failureList.add(tempA[1] + ": Roll.No Not present :");
						list.add(tempA[1]);
					}
					info.put("status", "1");
					info.put("message", exPracticalIAMarksFile.getOriginalFilename() + "Excel Uploaded Succesfully ");
					if(list.size()>0) {
						if (is_update) {
							info.put("success", updaterecord +" Records "+"::" +" Updated Successfully");
							info.put("failure", list.size() + " Records "+"::" +" Not Updated Error");
						} else {
							info.put("success", successList.size()+ " Records Inserted Successfully");
							info.put("failure", list.size() + " Records Not Inserted ");
						}
					}
					else {
						if (is_update) {
							info.put("success", updaterecord +" Records "+"::" +" Updated Successfully");
						} else {
							info.put("success", successList.size() +" Records Inserted Successfully");
						}
					} 
					
				}
				excellog.info("Data Not Inserted : " + failureList);
				return info;

			} catch (Exception e) {
				e.printStackTrace();
				logger.error("Exception occured" + e);
				StringWriter errors = new StringWriter();
				e.printStackTrace(new PrintWriter(errors));
				logger.error(errors.toString());
				info.put("status", "0");
				info.put("message", "something went wrong");
				return info;

			}
		}


		private Map<String, Object> IAPracticalIsIndustrialTrainingOrInternshipupload(MidTermMarksRequest request,
				MultipartFile exPracticalIAMarksFile) {
			List<String> failureList = new ArrayList<String>();
			List<String> successList = new ArrayList<String>();
			List<Object> list = new ArrayList<Object>();
			Map<String, Object> info = new LinkedHashMap<>();
			try {
				logger.info(">>>...." + request.toString());
				Workbook workbook = getWorkBook(exPracticalIAMarksFile);
				Sheet Sheet = workbook.getSheetAt(0);

				Iterator<Row> rows = Sheet.iterator();
				rows.next();

				Optional<ProgrammeYear> programyear = super.programmeYear.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getProgrammeYear());
				if (!programyear.isPresent()) {
					info.put("status", "2");
					info.put("message", "ProgrammeYear not present");
					return info;
				}
				
				Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getSemster());
				if (!sem.isPresent()) {
					info.put("status", "2");
					info.put("message", " Semster not present");
					return info;
				}
				Optional<AcademicYear> academicYear = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getAcademicYear());
				if (!academicYear.isPresent()) {
					info.put("status", "2");
					info.put("message", " academicyear not present");
					return info;
				}

				Optional<Colleges> col = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
						true);
				if (!col.isPresent()) {
					info.put("status", "2");
					info.put("message", "college  not present");
					return info;
				}
				Optional<Department> department = super.department
						.findByIdAndExIsDeleteAndExIsActive(request.getDepartment(), false, true);
				if (!department.isPresent()) {
					info.put("status", "2");
					info.put("message", "department  not present");
					return info;
				}

				Optional<Stream> stream = super.stream.findByIdAndExIsDeleteAndExIsActive(request.getStream(), false, true);
				if (!stream.isPresent()) {
					info.put("status", "2");
					info.put("message", "stream  not present");
					return info;
				}
				Optional<Programmes> Prog = super.programme.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getProgrammes());
				if (!Prog.isPresent()) {
					info.put("status", "2");
					info.put("message", " Programe not present");
					return info;
				}

				Optional<Courses> courses = super.courses.findByIdAndExIsDeleteAndExIsActive(request.getCourses(), false,
						true);
				if (!courses.isPresent()) {
					info.put("status", "2");
					info.put("message", "courses not present");
					return info;
				}
				
				Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
				if (!degree.isPresent()) {
					info.put("status", "2");
					info.put("message", "Degree not present");
					return info;
				}
				
				int updaterecord = 0;
				Boolean is_update = false;


				int rowIndex = 0;
				for (int rowNum = Sheet.getLastRowNum(); rowNum >= 0; rowNum--) {
					final Row row = Sheet.getRow(rowNum);
					if (row != null && row.getCell(0) != null) {
						if (row.getCell(0).toString() != "" && row.getCell(0).toString() != null) {
							rowIndex = rowNum;
							logger.info("?????????????Last non empty row????????????????" + rowIndex);
							break;
						}
					}
				}
				for (int rowNum = 3; rowNum < rowIndex + 1; rowNum++) {
					Row r = Sheet.getRow(rowNum);
					String temp = "";
					for (int cn = 0; cn < 10; cn++) {
						Cell c = r.getCell(cn, Row.RETURN_BLANK_AS_NULL);
						try {

							if (c == null) {
								// The spreadsheet is empty in this cell
								temp = temp + "#@&" + "NA";
							} else {
								// Do something useful with the cell's contents
								c.setCellType(Cell.CELL_TYPE_STRING);
								temp = temp + "#@&" + super.commonValidations.getCellValue(c);
							}

						} catch (Exception e) {
							StringWriter errors = new StringWriter();
							e.printStackTrace(new PrintWriter(errors));
							logger.error("Exception  : " + errors.toString());
							// return "failed";
						}

					}
					String tempA[] = temp.split("#@&");
					MidTermMarks midMarks = new MidTermMarks();
					ExamBarcodes exambarcodes = new ExamBarcodes();
	           //    if (request.getExamAnnouncement()==null || request.getExamAnnouncement().equals("NA")) {
						
					//	return  migIAPracticalMarksupload(request , exPracticalIAMarksFile);
				//	}
	               
					Optional<ExamAnnouncement> examannouncement = super.examAnnouncement
							.findByExIsDeleteAndExIsActiveAndId(false, true, request.getExamAnnouncement());
					if (!examannouncement.isPresent()) {
						info.put("status", "2");
						info.put("message", "Examannouncement  not present");
						return info;
					}
	
					Optional<Studentadmission> student = super.studentadmission
							.findByExIsDeleteAndExIsActiveAndExRollNo(false, true, tempA[1].trim());
					

					Optional<ExamAttendance> ExamAttendance = super.examAttendance
							.findByExIsDeleteAndExIsActiveAndStudentadmissionExRollNoAndCollegesIdAndDegreeIdAndProgrammesIdAndExamAnnouncementIdAndCoursesId(
									false, true, tempA[1].trim(), request.getColleges(), request.getDegree(),
									request.getProgrammes(), request.getExamAnnouncement(), request.getCourses());

					if (student.isPresent()) {
						Date date = new Date();
						
	
						List<MidTermMarks> midterm = super.midtermmarksMarks
								.findByExIsActiveAndExIsDeleteAndExRollNoAndCoursesId(true, false, tempA[1].trim(),
										request.getCourses());
						System.out.println(">...mid" + midterm);
						
						List<ExamBarcodes> exambar = super.exambarcode.findByExIsActiveAndExIsDeleteAndExRollNoAndCoursesId(true, false, tempA[1].trim(),
								request.getCourses());
	
						Staffpersonal staff = null;
						if (request.getStaff() == null || request.getStaff().equals("")) {
							staff = null;
						} else {
							Optional<Staffpersonal> staffres = super.staffpersonal
									.findByIdAndExIsDeleteAndExIsActive(request.getStaff(), false, true);
							if (!staffres.isPresent()) {
								info.put("status", "2");
								info.put("message", "staff not present");
								return info;
							}
							staff = staffres.get();
						}
						 if (!ExamAttendance.isPresent()) {
						 failureList.add("Attendance not created for Particular Subject : " +tempA[1]+"::"+tempA[2]);
						 list.add(tempA[1]); 
						 }
						List<CoursesRegistration> coursereg = super.coursesRegistration
								.findByExIsDeleteAndExIsActiveAndCoursesIdAndStudentadmissionId(false, true,
										courses.get().getId(), student.get().getId());
						if (coursereg.size() <= 0) {
							failureList.add(tempA[1] + ": student not registered for courses:");
							list.add(tempA[1]);
						
						}else {
							 Boolean is_submit = false;
								if (tempA[3] == null || tempA[3].toString().trim().equals("")
										|| tempA[3].toString().equals("NA")) {
									is_submit = false;
								} else {
									int val = Integer.parseInt(tempA[3]);
									if (val == 1) {
										is_submit = true;
									} else {
										is_submit = false;
									}
								}
								
								
								Boolean is_PracticalAttendance = false;
								if (tempA[4] == null || tempA[3].toString().trim().equals("")
										|| tempA[4].toString().equals("NA")) {
									is_PracticalAttendance = false;
								} else {
									int val = Integer.parseInt(tempA[4]);
									if (val == 1) {
										is_PracticalAttendance = true;
									} else {
										is_PracticalAttendance = false;
									}
								}
								
							 
							 
								Double exWriteupReportMM40 = null;
								String exWriteupReportMM40Remark = "NA";
								if(super.commonHelper.isNumeric(tempA[5].trim())) {
									exWriteupReportMM40 = commonHelper.getMarksValue(tempA[5].trim());
								}else {
									if(tempA[5].trim().equalsIgnoreCase("A")) {
										exWriteupReportMM40Remark = "ABSENT";
									}else {
										exWriteupReportMM40Remark = "NA";
									}			
								}
								

								Double exPresentationMM30 = null;
								String exPresentationMM30Remark = "NA";
								if(super.commonHelper.isNumeric(tempA[6].trim())) {
									exPresentationMM30 = commonHelper.getMarksValue(tempA[6].trim());
								}else {
									if(tempA[6].trim().equalsIgnoreCase("A")) {
										exPresentationMM30Remark = "ABSENT";
									}else {
										exPresentationMM30Remark = "NA";
									}			
								}
								
								
								Double exVivaVoceMM30 = null;
								String exVivaVoceMM30Remark = "NA";
								if(super.commonHelper.isNumeric(tempA[7].trim())) {
									exVivaVoceMM30 = commonHelper.getMarksValue(tempA[7].trim());
								}else {
									if(tempA[6].trim().equalsIgnoreCase("A")) {
										exVivaVoceMM30Remark = "ABSENT";
									}else {
										exVivaVoceMM30Remark = "NA";
									}			
								}
								
								
							if (midterm.size() <= 0) {
								midMarks.setCourses(courses.get());
								midMarks.setExIsSubmit(is_submit);
								midMarks.setExPracticalRecordMarks(exWriteupReportMM40);
								midMarks.setExpracticalRecordRemarks(exWriteupReportMM40Remark);
								midMarks.setAcademicYear(academicYear.get());
								midMarks.setProgrammes(Prog.get());
								midMarks.setColleges(col.get());
								midMarks.setDegree(degree.get());	
								midMarks.setDepartment(department.get());
								midMarks.setSection(student.get().getSection());
								midMarks.setExRollNo(student.get().getExRollNo());
								midMarks.setExCreateDate(date);
								midMarks.setSemester(sem.get());
								midMarks.setStream(stream.get());
								midMarks.setStaff(staff);
								midMarks.setExamAnnouncement(examannouncement.get());
								midMarks.setStudentadmission(student.get());
								midMarks.setProgrammeYear(programyear.get());
								midMarks.setExIsActive(true);
								midMarks.setExIsDelete(false);
								super.midtermmarksMarks.save(midMarks);
								successList.add("Success" + midMarks);
								excellog.info("Inserted Records into MidtermTable: " + tempA[1].trim());
							}
							if( exambar.size()<=0) {
								exambarcodes.setCourses(courses.get());
								exambarcodes.setExIsPracticalAttendance(is_PracticalAttendance);
								exambarcodes.setExLabExperiment(exPresentationMM30);
								exambarcodes.setExLabExperimentRemarks(exPresentationMM30Remark);
								exambarcodes.setExViva(exVivaVoceMM30);
								exambarcodes.setExVivaRemarks(exVivaVoceMM30Remark);
								exambarcodes.setAcademicYear(academicYear.get());
								exambarcodes.setProgrammes(Prog.get());
								exambarcodes.setColleges(col.get());
								exambarcodes.setDegree(degree.get());
								exambarcodes.setDepartment(department.get());
								exambarcodes.setExRollNo(student.get().getExRollNo());
								exambarcodes.setExCreateDate(date);
								exambarcodes.setSemester(sem.get());
								exambarcodes.setExamAnnouncement(examannouncement.get());
								exambarcodes.setStudentadmission(student.get());
								exambarcodes.setProgrammeYear(programyear.get());
								exambarcodes.setRegistrationType(coursereg.get(0).getRegistration());
								exambarcodes.setExIsActive(true);
								exambarcodes.setExIsDelete(false);
								super.ExamBarcodes.save(exambarcodes);
								excellog.info("Inserted Records into ExamBarcodesTable: " + tempA[1].trim());
							}
							else {
								is_update = true;

								
								int i = super.midtermmarksMarks.IndustrialTrainingOrInternship(exWriteupReportMM40,
										 request.getAcademicYear(), request.getColleges(),
										request.getProgrammes(), request.getCourses(), student.get().getExRollNo(), date,
										staff, student.get().getSection(),exWriteupReportMM40Remark
										,is_submit,request.getExamAnnouncement(),request.getDegree());
							

								int j = super.ExamBarcodes.IndustrialTrainingOrInternship(exPresentationMM30,
										 request.getAcademicYear(), request.getColleges(),
										request.getProgrammes(), request.getCourses(), student.get().getExRollNo(), date,
										exPresentationMM30Remark
										,is_PracticalAttendance,request.getExamAnnouncement(),request.getDegree(),exVivaVoceMM30,exVivaVoceMM30Remark);
								
								if (i == 1&&j==1) {
									updaterecord = updaterecord + 1;
									excellog.info("Updated Record: " + tempA[1].trim());

								}
							}
						}

					}  else {
						failureList.add(tempA[1] + ": Roll.No Not present :");
						list.add(tempA[1]);
					}
					info.put("status", "1");
					info.put("message", exPracticalIAMarksFile.getOriginalFilename() + "Excel Uploaded Succesfully ");
					if(list.size()>0) {
						if (is_update) {
							info.put("success", updaterecord +" Records "+"::" +" Updated Successfully");
							info.put("failure", list.size() + " Records "+"::" +" Not Updated Error");
						} else {
							info.put("success", successList.size()+ " Records Inserted Successfully");
							info.put("failure", list.size() + " Records Not Inserted ");
						}
					}
					else {
						if (is_update) {
							info.put("success", updaterecord +" Records "+"::" +" Updated Successfully");
						} else {
							info.put("success", successList.size() +" Records Inserted Successfully");
						}
					} 
					
				}
				excellog.info("Data Not Inserted : " + failureList);
				return info;

			} catch (Exception e) {
				e.printStackTrace();
				logger.error("Exception occured" + e);
				StringWriter errors = new StringWriter();
				e.printStackTrace(new PrintWriter(errors));
				logger.error(errors.toString());
				info.put("status", "0");
				info.put("message", "something went wrong");
				return info;

			}
		}


		private Map<String, Object> IAPracticalIsIndustrialVisitupload(MidTermMarksRequest request,
				MultipartFile exPracticalIAMarksFile) {
			List<String> failureList = new ArrayList<String>();
			List<String> successList = new ArrayList<String>();
			List<Object> list = new ArrayList<Object>();
			Map<String, Object> info = new LinkedHashMap<>();
			try {
				logger.info(">>>...." + request.toString());
				Workbook workbook = getWorkBook(exPracticalIAMarksFile);
				Sheet Sheet = workbook.getSheetAt(0);

				Iterator<Row> rows = Sheet.iterator();
				rows.next();

				Optional<ProgrammeYear> programyear = super.programmeYear.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getProgrammeYear());
				if (!programyear.isPresent()) {
					info.put("status", "2");
					info.put("message", "ProgrammeYear not present");
					return info;
				}
				
				Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getSemster());
				if (!sem.isPresent()) {
					info.put("status", "2");
					info.put("message", " Semster not present");
					return info;
				}
				Optional<AcademicYear> academicYear = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getAcademicYear());
				if (!academicYear.isPresent()) {
					info.put("status", "2");
					info.put("message", " academicyear not present");
					return info;
				}

				Optional<Colleges> col = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
						true);
				if (!col.isPresent()) {
					info.put("status", "2");
					info.put("message", "college  not present");
					return info;
				}
				Optional<Department> department = super.department
						.findByIdAndExIsDeleteAndExIsActive(request.getDepartment(), false, true);
				if (!department.isPresent()) {
					info.put("status", "2");
					info.put("message", "department  not present");
					return info;
				}

				Optional<Stream> stream = super.stream.findByIdAndExIsDeleteAndExIsActive(request.getStream(), false, true);
				if (!stream.isPresent()) {
					info.put("status", "2");
					info.put("message", "stream  not present");
					return info;
				}
				Optional<Programmes> Prog = super.programme.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getProgrammes());
				if (!Prog.isPresent()) {
					info.put("status", "2");
					info.put("message", " Programe not present");
					return info;
				}

				Optional<Courses> courses = super.courses.findByIdAndExIsDeleteAndExIsActive(request.getCourses(), false,
						true);
				if (!courses.isPresent()) {
					info.put("status", "2");
					info.put("message", "courses not present");
					return info;
				}
				
				Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
				if (!degree.isPresent()) {
					info.put("status", "2");
					info.put("message", "Degree not present");
					return info;
				}
				
				int updaterecord = 0;
				Boolean is_update = false;


				int rowIndex = 0;
				for (int rowNum = Sheet.getLastRowNum(); rowNum >= 0; rowNum--) {
					final Row row = Sheet.getRow(rowNum);
					if (row != null && row.getCell(0) != null) {
						if (row.getCell(0).toString() != "" && row.getCell(0).toString() != null) {
							rowIndex = rowNum;
							logger.info("?????????????Last non empty row????????????????" + rowIndex);
							break;
						}
					}
				}
				for (int rowNum = 3; rowNum < rowIndex + 1; rowNum++) {
					Row r = Sheet.getRow(rowNum);
					String temp = "";
					for (int cn = 0; cn < 10; cn++) {
						Cell c = r.getCell(cn, Row.RETURN_BLANK_AS_NULL);
						try {

							if (c == null) {
								// The spreadsheet is empty in this cell
								temp = temp + "#@&" + "NA";
							} else {
								// Do something useful with the cell's contents
								c.setCellType(Cell.CELL_TYPE_STRING);
								temp = temp + "#@&" + super.commonValidations.getCellValue(c);
							}

						} catch (Exception e) {
							StringWriter errors = new StringWriter();
							e.printStackTrace(new PrintWriter(errors));
							logger.error("Exception  : " + errors.toString());
							// return "failed";
						}

					}
					String tempA[] = temp.split("#@&");
					MidTermMarks midMarks = new MidTermMarks();
					ExamBarcodes exambarcodes = new ExamBarcodes();
					
					
	             //  if (request.getExamAnnouncement()==null || request.getExamAnnouncement().equals("NA")) {
						
				//		return  migIAPracticalMarksupload(request , exPracticalIAMarksFile);
				//	}
	               
					Optional<ExamAnnouncement> examannouncement = super.examAnnouncement
							.findByExIsDeleteAndExIsActiveAndId(false, true, request.getExamAnnouncement());
					if (!examannouncement.isPresent()) {
						info.put("status", "2");
						info.put("message", "Examannouncement  not present");
						return info;
					}
	
					Optional<Studentadmission> student = super.studentadmission
							.findByExIsDeleteAndExIsActiveAndExRollNo(false, true, tempA[1].trim());
					

					Optional<ExamAttendance> ExamAttendance = super.examAttendance
							.findByExIsDeleteAndExIsActiveAndStudentadmissionExRollNoAndCollegesIdAndDegreeIdAndProgrammesIdAndExamAnnouncementIdAndCoursesId(
									false, true, tempA[1].trim(), request.getColleges(), request.getDegree(),
									request.getProgrammes(), request.getExamAnnouncement(), request.getCourses());

					if (student.isPresent()) {
						Date date = new Date();
						
	
						List<MidTermMarks> midterm = super.midtermmarksMarks
								.findByExIsActiveAndExIsDeleteAndExRollNoAndCoursesId(true, false, tempA[1].trim(),
										request.getCourses());
						System.out.println(">...mid" + midterm);
						
						List<ExamBarcodes> exambar = super.exambarcode.findByExIsActiveAndExIsDeleteAndExRollNoAndCoursesId(true, false, tempA[1].trim(),
								request.getCourses());
	
						Staffpersonal staff = null;
						if (request.getStaff() == null || request.getStaff().equals("")) {
							staff = null;
						} else {
							Optional<Staffpersonal> staffres = super.staffpersonal
									.findByIdAndExIsDeleteAndExIsActive(request.getStaff(), false, true);
							if (!staffres.isPresent()) {
								info.put("status", "2");
								info.put("message", "staff not present");
								return info;
							}
							staff = staffres.get();
						}
						 if (!ExamAttendance.isPresent()) {
						 failureList.add("Attendance not created for Particular Subject : " +tempA[1]+"::"+tempA[2]);
						 list.add(tempA[1]); 
						 }
						List<CoursesRegistration> coursereg = super.coursesRegistration
								.findByExIsDeleteAndExIsActiveAndCoursesIdAndStudentadmissionId(false, true,
										courses.get().getId(), student.get().getId());
						if (coursereg.size() <= 0) {
							failureList.add(tempA[1] + ": student not registered for courses:");
							list.add(tempA[1]);
						
						}else {
							 Boolean is_submit = false;
								if (tempA[3] == null || tempA[3].toString().trim().equals("")
										|| tempA[3].toString().equals("NA")) {
									is_submit = false;
								} else {
									int val = Integer.parseInt(tempA[3]);
									if (val == 1) {
										is_submit = true;
									} else {
										is_submit = false;
									}
								}
								
								
								Boolean is_PracticalAttendance = false;
								if (tempA[4] == null || tempA[3].toString().trim().equals("")
										|| tempA[4].toString().equals("NA")) {
									is_PracticalAttendance = false;
								} else {
									int val = Integer.parseInt(tempA[4]);
									if (val == 1) {
										is_PracticalAttendance = true;
									} else {
										is_PracticalAttendance = false;
									}
								}
								
							 
							 
								Double exWriteupReportMM50 = null;
								String exWriteupReportMM50Remark = "NA";
								if(super.commonHelper.isNumeric(tempA[5].trim())) {
									exWriteupReportMM50 = commonHelper.getMarksValue(tempA[5].trim());
								}else {
									if(tempA[5].trim().equalsIgnoreCase("A")) {
										exWriteupReportMM50Remark = "ABSENT";
									}else {
										exWriteupReportMM50Remark = "NA";
									}			
								}
								

								Double exPresentationandVivaVoiceMM50 = null;
								String exPresentationandVivaVoiceMM50Remark = "NA";
								if(super.commonHelper.isNumeric(tempA[6].trim())) {
									exPresentationandVivaVoiceMM50 = commonHelper.getMarksValue(tempA[6].trim());
								}else {
									if(tempA[6].trim().equalsIgnoreCase("A")) {
										exPresentationandVivaVoiceMM50Remark = "ABSENT";
									}else {
										exPresentationandVivaVoiceMM50Remark = "NA";
									}			
								}
								
							if (midterm.size() <= 0) {
								midMarks.setCourses(courses.get());
								midMarks.setExIsSubmit(is_submit);
								midMarks.setExPracticalRecordMarks(exWriteupReportMM50);
								midMarks.setExpracticalRecordRemarks(exWriteupReportMM50Remark);
								midMarks.setAcademicYear(academicYear.get());
								midMarks.setProgrammes(Prog.get());
								midMarks.setColleges(col.get());
								midMarks.setDegree(degree.get());	
								midMarks.setDepartment(department.get());
								midMarks.setSection(student.get().getSection());
								midMarks.setExRollNo(student.get().getExRollNo());
								midMarks.setExCreateDate(date);
								midMarks.setSemester(sem.get());
								midMarks.setStream(stream.get());
								midMarks.setStaff(staff);
								midMarks.setExamAnnouncement(examannouncement.get());
								midMarks.setStudentadmission(student.get());
								midMarks.setProgrammeYear(programyear.get());
								midMarks.setExIsActive(true);
								midMarks.setExIsDelete(false);
								super.midtermmarksMarks.save(midMarks);
								successList.add("Success" + midMarks);
								excellog.info("Inserted Records into MidtermTable: " + tempA[1].trim());
							}
							if( exambar.size()<=0) {
								exambarcodes.setCourses(courses.get());
								exambarcodes.setExIsPracticalAttendance(is_PracticalAttendance);
								exambarcodes.setExLabExperiment(exPresentationandVivaVoiceMM50);
								exambarcodes.setExLabExperimentRemarks(exPresentationandVivaVoiceMM50Remark);
								exambarcodes.setAcademicYear(academicYear.get());
								exambarcodes.setProgrammes(Prog.get());
								exambarcodes.setColleges(col.get());
								exambarcodes.setDegree(degree.get());
								exambarcodes.setDepartment(department.get());
								exambarcodes.setExRollNo(student.get().getExRollNo());
								exambarcodes.setExCreateDate(date);
								exambarcodes.setSemester(sem.get());
								exambarcodes.setExamAnnouncement(examannouncement.get());
								exambarcodes.setStudentadmission(student.get());
								exambarcodes.setProgrammeYear(programyear.get());
								exambarcodes.setRegistrationType(coursereg.get(0).getRegistration());
								exambarcodes.setExIsActive(true);
								exambarcodes.setExIsDelete(false);
								super.ExamBarcodes.save(exambarcodes);
								excellog.info("Inserted Records into ExamBarcodesTable: " + tempA[1].trim());
							}
							else {
								is_update = true;

								
								int i = super.midtermmarksMarks.updatePracticalIsIndustrialVisit(exWriteupReportMM50,
										 request.getAcademicYear(), request.getColleges(),
										request.getProgrammes(), request.getCourses(), student.get().getExRollNo(), date,
										staff, student.get().getSection(),exWriteupReportMM50Remark
										,is_submit,request.getExamAnnouncement(),request.getDegree());
							

								int j = super.ExamBarcodes.updatePracticalIsIndustrialVisit(exPresentationandVivaVoiceMM50,
										 request.getAcademicYear(), request.getColleges(),
										request.getProgrammes(), request.getCourses(), student.get().getExRollNo(), date,
										exPresentationandVivaVoiceMM50Remark
										,is_PracticalAttendance,request.getExamAnnouncement(),request.getDegree());
								
								if (i == 1&&j==1) {
									updaterecord = updaterecord + 1;
									excellog.info("Updated Record: " + tempA[1].trim());

								}
							}
						}

					}  else {
						failureList.add(tempA[1] + ": Roll.No Not present :");
						list.add(tempA[1]);
					}
					info.put("status", "1");
					info.put("message", exPracticalIAMarksFile.getOriginalFilename() + "Excel Uploaded Succesfully ");
					if(list.size()>0) {
						if (is_update) {
							info.put("success", updaterecord +" Records "+"::" +" Updated Successfully");
							info.put("failure", list.size() + " Records "+"::" +" Not Updated Error");
						} else {
							info.put("success", successList.size()+ " Records Inserted Successfully");
							info.put("failure", list.size() + " Records Not Inserted ");
						}
					}
					else {
						if (is_update) {
							info.put("success", updaterecord +" Records "+"::" +" Updated Successfully");
						} else {
							info.put("success", successList.size() +" Records Inserted Successfully");
						}
					} 
					
				}
				excellog.info("Data Not Inserted : " + failureList);
				return info;

			} catch (Exception e) {
				e.printStackTrace();
				logger.error("Exception occured" + e);
				StringWriter errors = new StringWriter();
				e.printStackTrace(new PrintWriter(errors));
				logger.error(errors.toString());
				info.put("status", "0");
				info.put("message", "something went wrong");
				return info;

			}
		}


		private Map<String, Object> migIAPracticalMarksupload(MidTermMarksRequest request,
				MultipartFile exPracticalIAMarksFile) {
			// TODO Auto-generated method stub
			List<String> failureList = new ArrayList<String>();
			List<String> successList = new ArrayList<String>();
			List<Object> list = new ArrayList<Object>();
			Map<String, Object> info = new LinkedHashMap<>();
			try {
				logger.info(">>>...." + request.toString());
				Workbook workbook = getWorkBook(exPracticalIAMarksFile);
				Sheet Sheet = workbook.getSheetAt(0);

				Iterator<Row> rows = Sheet.iterator();
				rows.next();

				Optional<ProgrammeYear> programyear = super.programmeYear.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getProgrammeYear());
				if (!programyear.isPresent()) {
					info.put("status", "2");
					info.put("message", "ProgrammeYear not present");
					return info;
				}
				
				Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getSemster());
				if (!sem.isPresent()) {
					info.put("status", "2");
					info.put("message", " Semster not present");
					return info;
				}
				Optional<AcademicYear> academicYear = super.academicYear.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getAcademicYear());
				if (!academicYear.isPresent()) {
					info.put("status", "2");
					info.put("message", " academicyear not present");
					return info;
				}

				Optional<Colleges> col = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
						true);
				if (!col.isPresent()) {
					info.put("status", "2");
					info.put("message", "college  not present");
					return info;
				}
				Optional<Department> department = super.department
						.findByIdAndExIsDeleteAndExIsActive(request.getDepartment(), false, true);
				if (!department.isPresent()) {
					info.put("status", "2");
					info.put("message", "department  not present");
					return info;
				}

				Optional<Stream> stream = super.stream.findByIdAndExIsDeleteAndExIsActive(request.getStream(), false, true);
				if (!stream.isPresent()) {
					info.put("status", "2");
					info.put("message", "stream  not present");
					return info;
				}
				Optional<Programmes> Prog = super.programme.findByExIsDeleteAndExIsActiveAndId(false, true,
						request.getProgrammes());
				if (!Prog.isPresent()) {
					info.put("status", "2");
					info.put("message", " Programe not present");
					return info;
				}

				Optional<Courses> courses = super.courses.findByIdAndExIsDeleteAndExIsActive(request.getCourses(), false,
						true);
				if (!courses.isPresent()) {
					info.put("status", "2");
					info.put("message", "courses not present");
					return info;
				}
				
				Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
				if (!degree.isPresent()) {
					info.put("status", "2");
					info.put("message", "Degree not present");
					return info;
				}
				int updaterecord = 0;
				Boolean is_update = false;

				int rowIndex = 0;
				for (int rowNum = Sheet.getLastRowNum(); rowNum >= 0; rowNum--) {
					final Row row = Sheet.getRow(rowNum);
					if (row != null && row.getCell(0) != null) {
						if (row.getCell(0).toString() != "" && row.getCell(0).toString() != null) {
							rowIndex = rowNum;
							logger.info("?????????????Last non empty row????????????????" + rowIndex);
							break;
						}
					}
				}
				for (int rowNum = 3; rowNum < rowIndex + 1; rowNum++) {
					Row r = Sheet.getRow(rowNum);
					String temp = "";
					for (int cn = 0; cn < 10; cn++) {
						Cell c = r.getCell(cn, Row.RETURN_BLANK_AS_NULL);
						try {

							if (c == null) {
								// The spreadsheet is empty in this cell
								temp = temp + "#@&" + "NA";
							} else {
								// Do something useful with the cell's contents
								c.setCellType(Cell.CELL_TYPE_STRING);
								temp = temp + "#@&" + super.commonValidations.getCellValue(c);
							}

						} catch (Exception e) {
							StringWriter errors = new StringWriter();
							e.printStackTrace(new PrintWriter(errors));
							logger.error("Exception  : " + errors.toString());
							// return "failed";
						}

					}
					String tempA[] = temp.split("#@&");
					MidTermMarks midMarks = new MidTermMarks();
					ExamBarcodes exambarcodes = new ExamBarcodes();
	             
					Optional<Studentadmission> student = super.studentadmission
							.findByExIsDeleteAndExIsActiveAndExRollNo(false, true, tempA[1].trim());
					

					Optional<ExamAttendance> ExamAttendance = super.examAttendance
							.findByExIsDeleteAndExIsActiveAndStudentadmissionExRollNoAndCollegesIdAndDegreeIdAndProgrammesIdAndCoursesId(
									false, true, tempA[1].trim(), request.getColleges(), request.getDegree(),
									request.getProgrammes(), request.getCourses());

					if (student.isPresent()) {
						Date date = new Date();
						
	
						List<MidTermMarks> midterm = super.midtermmarksMarks
								.findByExIsActiveAndExIsDeleteAndExRollNoAndCoursesId(true, false, tempA[1].trim(),
										request.getCourses());
						System.out.println(">...mid" + midterm);
						
						List<ExamBarcodes> exambar = super.exambarcode.findByExIsActiveAndExIsDeleteAndExRollNo(true, false,
								tempA[1].trim());

						Staffpersonal staff = null;
						if (request.getStaff() == null || request.getStaff().equals("")) {
							staff = null;
						} else {
							Optional<Staffpersonal> staffres = super.staffpersonal
									.findByIdAndExIsDeleteAndExIsActive(request.getStaff(), false, true);
							if (!staffres.isPresent()) {
								info.put("status", "2");
								info.put("message", "staff not present");
								return info;
							}
							staff = staffres.get();
						}
						 if (!ExamAttendance.isPresent()) {
							 failureList.add("Attendance not created for Particular Subject : " +tempA[1]+"::"+tempA[2]);
							 list.add(tempA[1]); 
							 }

						List<CoursesRegistration> coursereg = super.coursesRegistration
								.findByExIsDeleteAndExIsActiveAndCoursesIdAndStudentadmissionId(false, true,
										courses.get().getId(), student.get().getId());
						if (coursereg.size() <= 0) {
							failureList.add(tempA[1] + ": student not registered for courses:");
							list.add(tempA[1]);
						}
					 
						 else {
			
							 
							 Boolean is_submit = false;
								if (tempA[3] == null || tempA[3].toString().trim().equals("")
										|| tempA[3].toString().equals("NA")) {
									is_submit = false;
								} else {
									int val = Integer.parseInt(tempA[3]);
									if (val == 1) {
										is_submit = true;
									} else {
										is_submit = false;
									}
								}
								
								
								Boolean is_PracticalAttendance = false;
								if (tempA[4] == null || tempA[3].toString().trim().equals("")
										|| tempA[4].toString().equals("NA")) {
									is_PracticalAttendance = false;
								} else {
									int val = Integer.parseInt(tempA[4]);
									if (val == 1) {
										is_PracticalAttendance = true;
									} else {
										is_PracticalAttendance = false;
									}
								}
								
							 
							 
								Double exPracticalRecordMarks = null;
								String exPracticalRecordMarks_remarks = "NA";
								if(super.commonHelper.isNumeric(tempA[5].trim())) {
									exPracticalRecordMarks = commonHelper.getMarksValue(tempA[5].trim());
								}else {
									if(tempA[5].trim().equalsIgnoreCase("A")) {
										exPracticalRecordMarks_remarks = "ABSENT";
									}else {
										exPracticalRecordMarks_remarks = "NA";
									}			
								}
								

								Double exPracticallearningMarks = null;
								String exPracticallearningMarks_remarks = "NA";
								if(super.commonHelper.isNumeric(tempA[6].trim())) {
									exPracticallearningMarks = commonHelper.getMarksValue(tempA[6].trim());
								}else {
									if(tempA[6].trim().equalsIgnoreCase("A")) {
										exPracticallearningMarks_remarks = "ABSENT";
									}else {
										exPracticallearningMarks_remarks = "NA";
									}			
								}
								
								Double exLabExperiment = null;
								String exLabExperiment_remarks = "NA";
								if(super.commonHelper.isNumeric(tempA[7].trim())) {
									exLabExperiment = commonHelper.getMarksValue(tempA[7].trim());
								}else {
									if(tempA[8].trim().equalsIgnoreCase("A")) {
										exLabExperiment_remarks = "ABSENT";
									}else {
										exLabExperiment_remarks = "NA";
									}			
								}
							 
								

								Double exViva = null;
								String exViva_remarks = "NA";
								if(tempA[8].trim()==null || tempA[8].equals(""))
								{
									return null;
								}
								else if(tempA[8].trim().equalsIgnoreCase("A"))
								{
									exViva_remarks="ABSENT";
								}else {
								exViva=commonHelper.getMarksValue(tempA[8].trim());
								}
								/*	if(super.commonHelper.isNumeric(tempA[8].trim())) {
									exViva = commonHelper.getMarksValue(tempA[8].trim());
								}else {
									if(tempA[8].trim().equalsIgnoreCase("A")) {
										exViva_remarks = "ABSENT";
									}else {
										exViva_remarks = "NA";
									}			
								}*/

								if (midterm.size() <= 0) {
									midMarks.setCourses(courses.get());
									midMarks.setExIsSubmit(is_submit);
									midMarks.setExPracticalRecordMarks(exPracticalRecordMarks);
									midMarks.setExPracticalLearning(exPracticallearningMarks);
									midMarks.setExpracticalRecordRemarks(exPracticalRecordMarks_remarks);
									midMarks.setExpracticalLearningRemarks(exPracticallearningMarks_remarks);
									midMarks.setAcademicYear(academicYear.get());
									midMarks.setProgrammes(Prog.get());
									midMarks.setColleges(col.get());
									midMarks.setDegree(degree.get());	
									midMarks.setDepartment(department.get());
									midMarks.setSection(student.get().getSection());
									midMarks.setExRollNo(student.get().getExRollNo());
									midMarks.setExCreateDate(date);
									midMarks.setSemester(sem.get());
									midMarks.setStream(stream.get());
									midMarks.setStaff(staff);
									midMarks.setStudentadmission(student.get());
									midMarks.setProgrammeYear(programyear.get());
									midMarks.setExIsActive(true);
									midMarks.setExIsDelete(false);
									super.midtermmarksMarks.save(midMarks);
									successList.add("Success" + midMarks);
									excellog.info("Inserted Records into MidtermTable: " + tempA[1].trim());
								}
								if( exambar.size()<=0) {
									exambarcodes.setCourses(courses.get());
									exambarcodes.setExIsPracticalAttendance(is_PracticalAttendance);
									exambarcodes.setExLabExperiment(exLabExperiment);
									exambarcodes.setExViva(exViva);
									exambarcodes.setExLabExperimentRemarks(exLabExperiment_remarks);
									exambarcodes.setExVivaRemarks(exViva_remarks);
									exambarcodes.setAcademicYear(academicYear.get());
									exambarcodes.setProgrammes(Prog.get());
									exambarcodes.setColleges(col.get());
									exambarcodes.setDegree(degree.get());
									exambarcodes.setDepartment(department.get());
									exambarcodes.setExRollNo(student.get().getExRollNo());
									exambarcodes.setExCreateDate(date);
									exambarcodes.setSemester(sem.get());
									exambarcodes.setStudentadmission(student.get());
									exambarcodes.setProgrammeYear(programyear.get());
									exambarcodes.setRegistrationType(coursereg.get(0).getRegistration());
									exambarcodes.setExIsActive(true);
									exambarcodes.setExIsDelete(false);
									super.ExamBarcodes.save(exambarcodes);
									excellog.info("Inserted Records into ExamBarcodesTable: " + tempA[1].trim());
								}
								else {
									is_update = true;

									
									int i = super.midtermmarksMarks.updatePracticalDetailsssss(exPracticalRecordMarks,
											exPracticallearningMarks, request.getAcademicYear(), request.getColleges(),
											request.getProgrammes(), request.getCourses(), student.get().getExRollNo(), date,
											staff, student.get().getSection(),exPracticalRecordMarks_remarks,exPracticallearningMarks_remarks
											,is_submit);
								

									int j = super.ExamBarcodes.updatePracticalrecordsfaculty(exLabExperiment,
											exViva, request.getAcademicYear(), request.getColleges(),
											request.getProgrammes(), request.getCourses(), student.get().getExRollNo(), date,
											exLabExperiment_remarks,exViva_remarks
											,is_PracticalAttendance);
									
									if (i == 1&&j==1) {
										updaterecord = updaterecord + 1;
										excellog.info("Updated Record: " + tempA[1].trim());

									}
								}
						}

					}  else {
						failureList.add(tempA[1] + ": Roll.No Not present :");
						list.add(tempA[1]);
					}
					info.put("status", "1");
					info.put("message", exPracticalIAMarksFile.getOriginalFilename() + "Excel Uploaded Succesfully ");
					
				if(list.size()>0) {
					 if (is_update) {
							info.put("success", updaterecord +" Records "+"::" +" Updated Successfully");
							info.put("failure", list.size() + " Records "+"::" +" Not Updated Error");
					} else {
							info.put("success", successList.size()+ " Records Inserted Successfully");
							info.put("failure", list.size() + " Records Not Inserted ");
							}
					} else {
							if (is_update) {
								info.put("success", updaterecord +" Records "+"::" +" Updated Successfully");
							} else {
								info.put("success", successList.size() +" Records Inserted Successfully");
								
							}
						} 
				}
				excellog.info("Data Not Inserted : " + failureList);
				return info;

			} catch (Exception e) {
				e.printStackTrace();
				logger.error("Exception occured" + e);
				StringWriter errors = new StringWriter();
				e.printStackTrace(new PrintWriter(errors));
				logger.error(errors.toString());
				info.put("status", "0");
				info.put("message", "something went wrong");
				return info;

			}

		}


		@Override
		public Map<String, Object> uploadStudentsDetails(MultipartFile StudentsDetails) {
			
			Map<String, Object> info = new LinkedHashMap<>();
			if (StudentsDetails == null || StudentsDetails.isEmpty()) {
				info.put("status", "2");
				info.put("message", "Please select file");
				return info;
			}
			String extention = FilenameUtils.getExtension(StudentsDetails.getOriginalFilename());
			if (extention.equalsIgnoreCase("xls") || extention.equalsIgnoreCase("xlsx")) {
				Map<String, Object> result = readDataFromStudentsDetailsExcel(StudentsDetails);
				return result;
			}
			info.put("status", "2");
			info.put("message", "File should be xls / xlsx extention");
			return info;
		}

		private Map<String, Object> readDataFromStudentsDetailsExcel(MultipartFile StudentsDetails) {
			List<String> failureList = new ArrayList<String>();
			List<String> successList = new ArrayList<String>();
			List<Object> list = new ArrayList<Object>();
			Map<String, Object> info = new LinkedHashMap<>();
			try {
				
				Workbook workbook = getWorkBook(StudentsDetails);
				Sheet Sheet = workbook.getSheetAt(0);
						int rowIndex = 0;
						for (int rowNum = Sheet.getLastRowNum(); rowNum >= 0; rowNum--) {
							final Row row = Sheet.getRow(rowNum);
							if (row != null && row.getCell(0) != null) {
								if (row.getCell(0).toString() != "" && row.getCell(0).toString() != null) {
									rowIndex = rowNum;
									logger.info("?????????????Last non empty row????????????????" + rowIndex);
									break;
								}
							}
						}

						for (int rowNum = 1; rowNum < rowIndex + 1; rowNum++) {
							Row r = Sheet.getRow(rowNum);
							String temp = "";
							for (int cn = 0; cn < 55; cn++) {
								Cell c = r.getCell(cn, Row.RETURN_BLANK_AS_NULL);
								try {

									if (c == null) {
										// The spreadsheet is empty in this cell
										temp = temp + "#@&" + "NA";
									} else {
										// Do something useful with the cell's contents
										c.setCellType(Cell.CELL_TYPE_STRING);
										temp = temp + "#@&" + CommonHelper.getCellValue(c);
									}

								} catch (Exception e) {
									StringWriter errors = new StringWriter();
									e.printStackTrace(new PrintWriter(errors));
									logger.error("Exception  : " + errors.toString());
									// return "failed";
								}

							}
					String tempA[] = temp.split("#@&");
					System.out.println(">>>>>>>>consloe>>>>" + temp);
					System.out.println(">>sys>>" + tempA.length);					
						Optional<Studentadmission> student = super.studentadmission.findByExIsDeleteAndExIsActiveAndExRollNo(false, true, tempA[1].trim());			 
						if (!student.isPresent()) {
							failureList.add(tempA[1].trim() + " : student  not present:");
							list.add(tempA[1]);
						} 
						 else{	
							 double str1 = Double.parseDouble(tempA[3].trim());
							 Date javaDate= DateUtil.getJavaDate((double) str1);
							 String inputFormat=new SimpleDateFormat("dd/MM/yyyy").format(javaDate);
						     System.out.println(new SimpleDateFormat("dd/MM/yyyy").format(javaDate));
							 String myDateAsString = inputFormat;
							
							
							 Category categorys = null;
									Optional<Category> categoryres = super.category.findByExNameAndExIsDeleteAndExIsActive(tempA[6], false, true);
									if (!categoryres.isPresent() || !categoryres.get().getExIsActive()) {
										failureList.add(tempA[6].trim() + "AllotedCategory  not present ");
										list.add(tempA[1].trim());
									} else {
										categorys = categoryres.get();
									}
								 Long cat=categorys.getId();								 								 
								 Category candidate = null;
								 Optional<Category> candidateres = super.category.findByExNameAndExIsDeleteAndExIsActive(tempA[7], false, true);
										if (!candidateres.isPresent() || !candidateres.get().getExIsActive()) {
											failureList.add(tempA[7].trim() + "CandidateCategory  not present ");
											list.add(tempA[1].trim());
										} else {
											candidate = candidateres.get();
										}		 
						
						
							 int m= super.studentadmission.updatepersonal(tempA[2].trim(),student.get().getId(),cat,candidate);
							 int l = super.studentpersonal.updateDob(myDateAsString, student.get().getId(),tempA[4].trim(),tempA[5].trim());	
							 if(l >=0 && m>=0) {
								 successList.add("Success");
							 }else {
								 list.add(tempA[1].trim());
								 failureList.add(tempA[1].trim());
							 }
						 }		
				}
				info.put("status", "1");
				info.put("message", StudentsDetails.getOriginalFilename() + "Excel Uploaded Succesfully ");
				info.put("success", successList.size() + " Records Updated Successfully");
				info.put("failure", list.size() + " Records Not Inserted ");
				excellog.info("Data Not Inserted : " + failureList);
				return info;

			} catch (Exception e) {
				logger.error("Exception occured" + e);
				StringWriter errors = new StringWriter();
				e.printStackTrace(new PrintWriter(errors));
				e.printStackTrace();
				logger.error(errors.toString());
				info.put("status", "0");
				info.put("message", "something went wrong");
				return info;
			}
		}


		@Override
		public Map<String, Object> uploadQuestionPaper(CoursesRequest request) {
			Map<String, Object> info = new LinkedHashMap<>();
			try {					
				Optional<Batch> batchid = super.batch.findById(request.getBatch());
				if (!batchid.isPresent()) {
					info.put("status", "2");
					info.put("message", "batch not present");
				
					return info;
				}
				Optional<Programmes> programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,request.getProgrammes());
				if (!programmes.isPresent()) {
					info.put("status", "2");
					info.put("message", "Programme not present");
					return info;
				}
				
				Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,request.getSemester());
				if (!sem.isPresent()) {
					info.put("status", "2");
					info.put("message", "Semster not present");
					return info;
				}
					
					String  UPLOADED_FOLDER =  createFolder(batchid.get().getExIdentifier(), programmes.get().getExIdentifier(), "qp" , sem.get().getExName());			
							if(UPLOADED_FOLDER.equals("NA")) {
					info.put("status", "0");
					info.put("message", "something went wrong");
					return info;
				}			
		           String imagepath = "/"+batchid.get().getExIdentifier()+"/"+programmes.get().getExIdentifier()+"/"+sem.get().getExName()+"/qp/";				
		           for(int i =0 ;i< request.getFiles().length ; i++) {
					   info =   uploadQP(request.getFiles()[i],request,UPLOADED_FOLDER,imagepath);
				   }
		           	return info;
				
						   
			}catch(Exception e) {
				e.printStackTrace();
				logger.error("Exception occured" + e);
				StringWriter errors = new StringWriter();
				e.printStackTrace(new PrintWriter(errors));
				logger.error(errors.toString());
				info.put("status", "0");
				info.put("message", "something went wrong");
				return info;
			}
		}
		
		
		
		private Map<String, Object> uploadQP(MultipartFile marksheet, CoursesRequest request, String UPLOADED_FOLDER, String imagepath) throws Exception  {
			Map<String, Object> info = new LinkedHashMap<>();
			if (marksheet != null) {
				if (!marksheet.isEmpty()) {
					DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd-HH.mm.ss.SSSSSS");		
					Date date=new Date();		
					String datecreate = dateFormat.format(date);
					
					
					 String uuid = UUID.randomUUID().toString();
					 String out =  commonHelper.generateKey("MKLLDDK",uuid,datecreate , 8).toUpperCase();
					 
					byte[] bytes = marksheet.getBytes();
					String newfilename =  marksheet.getOriginalFilename();
					String result = newfilename.substring(0, newfilename.lastIndexOf("."));									
					Path path = Paths.get(UPLOADED_FOLDER + out+".pdf");
					Files.write(path, bytes);
					String photopath = imagepath + out+".pdf";
					int i = 	super.courses.updateQp(photopath, result,request.getBatch(),request.getDepartment(),request.getSemester());
							//super.semesterProgressReport.updateMarksheetPath(photopath, request.getProgrammes(), request.getSemester(), request.getProgrammeYear(), result);
				//if(i == 1) {
					info.put("status", "1");
					info.put("message", "question paper uploaded successfully");
				
				//	info.put("semester", request.getSemester());
					return info;
				//}else {
				//	info.put("status", "0");
					//info.put("message", "something went wrong");
					//return info;
				//}
			}
		}
			info.put("status", "2");
			info.put("message", "Please select mark sheet");
			return info;

		}		
		

		@Override
		public Map<String, Object> uploadStudentpassbook(MultipartFile file, Long student) {
			Map<String, Object> info = new LinkedHashMap<>();
			try {					
				Optional<Studentadmission> status = super.studentadmission.findById(student);
				if(!status.isPresent()) {
					info.put("status", "2");
					info.put("message", "Student is not present.");
					return info;
				}	
				
					
					String  UPLOADED_FOLDER =  createFolder(status.get().getAcademicYear().getExYear(), status.get().getProgrammes().getExIdentifier(), status.get().getExRollNo(), "passbook");			
							if(UPLOADED_FOLDER.equals("NA")) {
					info.put("status", "0");
					info.put("message", "something went wrong");
					return info;
				}			
		           String imagepath = "/"+status.get().getAcademicYear().getExYear()+"/"+status.get().getProgrammes().getExIdentifier()+"/"+"passbook"+"/"+status.get().getExRollNo()+"/";				
					if (file != null) {
						if (!file.isEmpty()) {
							byte[] bytes = file.getBytes();
							String newfilename =  file.getOriginalFilename();
						//	newfilename = documenttype.get().getExdocumentType()+"-"+newfilename;
							Path path = Paths.get(UPLOADED_FOLDER + newfilename);
							Files.write(path, bytes);
							
							String photopath = imagepath + newfilename;
							
							List<StudentBankDetails> studentlog = studentBankDetailsRepository.findByStudentadmissionId(student);
							if(studentlog.size()==0) {
								Date date = new Date();
								StudentBankDetails document = new StudentBankDetails();
								document.setExCreateDate(date);
								document.setStudentadmission(status.get());
								document.setExPassBookPath(photopath);
								studentBankDetailsRepository.save(document);
								info.put("status", "1");
								info.put("message", "Document uploaded successfully");
								return info;
								}else {
									 int m=studentBankDetailsRepository.updatepersonal(student,photopath);
									info.put("status", "2");
									info.put("message", "Document uploaded successfully");
									return info;
								}	
					}
				}
					info.put("status", "2");
					info.put("message", "Please select Document");
					return info;
						   
			}catch(Exception e) {
				e.printStackTrace();
				logger.error("Exception occured" + e);
				StringWriter errors = new StringWriter();
				e.printStackTrace(new PrintWriter(errors));
				logger.error(errors.toString());
				info.put("status", "0");
				info.put("message", "something went wrong");
				return info;
			}
		}

		@Override
		public Map<String, Object> uploadFeedetailsofstudent(MultipartFile exFeeFile, Long user) {
			Map<String, Object> info = new LinkedHashMap<>();
			if (exFeeFile == null || exFeeFile.isEmpty()) {
				info.put("status", "2");
				info.put("message", "Please select file");
				return info;
			}
			String extention = FilenameUtils.getExtension(exFeeFile.getOriginalFilename());
			if (extention.equalsIgnoreCase("xls") || extention.equalsIgnoreCase("xlsx")) {
				Map<String, Object> result = readDataFromFeeMasterstudentsExcel(exFeeFile, user);
				System.out.println("Qread the data" + result);
				return result;
			}
			info.put("status", "2");
			info.put("message", "File should be xls / xlsx extention");
			return info;
		}

		private Map<String, Object> readDataFromFeeMasterstudentsExcel(MultipartFile exFeeFile, Long user) {
			List<String> failureList = new ArrayList<String>();
			List<String> successList = new ArrayList<String>();
			List<Object> list = new ArrayList<Object>();
			Map<String, Object> info = new LinkedHashMap<>();
			try {
				Workbook workbook = getWorkBook(exFeeFile);
				Sheet Sheet = workbook.getSheetAt(0);

				Iterator<Row> rows = Sheet.iterator();
				rows.next();

				int updaterecord = 0;
				Boolean is_update = false;
				
				for (int rowNum = 1; rowNum < Sheet.getLastRowNum() + 1; rowNum++) {
					Row r = Sheet.getRow(rowNum);
					String temp = "";
					for (int cn = 0; cn < 20; cn++) {
						Cell c = r.getCell(cn, Row.RETURN_BLANK_AS_NULL);
						try {

							if (c == null) {
								// The spreadsheet is empty in this cell
								temp = temp + "#@&" + "NA";
							} else {
								// Do something useful with the cell's contents
								c.setCellType(Cell.CELL_TYPE_STRING);
								temp = temp + "#@&" + super.commonValidations.getCellValue(c);
							}

						} catch (Exception e) {
							StringWriter errors = new StringWriter();
							e.printStackTrace(new PrintWriter(errors));
							logger.error("Exception  : " + errors.toString());
							// return "failed";
						}

					}

					String tempA[] = temp.split("#@&");
					Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndExNames(false, true,tempA[1].trim());
					
					Optional<Programmes> programs = super.programmes.findByExIsDeleteAndExIsActiveAndExIdentifier(false,true, tempA[2].trim());

					Optional<AcademicYear> academicYearid = super.academicYear.findByExIsDeleteAndExIsActiveAndExIdentifier(false, true, tempA[5].trim());
					
					Optional<ProgrammeYear> programyear = super.programmeYear.findByExNameAndExIsActiveAndExIsDelete(tempA[3].trim(), true, false);
					Optional<Semster> sem = super.semester.findByExNameAndExIsActiveAndExIsDelete(tempA[4].trim(), true,false);

					Optional<Batch> batch = super.batch.findByExNameAndExIsDeleteAndExIsActiveAndProgrammesIdAndDegreeId(tempA[6].trim(), false,true , programs.get().getId()  , degree.get().getId());
				
                     Optional<Studentadmission> sadmission = super.studentadmission.findByExIsDeleteAndExIsActiveAndExRollNo(false, true, tempA[7].trim());
					
					Optional<FeeCategory> feecetegory = super.feecategory.findByExNameAndExIsDeleteAndExIsActive(tempA[8].trim(), false, true);
					
					Optional<FeeMaster> master = super.feeMaster.findByExIsDeleteAndProgrammesIdAndProgrammeyearIdAndBatchIdAndDegreeIdAndSemsterIdAndFeecategoryIdAndAcademicYearIdAndExFeeAmount(false, programs.get().getId() ,programyear.get().getId(),batch.get().getId() ,degree.get().getId(), sem.get().getId(),feecetegory.get().getId(),academicYearid.get().getId(),tempA[9].trim());
			
					Optional<RegistrationType> rtype = super.registrationType.findByExNameAndExIsDeleteAndExIsActive(tempA[10].trim(), false, true);
					
					Optional<Studentpersonal> spersonal = super.studentpersonal.Studentadmission(sadmission.get().getId());
					
					if (!degree.isPresent()) {
						failureList.add(tempA[1].trim() + " : Degree name not present:");
						System.out.println(">.degreee peresnt or not" + tempA[1].trim());
						list.add(tempA[1]);
						
					} else if (!programs.isPresent()) {
						failureList.add(tempA[2].trim() + " : programs not present:");
						list.add(tempA[1]);

					}
					else if (!academicYearid.isPresent()) {
						failureList.add(tempA[3].trim() + " : Academic Year not present:");
						list.add(tempA[1]);

					} else if (!programyear.isPresent()) {
						failureList.add(tempA[4].trim() + " : programyear not present:");
						list.add(tempA[1]);
						
					} else if (!sem.isPresent()) {
						failureList.add(tempA[5].trim() + " : semester not present:");
						list.add(tempA[1]);

					}	else if (!batch.isPresent()) {
						failureList.add(tempA[6].trim() + " : batch not present:");
						list.add(tempA[1]);

					}   else if (!sadmission.isPresent()) {
						failureList.add(tempA[7].trim() + " : Student not present:");
						list.add(tempA[1]);

					}  else if (!feecetegory.isPresent()) {
						failureList.add(tempA[8].trim() + " : FeeName not present:");
						list.add(tempA[1]);

					} else if (!rtype.isPresent()) {
						failureList.add(tempA[9].trim() + " : Registration Type not present:");
						list.add(tempA[1]);

					}   else if (!master.isPresent()) {
						failureList.add(tempA[8].trim() +tempA[9].trim() + " : FeeMaster not present:");
						list.add(tempA[1]);
						
					} else {
						List<OrderTransaction> orderlist = super.transactionRepository.findByPaymentstatusAndExRollNoAndAcademicYearIdAndSemesterIdAndProgrammeYearIdAndRegistrationIdAndFeemasterId(tempA[11].trim(), sadmission.get().getExRollNo(), academicYearid.get().getId(), sem.get().getId(), programyear.get().getId(),rtype.get().getId(),master.get().getId()); 
						if (orderlist.size() > 0) {
							 SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
							   double str1 = Double.parseDouble(tempA[15].trim());
							   Date javaDate= DateUtil.getJavaDate((double) str1); 
							    String strDate = dtFormat.format(javaDate);  
							    Date date = dtFormat.parse(strDate);	
							    is_update = true;   
							    int update = super.transactionRepository.updaterecords(tempA[9].trim(),orderlist.get(0).getExRollNo(),tempA[12].trim(),tempA[13].trim(),tempA[14].trim(),date,tempA[16].trim(),master.get().getId());
							    if(update == 1)
							    {
							    	updaterecord = updaterecord + 1;
							    	excellog.info("Updated Record: " + tempA[8].trim());
						}
						}
					   else {			
						   SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
						   double str1 = Double.parseDouble(tempA[15].trim());
						   Date javaDate= DateUtil.getJavaDate((double) str1); 
						    String strDate = dtFormat.format(javaDate);  
						    Date date = dtFormat.parse(strDate);
							OrderTransaction trans = new OrderTransaction();
							trans.setDegree(degree.get());					
							trans.setProgrammes(programs.get());
							trans.setProgrammeYear(programyear.get());
							trans.setSemester(sem.get());
							trans.setAcademicYear(academicYearid.get());
							trans.setStudentadmission(sadmission.get());
							trans.setFeemaster(master.get());
							trans.setRegistration(rtype.get());
							trans.setAddress(spersonal.get().getExPermanentAddress());
							trans.setEmail(spersonal.get().getExEmailId());
							trans.setExRollNo(tempA[7].trim());
							trans.setMobile(spersonal.get().getExContactDetails());
							trans.setName(sadmission.get().getExName());
							trans.setOrderId(tempA[16].trim());
							trans.setPaymentstatus(tempA[11].trim());
							trans.setTxnAmount(Double.parseDouble(master.get().getExFeeAmount()));
							trans.setTxnDate(date);
							trans.setBankRefNum(tempA[12].trim());
							trans.setMihpayId(tempA[13].trim());
							trans.setMode(tempA[14].trim());
							trans.setPaymentSource(false);
							trans.setError("E000");
							trans.setUnmappedstatus("captured");
							trans.setErrorMessage("NO ERROR");
							trans.setQueryStatus("Y");
							super.transactionRepository.save(trans);					
							successList.add("Success" + trans);						
						}

					}

				}

				info.put("status", "1");
				info.put("message", exFeeFile.getOriginalFilename() + "Excel Uploaded Succesfully ");
				if (is_update) {
					info.put("success", updaterecord + " Records Updated Successfully");
					info.put("failure", list.size() + " Records Not Updated ");
				} else {
					info.put("success", successList.size() + " Records Inserted Successfully");
					info.put("failure", list.size() + " Records Not Inserted ");
				}
				excellog.info("Data Not Inserted : " + failureList);
				return info;

			} catch (Exception e) {
				e.printStackTrace();
				logger.error("Exception occured" + e);
				StringWriter errors = new StringWriter();
				e.printStackTrace(new PrintWriter(errors));
				logger.error(errors.toString());
				info.put("status", "0");
				info.put("message", "something went wrong");
				return info;
			}
		
		}


		@Override
		public Map<String, Object> uploadActivity(MultipartFile exFeeFile, Long user) {
			Map<String, Object> info = new LinkedHashMap<>();
			if (exFeeFile == null || exFeeFile.isEmpty()) {
				info.put("status", "2");
				info.put("message", "Please select file");
				return info;
			}
			String extention = FilenameUtils.getExtension(exFeeFile.getOriginalFilename());
			if (extention.equalsIgnoreCase("xls") || extention.equalsIgnoreCase("xlsx")) {
				Map<String, Object> result = uploadActivityFile(exFeeFile, user);
				System.out.println("Qread the data" + result);
				return result;
			}
			info.put("status", "2");
			info.put("message", "File should be xls / xlsx extention");
			return info;
		}
		
		
		private Map<String, Object> uploadActivityFile(MultipartFile exFeeFile, Long user) {
			List<String> failureList = new ArrayList<String>();
			List<String> successList = new ArrayList<String>();
			List<Object> list = new ArrayList<Object>();
			Map<String, Object> info = new LinkedHashMap<>();
			try {
				Workbook workbook = getWorkBook(exFeeFile);
				Sheet Sheet = workbook.getSheetAt(0);

				Iterator<Row> rows = Sheet.iterator();
				rows.next();

				int updaterecord = 0;
				Boolean is_update = false;
				
				for (int rowNum = 1; rowNum < Sheet.getLastRowNum() + 1; rowNum++) {
					Row r = Sheet.getRow(rowNum);
					String temp = "";
					for (int cn = 0; cn < 20; cn++) {
						Cell c = r.getCell(cn, Row.RETURN_BLANK_AS_NULL);
						try {

							if (c == null) {
								// The spreadsheet is empty in this cell
								temp = temp + "#@&" + "NA";
							} else {
								// Do something useful with the cell's contents
								c.setCellType(Cell.CELL_TYPE_STRING);
								temp = temp + "#@&" + super.commonValidations.getCellValue(c);
							}

						} catch (Exception e) {
							StringWriter errors = new StringWriter();
							e.printStackTrace(new PrintWriter(errors));
							logger.error("Exception  : " + errors.toString());
							// return "failed";
						}

					}

					String tempA[] = temp.split("#@&");
					
					Optional<AcademicYear> academicYearid = super.academicYear.findByExIsDeleteAndExIsActiveAndExYear(false, true, tempA[4].trim());				
					 if (!academicYearid.isPresent()) {
						failureList.add(tempA[4].trim() + " : Academic Year not present:");
						list.add(tempA[1]);

					} 
						
					 else {
						 boolean iseven = false;
						 if(tempA[5].trim().trim().equalsIgnoreCase("ODD")) {
							 
						 }else {
							 iseven = true;
						 }
					
						 List<AcademicCalenderActivity> tasks = super.academiccalenderactivity.findByExNameAndExIsDeleteAndAcademicYearIdAndExIsEven(
								 tempA[1].trim().trim(), false, academicYearid.get().getId() , iseven);
							if (tasks.size() > 0) {
								failureList.add(tempA[1].trim() + " : Activity already present:");
								list.add(tempA[1]);
							}else {
								Date date = new Date();
								AcademicCalenderActivity academiccalenderactivity = new AcademicCalenderActivity();
								academiccalenderactivity.setExCreateDate(date);
								academiccalenderactivity.setExName(tempA[1].trim().trim());
								academiccalenderactivity.setExIdentifier(tempA[3].trim().trim());
								academiccalenderactivity.setExDescription(tempA[2].trim().trim());
								academiccalenderactivity.setExIsActive(true);
								academiccalenderactivity.setExIsDelete(false);
								academiccalenderactivity.setAcademicYear(academicYearid.get());
								academiccalenderactivity.setExIsEven(iseven);
								super.academiccalenderactivity.save(academiccalenderactivity);
								successList.add("Success" + academiccalenderactivity);		
							}
					}

				}

				info.put("status", "1");
				info.put("message", exFeeFile.getOriginalFilename() + "Excel Uploaded Succesfully ");
				if (is_update) {
					info.put("success", updaterecord + " Records Updated Successfully");
					info.put("failure", list.size() + " Records Not Updated ");
				} else {
					info.put("success", successList.size() + " Records Inserted Successfully");
					info.put("failure", list.size() + " Records Not Inserted ");
				}
				excellog.info("Data Not Inserted : " + failureList);
				return info;

			} catch (Exception e) {
				e.printStackTrace();
				logger.error("Exception occured" + e);
				StringWriter errors = new StringWriter();
				e.printStackTrace(new PrintWriter(errors));
				logger.error(errors.toString());
				info.put("status", "0");
				info.put("message", "something went wrong");
				return info;
			}
		
		}		
		
		
		


		@Override
		public Map<String, Object> uploadCalender(MultipartFile exFeeFile, Long user) {
			Map<String, Object> info = new LinkedHashMap<>();
			if (exFeeFile == null || exFeeFile.isEmpty()) {
				info.put("status", "2");
				info.put("message", "Please select file");
				return info;
			}
			String extention = FilenameUtils.getExtension(exFeeFile.getOriginalFilename());
			if (extention.equalsIgnoreCase("xls") || extention.equalsIgnoreCase("xlsx")) {
				Map<String, Object> result = uploadCalenderFile(exFeeFile, user);
				System.out.println("Qread the data" + result);
				return result;
			}
			info.put("status", "2");
			info.put("message", "File should be xls / xlsx extention");
			return info;
		}
		
	
		
		
		private Map<String, Object> uploadCalenderFile(MultipartFile exFeeFile, Long user) {
			List<String> failureList = new ArrayList<String>();
			List<String> successList = new ArrayList<String>();
			List<Object> list = new ArrayList<Object>();
			Map<String, Object> info = new LinkedHashMap<>();
			try {
				Workbook workbook = getWorkBook(exFeeFile);
				Sheet Sheet = workbook.getSheetAt(0);

				Iterator<Row> rows = Sheet.iterator();
				rows.next();

				int updaterecord = 0;
				Boolean is_update = false;
				
				for (int rowNum = 1; rowNum < Sheet.getLastRowNum() + 1; rowNum++) {
					Row r = Sheet.getRow(rowNum);
					String temp = "";
					for (int cn = 0; cn < 20; cn++) {
						Cell c = r.getCell(cn, Row.RETURN_BLANK_AS_NULL);
						try {

							if (c == null) {
								// The spreadsheet is empty in this cell
								temp = temp + "#@&" + "NA";
							} else {
								// Do something useful with the cell's contents
								c.setCellType(Cell.CELL_TYPE_STRING);
								temp = temp + "#@&" + super.commonValidations.getCellValue(c);
							}

						} catch (Exception e) {
							StringWriter errors = new StringWriter();
							e.printStackTrace(new PrintWriter(errors));
							logger.error("Exception  : " + errors.toString());
							// return "failed";
						}

					}

					String tempA[] = temp.split("#@&");
					
					Optional<AcademicYear> academicYearid = super.academicYear.findByExIsDeleteAndExIsActiveAndExYear(false, true, tempA[4].trim());				
					 if (!academicYearid.isPresent()) {
						failureList.add(tempA[4].trim() + " : Academic Year not present:");
						list.add(tempA[1]);

					} 
						
					 else {
						 boolean iseven = false;
						 if(tempA[5].trim().trim().equalsIgnoreCase("ODD")) {
							 
						 }else {
							 iseven = true;
						 }
					
						 List<AcademicCalenderActivity> tasks = super.academiccalenderactivity.findByExNameAndExIsDeleteAndAcademicYearIdAndExIsEven(
								 tempA[1].trim().trim(), false, academicYearid.get().getId() , iseven);
							if (tasks.size() <= 0) {
								failureList.add(tempA[1].trim() + " : Activity not present:");
								list.add(tempA[1]);
							}else {
								// get the batch details
								
								String tempcType[] = tempA[3].split("\\$");
								List<String> batch1 = Arrays.asList(tempcType);
									
								List<Batch> batch = super.batch.findByExNameIn(batch1);
								if(batch.size() <=0) {
									failureList.add(tempA[3].trim() + " : batch not present:");
									list.add(tempA[1]);
								}else {
									Date date = new Date();
									AcademicCalender AcademicCalender = new AcademicCalender();
									AcademicCalender.setExIsActive(true);
									AcademicCalender.setExIsDelete(false);
									AcademicCalender.setExIsEven(iseven);
									//AcademicCalender.setExProposedDates(tempA[2].trim());
									AcademicCalender.setExIsPublish(false);
									AcademicCalender.setExCreateDate(date);
									AcademicCalender.setAcademicYear(academicYearid.get());
									//AcademicCalender.setAcademicCalenderActivity(tasks.get(0));
									AcademicCalender.setBatch(batch);
									academicCalender.save(AcademicCalender);
									successList.add("Success" + AcademicCalender);		
								}
								
							}
					}

				}

				info.put("status", "1");
				info.put("message", exFeeFile.getOriginalFilename() + "Excel Uploaded Succesfully ");
				if (is_update) {
					info.put("success", updaterecord + " Records Updated Successfully");
					info.put("failure", list.size() + " Records Not Updated ");
				} else {
					info.put("success", successList.size() + " Records Inserted Successfully");
					info.put("failure", list.size() + " Records Not Inserted ");
				}
				excellog.info("Data Not Inserted : " + failureList);
				return info;

			} catch (Exception e) {
				e.printStackTrace();
				logger.error("Exception occured" + e);
				StringWriter errors = new StringWriter();
				e.printStackTrace(new PrintWriter(errors));
				logger.error(errors.toString());
				info.put("status", "0");
				info.put("message", "something went wrong");
				return info;
			}
		
		}


		@Override
		public Map<String, Object> uploadStudentsAdmissionDetails(MultipartFile studentsDetails) {
			Map<String, Object> info = new LinkedHashMap<>();
			if (studentsDetails == null || studentsDetails.isEmpty()) {
				info.put("status", "2");
				info.put("message", "Please select file");
				return info;
			}
			String extention = FilenameUtils.getExtension(studentsDetails.getOriginalFilename());
			if (extention.equalsIgnoreCase("xls") || extention.equalsIgnoreCase("xlsx")) {
				Map<String, Object> result = readDataFromStudentsAdmissionDetailsExcel(studentsDetails);
				return result;
			}
			info.put("status", "2");
			info.put("message", "File should be xls / xlsx extention");
			return info;
		}

		private Map<String, Object> readDataFromStudentsAdmissionDetailsExcel(MultipartFile studentsDetails) {
			List<String> failureList = new ArrayList<String>();
			List<String> successList = new ArrayList<String>();
			List<Object> list = new ArrayList<Object>();
			Map<String, Object> info = new LinkedHashMap<>();
			try {
				Workbook workbook = getWorkBook(studentsDetails);
				Sheet Sheet = workbook.getSheetAt(0);

				Iterator<Row> rows = Sheet.iterator();
				rows.next();

				int updaterecord = 0;
				Boolean is_update = false;
				
				for (int rowNum = 1; rowNum < Sheet.getLastRowNum() + 1; rowNum++) {
					Row r = Sheet.getRow(rowNum);
					String temp = "";
					for (int cn = 0; cn < 80; cn++) {
						Cell c = r.getCell(cn, Row.RETURN_BLANK_AS_NULL);
						try {

							if (c == null) {
								// The spreadsheet is empty in this cell
								temp = temp + "#@&" + "NA";
							} else {
								// Do something useful with the cell's contents
								c.setCellType(Cell.CELL_TYPE_STRING);
								temp = temp + "#@&" + super.commonValidations.getCellValue(c);
							}

						} catch (Exception e) {
							StringWriter errors = new StringWriter();
							e.printStackTrace(new PrintWriter(errors));
							logger.error("Exception  : " + errors.toString());
							// return "failed";
						}

					}

					String tempA[] = temp.split("#@&");
				   Optional<Studentadmission> sadmission = super.studentadmission.findByExIsDeleteAndExIsActiveAndExRollNo(false, true, tempA[1].trim());
				   if (!sadmission.isPresent()) {
						failureList.add(tempA[1].trim() + " : Student not present:");
						list.add(tempA[1]);

					} else {
						List<StudentadmissionLog> admission = super.studentadmissionLog.findByStudentadmissionId(sadmission.get().getId()); 
						if (admission.size() > 0) {	
							    is_update = true;   
							    int update = super.studentadmissionLog.updaterecordss(tempA[2].trim(),tempA[3].trim(),tempA[4].trim(),tempA[5].trim(),tempA[6].trim(),tempA[7].trim(),tempA[8].trim(),tempA[9].trim(),tempA[10].trim(),tempA[11].trim(),tempA[12].trim(),
							    		tempA[13].trim(),tempA[14].trim(),tempA[15].trim(),tempA[16].trim(),tempA[17].trim(),tempA[18].trim(),tempA[19].trim(),tempA[20].trim(),tempA[21].trim(),tempA[22].trim(),tempA[23].trim(),tempA[24].trim(),tempA[25].trim(),tempA[26].trim(),tempA[27].trim(),tempA[28].trim(),
							    		tempA[29].trim(),tempA[30].trim(),tempA[31].trim(),tempA[32].trim(),tempA[33].trim(),tempA[34].trim(),tempA[35].trim(),tempA[36].trim(),tempA[37].trim(),tempA[38].trim(),tempA[39].trim(),tempA[40].trim(),tempA[41].trim(),tempA[42].trim(),tempA[43].trim(),
							    		sadmission.get().getId());
							    if(update == 1)
							    {
							    	updaterecord = updaterecord + 1;
							    	excellog.info("Updated Record: " + tempA[8].trim());
							    }
							}
					   else {			
			
						   StudentadmissionLog trans = new StudentadmissionLog();
						   trans.setStudentadmission(sadmission.get());
						   trans.setFatherContact(tempA[2].trim());
						   trans.setFatherEmailId(tempA[3].trim());
						   trans.setFatherOfficeAddress(tempA[4].trim());
						   trans.setGuardiaPincode(tempA[5].trim());
						   trans.setGuardianAddress(tempA[6].trim());
						   trans.setGuardianConatct(tempA[7].trim());
						   trans.setGuardianEmailId(tempA[8].trim());
						   trans.setExPermanentcity(tempA[9].trim());
						   trans.setExPersonwithDisability(tempA[10].trim());
						   trans.setExPgCollageName(tempA[11].trim());
						   trans.setExPgPercentageOfMarks(tempA[12].trim());
						   trans.setExPresentcounrty(tempA[13].trim());
						   trans.setExPresentstate(tempA[14].trim());
						   trans.setMotherAnnualIncome(tempA[15].trim());
						   trans.setMotherContact(tempA[16].trim());
						   trans.setMotherEmailId(tempA[17].trim());
						   trans.setMotherOccupation(tempA[18].trim());
						   trans.setMotherOfficeAddress(tempA[19].trim());
						   trans.setExGateScore(tempA[20].trim());
						   trans.setExMinorityCategory(tempA[21].trim());
						   trans.setExPermanentstate(tempA[22].trim());
						   trans.setExPgBoardOfPass(tempA[23].trim());
						   trans.setExPgMedium(tempA[24].trim());
						   trans.setExPresentcity(tempA[25].trim());
						   trans.setExPresentpostalcode(tempA[26].trim());
						   trans.setExStudiedIsbiology(tempA[27].trim());
						   trans.setExTenthBoardOfPass(tempA[28].trim());
						   trans.setExTenthMedium(tempA[29].trim());
						   trans.setExTenthPercentageOfMarks(tempA[30].trim());
						   trans.setExTenthSchollName(tempA[31].trim());
						   trans.setExTenthYearOfPass(tempA[32].trim());
						   trans.setExTwelvethBoardOfPass(tempA[33].trim());
						   trans.setExTwelvethCollageName(tempA[34].trim());
						   trans.setExTwelvethMedium(tempA[35].trim());
						   trans.setExTwelvethPercentageOfMarks(tempA[36].trim());
						   trans.setExTwelvethYearOfPass(tempA[37].trim());
						   trans.setExUgBoardOfPass(tempA[38].trim());
						   trans.setExUgCollageName(tempA[39].trim());
						   trans.setExUgMedium(tempA[40].trim());
						   trans.setExUgPercentageOfMarks(tempA[41].trim());
						   trans.setExUgYearOfPass(tempA[42].trim());
						   trans.setExcounrty(tempA[43].trim());
						   trans.setExPgYearOfPass(tempA[44].trim());
			  
							super.studentadmissionLog.save(trans);					
							successList.add("Success" + trans);						
						}

					}

				}

				info.put("status", "1");
				info.put("message", studentsDetails.getOriginalFilename() + "Excel Uploaded Succesfully ");
				if (is_update) {
					info.put("success", updaterecord + " Records Updated Successfully");
					info.put("failure", list.size() + " Records Not Updated ");
				} else {
					info.put("success", successList.size() + " Records Inserted Successfully");
					info.put("failure", list.size() + " Records Not Inserted ");
				}
				excellog.info("Data Not Inserted : " + failureList);
				return info;

			} catch (Exception e) {
				e.printStackTrace();
				logger.error("Exception occured" + e);
				StringWriter errors = new StringWriter();
				e.printStackTrace(new PrintWriter(errors));
				logger.error(errors.toString());
				info.put("status", "0");
				info.put("message", "something went wrong");
				return info;
			}
		}


		@Override
		public Map<String, Object> uploadStudentSupplyReceipt(CoursesRequest request) {
			Map<String, Object> info = new LinkedHashMap<>();
			try {					
				Optional<Studentadmission> task = super.studentadmission.findByExIsDeleteAndExIsActiveAndExRollNo(false,true,request.getExRollNo());
				if(!task.isPresent()) {
					info.put("status", "2");
					info.put("message", "Student is not present.");
					return info;
				}	
				
				Optional<RegistrationType> reg = super.registrationType.findByExIsDeleteAndExIsActiveAndId(false,true,2L);
				if (!reg.isPresent() || !reg.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Supplementary registration not present");
				return info;
				}
	
						String  UPLOADED_FOLDER =  createFolder(task.get().getAcademicYear().getExYear(), task.get().getDegree().getExName(), "supplyfeereceipt" ,task.get().getProgrammes().getExIdentifier());			
						if(UPLOADED_FOLDER.equals("NA")) {
						info.put("status", "0");
						info.put("message", "something went wrong");
						return info;
					}			
			           String imagepath = "/"+task.get().getAcademicYear().getExYear()+"/"+task.get().getDegree().getExName()+"/"+task.get().getProgrammes().getExIdentifier()+"/supplyfeereceipt/";
						
					
			           uploadfeereceipt(request.getExFeereceipt(),request,request.getExRollNo(), request,UPLOADED_FOLDER,imagepath);  
							  	info.put("status", "1");
								info.put("message", "Documnet uploaded successfully");
								return info;
				}catch(Exception e) {
					e.printStackTrace();
					logger.error("Exception occured" + e);
					StringWriter errors = new StringWriter();
					e.printStackTrace(new PrintWriter(errors));
					logger.error(errors.toString());
					info.put("status", "0");
					info.put("message", "something went wrong");
					return info;
				}
		}

		private void uploadfeereceipt(MultipartFile exFeereceipt, CoursesRequest request, String exRollNo,
				CoursesRequest request2, String UPLOADED_FOLDER, String imagepath) throws IOException  {
			if (exFeereceipt != null) {
				if (!exFeereceipt.isEmpty()) {
					byte[] bytes = exFeereceipt.getBytes();
					String newfilename =  exFeereceipt.getOriginalFilename();
					Path path = Paths.get(UPLOADED_FOLDER + newfilename);
					Files.write(path, bytes);
					String photopath = imagepath + newfilename;
					System.out.println("Ranganath"+photopath);
					 super.transactionRepository.updateDocuments(photopath, request.getProgrammes(),request.getDegree(),request.getAcademicYear(),request.getProgrammeYear(),request.getSemester(),2L,request.getExRollNo(),"success");
		
			}

		}
}
}