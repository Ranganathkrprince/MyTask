
package com.niftem.app.implementation;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;

import javax.transaction.Transactional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.niftem.app.entity.AcademicYear;
import com.niftem.app.entity.ApproveType;
import com.niftem.app.entity.AssignHostel;
import com.niftem.app.entity.Batch;
import com.niftem.app.entity.CertificateType;
import com.niftem.app.entity.Colleges;
import com.niftem.app.entity.Courses;
import com.niftem.app.entity.CoursesRegistration;
import com.niftem.app.entity.CoursesType;
import com.niftem.app.entity.CreditHours;
import com.niftem.app.entity.Degree;
import com.niftem.app.entity.Department;
import com.niftem.app.entity.DocumentType;
import com.niftem.app.entity.ExamAcademicYearProgrammes;
import com.niftem.app.entity.ExamAnnouncement;
import com.niftem.app.entity.ExamBarcodes;
import com.niftem.app.entity.ExamRegulations;
import com.niftem.app.entity.ExamTimeTable;
import com.niftem.app.entity.FeeMaster;
import com.niftem.app.entity.GradeReport;
import com.niftem.app.entity.Hostel;
import com.niftem.app.entity.InternalMarksConfiguration;
import com.niftem.app.entity.LateRegistration;
import com.niftem.app.entity.Mentor;
import com.niftem.app.entity.MidTermMarks;
import com.niftem.app.entity.OrderTransaction;
import com.niftem.app.entity.ProgrammeYear;
import com.niftem.app.entity.Programmes;
import com.niftem.app.entity.PublishResult;
import com.niftem.app.entity.RegistrationType;
import com.niftem.app.entity.ReportRequestEntity;
import com.niftem.app.entity.RoomMaster;
import com.niftem.app.entity.SemesterProgressReport;
import com.niftem.app.entity.SemesterRegistration;
import com.niftem.app.entity.SemesterRegistrationConfiguration;
import com.niftem.app.entity.Semster;
import com.niftem.app.entity.StaffEmpDetails;
import com.niftem.app.entity.Staffpersonal;
import com.niftem.app.entity.Stream;
import com.niftem.app.entity.StudentBankDetails;
import com.niftem.app.entity.StudentCertificate;
import com.niftem.app.entity.StudentDocument;
import com.niftem.app.entity.Studentadmission;
import com.niftem.app.entity.StudentadmissionLog;
import com.niftem.app.entity.Studentpersonal;
import com.niftem.app.entity.TeacherCourseMapping;
import com.niftem.app.model.CommonRequest;
import com.niftem.app.model.CoursesRequest;
import com.niftem.app.model.ReportRequest;
import com.niftem.app.model.SemesterRegistrationRequest;
import com.niftem.app.repository.ExamRegulationsRepository;
import com.niftem.app.repository.ReportRequestEntityRepository;
import com.niftem.app.repository.StudentBankDetailsRepository;
import com.niftem.app.service.CommonService;
import com.niftem.app.util.AutoManager;

@Service
@Transactional
public class CommonImpl extends AutoManager implements CommonService {
	private static Logger logger = LoggerFactory.getLogger("master-log");
	@Autowired
	ExamRegulationsRepository regulation;
	
	
	@Autowired
	private StudentBankDetailsRepository studentBankDetailsRepository;
	@Autowired
	private ReportRequestEntityRepository reportrequest;

	@Override
	public Map<String, Object> getsteamOnProgrammesAndCollegeAndDepartmentAndDegree(CommonRequest request) {

		Map<String, Object> info = new LinkedHashMap<>();

		try {

			List<Stream> task = super.stream.findByCollegeIdAndDegreeIdAndProgrammesIdAndDepartmentIdAndExIsActiveAndExIsDelete(
					request.getColleges(), request.getDegree(), request.getProgrammes(), request.getDepartment() , true , false);
			System.out.println("<<<<<" + request);
			if (task.size() <= 0) {
				info.put("status", "2");
				info.put("message", "record not found");
				System.out.println("<<<<," + task);
				return info;
			} else {

				List dataList = new LinkedList();
				for (Stream e : task) {
					Map<String, Object> Streamdata = new HashMap<String, Object>();
					Streamdata.put("streamid", e.getId());

					Streamdata.put("exName", e.getExCreateDate());
					Streamdata.put("exIdentifier", e.getExIdentifier());
					Streamdata.put("exLocalName", e.getExLocalName());

					Streamdata.put("exName", e.getExName());

					Streamdata.put("exActive", e.getExIsActive());
					Streamdata.put("exDelete", e.getExIsDelete());
					Streamdata.put("exUpdatedDate", e.getExUpdateDate());
					Streamdata.put("degreeId", e.getDegree().getId());
					Streamdata.put("degree", e.getDegree().getExName());

					Streamdata.put("collegesId", e.getCollege().get(0).getId());
					Streamdata.put("colleges", e.getCollege().get(0).getExName());
					Streamdata.put("programmesId", e.getProgrammes().getId());
					Streamdata.put("pogrammes", e.getProgrammes().getExName());
					Streamdata.put("departmentId", e.getDepartment().getId());
					Streamdata.put("department", e.getDepartment().getExName());
					dataList.add(Streamdata);

				}

				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> getcoursesOnDepartmentAndProgrammesAndCollegeAndDegree(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();

		try {

			List<Courses> task = super.courses.findByCollegesIdAndDegreeIdAndProgrammesIdAndDepartmentId(
					request.getColleges(), request.getDegree(), request.getProgrammes(), request.getDepartment());
			System.out.println("<<<<<" + request);
			if (task.size() <= 0) {
				info.put("status", "2");
				info.put("message", "record not found");
				System.out.println("<<<<," + task);
				return info;
			} else {
				List dataList = new LinkedList();
				for (Courses e : task) {
					Map<String, Object> Coursesdata = new HashMap<String, Object>();
					Coursesdata.put("coursesid", e.getId());
					Coursesdata.put("exCreateDate", e.getExCreateDate());
					Coursesdata.put("exCoursesCode", e.getExCoursesCode());
					Coursesdata.put("exDescrption", e.getExDescription());
					Coursesdata.put("exIsActive", e.getExIsActive());
					Coursesdata.put("exIsDelete", e.getExIsDelete());
					Coursesdata.put("exName", e.getExName());
					Coursesdata.put("exUpdatedDate", e.getExUpdateDate());
					// Coursesdata.put("exElective", e.getExIsElective());
					// Coursesdata.put("exIsPractical", e.getExIsPractical());
					Coursesdata.put("academicYearId", e.getAcademicYear().getId());
					Coursesdata.put("academicYear", e.getAcademicYear().getExYear());
					Coursesdata.put("creditHoursId", e.getCreditHours().getId());
					Coursesdata.put("creditHours", e.getCreditHours().getExCreditHourTitle());
					Coursesdata.put("programYear", e.getProgrammeYear().getExName());
					Coursesdata.put("programYearId", e.getProgrammeYear().getId());
					Coursesdata.put("degreeId", e.getDegree().getId());
					Coursesdata.put("degree", e.getDegree().getExName());
					Coursesdata.put("semesterId", e.getSemester().getId());
					Coursesdata.put("semester", e.getSemester().getExName());
					Coursesdata.put("streamId", e.getStream().getId());
					Coursesdata.put("stream", e.getStream().getExName());
					Coursesdata.put("collegeId", e.getColleges().getId());
					Coursesdata.put("college", e.getColleges().getExName());
					Coursesdata.put("programmesId", e.getProgrammes().getId());
					Coursesdata.put("programmes", e.getProgrammes().getExName());
					Coursesdata.put("departmentId", e.getDepartment().getId());
					Coursesdata.put("department", e.getDepartment().getExName());
					dataList.add(Coursesdata);

				}

				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> getcoursesOnDepartmentAndProgrammesAndCollegeAndDegreeAndStream(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();

		try {

			List<Courses> task = super.courses.findByCollegesIdAndDegreeIdAndProgrammesIdAndDepartmentIdAndStreamId(
					request.getColleges(), request.getDegree(), request.getProgrammes(), request.getDepartment(),
					request.getStream());
			System.out.println("<<<<<" + request);
			if (task.size() <= 0) {
				info.put("status", "2");
				info.put("message", "record not found");
				System.out.println("<<<<," + task);
				return info;
			} else {
				List dataList = new LinkedList();
				for (Courses e : task) {
					Map<String, Object> Coursesdata = new HashMap<String, Object>();
					Coursesdata.put("coursesId", e.getId());
					Coursesdata.put("exCreatedate", e.getExCreateDate());
					Coursesdata.put("exCoursesCode", e.getExCoursesCode());
					Coursesdata.put("exDescription", e.getExDescription());
					Coursesdata.put("exName", e.getExName());
					Coursesdata.put("Updateddate", e.getExUpdateDate());
					// Coursesdata.put("exElective", e.getExIsElective());
					Coursesdata.put("exIsActive", e.getExIsActive());
					Coursesdata.put("exDelete", e.getExIsDelete());
					// Coursesdata.put("exPractical", e.getExIsPractical());
					Coursesdata.put("academicYearId", e.getAcademicYear().getId());
					Coursesdata.put("academicYear", e.getAcademicYear().getExYear());
					Coursesdata.put("degreeId", e.getDegree().getId());
					Coursesdata.put("degree", e.getDegree().getExName());
					Coursesdata.put("programYear", e.getProgrammeYear().getExName());
					Coursesdata.put("programYearId", e.getProgrammeYear().getId());
					Coursesdata.put("creditHoursId", e.getCreditHours().getId());
					Coursesdata.put("creditHours", e.getCreditHours().getExName());
					Coursesdata.put("semesterId", e.getSemester().getId());
					Coursesdata.put("semester", e.getSemester().getExName());
					Coursesdata.put("collegeId", e.getColleges().getId());
					Coursesdata.put("college", e.getColleges().getExName());
					Coursesdata.put("programmesId", e.getProgrammes().getId());
					Coursesdata.put("programmes", e.getProgrammes().getExName());
					Coursesdata.put("departmentId", e.getDepartment().getId());
					Coursesdata.put("department", e.getDepartment().getExName());
					Coursesdata.put("streamId", e.getStream().getId());
					Coursesdata.put("stream", e.getStream().getId());
					dataList.add(Coursesdata);

				}

				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> getprogrammesOnCollegeAndDegree(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {

			List<Programmes> task = super.programmes.findByCollegeIdInAndDegreeId(request.getCollegesId(),
					request.getDegree());
			System.out.println("<<<<<" + request);
			if (task.size() <= 0) {
				info.put("status", "2");
				info.put("message", "record not found");
				System.out.println("<<<<," + task);
				return info;
			} else {
				List dataList = new LinkedList();
				for (Programmes e : task) {
					Map<String, Object> Programmesdata = new HashMap<String, Object>();
					Programmesdata.put("programmesId", e.getId());
					Programmesdata.put("exCreateDate", e.getExCreateDate());
					Programmesdata.put("exIdentifier", e.getExIdentifier());
					Programmesdata.put("exIsActive", e.getExIsActive());
					Programmesdata.put("exIsDelete", e.getExIsDelete());
					Programmesdata.put("exLocalName", e.getExLocalName());
					Programmesdata.put("exName", e.getExName());
					Programmesdata.put("exUpdatedate", e.getExUpdateDate());

					Programmesdata.put("degreeId", e.getDegree().getId());
					Programmesdata.put("degree", e.getDegree().getExName());

					Programmesdata.put("collegeId", e.getCollege().get(0).getId());
					Programmesdata.put("college", e.getCollege().get(0).getExName());

					dataList.add(Programmesdata);

				}

				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> getdepartmentOnProgrammesAndCollegeAndDegree(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {

			List<Department> task = super.department.findByProgrammesIdAndCollegeIdInAndDegreeId(
					request.getProgrammes(), request.getCollegesId(), request.getDegree());
			System.out.println("<<<<<" + request);
			if (task.size() <= 0) {
				info.put("status", "2");
				info.put("message", "record not found");
				System.out.println("<<<<," + task);
				return info;
			} else {
				List dataList = new LinkedList();
				for (Department e : task) {
					Map<String, Object> Departmentdata = new HashMap<String, Object>();
					Departmentdata.put("departmentId", e.getId());
					Departmentdata.put("exCreatedate", e.getExCreateDate());
					Departmentdata.put("exIdentifier", e.getExIdentifier());
					Departmentdata.put("exIsActive", e.getExIsActive());
					Departmentdata.put("exIsDelete", e.getExIsDelete());
					Departmentdata.put("exLOcalName", e.getExLocalName());
					Departmentdata.put("exName", e.getExName());
					Departmentdata.put("exUpdatedate", e.getExUpdateDate());
					Departmentdata.put("exdepartmentCode", e.getExDepartmentCode());
					Departmentdata.put("exUpdateddate", e.getExUpdateDate());
					Departmentdata.put("degreeId", e.getDegree().getId());
					Departmentdata.put("degree", e.getDegree().getExName());
					Departmentdata.put("programmesId", e.getProgrammes().getId());
					Departmentdata.put("programmes", e.getProgrammes().getExName());
					Departmentdata.put("collegeId", e.getCollege().get(0).getId());
					Departmentdata.put("college", e.getCollege().get(0).getExName());

					dataList.add(Departmentdata);

				}

				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> getprogrammesOnDegree(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {

			List<Programmes> task = super.programmes.findByDegreeId(request.getDegree());
			System.out.println("<<<<<" + request);
			if (task.size() <= 0) {
				info.put("status", "2");
				info.put("message", "record not found");
				System.out.println("<<<<," + task);
				return info;
			} else {
				List dataList = new LinkedList();
				for (Programmes e : task) {
					Map<String, Object> Programmesdata = new HashMap<String, Object>();
					Programmesdata.put("programmesId", e.getId());
					Programmesdata.put("exCreatedate", e.getExCreateDate());
					Programmesdata.put("exIdentifier", e.getExIdentifier());
					Programmesdata.put("exIsActive", e.getExIsActive());
					Programmesdata.put("exLocalName", e.getExLocalName());
					Programmesdata.put("exName", e.getExName());
					Programmesdata.put("exUpdateddate", e.getExUpdateDate());
					Programmesdata.put("degreeId", e.getDegree().getId());
					Programmesdata.put("degree", e.getDegree().getExName());
					dataList.add(Programmesdata);

				}

				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> getprogrammesOnCollege(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {

			List<Programmes> task = super.programmes.findByCollegeId(request.getColleges());
			System.out.println("<<<<<" + request);
			if (task.size() <= 0) {
				info.put("status", "2");
				info.put("message", "record not found");
				System.out.println("<<<<," + task);
				return info;
			} else {
				List dataList = new LinkedList();
				for (Programmes e : task) {
					Map<String, Object> Programmesdata = new HashMap<String, Object>();
					Programmesdata.put("programmesId", e.getId());
					Programmesdata.put("exCreatedate", e.getExCreateDate());
					Programmesdata.put("exIdentifier", e.getExIdentifier());
					Programmesdata.put("exIsActive", e.getExIsActive());
					Programmesdata.put("exLocalName", e.getExLocalName());
					Programmesdata.put("exName", e.getExName());
					Programmesdata.put("exUpdateddate", e.getExUpdateDate());
					Programmesdata.put("degreeId", e.getDegree().getId());
					Programmesdata.put("degree", e.getDegree().getExName());
					Programmesdata.put("collegeId", e.getCollege().get(0).getId());
					Programmesdata.put("college", e.getCollege().get(0).getExName());
					dataList.add(Programmesdata);

				}

				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> getcoursesOnAcademicYear(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {

			List<Courses> task = super.courses.findByAcademicYearId(request.getAcademicYear());
			System.out.println("<<<<<" + request);
			if (task.size() <= 0) {
				info.put("status", "2");
				info.put("message", "record not found");
				System.out.println("<<<<," + task);
				return info;
			} else {
				List dataList = new LinkedList();
				for (Courses e : task) {
					Map<String, Object> Coursesdata = new HashMap<String, Object>();
					Coursesdata.put("coursesId", e.getId());

					Coursesdata.put("exCourseCode", e.getExCoursesCode());
					Coursesdata.put("exIsActive", e.getExIsActive());
					Coursesdata.put("exCreateddate", e.getExCreateDate());
					Coursesdata.put("exDescription", e.getExDescription());
					Coursesdata.put("exIsDelete", e.getExIsDelete());
					// Coursesdata.put("exIsElective", e.getExIsElective());
					// Coursesdata.put("exIsPractical", e.getExIsPractical());
					Coursesdata.put("exName", e.getExName());
					Coursesdata.put("exUpdatedate", e.getExUpdateDate());
					Coursesdata.put("academicYearId", e.getAcademicYear().getId());
					Coursesdata.put("academicYear", e.getAcademicYear().getExYear());
					Coursesdata.put("degreeId", e.getDegree().getId());
					Coursesdata.put("degree", e.getDegree().getExName());
					Coursesdata.put("ProgramYear", e.getProgrammeYear().getExName());
					Coursesdata.put("ProgramYearId", e.getProgrammeYear().getId());
					Coursesdata.put("creditHoursId", e.getCreditHours().getId());
					Coursesdata.put("creditHours", e.getCreditHours().getExName());
					Coursesdata.put("semesterId", e.getSemester().getId());
					Coursesdata.put("semester", e.getSemester().getExName());
					Coursesdata.put("collegeId", e.getColleges().getId());
					Coursesdata.put("college", e.getColleges().getExName());
					Coursesdata.put("programmesId", e.getProgrammes().getId());
					Coursesdata.put("programmes", e.getProgrammes().getExName());
					Coursesdata.put("departmentId", e.getDepartment().getId());
					Coursesdata.put("department", e.getDepartment().getExName());
					Coursesdata.put("streamId", e.getStream().getId());
					Coursesdata.put("stream", e.getStream().getId());

					dataList.add(Coursesdata);

				}

				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getroomMasterOnCollege(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<RoomMaster> task = super.roomMaster.findByCollegesId(request.getColleges());
			System.out.println(">>>>>>>>>" + task);
			if (task.size() <= 0) {
				info.put("status", "2");
				info.put("message", "record not found");

				return info;
			} else {
				List dataList = new LinkedList();
				for (RoomMaster e : task) {
					Map<String, Object> RoomMasterdata = new HashMap<String, Object>();
					RoomMasterdata.put("roomMasterId", e.getId());

					RoomMasterdata.put("exCreatedate", e.getExCreateDate());
					RoomMasterdata.put("exIsActive", e.getExIsActive());
					RoomMasterdata.put("exIsDelete", e.getExIsDelete());
					RoomMasterdata.put("exName", e.getExName());
					RoomMasterdata.put("exRoomCapacity", e.getExRoomCapacity());
					RoomMasterdata.put("exRoomNumber", e.getExRoomNumber());
					RoomMasterdata.put("exUpdatedate", e.getExUpdateDate());
					RoomMasterdata.put("collegesId", e.getColleges().getId());
					RoomMasterdata.put("colleges", e.getColleges().getExName());
					System.out.println("><><>" + RoomMasterdata);
					dataList.add(RoomMasterdata);

				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> getstudentOnCollegeAndDegreeAndProgrammesAndAcademicYear(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<Studentadmission> task = super.studentadmission
					.findByCollegesIdAndDegreeIdAndProgrammesIdAndAcademicYearId(request.getColleges(),
							request.getDegree(), request.getProgrammes(), request.getAcademicYear());
			if (task.size() <= 0) {
				info.put("status", "2");
				info.put("message", "record not found");
				System.out.println("<<<<," + task);
				return info;
			} else {
				List dataList = new LinkedList();
				for (Studentadmission e : task) {
					Map<String, Object> Studentadmissiondata = new HashMap<String, Object>();
					Studentadmissiondata.put("studentAdmissionId", e.getId());
					Studentadmissiondata.put("academicYearId", e.getAcademicYear());
					Studentadmissiondata.put("exPassword", e.getExPassword());
					Studentadmissiondata.put("exNameInHindi", e.getExNameInHindi());
					Studentadmissiondata.put("exPhoto", e.getExPhoto());
					Studentadmissiondata.put("exSignature", e.getExSignature());
					Studentadmissiondata.put("exStudyStatus", e.getExStudyStatus());
					Studentadmissiondata.put("exEnrollmentNo", e.getExEnrollementNo());
					Studentadmissiondata.put("exRollNo", e.getExRollNo());
					Studentadmissiondata.put("exAllIndiaRank", e.getExAllIndiaRank());
					Studentadmissiondata.put("exJEEReg", e.getExJeeReg());
					Studentadmissiondata.put("exDetailsQualification", e.getExDetailsQualification());
					Studentadmissiondata.put("exPersentageOfMarks", e.getExPercentageOfMarks());
					Studentadmissiondata.put("exDocumentPath", e.getExDocumentPath());

					Studentadmissiondata.put("exName", e.getExName());

					Studentadmissiondata.put("exRollNoInc", e.getExRollNoInc());
					Studentadmissiondata.put("exIsActive", e.getExIsActive());
					Studentadmissiondata.put("exUpdatedate", e.getExUpdateDate());
					Studentadmissiondata.put("academicYearId", e.getAcademicYear().getId());
					Studentadmissiondata.put("academicYear", e.getAcademicYear().getExYear());
					Studentadmissiondata.put("degreeId", e.getDegree().getId());
					Studentadmissiondata.put("degree", e.getDegree().getExName());
					Studentadmissiondata.put("collegeId", e.getColleges().getId());
					Studentadmissiondata.put("college", e.getColleges().getExName());
					Studentadmissiondata.put("programmesId", e.getProgrammes().getId());
					Studentadmissiondata.put("programmes", e.getProgrammes().getExName());
					System.out.println(">>>>>>>>..." + Studentadmissiondata);
					dataList.add(Studentadmissiondata);

				}

				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> getstaffpersonalOnCollegeAndDegree(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<Staffpersonal> task = super.staffpersonal.findByCollegesIdAndDegreeId(request.getColleges(),
					request.getDegree());
			if (task.size() <= 0) {
				info.put("status", "2");
				info.put("message", "record not found");
				System.out.println("<<<<," + task);
				return info;
			} else {
				List dataList = new LinkedList();
				for (Staffpersonal e : task) {
					Map<String, Object> Staffpersonaldata = new HashMap<String, Object>();
					Staffpersonaldata.put("staffPersonalId", e.getId());

					Staffpersonaldata.put("exCreatedate", e.getExCreateDate());
					Staffpersonaldata.put("exAddress", e.getExAddress());
					Staffpersonaldata.put("exCity", e.getExCity());
					Staffpersonaldata.put("exContactDetails", e.getExContactDetails());
					Staffpersonaldata.put("exDateOfBirth", e.getExDateOfBirth());
					Staffpersonaldata.put("exDateOfJoining", e.getExDateOfJoing());
					Staffpersonaldata.put("exEmail", e.getExEmail());
					Staffpersonaldata.put("employeeId", e.getExEmployeeId());
					Staffpersonaldata.put("exGender", e.getExGender());
					Staffpersonaldata.put("exLocalName", e.getExLoginName());
					Staffpersonaldata.put("exName", e.getExName());
					Staffpersonaldata.put("exNameInHindi", e.getExNameInHindi());
					Staffpersonaldata.put("exPassword", e.getExPassword());
					Staffpersonaldata.put("exPhoto", e.getExPhoto());
					Staffpersonaldata.put("exState", e.getExState());
					Staffpersonaldata.put("exUpdatedate", e.getExUpdateDate());
					// Staffpersonaldata.put("roleId", e.getRole().getId());
					// Staffpersonaldata.put("role", e.getRole().getExName());
					Staffpersonaldata.put("degreeId", e.getDegree().getId());
					Staffpersonaldata.put("degree", e.getDegree().getExName());
					Staffpersonaldata.put("collegeId", e.getColleges().getId());
					Staffpersonaldata.put("college", e.getColleges().getExName());

					dataList.add(Staffpersonaldata);

				}

				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> getstaffpersonalOnStaffType(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<Staffpersonal> task = super.staffpersonal.findByStafftypeId(request.getStafftype()); // .findByStaffTypeId(request.getStafftype());
			if (task.size() <= 0) {
				info.put("status", "2");
				info.put("message", "record not found");
				System.out.println("<<<<," + task);
				return info;
			} else {
				List dataList = new LinkedList();
				for (Staffpersonal e : task) {
					Map<String, Object> Staffpersonaldata = new HashMap<String, Object>();
					Staffpersonaldata.put("staffPersonalId", e.getId());
					Staffpersonaldata.put("exCreatedate", e.getExCreateDate());
					Staffpersonaldata.put("exAddress", e.getExAddress());
					Staffpersonaldata.put("exCity", e.getExCity());
					Staffpersonaldata.put("exContactDetails", e.getExContactDetails());
					Staffpersonaldata.put("exDateOfJoining", e.getExDateOfJoing());
					Staffpersonaldata.put("exEmail", e.getExEmail());
					Staffpersonaldata.put("employeeId", e.getExEmployeeId());
					Staffpersonaldata.put("exGender", e.getExGender());
					Staffpersonaldata.put("exLocalName", e.getExLoginName());
					Staffpersonaldata.put("exName", e.getExName());
					Staffpersonaldata.put("exNameInHindi", e.getExNameInHindi());
					Staffpersonaldata.put("exPassword", e.getExPassword());
					Staffpersonaldata.put("exPhoto", e.getExPhoto());

					Staffpersonaldata.put("exState", e.getExState());
					Staffpersonaldata.put("exUpdatedate", e.getExUpdateDate());
					Staffpersonaldata.put("degreeId", e.getDegree().getId());
					Staffpersonaldata.put("degree", e.getDegree().getExName());
					Staffpersonaldata.put("collegeId", e.getColleges().getId());
					Staffpersonaldata.put("college", e.getColleges().getExName());
					System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>" + Staffpersonaldata);
					Staffpersonaldata.put("staffTypeId", e.getStafftype().getId());
					Staffpersonaldata.put("staffType", e.getStafftype().getExName());
					Staffpersonaldata.put("invigilator", e.getInvigilator());
					dataList.add(Staffpersonaldata);
				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	
	@Override
	public Map<String, Object> invigilatorconfig(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			if (request.getStaffPersonalId().size() <= 0) {
				info.put("status", "2");
				info.put("message", "please select staff");
				return info;
			} else {
				super.staffpersonal.InvigilatorAllocaion(request.getStaffPersonalId());
				info.put("status", "1");
				info.put("message", "Invigilator configured successfully");
				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}
	
	
	@Override
	public Map<String, Object> getstaffpersonalOnCollegeAndDegreeAndStaffType(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<Staffpersonal> task = super.staffpersonal.findByCollegesIdAndDegreeIdAndStafftypeId(
					request.getColleges(), request.getDegree(), request.getStafftype()); // .findByStaffTypeId(request.getStafftype());
			if (task.size() <= 0) {
				info.put("status", "2");
				info.put("message", "record not found");
				System.out.println("<<<<," + task);
				return info;
			} else {
				List dataList = new LinkedList();
				for (Staffpersonal e : task) {
					Map<String, Object> Staffpersonaldata = new HashMap<String, Object>();
					Staffpersonaldata.put("staffPersonalId", e.getId());
					Staffpersonaldata.put("exCreatedate", e.getExCreateDate());
					Staffpersonaldata.put("exAddress", e.getExAddress());

					Staffpersonaldata.put("exCity", e.getExCity());
					Staffpersonaldata.put("exContactDetails", e.getExContactDetails());
					Staffpersonaldata.put("exDateOfJoining", e.getExDateOfJoing());
					Staffpersonaldata.put("exEmail", e.getExEmail());
					Staffpersonaldata.put("employeeId", e.getExEmployeeId());
					Staffpersonaldata.put("exGender", e.getExGender());
					Staffpersonaldata.put("exLocalName", e.getExLoginName());
					Staffpersonaldata.put("exName", e.getExName());
					Staffpersonaldata.put("exNameInHindi", e.getExNameInHindi());
					Staffpersonaldata.put("exPassword", e.getExPassword());
					Staffpersonaldata.put("exPhoto", e.getExPhoto());

					Staffpersonaldata.put("exState", e.getExState());
					Staffpersonaldata.put("exUpdatedate", e.getExUpdateDate());
					Staffpersonaldata.put("degreeId", e.getDegree().getId());
					Staffpersonaldata.put("degree", e.getDegree().getExName());
					Staffpersonaldata.put("collegeId", e.getColleges().getId());
					Staffpersonaldata.put("college", e.getColleges().getExName());

					Staffpersonaldata.put("staffTypeId", e.getStafftype().getId());
					Staffpersonaldata.put("staffType", e.getStafftype().getExName());
					dataList.add(Staffpersonaldata);
				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getmentorOnBatchAndCollegeAndDegreeAndProgrammes(CommonRequest request) {

		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Optional<Batch> batch = super.batch.findByExIsDeleteAndExIsActiveAndId(false, true, request.getBatch());
			if (!batch.isPresent() || !batch.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Batch not present");
				return info;
			}

			Optional<Programmes> programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!programmes.isPresent()) {
				info.put("status", "2");
				info.put("message", "Programme not present");
				return info;
			}

			Optional<Colleges> clgid = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!clgid.isPresent()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");

				return info;
			}

			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			List<Mentor> task = super.mentor.findByBatchIdAndCollegesIdAndDegreeIdAndProgrammesId(request.getBatch(),
					request.getColleges(), request.getDegree(), request.getProgrammes());
			System.out.println("<<<<," + task);
			if (task.size() <= 0) {
				info.put("status", "2");
				info.put("message", "record not found");

				return info;
			} else {
				List dataList = new LinkedList();
				for (Mentor e : task) {
					Map<String, Object> Mentordata = new HashMap<String, Object>();
					Mentordata.put("mentorId", e.getId());
					Mentordata.put("exName", e.getExName());

					Mentordata.put("degreeId", e.getDegree().getId());
					Mentordata.put("degree", e.getDegree().getExName());
					Mentordata.put("collegeId", e.getColleges().getId());
					Mentordata.put("college", e.getColleges().getExName());

					Mentordata.put("batchId", e.getBatch().getId());
					Mentordata.put("batch", e.getBatch().getExName());
					Mentordata.put("programmesId", e.getProgrammes().getId());
					Mentordata.put("programmes", e.getProgrammes().getExName());
					dataList.add(Mentordata);
				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> departmentOnProgram(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {

			List<Department> task = super.department.findByProgrammesId(request.getProgrammes());
			System.out.println("<<<<<" + request);
			if (task.size() <= 0) {
				info.put("status", "2");
				info.put("message", "record not found");
				System.out.println("<<<<," + task);
				return info;
			} else {
				List dataList = new LinkedList();
				for (Department e : task) {
					Map<String, Object> Departmentdata = new HashMap<String, Object>();
					Departmentdata.put("id", e.getId());
					Departmentdata.put("exCreatedate", e.getExCreateDate());
					Departmentdata.put("exIdentifier", e.getExIdentifier());
					Departmentdata.put("exIsActive", e.getExIsActive());
					Departmentdata.put("exLocalName", e.getExLocalName());
					Departmentdata.put("exName", e.getExName());
					Departmentdata.put("exUpdateddate", e.getExUpdateDate());
					Departmentdata.put("degreeId", e.getDegree().getId());
					Departmentdata.put("degree", e.getDegree().getExName());
					Departmentdata.put("collegeId", e.getCollege().get(0).getId());
					Departmentdata.put("college", e.getCollege().get(0).getExName());
					Departmentdata.put("exDepartmentCode", e.getExDepartmentCode());
					Departmentdata.put("programmesId", e.getProgrammes().getId());
					Departmentdata.put("programmes", e.getProgrammes().getExName());
					dataList.add(Departmentdata);

				}

				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> departmentOnProgramDegree(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {

			List<Department> task = super.department.findByProgrammesIdAndDegreeId(request.getProgrammes(),
					request.getDegree());
			System.out.println("<<<<<" + request);
			if (task.size() <= 0) {
				info.put("status", "2");
				info.put("message", "record not found");
				System.out.println("<<<<," + task);
				return info;
			} else {
				List dataList = new LinkedList();
				for (Department e : task) {
					Map<String, Object> Departmentdata = new HashMap<String, Object>();
					Departmentdata.put("id", e.getId());
					Departmentdata.put("exCreatedate", e.getExCreateDate());
					Departmentdata.put("exIdentifier", e.getExIdentifier());
					Departmentdata.put("exIsActive", e.getExIsActive());
					Departmentdata.put("exLocalName", e.getExLocalName());
					Departmentdata.put("exName", e.getExName());
					Departmentdata.put("exUpdateddate", e.getExUpdateDate());
					Departmentdata.put("degreeId", e.getDegree().getId());
					Departmentdata.put("degree", e.getDegree().getExName());
					Departmentdata.put("collegeId", e.getCollege().get(0).getId());
					Departmentdata.put("college", e.getCollege().get(0).getExName());
					Departmentdata.put("exDepartmentCode", e.getExDepartmentCode());
					Departmentdata.put("programmesId", e.getProgrammes().getId());
					Departmentdata.put("programmes", e.getProgrammes().getExName());
					dataList.add(Departmentdata);

				}

				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> streamOnProgramDepartment(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {

			List<Stream> task = super.stream.findByProgrammesIdAndDepartmentId(request.getProgrammes(),
					request.getDepartment());
			System.out.println("<<<<<" + request);
			if (task.size() <= 0) {
				info.put("status", "2");
				info.put("message", "record not found");
				System.out.println("<<<<," + task);
				return info;
			} else {
				List dataList = new LinkedList();
				for (Stream e : task) {
					Map<String, Object> Departmentdata = new HashMap<String, Object>();
					Departmentdata.put("id", e.getId());
					Departmentdata.put("exCreatedate", e.getExCreateDate());
					Departmentdata.put("exIdentifier", e.getExIdentifier());
					Departmentdata.put("exIsActive", e.getExIsActive());
					Departmentdata.put("exLocalName", e.getExLocalName());
					Departmentdata.put("exName", e.getExName());
					Departmentdata.put("exUpdateddate", e.getExUpdateDate());
					Departmentdata.put("degreeId", e.getDegree().getId());
					Departmentdata.put("degree", e.getDegree().getExName());
					Departmentdata.put("collegeId", e.getCollege().get(0).getId());
					Departmentdata.put("college", e.getCollege().get(0).getExName());
					Departmentdata.put("programmesId", e.getProgrammes().getId());
					Departmentdata.put("programmes", e.getProgrammes().getExName());
					Departmentdata.put("departmentId", e.getDepartment().getId());
					Departmentdata.put("department", e.getDepartment().getExName());
					dataList.add(Departmentdata);

				}

				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		} // TODO Auto-generated method stub

	}

	@Override
	public Map<String, Object> getexamTimeTableOnDateAndDegreeAndAcademicYearAndProgrammesAndExamAnnouncementAndRegistrationType(
			CommonRequest request) {
		// TODO Auto-generated method stub
		Map<String, Object> info = new LinkedHashMap<>();
		try {

			List<ExamAcademicYearProgrammes> response = super.examAcademicYearProgrammes
					.findByProgrammesId(request.getProgrammes());
			if (response.size() <= 0) {
				info.put("status", "2");
				info.put("message", "record not found");
				System.out.println("<<<<," + response);
				return info;
			}
			List<ExamTimeTable> list = super.examtimetable
					.findByDegreeIdAndAcademicYearIdAndProgrammesIdAndExamAnnouncementIdAndRegistrationIdAndExIsActiveAndExIsDelete(
							request.getDegree(), request.getAcademicYear(), request.getProgrammes(),
							request.getExamAnnouncement(), request.getRegistrationType(), true, false);

			if (list.size() <= 0) {
				info.put("status", "2");
				info.put("message", "record not found");
				System.out.println("<<<<," + list);
				return info;
			} else {
				List dataList = new LinkedList();
				List dataList1 = new LinkedList();
				List dataList2 = new LinkedList();

				Map<String, Object> examTimeTableData = new HashMap<String, Object>();
				Map<String, Object> examTimeTableData1 = new HashMap<String, Object>();

				for (ExamTimeTable e : list) {

					examTimeTableData.put("exStartDate", e.getExStartDate());
					examTimeTableData.put("exEndDate", e.getExEndDate());
					examTimeTableData.put("exStartTime", e.getExStartTime());
					examTimeTableData.put("exEndTime", e.getExEndTime());
					examTimeTableData.put("coursesId", e.getCourses().getId());
					examTimeTableData.put("coursesName", e.getCourses().getExName());
					examTimeTableData.put("userName", e.getUser().getExName());
					dataList.add(examTimeTableData);
				}

				info.put("status", "1");
				info.put("message", "success");
				info.put("degreeId", list.get(0).getDegree().getId());
				info.put("degreeName", list.get(0).getDegree().getExName());
				info.put("programmesId", list.get(0).getProgrammes().getId());
				info.put("programmesName", list.get(0).getProgrammes().getExName());
				info.put("academicYearId", list.get(0).getAcademicYear().getId());
				info.put("academicYear", list.get(0).getAcademicYear().getExYear());
				info.put("registrationId", list.get(0).getRegistration().getId());
				info.put("registrationTypeName", list.get(0).getRegistration().getExName());

				info.put("details", dataList);

				return info;
			}

		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> getexamAnnouncementDetailsOnAcademicYear(CommonRequest request) {
		// TODO Auto-generated method stub
		Map<String, Object> info = new LinkedHashMap<>();
		try {

			List<ExamAnnouncement> list = super.examAnnouncement
					.findByAcademicYearIdAndExIsActiveAndExIsDelete(request.getAcademicYear(), true, false);

			if (list.size() <= 0) {
				info.put("status", "2");
				info.put("message", "record not found");
				System.out.println("<<<<," + list);
				return info;
			} else {
				List dataList = new LinkedList();
				for (ExamAnnouncement e : list) {
					Map<String, Object> examAnnouncementData = new HashMap<String, Object>();
					examAnnouncementData.put("exDescription", e.getExDescription());
					SimpleDateFormat date1 = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
					examAnnouncementData.put("id", e.getId());
					examAnnouncementData.put("exName", e.getExName());
					examAnnouncementData.put("exLocalName", e.getExLocalLangName());
					examAnnouncementData.put("createDate", e.getExCreateDate());

					examAnnouncementData.put("exEndTermExamStartDate", date1.format(e.getExEndTermExamStartDate()));
					examAnnouncementData.put("exEndTermExamEndDate", date1.format(e.getExEndTermExamEndDate()));
					examAnnouncementData.put("exMidTermExamStartDate", date1.format(e.getExMidTermExamStartDate()));
					examAnnouncementData.put("exMidTermExamEndDate", date1.format(e.getExMidTermExamEndDate()));

					examAnnouncementData.put("exUpdateDate", e.getExUpdateDate());
					examAnnouncementData.put("degreeId", e.getDegree().getId());
					examAnnouncementData.put("degreeName", e.getDegree().getExName());
					examAnnouncementData.put("programmesId", e.getProgrammes().getId());
					examAnnouncementData.put("programmesName", e.getProgrammes().getExName());
					examAnnouncementData.put("programmeYearId", e.getProgrammeYear().getId());
					examAnnouncementData.put("programmeYearName", e.getProgrammeYear().getExName());
					examAnnouncementData.put("semesterId", e.getSemester().getId());
					examAnnouncementData.put("semesterName", e.getSemester().getExName());
					dataList.add(examAnnouncementData);

				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}

		} catch (Exception e) {

			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> getcoursesList(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Optional<Colleges> clgid = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!clgid.isPresent()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}

			Optional<Programmes> programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!programmes.isPresent()) {
				info.put("status", "2");
				info.put("message", "Programme not present");
				return info;
			}
			Optional<ProgrammeYear> programmeYear = super.programmeYear
					.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
			if (!programmeYear.isPresent()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!sem.isPresent()) {
				info.put("status", "2");
				info.put("message", "Semster not present");
				return info;
			}

			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<Stream> stream = super.stream.findByIdAndExIsDeleteAndExIsActive(request.getDegree(), false, true);
			if (!stream.isPresent()) {
				info.put("status", "2");
				info.put("message", "Stream not present");
				return info;
			}

			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department not present");
				return info;
			}
			Optional<CoursesType> coursesType = super.coursestype.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getCoursesType());
			if (!coursesType.isPresent()) {
				info.put("status", "2");
				info.put("message", "CoursesType not present");
				return info;
			}

			List<Courses> task = super.courses.getcourselist(request.getColleges(), request.getDegree(),
					request.getProgrammes(), request.getDepartment(), false, true, request.getCoursesType(),
					request.getProgrammeYear(), request.getSemester(), request.getStream());
			System.out.println("<<<<<" + request);
			if (task.size() <= 0) {
				info.put("status", "2");
				info.put("message", "record not found");
				return info;
			} else {
				List dataList = new LinkedList();

				for (Courses e : task) {
					List coursestype = new LinkedList();
					List coursesTypeId = new LinkedList();
					Map<String, Object> Coursesdata = new HashMap<String, Object>();
					Coursesdata.put("id", e.getId());
					Coursesdata.put("exCreateDate", e.getExCreateDate());
					Coursesdata.put("exCoursesCode", e.getExCoursesCode());
					Coursesdata.put("exName",
							e.getBatch().getExIdentifier() + " :: " + e.getExCoursesCode() + " :: " + e.getExName());

					Coursesdata.put("exDescrption", e.getExDescription());
					Coursesdata.put("exIsActive", e.getExIsActive());
					Coursesdata.put("exIsDelete", e.getExIsDelete());
					//Coursesdata.put("exName", e.getExName());
					Coursesdata.put("exUpdatedDate", e.getExUpdateDate());
					Coursesdata.put("academicYearId", e.getAcademicYear().getId());
					Coursesdata.put("academicYear", e.getAcademicYear().getExYear());
					Coursesdata.put("creditHoursId", e.getCreditHours().getId());
					Coursesdata.put("creditHours", e.getCreditHours().getExCreditHourTitle());
					for (int i = 0; i < e.getCoursesType().size(); i++) {
						coursestype.add(e.getCoursesType().get(i).getExName());
						coursesTypeId.add(e.getCoursesType().get(i).getId());
					}

					Coursesdata.put("coursesType", coursestype);
					Coursesdata.put("coursesTypeId", coursesTypeId);
					dataList.add(Coursesdata);

				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				info.put("collegeId", clgid.get().getId());
				info.put("college", clgid.get().getExName());
				info.put("programmesId", programmes.get().getId());
				info.put("programmes", programmes.get().getExName());
				info.put("departmentId", department.get().getId());
				info.put("department", department.get().getExName());
				info.put("coursesType", coursesType.get().getExName());
				info.put("coursesTypeId", coursesType.get().getId());
				info.put("programYear", programmeYear.get().getExName());
				info.put("programYearId", programmeYear.get().getId());
				info.put("degreeId", degree.get().getId());
				info.put("degree", degree.get().getExName());
				info.put("semesterId", sem.get().getId());
				info.put("semester", sem.get().getExName());
				info.put("streamId", stream.get().getId());
				info.put("stream", stream.get().getExName());

				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> getCurrentCoursesList(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			String serverurl = commonHelper.getSettingValue("SERVER_IP");
			// get current courses details
			List<SemesterRegistration> status = super.semesterRegistration
					.findByExIsDeleteAndExIsActiveAndStudentadmissionIdAndExSemesterStatus(false, true,
							request.getStudent(), false);
			if (status.size() <= 0) {
				info.put("status", "2");
				info.put("message", "student registration are pending");
				return info;
			}
			List<CoursesRegistration> task = super.coursesRegistration
					.findByProgrammesIdAndExIsActiveAndExIsDeleteAndRegistrationIdAndSemesterIdAndProgrammeYearIdAndAcademicYearIdAndDepartmentIdAndStudentadmissionId(
							status.get(0).getProgrammes().getId(), true, false, 1L, status.get(0).getSemester().getId(),
							status.get(0).getProgrammeYear().getId(), status.get(0).getAcademicYear().getId(),
							status.get(0).getDepartment().getId(), request.getStudent());
			System.out.println("<<<<<" + task.size());
			if (task.size() <= 0) {
				info.put("status", "2");
				info.put("message", "record not found");
				return info;
			} else {
				List dataList = new LinkedList();
				for (CoursesRegistration e : task) {
					List coursestype = new LinkedList();
					List coursesTypeId = new LinkedList();
					Map<String, Object> Coursesdata = new HashMap<String, Object>();

					Coursesdata.put("id", e.getCourses().getId());
					Coursesdata.put("exCoursesType", e.getCourses().getExSubjectCode());
					Coursesdata.put("exCoursesCode", e.getCourses().getExCoursesCode());
					Coursesdata.put("exDescrption", e.getCourses().getExDescription());
					Coursesdata.put("exSyllabusUrl",
							(e.getCourses().getExSyllabusUrl() == null || e.getCourses().getExSyllabusUrl() == "NA")
									? "NA"
									: serverurl + e.getCourses().getExSyllabusUrl());

					// Coursesdata.put("exSyllabusUrl", e.getCourses().getExSyllabusUrl());
					// Coursesdata.put("exIsActive", e.getExIsActive());
					// Coursesdata.put("exIsDelete", e.getExIsDelete());
					Coursesdata.put("exName", e.getCourses().getExName());
					/// Coursesdata.put("exUpdatedDate", e.getExUpdateDate());
					// Coursesdata.put("academicYearId", e.getAcademicYear().getId());
					// Coursesdata.put("academicYear", e.getAcademicYear().getExYear());
					Coursesdata.put("creditHoursId", e.getCourses().getCreditHours().getId());
					Coursesdata.put("creditHours", e.getCourses().getCreditHours().getExCreditHourTitle());

					for (int i = 0; i < e.getCourses().getCoursesType().size(); i++) {
						coursestype.add(e.getCourses().getCoursesType().get(i).getExName());
						coursesTypeId.add(e.getCourses().getCoursesType().get(i).getId());
					}

					Coursesdata.put("coursesType", coursestype);
					Coursesdata.put("coursesTypeId", coursesTypeId);

					dataList.add(Coursesdata);

				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				info.put("collegeId", status.get(0).getColleges().getId());
				info.put("college", status.get(0).getColleges().getExName());
				info.put("programmesId", status.get(0).getProgrammes().getId());
				info.put("programmes", status.get(0).getProgrammes().getExName());
				info.put("departmentId", status.get(0).getDepartment().getId());
				info.put("department", status.get(0).getDepartment().getExName());
				info.put("programYear", status.get(0).getProgrammeYear().getExName());
				info.put("programYearId", status.get(0).getProgrammeYear().getId());
				info.put("degreeId", status.get(0).getDegree().getId());
				info.put("degree", status.get(0).getDegree().getExName());
				info.put("semesterId", status.get(0).getSemester().getId());
				info.put("semester", status.get(0).getSemester().getExName());
				// info.put("streamId", stream.get().getId());
				// info.put("stream", stream.get().getExName());

				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getexamAnnouncementonAcademicYear(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();

		try {

			List<ExamAnnouncement> task = super.examAnnouncement
					.findByAcademicYearIdAndExIsActiveAndExIsDelete(request.getAcademicYear(), true, false);

			System.out.println("<<<<<" + request);
			if (task.size() <= 0) {
				info.put("status", "2");
				info.put("message", "record not found");
				System.out.println("<<<<," + task);
				return info;
			} else {
				List dataList = new LinkedList();
				for (ExamAnnouncement e : task) {
					SimpleDateFormat date1 = new SimpleDateFormat("dd/MM/yyyy");
					Map<String, Object> data = new HashMap<String, Object>();
					data.put("academicYear", e.getAcademicYear().getExYear());
					data.put("academicYearId", e.getAcademicYear().getId());
					data.put("programmeYear", e.getProgrammeYear().getExName());
					data.put("programmeYearId", e.getProgrammeYear().getId());
					data.put("semester", e.getSemester().getExName());
					data.put("semesterId", e.getSemester().getId());
					data.put("programmes", e.getProgrammes().getExName());
					data.put("programmesId", e.getProgrammes().getId());

					data.put("degree", e.getDegree().getExName());
					data.put("degreeId", e.getDegree().getId());

					data.put("id", e.getId());
					data.put("exName", e.getExName());
					data.put("exLocalLangName", e.getExLocalLangName());

					data.put("exEndTermExamStartDate", date1.format(e.getExEndTermExamStartDate()));
					data.put("exEndTermExamEndDate", date1.format(e.getExEndTermExamEndDate()));
					data.put("exMidTermExamStartDate", date1.format(e.getExMidTermExamStartDate()));
					data.put("exMidTermExamEndDate", date1.format(e.getExMidTermExamEndDate()));

					data.put("exIsActive", e.getExIsActive());
					data.put("exIsDelete", e.getExIsDelete());
					data.put("exIsLive", e.getExIsLive());

					dataList.add(data);

				}

				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> getrestrationTypeOnExam(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<SemesterRegistrationConfiguration> task = super.semesterRegistrationConfiguration
					.findByExIsDeleteAndExIsActiveAndExamAnnouncementId(false, true, request.getExamAnnouncement());
			List dataList = new LinkedList();
			for (SemesterRegistrationConfiguration e : task) {
				Map<Object, Object> data = new HashMap<Object, Object>();
				data.put("registrationType", e.getRegistration().getExName());
				data.put("id", e.getRegistration().getId());
				dataList.add(data);
			}
			info.put("status", "1");
			info.put("message", "success");
			info.put("details", dataList);
			return info;
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@SuppressWarnings("unchecked")
	@Override
	public Map<String, Object> getStudentById(CommonRequest request) {
		List dataList = new LinkedList();
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			System.out.println("???????????????????request??????????????????" + request);

			List<Studentpersonal> task = super.studentpersonal
					.findByStudentadmissionExIsActiveAndStudentadmissionId(true, request.getId());
			
			List<StudentadmissionLog> tasks = super.studentadmissionLog
					.findByStudentadmissionExIsActiveAndStudentadmissionId(true,request.getId());
			List<StudentBankDetails> bankdetails = studentBankDetailsRepository.findByExRollNo(task.get(0).getStudentadmission().getExRollNo());
			for (Studentpersonal e : task) {
				List stmtype = new LinkedList();
				List stmTypeId = new LinkedList();
				Map<Object, Object> Studentadmissiondata = new HashMap<Object, Object>();
				Studentadmissiondata.put("id", e.getStudentadmission().getId());
				Studentadmissiondata.put("exIsDelete", e.getStudentadmission().getExIsDelete());
				Studentadmissiondata.put("exIsActive", e.getStudentadmission().getExIsActive());
				Studentadmissiondata.put("College", e.getStudentadmission().getColleges().getExName());
				Studentadmissiondata.put("CollegeId", e.getStudentadmission().getColleges().getId());
				Studentadmissiondata.put("Degree", e.getStudentadmission().getDegree().getExName());
				Studentadmissiondata.put("DegreeId", e.getStudentadmission().getDegree().getId());
				Studentadmissiondata.put("Programmes", e.getStudentadmission().getProgrammes().getExName());
				Studentadmissiondata.put("ProgrammesId", e.getStudentadmission().getProgrammes().getId());
				Studentadmissiondata.put("Department", e.getStudentadmission().getDepartment().getExName());
				Studentadmissiondata.put("DepartmentId", e.getStudentadmission().getDepartment().getId());
				Studentadmissiondata.put("Batch", e.getStudentadmission().getBatch().getExName());
				Studentadmissiondata.put("BatchId", e.getStudentadmission().getBatch().getId());
				Studentadmissiondata.put("ProgramType", e.getStudentadmission().getProgramtype().getExName());
				Studentadmissiondata.put("ProgramTypeId", e.getStudentadmission().getProgramtype().getId());
				Studentadmissiondata.put("Category", e.getStudentadmission().getCategory() == null ? null
						: e.getStudentadmission().getCategory().getExName());
				Studentadmissiondata.put("CategoryId", e.getStudentadmission().getCategory() == null ? null
						: e.getStudentadmission().getCategory().getId());
				Studentadmissiondata.put("allocatedCategoryId", e.getStudentadmission().getAllocatedCategory().getId());
				Studentadmissiondata.put("allocatedCategory",
						e.getStudentadmission().getAllocatedCategory().getExName());
				Studentadmissiondata.put("section", e.getStudentadmission().getSection() == null ? null
						: e.getStudentadmission().getSection().getExName());
				Studentadmissiondata.put("sectionId", e.getStudentadmission().getSection() == null ? null
						: e.getStudentadmission().getSection().getId());

				for (int i = 0; i < e.getStudentadmission().getStream().size(); i++) {
					stmtype.add(e.getStudentadmission().getStream().get(i).getExName());
					stmTypeId.add(e.getStudentadmission().getStream().get(i).getId());
				}

				Studentadmissiondata.put("semester", "I");
				Studentadmissiondata.put("semesterId", 1);

				Studentadmissiondata.put("academicYear",e.getStudentadmission().getAcademicYear().getExYear());
				Studentadmissiondata.put("academicYearId", e.getStudentadmission().getAcademicYear().getId());

				Studentadmissiondata.put("stream", stmtype);
				Studentadmissiondata.put("streamId", stmTypeId);
				Studentadmissiondata.put("exIsActive", e.getStudentadmission().getExIsActive());
				Studentadmissiondata.put("exName", e.getStudentadmission().getExName());
				Studentadmissiondata.put("exNameInHindi", e.getStudentadmission().getExNameInHindi());
				Studentadmissiondata.put("exEnrollementNo", e.getStudentadmission().getExEnrollementNo());
				Studentadmissiondata.put("exRollNo", e.getStudentadmission().getExRollNo());
				Studentadmissiondata.put("exIsActive", e.getStudentadmission().getExIsActive());
				Studentadmissiondata.put("exBloodGroup", e.getExBloodGroup());
				Studentadmissiondata.put("exAdhaarNumber", e.getExAdhaarNumber());
				Studentadmissiondata.put("exGender", e.getExGender());
				Studentadmissiondata.put("exDateOfBirth", e.getExDateOfBirth());
				Studentadmissiondata.put("exEmailId", e.getExEmailId());
				Studentadmissiondata.put("exReligion", e.getExReligion());
				Studentadmissiondata.put("exMotherTounge", e.getExMotherTounge());
				Studentadmissiondata.put("exNationality", e.getExNationality());
				Studentadmissiondata.put("exNativeState", e.getExNativeState());
				Studentadmissiondata.put("exFatherName", e.getExFatherName());
				Studentadmissiondata.put("exFatherNameInHindi", e.getExFatherNameInHindi());
				Studentadmissiondata.put("exMotherName", e.getExMotherName());
				Studentadmissiondata.put("exMotherNameInHindi", e.getExMotherNameInHindi());
				Studentadmissiondata.put("exMotherTounge", e.getExMotherTounge());
				Studentadmissiondata.put("exLocalGurdian", e.getExLocalGurdian());
				Studentadmissiondata.put("exlocalGurdianInHindi", e.getExlocalGurdianInHindi());
				Studentadmissiondata.put("exPermanentAddress", e.getExPermanentAddress());
				Studentadmissiondata.put("exPresentAddress", e.getExPresentAddress());
				Studentadmissiondata.put("exIdentificationMark", e.getExIdentificationMark());
				Studentadmissiondata.put("exContactDetails", e.getExContactDetails());
				Studentadmissiondata.put("exParentContactDetails", e.getExParentContactDetails());
				Studentadmissiondata.put("exAnnualIncome", e.getExAnnualIncome());
				Studentadmissiondata.put("exFatherOccupation", e.getExFatherOccupation());
				Studentadmissiondata.put("exWeight", e.getExWeight());
				Studentadmissiondata.put("exHeight", e.getExHeight());
				Studentadmissiondata.put("exAllIndiaRank", e.getStudentadmission().getExAllIndiaRank());
				Studentadmissiondata.put("exJeeReg", e.getStudentadmission().getExAllIndiaRank());
				Studentadmissiondata.put("exDetailsQualification", e.getStudentadmission().getExDetailsQualification());
				Studentadmissiondata.put("exPersentageOfMarks", e.getStudentadmission().getExPercentageOfMarks());
				Studentadmissiondata.put("exDocumentPath", e.getStudentadmission().getExDocumentPath());
				dataList.add(Studentadmissiondata);
			}
			for (StudentadmissionLog w : tasks) {
				Map<Object, Object> data = new HashMap<Object, Object>();
				data.put("exPermanentcity",w.getExPermanentcity());
				data.put("exPermanentstate",w.getExPermanentstate());
				data.put("expostalcode",w.getExpostalcode());
				data.put("excounrty",w.getExcounrty());
				data.put("exPresentcity",w.getExPresentcity());
				data.put("exPresentstate",w.getExPresentstate());
				data.put("exPresentpostalcode",w.getExPresentpostalcode());
				data.put("exPresentcounrty",w.getExPresentcounrty());
				data.put("exTenthYearOfPass",w.getExTenthYearOfPass());
				data.put("exTenthBoardOfPass",w.getExTenthBoardOfPass());
				data.put("exTenthSchollName",w.getExTenthSchollName());
				data.put("exTenthMedium",w.getExTenthMedium());
				data.put("exTenthPercentageOfMarks",w.getExTenthPercentageOfMarks());
				data.put("exTwelvethYearOfPass",w.getExTwelvethYearOfPass());
				data.put("exTwelvethBoardOfPass",w.getExTwelvethBoardOfPass());
				data.put("exTwelvethCollageName",w.getExTwelvethCollageName());
				data.put("exTwelvethMedium",w.getExTwelvethMedium());
				data.put("exTwelvethPercentageOfMarks",w.getExTwelvethPercentageOfMarks());
				data.put("exUgYearOfPass",w.getExUgYearOfPass());
				data.put("exUgBoardOfPass",w.getExUgBoardOfPass());
				data.put("exUgCollageName",w.getExUgCollageName());
				data.put("exUgMedium",w.getExUgMedium());
				data.put("exUgPercentageOfMarks",w.getExUgPercentageOfMarks());
				data.put("exPgYearOfPass",w.getExPgYearOfPass());
				data.put("exPgBoardOfPass",w.getExPgBoardOfPass());
				data.put("exPgCollageName",w.getExPgCollageName());
				data.put("exPgMedium",w.getExPgMedium());
				data.put("exPgPercentageOfMarks",w.getExPgPercentageOfMarks());
				data.put("exMinorityCategory",w.getExMinorityCategory());
				data.put("exPersonwithDisability",w.getExPersonwithDisability());
				data.put("GuardianEmailId",w.getGuardianEmailId());
				data.put("GuardianConatct",w.getGuardianConatct());
				data.put("GuardiaPincode",w.getGuardiaPincode());
				data.put("GuardianAddress",w.getGuardianAddress());
				data.put("FatherContact",w.getFatherContact());
				data.put("FatherOfficeAddress",w.getFatherOfficeAddress());
				data.put("FatherEmailId",w.getFatherEmailId());
				data.put("MotherContact",w.getMotherContact());
				data.put("MotherOfficeAddress",w.getMotherOfficeAddress());
				data.put("MotherEmailId",w.getMotherEmailId());
				data.put("MotherAnnualIncome",w.getMotherAnnualIncome());
				data.put("MotherOccupation",w.getMotherOccupation());
				data.put("exGateScore",w.getExGateScore());
				data.put("StudiedIsbiology",w.getExStudiedIsbiology());
				data.put("exOthersYearOfPass",w.getExOthersYearOfPass());
				data.put("exOthersBoardOfPass",w.getExOthersBoardOfPass());
				data.put("exOthersCollageName",w.getExOthersCollageName());
				data.put("exOthersMedium",w.getExOthersMedium());
				data.put("exOthersPercentageOfMarks",w.getExOthersPercentageOfMarks());
				dataList.add(data);
			}
			for (StudentBankDetails e : bankdetails) {
				Map<Object, Object> datas = new HashMap<Object, Object>();				
				datas.put("exRollNo",e.getExRollNo());
				datas.put("exStudentName",e.getExStudentName());
				datas.put("exAccountType", e.getExAccountType());
				datas.put("exBranch", e.getExBranch());
				datas.put("exAccountNumber", e.getExAccountNumber());
				datas.put("exIfscCode", e.getExIfscCode());
				datas.put("exBankAddress", e.getExBankAddress());
				datas.put("exStudentAddress", e.getExStudentAddress());					
				datas.put("id", e.getId());
				dataList.add(datas);
			}
			
			info.put("status", "1");
			info.put("message", "success");
			info.put("details", dataList);
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
		}

		return info;

	}

	@Override
	public Map<String, Object> studentOnCDPAD(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<Studentadmission> task = super.studentadmission
					.findByCollegesIdAndDegreeIdAndProgrammesIdAndAcademicYearIdAndDepartmentId(request.getColleges(),
							request.getDegree(), request.getProgrammes(), request.getAcademicYear(),
							request.getDepartment());
			if (task.size() <= 0) {
				info.put("status", "2");
				info.put("message", "record not found");
				System.out.println("<<<<," + task);
				return info;
			} else {
				List dataList = new LinkedList();
				for (Studentadmission e : task) {
					Map<String, Object> Studentadmissiondata = new HashMap<String, Object>();
					Studentadmissiondata.put("studentAdmissionId", e.getId());
					Studentadmissiondata.put("academicYearId", e.getAcademicYear());
					Studentadmissiondata.put("exPassword", e.getExPassword());
					Studentadmissiondata.put("exNameInHindi", e.getExNameInHindi());
					Studentadmissiondata.put("exPhoto", e.getExPhoto());
					Studentadmissiondata.put("exSignature", e.getExSignature());
					Studentadmissiondata.put("exStudyStatus", e.getExStudyStatus());
					Studentadmissiondata.put("exEnrollmentNo", e.getExEnrollementNo());
					Studentadmissiondata.put("exRollNo", e.getExRollNo());
					Studentadmissiondata.put("exAllIndiaRank", e.getExAllIndiaRank());
					Studentadmissiondata.put("exJEEReg", e.getExJeeReg());
					Studentadmissiondata.put("exDetailsQualification", e.getExDetailsQualification());
					Studentadmissiondata.put("exPersentageOfMarks", e.getExPercentageOfMarks());
					Studentadmissiondata.put("exDocumentPath", e.getExDocumentPath());

					Studentadmissiondata.put("exName", e.getExName());
					Studentadmissiondata.put("section",
							task.get(0).getSection() == null ? null : task.get(0).getSection().getExName());
					Studentadmissiondata.put("sectionId",
							task.get(0).getSection() == null ? null : task.get(0).getSection().getId());
					Studentadmissiondata.put("exRollNoInc", e.getExRollNoInc());
					Studentadmissiondata.put("exIsActive", e.getExIsActive());
					Studentadmissiondata.put("exUpdatedate", e.getExUpdateDate());
					Studentadmissiondata.put("academicYearId", e.getAcademicYear().getId());
					Studentadmissiondata.put("academicYear", e.getAcademicYear().getExYear());
					Studentadmissiondata.put("degreeId", e.getDegree().getId());
					Studentadmissiondata.put("degree", e.getDegree().getExName());
					Studentadmissiondata.put("collegeId", e.getColleges().getId());
					Studentadmissiondata.put("college", e.getColleges().getExName());
					Studentadmissiondata.put("programmesId", e.getProgrammes().getId());
					Studentadmissiondata.put("programmes", e.getProgrammes().getExName());
					System.out.println(">>>>>>>>..." + Studentadmissiondata);
					dataList.add(Studentadmissiondata);

				}

				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> examOnDAP(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();

		try {

			List<ExamAnnouncement> task = super.examAnnouncement
					.findByAcademicYearIdAndExIsActiveAndExIsDeleteAndDegreeIdAndProgrammesId(request.getAcademicYear(),
							true, false, request.getDegree(), request.getProgrammes());

			System.out.println("<<<<<" + request);
			if (task.size() <= 0) {
				info.put("status", "2");
				info.put("message", "record not found");
				return info;
			} else {
				List dataList = new LinkedList();
				for (ExamAnnouncement e : task) {
					SimpleDateFormat date1 = new SimpleDateFormat("dd/MM/yyyy");
					Map<String, Object> data = new HashMap<String, Object>();
					data.put("academicYear", e.getAcademicYear().getExYear());
					data.put("academicYearId", e.getAcademicYear().getId());
					data.put("programmeYear", e.getProgrammeYear().getExName());
					data.put("programmeYearId", e.getProgrammeYear().getId());
					data.put("semester", e.getSemester().getExName());
					data.put("semesterId", e.getSemester().getId());
					data.put("programmes", e.getProgrammes().getExName());
					data.put("programmesId", e.getProgrammes().getId());

					data.put("degree", e.getDegree().getExName());
					data.put("degreeId", e.getDegree().getId());

					data.put("id", e.getId());
					data.put("exName", e.getExName());
					data.put("exLocalLangName", e.getExLocalLangName());

					data.put("exEndTermExamStartDate", date1.format(e.getExEndTermExamStartDate()));
					data.put("exEndTermExamEndDate", date1.format(e.getExEndTermExamEndDate()));
					data.put("exMidTermExamStartDate", date1.format(e.getExMidTermExamStartDate()));
					data.put("exMidTermExamEndDate", date1.format(e.getExMidTermExamEndDate()));

					data.put("exIsActive", e.getExIsActive());
					data.put("exIsDelete", e.getExIsDelete());
					data.put("exIsLive", e.getExIsLive());

					dataList.add(data);

				}

				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> hostelBasedOnCollege(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<Hostel> task = super.hostel.findByCollegesIdAndExIsActiveAndExIsDelete(request.getColleges(), true,
					false);
			System.out.println(">>>>.." + task);
			if (task.size() <= 0) {
				info.put("status", "2");
				info.put("message", "record not found");
				return info;
			} else {
				List dataList = new LinkedList();
				for (Hostel e : task) {
					Map<Object, Object> data = new HashMap<Object, Object>();
					data.put("id", e.getId());
					data.put("exHostelAddress", e.getExHostelAddress());
					data.put("exHostelCapacity", e.getExHostelCapacity());
					data.put("exHostelCode", e.getExHostelCode());
					data.put("exHostelIncharge", e.getExHostelIncharge());
					data.put("exHostelType", e.getExHostelType());
					data.put("exHostelName", e.getExName());
					data.put("exIsActive", e.getExIsActive());
					data.put("exIsDelete", e.getExIsDelete());
					data.put("college", e.getColleges().getExName());
					data.put("collegeId", e.getColleges().getId());
					data.put("exTelephone", e.getExTelephone());
					dataList.add(data);
				}

				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
		}
		return info;

	}

	@Override
	public Map<String, Object> courseOnProgrammeAndProgrammeYearAndSemester(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<Courses> task = super.courses
					.findByProgrammesIdAndExIsDeleteAndExIsActiveAndSemesterIdAndProgrammeYearId(
							request.getProgrammes(), false, true, request.getSemester(), request.getProgrammeYear());
			if (task.size() <= 0) {
				info.put("status", "2");
				info.put("message", "record not found");
				return info;
			}

			else {
				List dataList = new LinkedList();
				for (Courses e : task) {
					Map<Object, Object> Coursesdata = new HashMap<Object, Object>();
					Coursesdata.put("id", e.getId());
					Coursesdata.put("coursesId", e.getId());
					Coursesdata.put("exCreatedate", e.getExCreateDate());
					Coursesdata.put("exCoursesCode", e.getExCoursesCode());
					Coursesdata.put("exDescription", e.getExDescription());
					Coursesdata.put("exName", e.getExName());
					Coursesdata.put("exUpdateDate", e.getExUpdateDate());
					Coursesdata.put("exIsActive", e.getExIsActive());
					Coursesdata.put("exIsDelete", e.getExIsDelete());
					Coursesdata.put("programYear", e.getProgrammeYear().getExName());
					Coursesdata.put("programYearId", e.getProgrammeYear().getId());
					Coursesdata.put("semesterId", e.getSemester().getId());
					Coursesdata.put("semester", e.getSemester().getExName());
					Coursesdata.put("programmesId", e.getProgrammes().getId());
					Coursesdata.put("programmes", e.getProgrammes().getExName());
					dataList.add(Coursesdata);
				}

				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
		}
		return info;

	}

	@Override
	public Map<String, Object> getCoursesOnStaffId(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Optional<Colleges> clgid = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!clgid.isPresent()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}

			Optional<Programmes> programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!programmes.isPresent()) {
				info.put("status", "2");
				info.put("message", "Programme not present");
				return info;
			}
			Optional<ProgrammeYear> programmeYear = super.programmeYear
					.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
			if (!programmeYear.isPresent()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!sem.isPresent()) {
				info.put("status", "2");
				info.put("message", "Semster not present");
				return info;
			}

			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<Stream> stream = super.stream.findByIdAndExIsDeleteAndExIsActive(request.getStream(), false, true);
			if (!stream.isPresent()) {
				info.put("status", "2");
				info.put("message", "Stream not present");
				return info;
			}

			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department not present");
				return info;
			}
			// Optional<CoursesType> coursesType =
			// super.coursestype.findByExIsDeleteAndExIsActiveAndId(false,
			// true,request.getCoursesType());
			// if (!coursesType.isPresent()) {
			// info.put("status", "2");
			// info.put("message", "CoursesType not present");
			// return info;
			// }

			ArrayList<Object[]> evedetails = super.teacherCourseMapping.getcourseList(request.getProgrammes(),
					request.getColleges(), request.getAcademicYear(), request.getStafftype(), request.getDegree(),
					false, request.getStaffpersonal(), request.getProgrammeYear(), request.getSemester(),
					request.getRegistrationType(), request.getStream(), request.getDepartment(), request.getSection());

			if (evedetails.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Teacher not mapped with any courses.");
				return info;
			} else {

				List dataList = new LinkedList();
				for (Object[] e : evedetails) {
					Map<Object, Object> staffinfo = new HashMap<Object, Object>();
					staffinfo.put("id", e[0]);
					staffinfo.put("coursesCode", e[1]);
					staffinfo.put("courseName", e[6] + " :: " + e[1] + " :: " + e[2]);
					staffinfo.put("credithour", e[3]);
					staffinfo.put("sectionId", e[4]);
					staffinfo.put("section", e[5]);
					// get course type on course id
					Set coursetype = new HashSet();
					Set coursetypeId = new HashSet();
					Long convertedLong = Long.parseLong(e[0].toString());
					List<TeacherCourseMapping> courses = super.teacherCourseMapping
							.findByCoursesIdAndDepartmentIdAndAcademicYearIdAndCollegesIdAndDegreeIdAndProgrammeYearIdAndSemsterIdAndSectionIdAndStaffpersonalIdAndRegistrationTypeId(
									convertedLong, request.getDepartment(), request.getAcademicYear(),
									request.getColleges(), request.getDegree(), request.getProgrammeYear(),
									request.getSemester(), request.getSection(), request.getStaffpersonal(),
									request.getRegistrationType());
					if (courses.size() > 0) {
						for (TeacherCourseMapping t : courses) {
							coursetype.add(t.getCourseType().getExName());
							coursetypeId.add(t.getCourseType().getId());
						}

						staffinfo.put("coursetype", coursetype);
						staffinfo.put("coursetypeId", coursetypeId);
					} else {
						staffinfo.put("sectionId", "NA");
						staffinfo.put("section", "NA");
					}

					dataList.add(staffinfo);
				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);

				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> mentorOnBDPDS(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Optional<Batch> batch = super.batch.findByExIsDeleteAndExIsActiveAndId(false, true, request.getBatch());
			if (!batch.isPresent() || !batch.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Batch not present");
				return info;
			}

			Optional<Programmes> programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!programmes.isPresent()) {
				info.put("status", "2");
				info.put("message", "Programme not present");
				return info;
			}

			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent() || !degree.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}

			Optional<Department> Department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!Department.isPresent() || !Department.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Department not present");
				return info;
			}
			Optional<Stream> Stream = super.stream.findByExIsDeleteAndExIsActiveAndId(false, true, request.getStream());
			if (!Stream.isPresent() || !Stream.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Stream not present");
				return info;
			}

			List<Mentor> task = super.mentor
					.findByBatchIdAndDegreeIdAndProgrammesIdAndDepartmentIdAndStreamIdAndExIsActiveAndExIsDelete(
							request.getBatch(), request.getDegree(), request.getProgrammes(), request.getDepartment(),
							request.getStream(), true, false);
			if (task.size() <= 0) {
				info.put("status", "2");
				info.put("message", "record not found");

				return info;
			} else {
				List dataList = new LinkedList();
				for (Mentor e : task) {
					Map<String, Object> Mentordata = new HashMap<String, Object>();
					Mentordata.put("mentorId", e.getId());
					Mentordata.put("exName", e.getExName());

					Mentordata.put("staffId", e.getStaffpersonal().getId());

					Mentordata.put("staffName", e.getStaffpersonal().getExName());
					Mentordata.put("exEmployeeId", e.getStaffpersonal().getExEmployeeId());

					Mentordata.put("degreeId", e.getDegree().getId());
					Mentordata.put("degree", e.getDegree().getExName());
					Mentordata.put("departmentId", e.getDepartment().getId());
					Mentordata.put("department", e.getDepartment().getExName());

					Mentordata.put("streamId", e.getStream().getId());
					Mentordata.put("stream", e.getStream().getExName());

					Mentordata.put("batchId", e.getBatch().getId());
					Mentordata.put("batch", e.getBatch().getExName());
					Mentordata.put("programmesId", e.getProgrammes().getId());
					Mentordata.put("programmes", e.getProgrammes().getExName());
					dataList.add(Mentordata);
				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getmentordetails(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Optional<Staffpersonal> staff = super.staffpersonal.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getStaffpersonal());
			if (!staff.isPresent()) {
				info.put("status", "2");
				info.put("message", "staff not present");

				return info;
			}

			List<Mentor> task = super.mentor.findByExIsActiveAndExIsDeleteAndStaffpersonalId(true, false,
					request.getStaffpersonal());
			if (task.size() <= 0) {
				info.put("status", "3");
				info.put("message", "staff is not mentor");
				return info;
			} else {
				List dataList = new LinkedList();
				for (Mentor e : task) {
					Map<String, Object> Mentordata = new HashMap<String, Object>();
					Mentordata.put("mentorId", e.getId());
					Mentordata.put("exName", e.getExName());

					Mentordata.put("staffId", e.getStaffpersonal().getId());

					Mentordata.put("staffName", e.getStaffpersonal().getExName());
					Mentordata.put("exEmployeeId", e.getStaffpersonal().getExEmployeeId());

					Mentordata.put("degreeId", e.getDegree().getId());
					Mentordata.put("degree", e.getDegree().getExName());
					Mentordata.put("departmentId", e.getDepartment().getId());
					Mentordata.put("department", e.getDepartment().getExName());

					Mentordata.put("streamId", e.getStream().getId());
					Mentordata.put("stream", e.getStream().getExName());

					Mentordata.put("batchId", e.getBatch().getId());
					Mentordata.put("batch", e.getBatch().getExName());
					Mentordata.put("programmesId", e.getProgrammes().getId());
					Mentordata.put("programmes", e.getProgrammes().getExName());
					dataList.add(Mentordata);
				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> BatchOnDegreeAndprogrammes(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {

			List<Batch> task = super.batch.findByProgrammesIdInAndDegreeIdOrderByIdDesc(request.getProgrammes(),
					request.getDegree());
			if (task.size() <= 0) {
				info.put("status", "2");
				info.put("message", "record not found");
				System.out.println("<<<<," + task);
				return info;
			} else {
				List dataList = new LinkedList();
				for (Batch e : task) {
					Map<String, Object> Programmesdata = new HashMap<String, Object>();
					Programmesdata.put("exCreateDate", e.getExCreateDate());
					Programmesdata.put("exIdentifier", e.getExIdentifier());
					Programmesdata.put("exDescription", e.getExDescription());
					Programmesdata.put("id", e.getId());

					Programmesdata.put("exIsActive", e.getExIsActive());
					Programmesdata.put("exIsDelete", e.getExIsDelete());
					Programmesdata.put("exName", e.getExName());
					Programmesdata.put("exUpdatedate", e.getExUpdateDate());

					Programmesdata.put("degreeId", e.getDegree().getId());
					Programmesdata.put("degree", e.getDegree().getExName());

					Programmesdata.put("programmesId", e.getProgrammes().getId());
					Programmesdata.put("programmes", e.getProgrammes().getExName());

					dataList.add(Programmesdata);

				}

				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> getAttendanceDetails(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			// get current courses details
			
			info.put("status", "2");
			info.put("message", "No record found");
			return info;
			
			/*
			 * List<SemesterRegistration> status = super.semesterRegistration
			 * .findByExIsDeleteAndExIsActiveAndStudentadmissionIdAndExSemesterStatus(false,
			 * true, request.getStudent(), false); if (status.size() <= 0) {
			 * info.put("status", "2"); info.put("message",
			 * "student registration are pending"); return info; } List<CoursesRegistration>
			 * task = super.coursesRegistration
			 * .findByProgrammesIdAndExIsActiveAndExIsDeleteAndRegistrationIdAndSemesterIdAndProgrammeYearIdAndAcademicYearIdAndDepartmentIdAndStudentadmissionId(
			 * status.get(0).getProgrammes().getId(), true, false, 1L,
			 * status.get(0).getSemester().getId(),
			 * status.get(0).getProgrammeYear().getId(),
			 * status.get(0).getAcademicYear().getId(),
			 * status.get(0).getDepartment().getId(), request.getStudent());
			 * System.out.println("<<<<<" + request); if (task.size() <= 0) {
			 * info.put("status", "2"); info.put("message", "record not found"); return
			 * info; } else { List dataList = new LinkedList(); for (CoursesRegistration e :
			 * task) { List coursestype = new LinkedList(); List coursesTypeId = new
			 * LinkedList(); Map<String, Object> Coursesdata = new HashMap<String,
			 * Object>(); Coursesdata.put("id", e.getId()); Coursesdata.put("exCoursesCode",
			 * e.getCourses().getExCoursesCode()); Coursesdata.put("exName",
			 * e.getCourses().getExName()); Coursesdata.put("creditHoursId",
			 * e.getCourses().getCreditHours().getId()); Coursesdata.put("creditHours",
			 * e.getCourses().getCreditHours().getExCreditHourTitle());
			 * 
			 * // get the details from mid term table List<MidTermMarks> midterm =
			 * super.midtermmarksMarks
			 * .findByStudentadmissionIdAndCoursesIdAndExIsActiveAndExIsDelete(request.
			 * getStudent(), e.getCourses().getId(), true, false); if (midterm.size() <= 0)
			 * { Coursesdata.put("attendance", "0.0%"); Coursesdata.put("eligible", false);
			 * } else { Coursesdata.put("attendance",
			 * getAttendance(midterm.get(0).getExAttendenceMarks()));
			 * Coursesdata.put("eligible",
			 * getAttendancedetal(midterm.get(0).getExAttendenceMarks())); }
			 * 
			 * dataList.add(Coursesdata);
			 * 
			 * } info.put("programYear", status.get(0).getProgrammeYear().getExName());
			 * info.put("programYearId", status.get(0).getProgrammeYear().getId());
			 * info.put("semesterId", status.get(0).getSemester().getId());
			 * info.put("semester", status.get(0).getSemester().getExName());
			 * info.put("status", "1"); info.put("message", "success"); info.put("details",
			 * dataList);
			 * 
			 * return info; }
			 */
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	private String getAttendance(Double double1) {
		if (double1 == null) {
			return "0.0%";
		}
		if (double1 == 5) {
			return ">90%";
		}
		if (double1 == 4) {
			return "85% to <90%";
		}
		if (double1 == 3) {
			return "75% to <85%";
		}
		return "0.0%";
	}

	private boolean getAttendancedetal(Double double1) {
		if (double1 == null) {
			return false;
		}
		if (double1 == 5) {
			return true;
		}
		if (double1 == 4) {
			return true;
		}
		if (double1 == 3) {
			return true;
		}
		return false;
	}

	@Override
	public Map<String, Object> getGpaCgpa(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			// get current courses details
			List<SemesterProgressReport> task = super.semesterProgressReport
					.findByStudentadmissionId(request.getStudent());
			System.out.println("<<<<<" + request);
			if (task.size() <= 0) {
				info.put("status", "2");
				info.put("message", "record not found");
				return info;
			} else {
				String serverurl = commonHelper.getSettingValue("SERVER_IP");
				List dataList = new LinkedList();
				for (SemesterProgressReport e : task) {
					Map<String, Object> sem = new HashMap<String, Object>();
					sem.put("id", e.getId());
					sem.put("semester", e.getSemester().getExName());
					sem.put("cgpa", "NA");
					sem.put("gpa", "NA");
					sem.put("marksheetUrl", (e.getMarksheetPath() == null || e.getMarksheetPath() == "NA") ? "NA"
							: serverurl + e.getMarksheetPath());

					dataList.add(sem);

				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);

				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getApproveType() {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			// get current courses details
			List<ApproveType> task = (List<ApproveType>) super.approvetype.findAll();
			if (task.size() <= 0) {
				info.put("status", "2");
				info.put("message", "record not found");
				return info;
			} else {
				List dataList = new LinkedList();
				for (ApproveType e : task) {
					Map<String, Object> sem = new HashMap<String, Object>();
					sem.put("id", e.getId());
					sem.put("exName", e.getExName());
					dataList.add(sem);

				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);

				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> validateLateRegistration(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			// get the student details if already register
			List<SemesterRegistration> student = super.semesterRegistration
					.findByExIsDeleteAndAcademicYearIdAndProgrammeYearIdAndProgrammesIdAndSemesterIdAndStudentadmissionId(
							false, request.getAcademicYear(), request.getProgrammeYear(), request.getProgrammes(),
							request.getSemester(), request.getStudentadmission());
			if (student.size() > 0) {
				info.put("status", "2");
				info.put("message", "Registration already comeplated");
				return info;
			}
			// check apply for late registration and approve by dean
			List<LateRegistration> dupliaction = super.lateRegistration
					.findByExIsDeleteAndExIsActiveAndProgrammesIdAndAcademicYearIdAndProgrammeYearIdAndSemesterIdAndStudentadmissionIdAndExIsApproveType(
							false, true, request.getProgrammes(), request.getAcademicYear(), request.getProgrammeYear(),
							request.getSemester(), request.getStudentadmission(), 0);
			if (dupliaction.size() <= 0) {
				info.put("status", "3");
				info.put("message", "Not apply for late registration process");
				return info;
			} else {
				if (dupliaction.get(0).getExIsDean() == 2) {
					info.put("status", "1");
					info.put("message", "Late registration approved successfully");
					return info;
				} else {
					info.put("status", "4");
					info.put("message", "Approval is pending by dean");
					return info;
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getStudentInternal(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {

			// get current courses details
			Optional<Studentadmission> status = super.studentadmission.findById(request.getStudent());

			if (!status.isPresent()) {
				info.put("status", "2");
				info.put("message", "student registration are pending");
				return info;
			}

			List<PublishResult> valu = super.publish
					.findByExIsDeleteAndExIsActiveAndBatchIdAndExIsPublishAndExResultTypeAndDepartmentId(false, true,
							status.get().getBatch().getId(), 1, 0 , status.get().getDepartment().getId());
			if (valu.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Result not Announced.");
				return info;
			}

			List<MidTermMarks> midterm = super.midtermmarksMarks
					.findByStudentadmissionIdAndSemesterIdAndExIsActiveAndExIsDelete(request.getStudent(),
							valu.get(0).getSemster().get(0).getId(), true, false);
			if (midterm.size() <= 0) {
				// check 6 sem
				info.put("status", "2");
				info.put("message", "Result not Announced.");
				return info;

			}
			List dataList = new LinkedList();

			for (MidTermMarks e : midterm) {
				Map<String, Object> studentinfo = new HashMap<String, Object>();
				studentinfo.put("id", e.getCourses().getId());
				studentinfo.put("exCoursesCode", e.getCourses().getExCoursesCode());
				studentinfo.put("exName", e.getCourses().getExName());
				studentinfo.put("exAssignmentMarks",
						e.getExAssignmentMarks() == null ? "NA" : e.getExAssignmentMarks());
				studentinfo.put("exAttendenceMarks",
						e.getExAttendenceMarks() == null ? "NA" : e.getExAttendenceMarks());
				studentinfo.put("exMidTermMarks", e.getExMidTermMarks() == null ? "NA" : e.getExMidTermMarks());
				studentinfo.put("exMidTermRemarks", e.getExMidTermRemarks() == null ? "NA" : e.getExMidTermRemarks());
				studentinfo.put("exPracticalLearning",
						e.getExPracticalLearning() == null ? "NA" : e.getExPracticalLearning());
				studentinfo.put("exPracticalRecordMarks",
						e.getExPracticalRecordMarks() == null ? "NA" : e.getExPracticalRecordMarks());
				studentinfo.put("exQuizMarks", e.getExQuizMarks() == null ? "NA" : e.getExQuizMarks());
				dataList.add(studentinfo);
			}

			info.put("programYear", midterm.get(0).getProgrammeYear().getExName());
			info.put("programYearId", midterm.get(0).getProgrammeYear().getId());
			info.put("semesterId", midterm.get(0).getSemester().getId());
			info.put("semester", midterm.get(0).getSemester().getExName());
			info.put("exRollNo", midterm.get(0).getStudentadmission().getExRollNo());
			info.put("status", "1");
			info.put("message", "success");
			info.put("details", dataList);
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getApprovalDetails(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			// get current courses details
			List<SemesterRegistration> status = super.semesterRegistration
					.findByExIsDeleteAndExIsActiveAndStudentadmissionIdAndExSemesterStatus(false, true,
							request.getStudent(), false);
			if (status.size() <= 0) {
				info.put("status", "2");
				info.put("message", "student registration are pending");
				return info;
			}

			List dataList = new LinkedList();
			for (SemesterRegistration e : status) {
				Map<Object, Object> Studentadmissiondata = new HashMap<Object, Object>();
				Studentadmissiondata.put("libraryApprove",
						e.getExIsLibraryApprove() == null ? false : e.getExIsLibraryApprove());
				Studentadmissiondata.put("deanApprove",
						e.getExIsDeanApprove() == null ? false : e.getExIsDeanApprove());
				Studentadmissiondata.put("examinationApprove",
						e.getExIsExaminationApprove() == null ? false : e.getExIsExaminationApprove());
				Studentadmissiondata.put("iTDepartmentApprove",
						e.getExIsItDepartmentApprove() == null ? false : e.getExIsItDepartmentApprove());
				Studentadmissiondata.put("computerLabApprove",
						e.getExIsComputerlabApprove() == null ? false : e.getExIsComputerlabApprove());
				Studentadmissiondata.put("accountsApprove",
						e.getExIsAccountsApprove() == null ? false : e.getExIsAccountsApprove());
				Studentadmissiondata.put("mentorApprove",
						e.getExIsMentorApprove() == null ? false : e.getExIsMentorApprove());
				dataList.add(Studentadmissiondata);
			}

			info.put("status", "1");
			info.put("message", "success");
			info.put("details", dataList);
			info.put("collegeId", status.get(0).getColleges().getId());
			info.put("college", status.get(0).getColleges().getExName());
			info.put("programmesId", status.get(0).getProgrammes().getId());
			info.put("programmes", status.get(0).getProgrammes().getExName());
			info.put("departmentId", status.get(0).getDepartment().getId());
			info.put("department", status.get(0).getDepartment().getExName());
			info.put("programYear", status.get(0).getProgrammeYear().getExName());
			info.put("programYearId", status.get(0).getProgrammeYear().getId());
			info.put("degreeId", status.get(0).getDegree().getId());
			info.put("degree", status.get(0).getDegree().getExName());
			info.put("semesterId", status.get(0).getSemester().getId());
			info.put("semester", status.get(0).getSemester().getExName());

			return info;
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> courseWiseResult(CommonRequest request) {
		
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			String PUBLISH_RESULT = commonHelper.getSettingValue("PUBLISH_RESULT");
			if (PUBLISH_RESULT.equalsIgnoreCase("0")) {
				info.put("status", "2");
				info.put("message", "Result not Announced.");
				return info;
			}
			
			

			Optional<Studentadmission> status = super.studentadmission.findById(request.getStudent());
			if (!status.isPresent()) {
				info.put("status", "2");
				info.put("message", "Student is not present.");
				return info;
			}

			List<PublishResult> valu = super.publish
					.findByExIsDeleteAndExIsActiveAndBatchIdAndExIsPublishAndExResultTypeAndDepartmentId(false, true,
							status.get().getBatch().getId(), 1, 1 , status.get().getDepartment().getId());
			if (valu.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Result not Announced.");
				return info;
			}
	
			List<Long> list = new ArrayList<Long>(valu.get(0).getSemster().size());
			for (Semster n : valu.get(0).getSemster()) {
				  list.add(n.getId());
			}
			Collections.sort(list , Collections.reverseOrder());
			
			List<GradeReport> grade  = new ArrayList<GradeReport>();
			
			for(int i =0; i< list.size() ; i++) {
				logger.info("ddddddddddddffffffffdddddddd"+list.get(i).longValue());
				
				grade = super.gradeReport.findBySemesterIdAndStudentadmissionIdAndExIsActiveOrderByCoursesId(
						list.get(i).longValue(), request.getStudent() , true);
				if(grade.size() >0) {
					break;
				}
				
			}
			
			
			
			
			// get current courses details

			if (grade.size() <= 0) {
				// chek if result publised
				info.put("status", "2");
				info.put("message", "Result not Announced.");
				return info;

			}
			

			int theory = 0;
			int pract = 0;

			List dataList = new LinkedList();
			for (GradeReport e : grade) {
				double internaltotal = 0.0, practicaltotal = 0.0;
				Double totalmarks = 0.0;

				Map<Object, Object> omrlist = new HashMap<Object, Object>();
				if (e.getCourses().getCoursesType().size() == 1) {

					if (e.getCourses().getCoursesType().get(0).getId() == 1) {
						internaltotal = (e.getExQuizMarks() == null ? 0
								: e.getExQuizMarks() + (e.getExAssignmentMarks() == null ? 0 : e.getExAssignmentMarks())
										+ (e.getExAttendenceMarks() == null ? 0 : e.getExAttendenceMarks())
										+ (e.getExCaseStudy() == null ? 0 : e.getExCaseStudy()));

						omrlist.put("exEndTermMarks", super.commonHelper.doubleprefixdigit(e.getExEndTermMarks()));
						omrlist.put("exMidtermMarks", super.commonHelper.doubleprefixdigit(e.getExMidTermMarks()));
						omrlist.put("internalmarks", super.commonHelper.doubleprefixdigit(internaltotal));
						omrlist.put("practicaltotal", "NA");

						omrlist.put("exTotalMarks",
								super.commonHelper.doubleprefixdigit(
										internaltotal + (e.getExEndTermMarks() == null ? 0 : e.getExEndTermMarks())
												+ (e.getExMidTermMarks() == null ? 0 : e.getExMidTermMarks())));
					}
					if (e.getCourses().getCoursesType().get(0).getId() == 2) {
						practicaltotal = e.getExPracticalInternalMarks() == null ? 0
								: e.getExPracticalInternalMarks() + (e.getExPracticalExternalMarks() == null ? 0
										: e.getExPracticalExternalMarks());
						omrlist.put("practicaltotal", super.commonHelper.doubleprefixdigit(practicaltotal));
						omrlist.put("exEndTermMarks", "NA");
						omrlist.put("exMidtermMarks", "NA");
						omrlist.put("internalmarks", "NA");
						omrlist.put("exTotalMarks", "NA");
					}
				}

				if (e.getCourses().getCoursesType().size() == 2) {
					practicaltotal = (e.getExPracticalInternalMarks() == null ? 0 : e.getExPracticalInternalMarks())
							+ (e.getExPracticalExternalMarks() == null ? 0 : e.getExPracticalExternalMarks());
					internaltotal = (e.getExQuizMarks() == null ? 0
							: e.getExQuizMarks() + (e.getExAssignmentMarks() == null ? 0 : e.getExAssignmentMarks())
									+ (e.getExAttendenceMarks() == null ? 0 : e.getExAttendenceMarks())
									+ (e.getExCaseStudy() == null ? 0 : e.getExCaseStudy()));
					omrlist.put("exEndTermMarks", super.commonHelper.doubleprefixdigit(e.getExEndTermMarks()));
					omrlist.put("exMidtermMarks", super.commonHelper.doubleprefixdigit(e.getExMidTermMarks()));
					omrlist.put("internalmarks", super.commonHelper.doubleprefixdigit(internaltotal));
					omrlist.put("practicaltotal", super.commonHelper.doubleprefixdigit(practicaltotal));

					omrlist.put("exTotalMarks",
							super.commonHelper.doubleprefixdigit(
									internaltotal + (e.getExEndTermMarks() == null ? 0 : e.getExEndTermMarks())
											+ (e.getExMidTermMarks() == null ? 0 : e.getExMidTermMarks())));
				}

			//	omrlist.put("exQuizMarks", e.getExQuizMarks() == null ? "NA" : e.getExQuizMarks());
			//	omrlist.put("exAssignmentMarks", e.getExAssignmentMarks() == null ? "NA" : e.getExAssignmentMarks());
				//omrlist.put("exAttendenceMarks", e.getExAttendenceMarks() == null ? "NA" : e.getExAttendenceMarks());
				
				
				omrlist.put("exQuizMarks",super.commonHelper.doubleprefixdigit(e.getExQuizMarks()));
				omrlist.put("exAssignmentMarks",super.commonHelper.doubleprefixdigits(e.getExAssignmentMarks()));
				omrlist.put("exAttendenceMarks",super.commonHelper.doubleprefixdigits(e.getExAttendenceMarks()));
				omrlist.put("exCaseStudyMarks",super.commonHelper.doubleprefixdigits(e.getExCaseStudy()));
				
				
				
				// omrlist.put("exGrandTotal", e.getExGrandTotal() == null ?0
				// :e.getExAttendenceMarks());
				// get the mid term marks out of 50

				List<MidTermMarks> internlm = super.midtermmarksMarks
						.findByStudentadmissionIdAndCoursesIdAndExIsActiveAndExIsDelete(request.getStudent(),
								e.getCourses().getId(), true, false);

				if (internlm.size() <= 0) {
					omrlist.put("exTotalMidterm", "NA");
				} else {

					omrlist.put("exTotalMidterm",super.commonHelper.doubleprefixdigit(internlm.get(0).getExMidTermMarks()));
				}

				List<ExamBarcodes> external = super.exambarcode
						.findByExIsActiveAndExIsDeleteAndStudentadmissionIdAndCoursesId(true, false,
								request.getStudent(), e.getCourses().getId());

				if (external.size() <= 0) {
					omrlist.put("exEndTermTotalMarks", "NA");

				} else {
					omrlist.put("exEndTermTotalMarks",
							commonHelper.doubleprefixdigit(external.get(0).getExEndTermMarks()));
				}

				omrlist.put("exCreditHour", e.getCourses().getCreditHours().getExCreditHourTitle());
				omrlist.put("id", e.getCourses().getId());
				omrlist.put("exGrandTotal", super.commonHelper.doubleprefixdigit(e.getExGrandTotal()));
				omrlist.put("lettergrade", e.getExLetterGrades());
				omrlist.put("exGradePoint", (int)e.getExGradePoint().intValue());
				omrlist.put("exCoursesCode", e.getCourses().getExCoursesCode());
				omrlist.put("exRemark", e.getExRemark());
				omrlist.put("exName", e.getCourses().getExName());
				theory = theory + (int) (e.getCourses().getCreditHours().getExCreditHourLecture().intValue());

				pract = pract + (int) (e.getCourses().getCreditHours().getExCreditHourPractical().intValue());
				dataList.add(omrlist);
			}

			info.put("status", "1");
			info.put("message", "success");
			info.put("details", dataList);
			// get the SGPA / CGPA
			List<SemesterProgressReport> task = super.semesterProgressReport
					.findByStudentadmissionIdAndProgrammeYearIdAndSemesterId(request.getStudent(),
							grade.get(0).getProgrammeYear().getId(), grade.get(0).getSemester().getId());
			if (task.size() <= 0) {
				info.put("sgpa", "NA");
				info.put("cgpa", "NA");
				info.put("totalCreditHour", "NA");
			} else {
				info.put("sgpa", task.get(0).getExGradePointAv());
				info.put("cgpa", task.get(0).getExCamuGradePointAv());

				info.put("totalCreditHour", theory + "+" + pract);
			}
			 SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
		     Date date  =  new Date();
		     
		     if(grade.get(0).getDegree().getId() == 1L) {
		    	 info.put("flag", "1");
		     }else {
		    	 info.put("flag", "0");
		     }
			info.put("collegeId", grade.get(0).getColleges().getId());
			info.put("college", grade.get(0).getColleges().getExName());
			info.put("programmesId", grade.get(0).getProgrammes().getId());
			info.put("programmes", grade.get(0).getProgrammes().getExIdentifier());
			info.put("departmentId", grade.get(0).getDepartment().getId());
			info.put("department", grade.get(0).getDepartment().getExIdentifier());
			info.put("programYear", grade.get(0).getProgrammeYear().getExName());
			info.put("programYearId", grade.get(0).getProgrammeYear().getId());
			info.put("degreeId", grade.get(0).getDegree().getId());
			info.put("degree", grade.get(0).getDegree().getExName());
			info.put("semesterId", grade.get(0).getSemester().getId());
			info.put("semester", grade.get(0).getSemester().getExName());
			info.put("rollnumber", status.get().getExRollNo());
			info.put("enrolnumber", status.get().getExEnrollementNo());
			info.put("academicyear", grade.get(0).getAcademicYear().getExYear());
			info.put("name", status.get().getExName());
			
			 DateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
			 
			info.put("publishdate", formatter.format(valu.get(0).getExCreateDate()));
			info.put("currentdate", formatter.format(date));
			info.put("disclaimer", "This electronically generated result is for immediate information to the student. This cannot be treated as final\r\n" + 
					"result. Original detailed mark sheet will be issued by the Institute separately. User is not permitted to change,\r\n" + 
					"modify or prepare derivative works from the content of this result. For any clarifications/confirmation please address\r\n" + 
					"your enquiries to the Controller of Examinations, NIFTEM, Sonepat (Haryana). The Institute will not be responsible for\r\n" + 
					"any inadvertent error that may have crept in this electronically generated Examination Result.\r\n" + 
					"");
			return info;
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> courseForSyllabus(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			String serverurl = commonHelper.getSettingValue("SERVER_IP");
			// get current courses details
			Optional<Studentadmission> status = super.studentadmission.findById(request.getStudent());
			if (!status.isPresent()) {
				info.put("status", "2");
				info.put("message", "Student is not present.");
				return info;
			}
			List<Courses> task = super.courses.findByCollegesIdAndDegreeIdAndProgrammesIdAndSemesterIdAndBatchId(
					status.get().getColleges().getId(), status.get().getDegree().getId(),
					status.get().getProgrammes().getId(), request.getSemester(), status.get().getBatch().getId());
			System.out.println("<<<<<" + task.size());
			if (task.size() <= 0) {
				info.put("status", "2");
				info.put("message", "record not found");
				return info;
			} else {
				List dataList = new LinkedList();
				for (Courses e : task) {
					List coursestype = new LinkedList();
					List coursesTypeId = new LinkedList();
					Map<String, Object> Coursesdata = new HashMap<String, Object>();

					Coursesdata.put("id", e.getId());
					// Coursesdata.put("exCreateDate", e.getExCreateDate());
					Coursesdata.put("exCoursesCode", e.getExCoursesCode());
					Coursesdata.put("exDescrption", e.getExDescription());
					Coursesdata.put("exSyllabusUrl",
							(e.getExSyllabusUrl() == null || e.getExSyllabusUrl() == "NA") ? "NA"
									: serverurl + e.getExSyllabusUrl());

					Coursesdata.put("exName", e.getExName());

					Coursesdata.put("creditHoursId", e.getCreditHours().getId());
					Coursesdata.put("creditHours", e.getCreditHours().getExCreditHourTitle());

					for (int i = 0; i < e.getCoursesType().size(); i++) {
						coursestype.add(e.getCoursesType().get(i).getExName());
						coursesTypeId.add(e.getCoursesType().get(i).getId());
					}

					Coursesdata.put("coursesType", coursestype);
					Coursesdata.put("coursesTypeId", coursesTypeId);

					dataList.add(Coursesdata);

				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);

				info.put("programmesId", status.get().getProgrammes().getId());
				info.put("programmes", status.get().getProgrammes().getExName());

				info.put("programYear", task.get(0).getProgrammeYear().getExName());
				info.put("programYearId", task.get(0).getProgrammeYear().getId());

				info.put("semesterId", task.get(0).getSemester().getId());
				info.put("semester", task.get(0).getSemester().getExName());
				// info.put("streamId", stream.get().getId());
				// info.put("stream", stream.get().getExName());

				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getSyllabusOnStaffId(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			ArrayList<Object[]> evedetails = super.teacherCourseMapping.getSyllabusOnStaffId(request.getProgrammes(),
					request.getColleges(), request.getAcademicYear(), request.getStafftype(), request.getDegree(),
					false, request.getStaffpersonal(), request.getProgrammeYear(), request.getSemester(),
					request.getRegistrationType(), request.getStream(), request.getDepartment());
			if (evedetails.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Teacher not mapped with any courses.");
				return info;
			} else {
				String serverurl = commonHelper.getSettingValue("SERVER_IP");
				List dataList = new LinkedList();
				for (Object[] e : evedetails) {
					Map<Object, Object> staffinfo = new HashMap<Object, Object>();
					boolean isSubmit = false;
					staffinfo.put("id", e[0]);
					staffinfo.put("coursesCode", e[1]);
					staffinfo.put("courseName", e[2]);
					staffinfo.put("credithour", e[3]);
					/// staffinfo.put("sectionId", e[4]);
					// staffinfo.put("section", e[5]);
					// get course type on course id

					List coursetype = new LinkedList();
					List coursetypeId = new LinkedList();
					Long convertedLong = Long.parseLong(e[0].toString());
					List<Courses> courses = super.courses.findByIdAndExIsActiveAndExIsDelete(convertedLong, true,
							false);
					if (courses.size() > 0) {
						for (int i = 0; i < courses.get(0).getCoursesType().size(); i++) {
							coursetype.add(courses.get(0).getCoursesType().get(i).getExName());
							coursetypeId.add(courses.get(0).getCoursesType().get(i).getId());
						}
						staffinfo.put("coursetype", coursetype);
						staffinfo.put("coursetypeId", coursetypeId);
						staffinfo.put("exSyllabusUrl",
								(courses.get(0).getExSyllabusUrl() == null || courses.get(0).getExSyllabusUrl() == "NA")
										? "NA"
										: serverurl + courses.get(0).getExSyllabusUrl());
						// check internl marks submited or not by teacher
						List<MidTermMarks> internl = super.midtermmarksMarks
								.findByCoursesIdAndExIsActiveAndExIsDeleteAndStaffId(convertedLong, true, false,
										request.getStaffpersonal());
						for (MidTermMarks m : internl) {
							isSubmit = true;
							if (m.getExIsSubmit() == null || m.getExIsSubmit() == false) {
								isSubmit = false;
								break;
							}
						}

					} else {
						staffinfo.put("coursetype", "NA");
						staffinfo.put("coursetypeId", "NA");
					}
					staffinfo.put("isSubmit", isSubmit);
					dataList.add(staffinfo);
				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);

				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getStaffById(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Optional<Staffpersonal> tasks = super.staffpersonal.findById(request.getId());
			if (!tasks.isPresent()) {
				info.put("status", "2");
				info.put("message", "Staff not created");
				return info;
			} else {
				List<StaffEmpDetails> task = super.staffEmpDetails.findByStaffpersonalId(request.getId());
				List dataList = new LinkedList();
				for (StaffEmpDetails e : task) {
					List designation = new LinkedList();
					List designationId = new LinkedList();
					Map<Object, Object> Staffpersonaldata = new HashMap<Object, Object>();
					SimpleDateFormat date1 = new SimpleDateFormat("dd/MM/yyyy");

					Staffpersonaldata.put("id", e.getId());
					Staffpersonaldata.put("exLoginName", e.getStaffpersonal().getExLoginName());
					Staffpersonaldata.put("exEmail", e.getStaffpersonal().getExEmail());
					Staffpersonaldata.put("exContactDetail", e.getStaffpersonal().getExContactDetails());
					Staffpersonaldata.put("exAddress", e.getStaffpersonal().getExAddress());
					Staffpersonaldata.put("exCity", e.getStaffpersonal().getExCity());
					Staffpersonaldata.put("exState", e.getStaffpersonal().getExState());
					Staffpersonaldata.put("College", e.getStaffpersonal().getColleges().getExName());
					Staffpersonaldata.put("CollegeId", e.getStaffpersonal().getColleges().getId());
					Staffpersonaldata.put("Degree", e.getStaffpersonal().getDegree().getExName());
					Staffpersonaldata.put("DegreeId", e.getStaffpersonal().getDegree().getId());
					Staffpersonaldata.put("Programmes", e.getStaffpersonal().getProgrammes().getExName());
					Staffpersonaldata.put("ProgrammesId", e.getStaffpersonal().getProgrammes().getId());
					Staffpersonaldata.put("employeeId", e.getStaffpersonal().getExEmployeeId());
					Staffpersonaldata.put("exAdhaarNumber", e.getExAdhaarNumber());
					Staffpersonaldata.put("exBankAccountNo", e.getExBankAccountNo());
					Staffpersonaldata.put("exBankName", e.getExBankName());
					Staffpersonaldata.put("exIfscCode", e.getExIfscCode());
					Staffpersonaldata.put("exPanNumber", e.getExPanNumber());
					Staffpersonaldata.put("exSkill", e.getExSkill());
					Staffpersonaldata.put("Stafftype", e.getStaffpersonal().getStafftype().getExName());
					Staffpersonaldata.put("exCreateDate", e.getStaffpersonal().getExCreateDate() == null ? null
							: date1.format(e.getStaffpersonal().getExCreateDate()));
					Staffpersonaldata.put("exUpdateDate", e.getStaffpersonal().getExUpdateDate() == null ? null
							: date1.format(e.getStaffpersonal().getExUpdateDate()));

					Staffpersonaldata.put("exDateOfBirth", e.getStaffpersonal().getExDateOfBirth() == null ? null
							: date1.format(e.getStaffpersonal().getExDateOfBirth()));
					Staffpersonaldata.put("exDateOfJoin", e.getStaffpersonal().getExDateOfJoing());
					Staffpersonaldata.put("StafftypeId", e.getStaffpersonal().getStafftype().getExName());
					Staffpersonaldata.put("StafftypeId", e.getStaffpersonal().getStafftype().getId());
					Staffpersonaldata.put("exQualification", e.getExQualification());
					Staffpersonaldata.put("Department", e.getStaffpersonal().getDepartment().getExName());
					Staffpersonaldata.put("DepartmentId", e.getStaffpersonal().getDepartment().getId());
					Staffpersonaldata.put("exName", e.getStaffpersonal().getExName());
					Staffpersonaldata.put("exLoginName", e.getStaffpersonal().getExLoginName());

					for (int i = 0; i < e.getStaffpersonal().getDesignation().size(); i++) {
						designation.add(e.getStaffpersonal().getDesignation().get(i).getExName());
						designationId.add(e.getStaffpersonal().getDesignation().get(i).getId());
					}
					Staffpersonaldata.put("Designation", designation);
					Staffpersonaldata.put("DesignationId", designationId);
					Staffpersonaldata.put("exBloodGroup", e.getExBloodGroup());
					Staffpersonaldata.put("exNature", e.getExNature());
					Staffpersonaldata.put("invigilator", e.getStaffpersonal().getInvigilator());
					Staffpersonaldata.put("exShortName", e.getStaffpersonal().getExShortName());
					dataList.add(Staffpersonaldata);
				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getCreditHour(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			if (request.getCourseTypeList().size() <= 0) {
				info.put("status", "2");
				info.put("message", "Please select courses type");
				return info;
			}

			if (request.getCourseTypeList().size() == 2) {
				List<CreditHours> tasks = super.creditHours.findByExIsDelete(false);
				if (tasks.size() <= 0) {
					info.put("status", "2");
					info.put("message", "CreditHours not created");
					return info;
				} else {
					info.put("status", "1");
					info.put("message", "success");
					info.put("details", tasks);
					return info;
				}
			}

			if (request.getCourseTypeList().get(0).toString().equals("1") && request.getCourseTypeList().size() == 1) {
				List<CreditHours> tasks = super.creditHours.getTutorialHour();
				if (tasks.size() <= 0) {
					info.put("status", "2");
					info.put("message", "CreditHours not created");
					return info;
				} else {
					info.put("status", "1");
					info.put("message", "success");
					info.put("details", tasks);
					return info;
				}
			}

			if (request.getCourseTypeList().get(0).toString().equals("2") && request.getCourseTypeList().size() == 1) {
				List<CreditHours> tasks = super.creditHours.getPractticalHour();
				if (tasks.size() <= 0) {
					info.put("status", "2");
					info.put("message", "CreditHours not created");
					return info;
				} else {
					info.put("status", "1");
					info.put("message", "success");
					info.put("details", tasks);
					return info;
				}
			}

			List<CreditHours> tasks = super.creditHours.findByExIsDelete(false);
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "CreditHours not created");
				return info;
			} else {
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", tasks);
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getAcademicForStudent(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			// get current courses details
			Optional<Studentadmission> status = super.studentadmission.findById(request.getStudent());
			if (!status.isPresent()) {
				info.put("status", "2");
				info.put("message", "Student is not present.");
				return info;
			}
			List<AcademicYear> tasks = super.academicYear.latestAcademicYear(status.get().getAcademicYear().getId());
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "academicYear not created");
				return info;
			} else {
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", tasks);
				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getCourseRegistrationAndUnregisteredDetails(SemesterRegistrationRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {

			Optional<Studentadmission> studentadmission = super.studentadmission
					.findByExIsDeleteAndExIsActiveAndExRollNo(false, true, request.getExRollNo());
			if (!studentadmission.isPresent()) {
				info.put("status", "2");
				info.put("message", "student not present");
				return info;

			} else {
				List<Courses> courses = super.courses
						.findByProgrammesIdAndDepartmentIdAndSemesterIdAndProgrammeYearIdAndDegreeIdAndBatchIdAndExIsActive(
								request.getProgrammes(), request.getDepartment(), request.getSemester(),
								request.getProgrammeYear(), request.getDegree(),
								studentadmission.get().getBatch().getId(), true);
				if (courses.size() <= 0) {
					info.put("status", "2");
					info.put("message", "record not found");
					return info;
				}

				List dataList = new LinkedList();
				for (Courses c : courses) {
					Map<String, Object> coursedata = new HashMap<String, Object>();
					List<CoursesRegistration> reg = super.coursesRegistration
							.findByCoursesIdAndStudentadmissionId(c.getId(), studentadmission.get().getId());
					boolean isregister = false;
					if (reg.size() > 0) {
						isregister = true;
					} else {
						isregister = false;
					}

					coursedata.put("Id", c.getId());
					coursedata.put("exName", c.getExName());
					coursedata.put("exCoursesCode", c.getExCoursesCode());
					coursedata.put("isregister", isregister);
					coursedata.put("exCourseType", c.getExSubjectCode() == null ? "NA" : c.getExSubjectCode());
					dataList.add(coursedata);

				}

				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}

	}

	@Override
	public Map<String, Object> getUplodedDocument(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			
			List<StudentDocument> documenttype = studentDocument
					.findByExRollNoAndDocumenttypeId(request.getExRollNo(), request.getDocumentType());
			if (documenttype.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Document Not Uploded");
				return info;
			}
			String serverurl = commonHelper.getSettingValue("SERVER_IP");
			info.put("path", serverurl + documenttype.get(0).getExdocumentPath());
			info.put("status", "1");
			info.put("message", "success");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getDocumetType() {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<DocumentType> documenttype = documentType.getAll();
			if (documenttype.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Document Type not present");
				return info;
			}
			info.put("status", "1");
			info.put("message", "success");
			info.put("details", documenttype);
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getcoursesBasedOnCourseType(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {

			System.out.println("<<<<<" + request.toString());
			List<Courses> task = super.courses
					.findBySemesterIdAndAcademicYearIdAndDegreeIdAndDepartmentIdAndStreamIdAndProgrammesIdAndCoursesTypeIdIn(
							request.getSemester(), request.getAcademicYear(), request.getDegree(),
							request.getDepartment(), request.getStream(), request.getProgrammes(),
							request.getCoursesTypeId());

			if (task.size() <= 0) {
				info.put("status", "2");
				info.put("message", "record not found");
				System.out.println("<<<<," + task);
				return info;
			} else {

				List dataList = new LinkedList();
				for (Courses e : task) {
					Map<String, Object> Coursesdata = new HashMap<String, Object>();
					List designation = new LinkedList();
					List designationId = new LinkedList();
					Coursesdata.put("coursesId", e.getId());
					// List<Courses> task123 =
					// super.courses.findByCoursesType(e.getId(),task.get(0).getCoursesType().get(0).getId());

					Coursesdata.put("exCourseCode", e.getExCoursesCode());
					/// Coursesdata.put("coursesTypeId",e.getCoursesType().get(0).getId());
					// Coursesdata.put("exCourseType",e.getCoursesType().get(0).getExName());
					Coursesdata.put("exIsActive", e.getExIsActive());
					Coursesdata.put("exCreateddate", e.getExCreateDate());
					Coursesdata.put("exDescription", e.getExDescription());
					Coursesdata.put("exIsDelete", e.getExIsDelete());

					Coursesdata.put("exName", e.getExName());
					Coursesdata.put("exUpdatedate", e.getExUpdateDate());
					Coursesdata.put("academicYearId", e.getAcademicYear().getId());
					Coursesdata.put("academicYear", e.getAcademicYear().getExYear());
					Coursesdata.put("degreeId", e.getDegree().getId());
					Coursesdata.put("degree", e.getDegree().getExName());
					Coursesdata.put("ProgramYear", e.getProgrammeYear().getExName());
					Coursesdata.put("ProgramYearId", e.getProgrammeYear().getId());
					Coursesdata.put("creditHoursId", e.getCreditHours().getId());
					Coursesdata.put("creditHours", e.getCreditHours().getExName());
					Coursesdata.put("semesterId", e.getSemester().getId());
					Coursesdata.put("semester", e.getSemester().getExName());
					Coursesdata.put("collegeId", e.getColleges().getId());
					Coursesdata.put("college", e.getColleges().getExName());
					Coursesdata.put("programmesId", e.getProgrammes().getId());
					Coursesdata.put("programmes", e.getProgrammes().getExName());
					Coursesdata.put("departmentId", e.getDepartment().getId());
					Coursesdata.put("department", e.getDepartment().getExName());
					Coursesdata.put("streamId", e.getStream().getId());
					Coursesdata.put("stream", e.getStream().getExName());
					for (int i = 0; i < e.getCoursesType().size(); i++) {
						designation.add(e.getCoursesType().get(i).getExName());
						designationId.add(e.getCoursesType().get(i).getId());
					}
					Coursesdata.put("courseType", designation);
					Coursesdata.put("coursesTypeId", designationId);
					dataList.add(Coursesdata);

				}

				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> courseOnBatch(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<Courses> task = super.courses
					.findByProgrammesIdAndExIsDeleteAndExIsActiveAndSemesterIdAndProgrammeYearIdAndAcademicYearIdAndBatchId(
							request.getProgrammes(), false, true, request.getSemester(), request.getProgrammeYear(),
							request.getAcademicYear(), request.getBatch());
			if (task.size() <= 0) {
				info.put("status", "2");
				info.put("message", "record not found");
				return info;
			}

			else {
				List dataList = new LinkedList();
				for (Courses e : task) {
					Map<Object, Object> Coursesdata = new HashMap<Object, Object>();
					Coursesdata.put("id", e.getId());
					Coursesdata.put("coursesId", e.getId());
					Coursesdata.put("exCreatedate", e.getExCreateDate());
					Coursesdata.put("exCoursesCode", e.getExCoursesCode());
					Coursesdata.put("exDescription", e.getExDescription());
					Coursesdata.put("exName", e.getExName());
					Coursesdata.put("exUpdateDate", e.getExUpdateDate());
					Coursesdata.put("exIsActive", e.getExIsActive());
					Coursesdata.put("exIsDelete", e.getExIsDelete());
					Coursesdata.put("programYear", e.getProgrammeYear().getExName());
					Coursesdata.put("programYearId", e.getProgrammeYear().getId());
					Coursesdata.put("semesterId", e.getSemester().getId());
					Coursesdata.put("semester", e.getSemester().getExName());
					Coursesdata.put("programmesId", e.getProgrammes().getId());
					Coursesdata.put("programmes", e.getProgrammes().getExName());
					dataList.add(Coursesdata);
				}

				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
		}
		return info;
	}

	@Override
	public Map<String, Object> registerCourses(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			System.out.println(">>>>>>>>>>>>" + request.toString());
			List<CoursesRegistration> task = super.coursesRegistration.getSupplyCourses(request.getExamAnnouncement(),
					request.getRegistrationType(), request.getProgrammes(), request.getDepartment());
			if (task.size() <= 0) {
				info.put("status", "2");
				info.put("message", "record not found");
				return info;
			}

			else {
				List dataList = new LinkedList();
				for (CoursesRegistration e : task) {
					Map<Object, Object> Coursesdata = new HashMap<Object, Object>();
					Coursesdata.put("id", e.getCourses().getId());

					Coursesdata.put("exCoursesCode", e.getCourses().getExCoursesCode());
					Coursesdata.put("exDescription", e.getCourses().getExDescription());
					Coursesdata.put("exName",
							e.getCourses().getExName() + "(" + e.getCourses().getBatch().getExName() + ")");

					dataList.add(Coursesdata);
				}

				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
		}
		return info;
	}

	@Override
	public Map<String, Object> getCertificateType() {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<CertificateType> documenttype = certificate.getAll();
			if (documenttype.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Certificate Type not present");
				return info;
			}
			info.put("status", "1");
			info.put("message", "success");
			info.put("details", documenttype);
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getUplodedCertificate(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<StudentCertificate> documenttype = certificaterepo
					.findByExRollNoAndCertificateTypeId(request.getExRollNo(), request.getCertificateType());
			if (documenttype.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Certificate Not Uploded");
				return info;
			}
			String serverurl = commonHelper.getSettingValue("SERVER_IP");
			info.put("path", serverurl + documenttype.get(0).getExdocumentPath());
			info.put("status", "1");
			info.put("message", "success");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getUplodedSyllabus(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Optional<Courses> documenttype = super.courses.findById(request.getCourses());
			if (!documenttype.isPresent()) {
				info.put("status", "2");
				info.put("message", "Courses Not Present");
				return info;
			}
			String serverurl = commonHelper.getSettingValue("SERVER_IP");
			if (documenttype.get().getExSyllabusUrl() == null) {
				info.put("path", "NA");
			} else {
				info.put("path", serverurl + documenttype.get().getExSyllabusUrl());
			}

			info.put("status", "1");
			info.put("message", "success");
			return info;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getStudentRegulation(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {

			// get current courses details
			Optional<Studentadmission> status = super.studentadmission.findById(request.getStudent());
			if (!status.isPresent()) {
				info.put("status", "2");
				info.put("message", "Student is not present.");
				return info;
			}
			List<ExamRegulations> tasks = regulation.findByExIsDeleteAndExIsActiveAndBatchId(false, true,
					status.get().getBatch().getId());
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Record Not Present");
				return info;
			} else {
				String serverurl = commonHelper.getSettingValue("SERVER_IP");
				List dataList = new LinkedList();
				for (ExamRegulations e : tasks) {
					List section = new LinkedList();
					List sectionId = new LinkedList();
					Map<Object, Object> Programmesdata = new HashMap<Object, Object>();
					Programmesdata.put("id", e.getId());
					Programmesdata.put("exDescription", e.getExDescription());
					Programmesdata.put("exName", e.getExName());
					Programmesdata.put("path", e.getExFilePath() == null ? "NA" : serverurl + e.getExFilePath());
					dataList.add(Programmesdata);
				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> courseOnBatchMultiple(ReportRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<Courses> task = super.courses.findByProgrammeYearIdInAndSemesterIdInAndProgrammesIdInAndBatchId(
					request.getProgrammeYear(), request.getSemester(), request.getProgrammes(), request.getBatch());
			if (task.size() <= 0) {
				info.put("status", "2");
				info.put("message", "record not found");
				return info;
			}

			else {
				List dataList = new LinkedList();
				for (Courses e : task) {
					Map<Object, Object> Coursesdata = new HashMap<Object, Object>();
					Coursesdata.put("id", e.getId());
					Coursesdata.put("coursesId", e.getId());
					Coursesdata.put("exCreatedate", e.getExCreateDate());
					Coursesdata.put("exCoursesCode", e.getExCoursesCode());
					Coursesdata.put("exDescription", e.getExDescription());
					Coursesdata.put("exName", e.getExName());
					Coursesdata.put("exUpdateDate", e.getExUpdateDate());
					Coursesdata.put("exIsActive", e.getExIsActive());
					Coursesdata.put("exIsDelete", e.getExIsDelete());
					Coursesdata.put("programYear", e.getProgrammeYear().getExName());
					Coursesdata.put("programYearId", e.getProgrammeYear().getId());
					Coursesdata.put("semesterId", e.getSemester().getId());
					Coursesdata.put("semester", e.getSemester().getExName());
					Coursesdata.put("programmesId", e.getProgrammes().getId());
					Coursesdata.put("programmes", e.getProgrammes().getExName());
					dataList.add(Coursesdata);
				}

				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
		}
		return info;
	}

	@Override
	public Map<String, Object> getHostelDetail(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {

			// get current courses details

			List<AssignHostel> tasks = super.assignHostelRepository
					.findByStudentadmissionIdAndExIsPresent(request.getStudent(), 1);
			if (tasks.size() <= 0) {
				info.put("status", "1");
				info.put("hostelname", "NA");
				info.put("roomtype", "NA");
				info.put("roomnumber", "NA");
				return info;
			} else {
				info.put("status", "1");
				info.put("hostelname", tasks.get(0).getHostel().getExName());
				info.put("roomtype", tasks.get(0).getExRoomType().toUpperCase());
				info.put("roomnumber", tasks.get(0).getExRoomNumber());
				return info;
			}

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getcourseBasedOnAcademicYear(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Optional<Colleges> clgid = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(), false,
					true);
			if (!clgid.isPresent()) {
				info.put("status", "2");
				info.put("message", "Colleges not present");
				return info;
			}

			Optional<Programmes> programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getProgrammes());
			if (!programmes.isPresent()) {
				info.put("status", "2");
				info.put("message", "Programme not present");
				return info;
			}
			Optional<ProgrammeYear> programmeYear = super.programmeYear
					.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(), true, false);
			if (!programmeYear.isPresent()) {
				info.put("status", "2");
				info.put("message", "programmeYear not present");
				return info;
			}
			Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getSemester());
			if (!sem.isPresent()) {
				info.put("status", "2");
				info.put("message", "Semster not present");
				return info;
			}

			Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false, true, request.getDegree());
			if (!degree.isPresent()) {
				info.put("status", "2");
				info.put("message", "Degree not present");
				return info;
			}
			Optional<Stream> stream = super.stream.findByIdAndExIsDeleteAndExIsActive(request.getDegree(), false, true);
			if (!stream.isPresent()) {
				info.put("status", "2");
				info.put("message", "Stream not present");
				return info;
			}

			Optional<Department> department = super.department.findByExIsDeleteAndExIsActiveAndId(false, true,
					request.getDepartment());
			if (!department.isPresent()) {
				info.put("status", "2");
				info.put("message", "Department not present");
				return info;
			}

			List<CoursesRegistration> task = super.coursesRegistration.getcourselistBasedOnAy(request.getColleges(),
					request.getDegree(), request.getProgrammes(), request.getDepartment(), false, true,
					request.getCoursesTypeId(), request.getProgrammeYear(), request.getSemester(), request.getStream(),
					request.getAcademicYear());
			System.out.println("<<<<<" + request);
			if (task.size() <= 0) {
				info.put("status", "2");
				info.put("message", "record not found");
				return info;
			} else {
				List dataList = new LinkedList();

				for (CoursesRegistration e : task) {
					List coursestype = new LinkedList();
					List coursesTypeId = new LinkedList();
					Map<String, Object> Coursesdata = new HashMap<String, Object>();
					Coursesdata.put("id", e.getCourses().getId());
					Coursesdata.put("exCreateDate", e.getExCreateDate());
					Coursesdata.put("exCoursesCode", e.getCourses().getExCoursesCode());
					Coursesdata.put("exDescrption", e.getCourses().getExDescription());
					Coursesdata.put("exIsActive", e.getExIsActive());
					Coursesdata.put("exIsDelete", e.getExIsDelete());
					Coursesdata.put("exName", e.getCourses().getBatch().getExIdentifier() + " :: "
							+ e.getCourses().getExCoursesCode() + " :: " + e.getCourses().getExName());

					Coursesdata.put("exUpdatedDate", e.getExUpdateDate());
					Coursesdata.put("academicYearId", e.getAcademicYear().getId());
					Coursesdata.put("academicYear", e.getAcademicYear().getExYear());
					Coursesdata.put("creditHoursId", e.getCourses().getCreditHours().getId());
					Coursesdata.put("creditHours", e.getCourses().getCreditHours().getExCreditHourTitle());

					for (int i = 0; i < e.getCourses().getCoursesType().size(); i++) {
						// Coursesdata.put("coursesType",e.getCourses().getCoursesType().get(1).getExName());
						// Coursesdata.put("coursesTypeId",e.getCourses().getCoursesType().get(1).getId());

						coursestype.add(e.getCourses().getCoursesType().get(i).getExName());
						coursesTypeId.add(e.getCourses().getCoursesType().get(i).getId());
					}

					Coursesdata.put("coursesType", coursestype);
					Coursesdata.put("coursesTypeId", coursesTypeId);
					dataList.add(Coursesdata);

				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				info.put("collegeId", clgid.get().getId());
				info.put("college", clgid.get().getExName());
				info.put("programmesId", programmes.get().getId());
				info.put("programmes", programmes.get().getExName());
				info.put("departmentId", department.get().getId());
				info.put("department", department.get().getExName());
				info.put("programYear", programmeYear.get().getExName());
				info.put("programYearId", programmeYear.get().getId());
				info.put("degreeId", degree.get().getId());
				info.put("degree", degree.get().getExName());
				info.put("semesterId", sem.get().getId());
				info.put("semester", sem.get().getExName());
				info.put("streamId", stream.get().getId());
				info.put("stream", stream.get().getExName());

				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getAcademicYearForStaff(CommonRequest request) {
		// TODO Auto-generated method stub
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<TeacherCourseMapping> tasks = super.teacherCourseMapping
					.getAcademicYearForTeacher(request.getStaffpersonal());
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Teacher Not Mapped with any courses");
				return info;
			} else {
				List dataList = new LinkedList();
				for (TeacherCourseMapping e : tasks) {

					Map<String, Object> Coursesdata = new HashMap<String, Object>();
					Coursesdata.put("id", e.getAcademicYear().getId());
					Coursesdata.put("exYear", e.getAcademicYear().getExYear());
					Coursesdata.put("exDescription", e.getAcademicYear().getExDescription());
					Coursesdata.put("exIdentifier", e.getAcademicYear().getExIdentifier());

					dataList.add(Coursesdata);

				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getExamForStaff(CommonRequest request) {
		// TODO Auto-generated method stub
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<TeacherCourseMapping> tasks = super.teacherCourseMapping.getExamForTeacher(request.getStaffpersonal(),
					request.getAcademicYear(), request.getProgrammes());
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Teacher Not Mapped with any courses");
				return info;
			} else {
				List sem = new LinkedList();
				List degree = new LinkedList();
				List program = new LinkedList();
				for (TeacherCourseMapping i : tasks) {
					sem.add(i.getSemster().getId());
					degree.add(i.getDegree().getId());
					program.add(i.getProgrammes().getId());
				}

				List<ExamAnnouncement> exam = super.examAnnouncement
						.findByAcademicYearIdAndExIsActiveAndExIsDeleteAndProgrammesIdAndSemesterIdIn(
								request.getAcademicYear(), true, false, request.getProgrammes(), sem);

				List dataList = new LinkedList();
				for (ExamAnnouncement e : exam) {
					SimpleDateFormat date1 = new SimpleDateFormat("dd/MM/yyyy");
					Map<String, Object> data = new HashMap<String, Object>();
					data.put("academicYear", e.getAcademicYear().getExYear());
					data.put("academicYearId", e.getAcademicYear().getId());
					data.put("programmeYear", e.getProgrammeYear().getExName());
					data.put("programmeYearId", e.getProgrammeYear().getId());
					data.put("semester", e.getSemester().getExName());
					data.put("semesterId", e.getSemester().getId());
					data.put("programmes", e.getProgrammes().getExName());
					data.put("programmesId", e.getProgrammes().getId());

					data.put("degree", e.getDegree().getExName());
					data.put("degreeId", e.getDegree().getId());

					data.put("id", e.getId());
					data.put("exName", e.getExName());

					dataList.add(data);

				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getSectionForStaff(CommonRequest request) {
		// TODO Auto-generated method stub
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			List<TeacherCourseMapping> tasks = super.teacherCourseMapping.getSectionForTeacher(
					request.getStaffpersonal(), request.getAcademicYear(), request.getProgrammes(),
					request.getSemester());
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Teacher Not Mapped with any courses");
				return info;
			} else {
				List dataList = new LinkedList();
				for (TeacherCourseMapping e : tasks) {

					Map<String, Object> Coursesdata = new HashMap<String, Object>();
					Coursesdata.put("id", e.getSection().getId());
					Coursesdata.put("exName", e.getSection().getExName());

					dataList.add(Coursesdata);

				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}

		} catch (Exception e) {
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> Studentform(CommonRequest request) {
		
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			Optional<Studentadmission> task = super.studentadmission.findByExRollNo(request.getExRollNo());
			if (!task.isPresent() || !task.get().getExIsActive()) {
				info.put("status", "2");
				info.put("message", "Student is not present");
				return info;
			} else {
				
				List Streamdata =  new LinkedList();
				Map<Object, Object> studentinfo = new HashMap<Object, Object>();
				String serverurl = commonHelper.getSettingValue("SERVER_IP");
				studentinfo.put("exName", task.get().getExName());
				studentinfo.put("exRollNo", task.get().getExRollNo());
				studentinfo.put("exEnrollementNo", task.get().getExEnrollementNo());
				studentinfo.put("exStudyStatus", task.get().getExStudyStatus());
				studentinfo.put("exIsActive", task.get().getExIsActive());
				studentinfo.put("exIsDelete", task.get().getExIsDelete());
				studentinfo.put("exupdateDate",task.get().getExUpdateDate());	
				studentinfo.put("exDocumentPath", (task.get().getExDocumentPath() == null || task.get().getExDocumentPath() == "NA")?"NA" :serverurl+task.get().getExDocumentPath());
				studentinfo.put("exPhoto", (task.get().getExPhoto() == null || task.get().getExPhoto() == "NA")?"NA" :serverurl+task.get().getExPhoto());
				studentinfo.put("exSignature", (task.get().getExSignature() == null || task.get().getExSignature() == "NA")?"NA" :serverurl+task.get().getExSignature());
				studentinfo.put("collegeId",task.get().getColleges().getId());
				studentinfo.put("college", task.get().getColleges().getExName());
				studentinfo.put("programmesId", task.get().getProgrammes().getId());
				studentinfo.put("programmes", task.get().getProgrammes().getExIdentifier());
				studentinfo.put("departmentId", task.get().getDepartment().getId());
				studentinfo.put("department", task.get().getDepartment().getExIdentifier());
				studentinfo.put("degreeId",task.get().getDegree().getId());
				studentinfo.put("degree",task.get().getDegree().getExName());
				studentinfo.put("academicyear",task.get().getAcademicYear().getExYear());
				Streamdata.add(studentinfo);
				info.put("status1", "1");
				info.put("Information", "Details Of Students");
				info.put("StudentDetails", Streamdata);
				
				List<StudentBankDetails> bankdetails = studentBankDetailsRepository.findByExRollNo(task.get().getExRollNo());
				List Bank = new LinkedList();
				for (StudentBankDetails e : bankdetails) {
					Map<Object, Object> data = new HashMap<Object, Object>();				
					data.put("exRollNo",e.getExRollNo());
					data.put("exStudentName",e.getExStudentName());
					data.put("exAccountType", e.getExAccountType());
					data.put("exBranch", e.getExBranch());
					data.put("exAccountNumber", e.getExAccountNumber());
					data.put("exIfscCode", e.getExIfscCode());
					data.put("exBankAddress", e.getExBankAddress());
					data.put("exStudentAddress", e.getExStudentAddress());					
					data.put("id", e.getId());
					Bank.add(data);
				}
				info.put("status", "1");
				info.put("Info", "success");
				info.put("Bankdetails", Bank);
				
			List<Studentpersonal> studentpersonal = super.studentpersonal.findByStudentadmissionId(task.get().getId());	
			List spersonal =new LinkedList();
			for(Studentpersonal s : studentpersonal) {
				Map<Object, Object> sdata = new HashMap<Object, Object>();
				sdata.put("id",s.getId());
				sdata.put("exDateOfBirth",s.getExDateOfBirth());
				sdata.put("exContactDetails",s.getExContactDetails());
				sdata.put("exGender",s.getExGender());
				sdata.put("exNationality",s.getExNationality());
				sdata.put("exNativeState",s.getExNativeState());
				sdata.put("exReligion",s.getExReligion());
				sdata.put("exMotherTounge",s.getExMotherTounge());
				sdata.put("exBloodGroup",s.getExBloodGroup());
				sdata.put("exAdhaarNumber",s.getExAdhaarNumber());
				sdata.put("exEmailId",s.getExEmailId());
				sdata.put("exFatherName",s.getExFatherName());
				sdata.put("exParentContactDetails",s.getExParentContactDetails());
				sdata.put("exFatherOccupation",s.getExFatherOccupation());
				sdata.put("exAnnualIncome",s.getExAnnualIncome());
				sdata.put("exMotherName",s.getExMotherName());
				sdata.put("exPermanentAddress",s.getExPermanentAddress());
				sdata.put("exPresentAddress",s.getExPresentAddress());
				spersonal.add(sdata);
			}
			info.put("Studentpersonaldetails", spersonal);
			
				List<Semster> sem=super.semester.findByExIsDelete(false);
			System.out.println("niftemmmmmmmmmmmmmmmmmmmmmmmm"+sem);	
			ArrayList<Object[]> list  = super.semesterRegistration.NoDuesDetails( sem.get(0).getId() ,task.get().getId());
			{
				List Lists =  new LinkedList();
				for(Object[] f: list) {
					Map<Object, Object> NoDues = new HashMap<Object, Object>();
					NoDues.put("id",f[0] );
					NoDues.put("Amount",f[1] );
					NoDues.put("Remark",f[2] );
					NoDues.put("approveType",f[3] );
					NoDues.put("isPaid",f[4] );
					Lists.add(NoDues);
				}
			info.put("NoDuesstatus1", "1");
			info.put("NoDues1", "success");
			info.put("detailsNoDues1", Lists);
			}
				List<GradeReport> grade = super.gradeReport.findBySemesterIdAndStudentadmissionIdAndExIsActiveOrderByCoursesId(
						sem.get(0).getId(), task.get().getId() , true);
				if (grade.size() <= 0) {
					info.put("status", "2");
					info.put("message", "1St Semester Result not Announced");
					return info;
				}else {
				int theory = 0;
				int pract = 0;

				List dataList = new LinkedList();
				for (GradeReport e : grade) {
					double internaltotal = 0.0, practicaltotal = 0.0,practicalLearning=0.0,practicalRecord=0.0,Labexperiment=0.0,viva=0.0;
					Double totalmarks = 0.0;

					Map<Object, Object> omrlist = new HashMap<Object, Object>();
					if (e.getCourses().getCoursesType().size() == 1) {
							System.out.println("niftemmmmmmmmmmmmmmmmmmmmmm"+e.getCourses().getCoursesType().size());
						if (e.getCourses().getCoursesType().get(0).getId() == 1) {
								System.out.println("niffffffffffffffffffffffffffffffff"+e.getCourses().getCoursesType().get(0).getId());
							internaltotal = (e.getExQuizMarks() == null ? 0
									: e.getExQuizMarks() + (e.getExAssignmentMarks() == null ? 0 : e.getExAssignmentMarks())
											+ (e.getExAttendenceMarks() == null ? 0 : e.getExAttendenceMarks())
											+ (e.getExCaseStudy() == null ? 0 : e.getExCaseStudy()));

							omrlist.put("exEndTermMarks", super.commonHelper.doubleprefixdigit(e.getExEndTermMarks()));
							omrlist.put("exMidtermMarks", super.commonHelper.doubleprefixdigit(e.getExMidTermMarks()));
							omrlist.put("internalmarks", super.commonHelper.doubleprefixdigit(internaltotal));
							omrlist.put("practicaltotal", "NA");

							omrlist.put("exTotalMarks",
									super.commonHelper.doubleprefixdigit(
											internaltotal + (e.getExEndTermMarks() == null ? 0 : e.getExEndTermMarks())
													+ (e.getExMidTermMarks() == null ? 0 : e.getExMidTermMarks())));
						}
						if (e.getCourses().getCoursesType().get(0).getId() == 2) {
							practicaltotal = e.getExPracticalInternalMarks() == null ? 0
									: e.getExPracticalInternalMarks() + (e.getExPracticalExternalMarks() == null ? 0
											: e.getExPracticalExternalMarks());
							omrlist.put("practicaltotal", super.commonHelper.doubleprefixdigit(practicaltotal));
							omrlist.put("exEndTermMarks", "NA");
							omrlist.put("exMidtermMarks", "NA");
							omrlist.put("internalmarks", "NA");
							omrlist.put("exTotalMarks", "NA");
						}
					}

					if (e.getCourses().getCoursesType().size() == 2) {
						
					//	List<ExamBarcodes> exam = super.ExamBarcodes.findBySemesterIdAndStudentadmissionIdOrderByCoursesId(
						//		sem.get(0).getId(), task.get().getId());
						
						
						
						practicaltotal = (e.getExPracticalInternalMarks() == null ? 0 : e.getExPracticalInternalMarks())
								+ (e.getExPracticalExternalMarks() == null ? 0 : e.getExPracticalExternalMarks());
						internaltotal = (e.getExQuizMarks() == null ? 0
								: e.getExQuizMarks() + (e.getExAssignmentMarks() == null ? 0 : e.getExAssignmentMarks())
										+ (e.getExAttendenceMarks() == null ? 0 : e.getExAttendenceMarks())
										+ (e.getExCaseStudy() == null ? 0 : e.getExCaseStudy()));
						omrlist.put("exEndTermMarks", super.commonHelper.doubleprefixdigit(e.getExEndTermMarks()));
						omrlist.put("exMidtermMarks", super.commonHelper.doubleprefixdigit(e.getExMidTermMarks()));
						omrlist.put("internalmarks", super.commonHelper.doubleprefixdigit(internaltotal));
						omrlist.put("practicaltotal", super.commonHelper.doubleprefixdigit(practicaltotal));

						omrlist.put("exTotalMarks",
								super.commonHelper.doubleprefixdigit(
										internaltotal + (e.getExEndTermMarks() == null ? 0 : e.getExEndTermMarks())
												+ (e.getExMidTermMarks() == null ? 0 : e.getExMidTermMarks())));
					}

					omrlist.put("exQuizMarks", super.commonHelper.doubleprefixdigit(e.getExQuizMarks()));
					omrlist.put("exAssignmentMarks", super.commonHelper.doubleprefixdigit(e.getExAssignmentMarks()));
					omrlist.put("exAttendenceMarks", super.commonHelper.doubleprefixdigit(e.getExAttendenceMarks()));
					omrlist.put("exCaseStudyMarks", super.commonHelper.doubleprefixdigit(e.getExCaseStudy()));
					
					List<MidTermMarks> internlm = super.midtermmarksMarks
							.findByStudentadmissionIdAndCoursesIdAndExIsActiveAndExIsDelete(task.get().getId(),
									e.getCourses().getId(), true, false);

					if (internlm.size() <= 0) {
						omrlist.put("exTotalMidterm", "NA");
					} else {
						omrlist.put("exTotalMidterm", internlm.get(0).getExMidTermMarks());
					}

					List<ExamBarcodes> external = super.exambarcode
							.findByExIsActiveAndExIsDeleteAndStudentadmissionIdAndCoursesId(true, false,
									task.get().getId(), e.getCourses().getId());

					if (external.size() <= 0) {
						omrlist.put("exEndTermTotalMarks", "NA");

					} else {
						omrlist.put("exEndTermTotalMarks",
								commonHelper.doubleprefixdigit(external.get(0).getExEndTermMarks()));
					}

					omrlist.put("exCreditHour", e.getCourses().getCreditHours().getExCreditHourTitle());
					omrlist.put("id", e.getCourses().getId());
					omrlist.put("exGrandTotal", super.commonHelper.doubleprefixdigit(e.getExGrandTotal()));
					omrlist.put("lettergrade", e.getExLetterGrades());
					omrlist.put("exGradePoint",super.commonHelper.doublegradepoint(e.getExGradePoint()));
					omrlist.put("exCoursesCode", e.getCourses().getExCoursesCode());
					omrlist.put("exRemark", e.getExRemark());
					omrlist.put("exName", e.getCourses().getExName());
					theory = theory + (int) (e.getCourses().getCreditHours().getExCreditHourLecture().intValue());

					pract = pract + (int) (e.getCourses().getCreditHours().getExCreditHourPractical().intValue());
					dataList.add(omrlist);
				}

				info.put("status", "1");
				info.put("message", "success");
				info.put("message", "First Semester Result");
				info.put("details", dataList);
				// get the SGPA / CGPA
				List<SemesterProgressReport> taskss = super.semesterProgressReport
						.findByStudentadmissionIdAndProgrammeYearIdAndSemesterId(task.get().getId(),
								grade.get(0).getProgrammeYear().getId(), grade.get(0).getSemester().getId());
				if (taskss.size() <= 0) {
					info.put("sgpa", "NA");
					info.put("cgpa", "NA");
					info.put("totalCreditHour", "NA");
				} else {
					info.put("sgpa", taskss.get(0).getExGradePointAv());
					if (taskss.get(0).getStudentadmission().getBatch().getId() == 8
							|| taskss.get(0).getStudentadmission().getBatch().getId() == 7) {
						info.put("cgpa", taskss.get(0).getExCamuGradePointAv());
					} else {
						info.put("cgpa",taskss.get(0).getExCamuGradePointAv() );
					}

					info.put("totalCreditHour", theory + "+" + pract);
					info.put("Semester1st", sem.get(0).getId());
					info.put("Semester1stName",sem.get(0).getExName());
					info.put("Marksheet1stsem", (taskss.get(0).getMarksheetPath() == null || taskss.get(0).getMarksheetPath() == "NA")?"NA" :serverurl+taskss.get(0).getMarksheetPath());
				}
				}
				//==============
				ArrayList<Object[]> list2  = super.semesterRegistration.NoDuesDetails( sem.get(1).getId() ,task.get().getId());
				{
					List Lists2 =  new LinkedList();
					for(Object[] f: list2) {
						Map<Object, Object> NoDues = new HashMap<Object, Object>();
						NoDues.put("id",f[0] );
						NoDues.put("Amount",f[1] );
						NoDues.put("Remark",f[2] );
						NoDues.put("approveType",f[3] );
						NoDues.put("isPaid",f[4] );
						Lists2.add(NoDues);
					}
				info.put("NoDuesstatus2", "1");
				info.put("NoDues2", "success");
				info.put("detailsNoDues2", Lists2);
				}
				
				
				List<GradeReport> grade2ndsem = super.gradeReport.findBySemesterIdAndStudentadmissionIdAndExIsActiveOrderByCoursesId(
						sem.get(1).getId(), task.get().getId() ,true);
				if (grade2ndsem.size() <= 0) {
					info.put("status2nd", "2");
					info.put("message2nd", "2nd Semester Result not Announced");
					return info;
				}else {
				int theory2ndsem = 0;
				int pract2ndsem = 0;

				List dataList2ndsem = new LinkedList();
				for (GradeReport e : grade2ndsem) {
					double internaltotal = 0.0, practicaltotal = 0.0;
					Double totalmarks = 0.0;

					Map<Object, Object> omrlist = new HashMap<Object, Object>();
					if (e.getCourses().getCoursesType().size() == 1) {

						if (e.getCourses().getCoursesType().get(0).getId() == 1) {
							internaltotal = (e.getExQuizMarks() == null ? 0
									: e.getExQuizMarks() + (e.getExAssignmentMarks() == null ? 0 : e.getExAssignmentMarks())
											+ (e.getExAttendenceMarks() == null ? 0 : e.getExAttendenceMarks())
											+ (e.getExCaseStudy() == null ? 0 : e.getExCaseStudy()));

							omrlist.put("exEndTermMarks", super.commonHelper.doubleprefixdigit(e.getExEndTermMarks()));
							omrlist.put("exMidtermMarks", super.commonHelper.doubleprefixdigit(e.getExMidTermMarks()));
							omrlist.put("internalmarks", super.commonHelper.doubleprefixdigit(internaltotal));
							omrlist.put("practicaltotal", "NA");

							omrlist.put("exTotalMarks",
									super.commonHelper.doubleprefixdigit(
											internaltotal + (e.getExEndTermMarks() == null ? 0 : e.getExEndTermMarks())
													+ (e.getExMidTermMarks() == null ? 0 : e.getExMidTermMarks())));
						}
						if (e.getCourses().getCoursesType().get(0).getId() == 2) {
							practicaltotal = e.getExPracticalInternalMarks() == null ? 0
									: e.getExPracticalInternalMarks() + (e.getExPracticalExternalMarks() == null ? 0
											: e.getExPracticalExternalMarks());
							omrlist.put("practicaltotal", super.commonHelper.doubleprefixdigit(practicaltotal));
							omrlist.put("exEndTermMarks", "NA");
							omrlist.put("exMidtermMarks", "NA");
							omrlist.put("internalmarks", "NA");
							omrlist.put("exTotalMarks", "NA");
						}
					}

					if (e.getCourses().getCoursesType().size() == 2) {
						practicaltotal = (e.getExPracticalInternalMarks() == null ? 0 : e.getExPracticalInternalMarks())
								+ (e.getExPracticalExternalMarks() == null ? 0 : e.getExPracticalExternalMarks());
						internaltotal = (e.getExQuizMarks() == null ? 0
								: e.getExQuizMarks() + (e.getExAssignmentMarks() == null ? 0 : e.getExAssignmentMarks())
										+ (e.getExAttendenceMarks() == null ? 0 : e.getExAttendenceMarks())
										+ (e.getExCaseStudy() == null ? 0 : e.getExCaseStudy()));
						
						
						omrlist.put("exEndTermMarks", super.commonHelper.doubleprefixdigit(e.getExEndTermMarks()));
						omrlist.put("exMidtermMarks", super.commonHelper.doubleprefixdigit(e.getExMidTermMarks()));
						omrlist.put("internalmarks", super.commonHelper.doubleprefixdigit(internaltotal));
						omrlist.put("practicaltotal", super.commonHelper.doubleprefixdigit(practicaltotal));

						omrlist.put("exTotalMarks",
								super.commonHelper.doubleprefixdigit(
										internaltotal + (e.getExEndTermMarks() == null ? 0 : e.getExEndTermMarks())
												+ (e.getExMidTermMarks() == null ? 0 : e.getExMidTermMarks())));
					}


					omrlist.put("exQuizMarks", super.commonHelper.doubleprefixdigit(e.getExQuizMarks()));
					omrlist.put("exAssignmentMarks", super.commonHelper.doubleprefixdigit(e.getExAssignmentMarks()));
					omrlist.put("exAttendenceMarks", super.commonHelper.doubleprefixdigit(e.getExAttendenceMarks()));
					omrlist.put("exCaseStudyMarks", super.commonHelper.doubleprefixdigit(e.getExCaseStudy()));
					
					List<MidTermMarks> internlm = super.midtermmarksMarks
							.findByStudentadmissionIdAndCoursesIdAndExIsActiveAndExIsDelete(task.get().getId(),
									e.getCourses().getId(), true, false);

					if (internlm.size() <= 0) {
						omrlist.put("exTotalMidterm", "NA");
					} else {

						omrlist.put("exTotalMidterm", commonHelper.doubleprefixdigit(internlm.get(0).getExMidTermMarks()));
					}

					List<ExamBarcodes> external = super.exambarcode
							.findByExIsActiveAndExIsDeleteAndStudentadmissionIdAndCoursesId(true, false,
									task.get().getId(), e.getCourses().getId());

					if (external.size() <= 0) {
						omrlist.put("exEndTermTotalMarks", "NA");

					} else {
						omrlist.put("exEndTermTotalMarks",
								commonHelper.doubleprefixdigit(external.get(0).getExEndTermMarks()));
					}

					omrlist.put("exCreditHour", e.getCourses().getCreditHours().getExCreditHourTitle());
					omrlist.put("id", e.getCourses().getId());
					omrlist.put("exGrandTotal", super.commonHelper.doubleprefixdigit(e.getExGrandTotal()));
					omrlist.put("lettergrade", e.getExLetterGrades());
					omrlist.put("exGradePoint", (int)e.getExGradePoint().intValue());
					omrlist.put("exCoursesCode", e.getCourses().getExCoursesCode());
					omrlist.put("exRemark", e.getExRemark());
					omrlist.put("exName", e.getCourses().getExName());
					theory2ndsem = theory2ndsem + (int) (e.getCourses().getCreditHours().getExCreditHourLecture().intValue());

					pract2ndsem = pract2ndsem + (int) (e.getCourses().getCreditHours().getExCreditHourPractical().intValue());
					dataList2ndsem.add(omrlist);
				}

				info.put("status2ndsem", "1");
				info.put("message2ndsem", "success");
				info.put("message2ndsem", "Second Semester Result");
				info.put("detailsOf2ndsem", dataList2ndsem);
				// get the SGPA / CGPA
				List<SemesterProgressReport> taskss2ndsem = super.semesterProgressReport
						.findByStudentadmissionIdAndProgrammeYearIdAndSemesterId(task.get().getId(),
								grade2ndsem.get(0).getProgrammeYear().getId(), grade2ndsem.get(0).getSemester().getId());
				if (taskss2ndsem.size() <= 0) {
					info.put("sgpa2ndsem", "NA");
					info.put("cgpa2ndsem", "NA");
					info.put("totalCreditHour2ndsem", "NA");
				} else {
					info.put("sgpa2ndsem", taskss2ndsem.get(0).getExGradePointAv());
					if (taskss2ndsem.get(0).getStudentadmission().getBatch().getId() == 8
							|| taskss2ndsem.get(0).getStudentadmission().getBatch().getId() == 7) {
						info.put("cgpa2ndsem", taskss2ndsem.get(0).getExCamuGradePointAv());
					} else {
						info.put("cgpa2ndsem",taskss2ndsem.get(0).getExCamuGradePointAv() );
					}

					info.put("totalCreditHour2ndsem", theory2ndsem + "+" + pract2ndsem);
					info.put("Semester2nd", sem.get(1).getId());
					info.put("Semester2ndName",sem.get(1).getExName());
					info.put("Marksheet2ndsem", (taskss2ndsem.get(0).getMarksheetPath() == null || taskss2ndsem.get(0).getMarksheetPath() == "NA")?"NA" :serverurl+taskss2ndsem.get(0).getMarksheetPath());
			
				}
				}
				//================================
				ArrayList<Object[]> list3  = super.semesterRegistration.NoDuesDetails( sem.get(2).getId() ,task.get().getId());
				{
					List Lists3 =  new LinkedList();
					for(Object[] f: list3) {
						Map<Object, Object> NoDues = new HashMap<Object, Object>();
						NoDues.put("id",f[0] );
						NoDues.put("Amount",f[1] );
						NoDues.put("Remark",f[2] );
						NoDues.put("approveType",f[3] );
						NoDues.put("isPaid",f[4] );
						Lists3.add(NoDues);
					}
				info.put("NoDuesstatus3", "1");
				info.put("NoDues3", "success");
				info.put("detailsNoDues3", Lists3);
				}
				
				
				List<GradeReport> grade3rdsem = super.gradeReport.findBySemesterIdAndStudentadmissionIdAndExIsActiveOrderByCoursesId(
						sem.get(2).getId(), task.get().getId() , true);
				if (grade3rdsem.size() <= 0) {
					info.put("status2", "2");
					info.put("message2", "3rd Semester Result not Announced");
					return info;
				}else {
				int theory3rdsem = 0;
				int pract3rdsem = 0;

				List dataList3rdsem = new LinkedList();
				for (GradeReport e : grade3rdsem) {
					double internaltotal = 0.0, practicaltotal = 0.0;
					Double totalmarks = 0.0;

					Map<Object, Object> omrlist = new HashMap<Object, Object>();
					if (e.getCourses().getCoursesType().size() == 1) {

						if (e.getCourses().getCoursesType().get(0).getId() == 1) {
							internaltotal = (e.getExQuizMarks() == null ? 0
									: e.getExQuizMarks() + (e.getExAssignmentMarks() == null ? 0 : e.getExAssignmentMarks())
											+ (e.getExAttendenceMarks() == null ? 0 : e.getExAttendenceMarks())
											+ (e.getExCaseStudy() == null ? 0 : e.getExCaseStudy()));

							omrlist.put("exEndTermMarks", super.commonHelper.doubleprefixdigit(e.getExEndTermMarks()));
							omrlist.put("exMidtermMarks", super.commonHelper.doubleprefixdigit(e.getExMidTermMarks()));
							omrlist.put("internalmarks", super.commonHelper.doubleprefixdigit(internaltotal));
							omrlist.put("practicaltotal", "NA");

							omrlist.put("exTotalMarks",
									super.commonHelper.doubleprefixdigit(
											internaltotal + (e.getExEndTermMarks() == null ? 0 : e.getExEndTermMarks())
													+ (e.getExMidTermMarks() == null ? 0 : e.getExMidTermMarks())));
						}
						if (e.getCourses().getCoursesType().get(0).getId() == 2) {
							practicaltotal = e.getExPracticalInternalMarks() == null ? 0
									: e.getExPracticalInternalMarks() + (e.getExPracticalExternalMarks() == null ? 0
											: e.getExPracticalExternalMarks());
							omrlist.put("practicaltotal", super.commonHelper.doubleprefixdigit(practicaltotal));
							omrlist.put("exEndTermMarks", "NA");
							omrlist.put("exMidtermMarks", "NA");
							omrlist.put("internalmarks", "NA");
							omrlist.put("exTotalMarks", "NA");
						}
					}

					if (e.getCourses().getCoursesType().size() == 2) {
						practicaltotal = (e.getExPracticalInternalMarks() == null ? 0 : e.getExPracticalInternalMarks())
								+ (e.getExPracticalExternalMarks() == null ? 0 : e.getExPracticalExternalMarks());
						internaltotal = (e.getExQuizMarks() == null ? 0
								: e.getExQuizMarks() + (e.getExAssignmentMarks() == null ? 0 : e.getExAssignmentMarks())
										+ (e.getExAttendenceMarks() == null ? 0 : e.getExAttendenceMarks())
										+ (e.getExCaseStudy() == null ? 0 : e.getExCaseStudy()));
						omrlist.put("exEndTermMarks", super.commonHelper.doubleprefixdigit(e.getExEndTermMarks()));
						omrlist.put("exMidtermMarks", super.commonHelper.doubleprefixdigit(e.getExMidTermMarks()));
						omrlist.put("internalmarks", super.commonHelper.doubleprefixdigit(internaltotal));
						omrlist.put("practicaltotal", super.commonHelper.doubleprefixdigit(practicaltotal));

						omrlist.put("exTotalMarks",
								super.commonHelper.doubleprefixdigit(
										internaltotal + (e.getExEndTermMarks() == null ? 0 : e.getExEndTermMarks())
												+ (e.getExMidTermMarks() == null ? 0 : e.getExMidTermMarks())));
					}


					omrlist.put("exQuizMarks", super.commonHelper.doubleprefixdigit(e.getExQuizMarks()));
					omrlist.put("exAssignmentMarks", super.commonHelper.doubleprefixdigit(e.getExAssignmentMarks()));
					omrlist.put("exAttendenceMarks", super.commonHelper.doubleprefixdigit(e.getExAttendenceMarks()));
					omrlist.put("exCaseStudyMarks", super.commonHelper.doubleprefixdigit(e.getExCaseStudy()));
					
					List<MidTermMarks> internlm = super.midtermmarksMarks
							.findByStudentadmissionIdAndCoursesIdAndExIsActiveAndExIsDelete(task.get().getId(),
									e.getCourses().getId(), true, false);

					if (internlm.size() <= 0) {
						omrlist.put("exTotalMidterm", "NA");
					} else {

						omrlist.put("exTotalMidterm", commonHelper.doubleprefixdigit(internlm.get(0).getExMidTermMarks()));
					}

					List<ExamBarcodes> external = super.exambarcode
							.findByExIsActiveAndExIsDeleteAndStudentadmissionIdAndCoursesId(true, false,
									task.get().getId(), e.getCourses().getId());

					if (external.size() <= 0) {
						omrlist.put("exEndTermTotalMarks", "NA");

					} else {
						omrlist.put("exEndTermTotalMarks",
								commonHelper.doubleprefixdigit(external.get(0).getExEndTermMarks()));
					}

					omrlist.put("exCreditHour", e.getCourses().getCreditHours().getExCreditHourTitle());
					omrlist.put("id", e.getCourses().getId());
					omrlist.put("exGrandTotal", super.commonHelper.doubleprefixdigit(e.getExGrandTotal()));
					omrlist.put("lettergrade", e.getExLetterGrades());
					omrlist.put("exGradePoint", (int)e.getExGradePoint().intValue());
					omrlist.put("exCoursesCode", e.getCourses().getExCoursesCode());
					omrlist.put("exRemark", e.getExRemark());
					omrlist.put("exName", e.getCourses().getExName());
					theory3rdsem = theory3rdsem + (int) (e.getCourses().getCreditHours().getExCreditHourLecture().intValue());

					pract3rdsem = pract3rdsem + (int) (e.getCourses().getCreditHours().getExCreditHourPractical().intValue());
					dataList3rdsem.add(omrlist);
				}

				info.put("status3rdsem", "1");
				info.put("message3rdsem", "success");
				info.put("message3rdsem", "Third Semester Result");
				info.put("detailsOf3rdsem", dataList3rdsem);
				// get the SGPA / CGPA
				List<SemesterProgressReport> taskss3rdsem = super.semesterProgressReport
						.findByStudentadmissionIdAndProgrammeYearIdAndSemesterId(task.get().getId(),
								grade3rdsem.get(0).getProgrammeYear().getId(), grade3rdsem.get(0).getSemester().getId());
				if (taskss3rdsem.size() <= 0) {
					info.put("sgpa3rdsem", "NA");
					info.put("cgpa3rdsem", "NA");
					info.put("totalCreditHour3rdsem", "NA");
				} else {
					info.put("sgpa3rdsem", taskss3rdsem.get(0).getExGradePointAv());
					if (taskss3rdsem.get(0).getStudentadmission().getBatch().getId() == 8
							|| taskss3rdsem.get(0).getStudentadmission().getBatch().getId() == 7) {
						info.put("cgpa3rdsem", taskss3rdsem.get(0).getExCamuGradePointAv());
					} else {
						info.put("cgpa3rdsem",taskss3rdsem.get(0).getExCamuGradePointAv() );
					}

					info.put("totalCreditHour3rdsem", theory3rdsem + "+" + pract3rdsem);
					info.put("Semester3rd", sem.get(2).getId());
					info.put("Semester3rdName",sem.get(2).getExName());
					info.put("Marksheet3rdsem", (taskss3rdsem.get(0).getMarksheetPath() == null || taskss3rdsem.get(0).getMarksheetPath() == "NA")?"NA" :serverurl+taskss3rdsem.get(0).getMarksheetPath());
			
				}
				}
				
				//================================
				ArrayList<Object[]> list4  = super.semesterRegistration.NoDuesDetails( sem.get(3).getId() ,task.get().getId());
				{
					List Lists4 =  new LinkedList();
					for(Object[] f: list4) {
						Map<Object, Object> NoDues = new HashMap<Object, Object>();
						NoDues.put("id",f[0] );
						NoDues.put("Amount",f[1] );
						NoDues.put("Remark",f[2] );
						NoDues.put("approveType",f[3] );
						NoDues.put("isPaid",f[4] );
						Lists4.add(NoDues);
					}
				info.put("NoDuesstatus4", "1");
				info.put("NoDues4", "success");
				info.put("detailsNoDues4", Lists4);
				}
				
				
				List<GradeReport> grade4thsem = super.gradeReport.findBySemesterIdAndStudentadmissionIdAndExIsActiveOrderByCoursesId(
						sem.get(3).getId(), task.get().getId() ,true);
				if (grade4thsem.size() <= 0) {
					info.put("status4", "2");
					info.put("message4", "4th Semester Result not Announced");
					return info;
				}else {
				int theory4thsem = 0;
				int pract4thsem = 0;

				List dataList4thsem = new LinkedList();
				for (GradeReport e : grade4thsem) {
					double internaltotal = 0.0, practicaltotal = 0.0;
					Double totalmarks = 0.0;

					Map<Object, Object> omrlist = new HashMap<Object, Object>();
					if (e.getCourses().getCoursesType().size() == 1) {

						if (e.getCourses().getCoursesType().get(0).getId() == 1) {
							internaltotal = (e.getExQuizMarks() == null ? 0
									: e.getExQuizMarks() + (e.getExAssignmentMarks() == null ? 0 : e.getExAssignmentMarks())
											+ (e.getExAttendenceMarks() == null ? 0 : e.getExAttendenceMarks())
											+ (e.getExCaseStudy() == null ? 0 : e.getExCaseStudy()));

							omrlist.put("exEndTermMarks", super.commonHelper.doubleprefixdigit(e.getExEndTermMarks()));
							omrlist.put("exMidtermMarks", super.commonHelper.doubleprefixdigit(e.getExMidTermMarks()));
							omrlist.put("internalmarks", super.commonHelper.doubleprefixdigit(internaltotal));
							omrlist.put("practicaltotal", "NA");

							omrlist.put("exTotalMarks",
									super.commonHelper.doubleprefixdigit(
											internaltotal + (e.getExEndTermMarks() == null ? 0 : e.getExEndTermMarks())
													+ (e.getExMidTermMarks() == null ? 0 : e.getExMidTermMarks())));
						}
						if (e.getCourses().getCoursesType().get(0).getId() == 2) {
							practicaltotal = e.getExPracticalInternalMarks() == null ? 0
									: e.getExPracticalInternalMarks() + (e.getExPracticalExternalMarks() == null ? 0
											: e.getExPracticalExternalMarks());
							omrlist.put("practicaltotal", super.commonHelper.doubleprefixdigit(practicaltotal));
							omrlist.put("exEndTermMarks", "NA");
							omrlist.put("exMidtermMarks", "NA");
							omrlist.put("internalmarks", "NA");
							omrlist.put("exTotalMarks", "NA");
						}
					}

					if (e.getCourses().getCoursesType().size() == 2) {
						practicaltotal = (e.getExPracticalInternalMarks() == null ? 0 : e.getExPracticalInternalMarks())
								+ (e.getExPracticalExternalMarks() == null ? 0 : e.getExPracticalExternalMarks());
						internaltotal = (e.getExQuizMarks() == null ? 0
								: e.getExQuizMarks() + (e.getExAssignmentMarks() == null ? 0 : e.getExAssignmentMarks())
										+ (e.getExAttendenceMarks() == null ? 0 : e.getExAttendenceMarks())
										+ (e.getExCaseStudy() == null ? 0 : e.getExCaseStudy()));
						omrlist.put("exEndTermMarks", super.commonHelper.doubleprefixdigit(e.getExEndTermMarks()));
						omrlist.put("exMidtermMarks", super.commonHelper.doubleprefixdigit(e.getExMidTermMarks()));
						omrlist.put("internalmarks", super.commonHelper.doubleprefixdigit(internaltotal));
						omrlist.put("practicaltotal", super.commonHelper.doubleprefixdigit(practicaltotal));

						omrlist.put("exTotalMarks",
								super.commonHelper.doubleprefixdigit(
										internaltotal + (e.getExEndTermMarks() == null ? 0 : e.getExEndTermMarks())
												+ (e.getExMidTermMarks() == null ? 0 : e.getExMidTermMarks())));
					}


					omrlist.put("exQuizMarks", super.commonHelper.doubleprefixdigit(e.getExQuizMarks()));
					omrlist.put("exAssignmentMarks", super.commonHelper.doubleprefixdigit(e.getExAssignmentMarks()));
					omrlist.put("exAttendenceMarks", super.commonHelper.doubleprefixdigit(e.getExAttendenceMarks()));
					omrlist.put("exCaseStudyMarks", super.commonHelper.doubleprefixdigit(e.getExCaseStudy()));
					
					List<MidTermMarks> internlm = super.midtermmarksMarks
							.findByStudentadmissionIdAndCoursesIdAndExIsActiveAndExIsDelete(task.get().getId(),
									e.getCourses().getId(), true, false);

					if (internlm.size() <= 0) {
						omrlist.put("exTotalMidterm", "NA");
					} else {

						omrlist.put("exTotalMidterm", commonHelper.doubleprefixdigit(internlm.get(0).getExMidTermMarks()));
					}

					List<ExamBarcodes> external = super.exambarcode
							.findByExIsActiveAndExIsDeleteAndStudentadmissionIdAndCoursesId(true, false,
									task.get().getId(), e.getCourses().getId());

					if (external.size() <= 0) {
						omrlist.put("exEndTermTotalMarks", "NA");

					} else {
						omrlist.put("exEndTermTotalMarks",
								commonHelper.doubleprefixdigit(external.get(0).getExEndTermMarks()));
					}

					omrlist.put("exCreditHour", e.getCourses().getCreditHours().getExCreditHourTitle());
					omrlist.put("id", e.getCourses().getId());
					omrlist.put("exGrandTotal", super.commonHelper.doubleprefixdigit(e.getExGrandTotal()));
					omrlist.put("lettergrade", e.getExLetterGrades());
					omrlist.put("exGradePoint",(int) e.getExGradePoint().intValue());
					omrlist.put("exCoursesCode", e.getCourses().getExCoursesCode());
					omrlist.put("exRemark", e.getExRemark());
					omrlist.put("exName", e.getCourses().getExName());
					theory4thsem = theory4thsem + (int) (e.getCourses().getCreditHours().getExCreditHourLecture().intValue());

					pract4thsem = pract4thsem + (int) (e.getCourses().getCreditHours().getExCreditHourPractical().intValue());
					dataList4thsem.add(omrlist);
				}

				info.put("status4thsem", "1");
				info.put("message4thsem", "success");
				info.put("message4thsem", "Fourth Semester Result");
				info.put("detailsOf4thsem", dataList4thsem);
				// get the SGPA / CGPA
				List<SemesterProgressReport> taskss4thsem = super.semesterProgressReport
						.findByStudentadmissionIdAndProgrammeYearIdAndSemesterId(task.get().getId(),
								grade4thsem.get(0).getProgrammeYear().getId(), grade4thsem.get(0).getSemester().getId());
				if (taskss4thsem.size() <= 0) {
					info.put("sgpa4thsem", "NA");
					info.put("cgpa4thsem", "NA");
					info.put("totalCreditHour4thsem", "NA");
				} else {
					info.put("sgpa4thsem", taskss4thsem.get(0).getExGradePointAv());
					if (taskss4thsem.get(0).getStudentadmission().getBatch().getId() == 8
							|| taskss4thsem.get(0).getStudentadmission().getBatch().getId() == 7) {
						info.put("cgpa4thsem", taskss4thsem.get(0).getExCamuGradePointAv());
					} else {
						info.put("cgpa4thsem",taskss4thsem.get(0).getExCamuGradePointAv() );
					}

					info.put("totalCreditHour4thsem", theory4thsem + "+" + pract4thsem);
					info.put("Semester4th", sem.get(3).getId());
					info.put("Semester4thName",sem.get(3).getExName());
					info.put("Marksheet4thsem", (taskss4thsem.get(0).getMarksheetPath() == null || taskss4thsem.get(0).getMarksheetPath() == "NA")?"NA" :serverurl+taskss4thsem.get(0).getMarksheetPath());
			
					
				}
				}
				//========================================
				ArrayList<Object[]> list5  = super.semesterRegistration.NoDuesDetails( sem.get(4).getId() ,task.get().getId());
				{
					List Lists5 =  new LinkedList();
					for(Object[] f: list5) {
						Map<Object, Object> NoDues = new HashMap<Object, Object>();
						NoDues.put("id",f[0] );
						NoDues.put("Amount",f[1] );
						NoDues.put("Remark",f[2] );
						NoDues.put("approveType",f[3] );
						NoDues.put("isPaid",f[4] );
						Lists5.add(NoDues);
					}
				info.put("NoDuesstatus5", "1");
				info.put("NoDues5", "success");
				info.put("detailsNoDues5", Lists5);
				}
				
				
				
			List<GradeReport> grade5thsem = super.gradeReport.findBySemesterIdAndStudentadmissionIdAndExIsActiveOrderByCoursesId(
						sem.get(4).getId(), task.get().getId() ,true);
				if (grade5thsem.size() <= 0) {
					info.put("status4", "2");
					info.put("message4", "5th Semester Result not Announced");
					return info;
				}else {
				int theory5thsem = 0;
				int pract5thsem = 0;

				List dataList5thsem = new LinkedList();
				for (GradeReport e : grade5thsem) {
					double internaltotal = 0.0, practicaltotal = 0.0;
					Double totalmarks = 0.0;

					Map<Object, Object> omrlist = new HashMap<Object, Object>();
					if (e.getCourses().getCoursesType().size() == 1) {

						if (e.getCourses().getCoursesType().get(0).getId() == 1) {
							internaltotal = (e.getExQuizMarks() == null ? 0
									: e.getExQuizMarks() + (e.getExAssignmentMarks() == null ? 0 : e.getExAssignmentMarks())
											+ (e.getExAttendenceMarks() == null ? 0 : e.getExAttendenceMarks())
											+ (e.getExCaseStudy() == null ? 0 : e.getExCaseStudy()));

							omrlist.put("exEndTermMarks", super.commonHelper.doubleprefixdigit(e.getExEndTermMarks()));
							omrlist.put("exMidtermMarks", super.commonHelper.doubleprefixdigit(e.getExMidTermMarks()));
							omrlist.put("internalmarks", super.commonHelper.doubleprefixdigit(internaltotal));
							omrlist.put("practicaltotal", "NA");

							omrlist.put("exTotalMarks",
									super.commonHelper.doubleprefixdigit(
											internaltotal + (e.getExEndTermMarks() == null ? 0 : e.getExEndTermMarks())
													+ (e.getExMidTermMarks() == null ? 0 : e.getExMidTermMarks())));
						}
						if (e.getCourses().getCoursesType().get(0).getId() == 2) {
							practicaltotal = e.getExPracticalInternalMarks() == null ? 0
									: e.getExPracticalInternalMarks() + (e.getExPracticalExternalMarks() == null ? 0
											: e.getExPracticalExternalMarks());
							omrlist.put("practicaltotal", super.commonHelper.doubleprefixdigit(practicaltotal));
							omrlist.put("exEndTermMarks", "NA");
							omrlist.put("exMidtermMarks", "NA");
							omrlist.put("internalmarks", "NA");
							omrlist.put("exTotalMarks", "NA");
						}
					}

					if (e.getCourses().getCoursesType().size() == 2) {
						practicaltotal = (e.getExPracticalInternalMarks() == null ? 0 : e.getExPracticalInternalMarks())
								+ (e.getExPracticalExternalMarks() == null ? 0 : e.getExPracticalExternalMarks());
						internaltotal = (e.getExQuizMarks() == null ? 0
								: e.getExQuizMarks() + (e.getExAssignmentMarks() == null ? 0 : e.getExAssignmentMarks())
										+ (e.getExAttendenceMarks() == null ? 0 : e.getExAttendenceMarks())
										+ (e.getExCaseStudy() == null ? 0 : e.getExCaseStudy()));
						omrlist.put("exEndTermMarks", super.commonHelper.doubleprefixdigit(e.getExEndTermMarks()));
						omrlist.put("exMidtermMarks", super.commonHelper.doubleprefixdigit(e.getExMidTermMarks()));
						omrlist.put("internalmarks", super.commonHelper.doubleprefixdigit(internaltotal));
						omrlist.put("practicaltotal", super.commonHelper.doubleprefixdigit(practicaltotal));

						omrlist.put("exTotalMarks",
								super.commonHelper.doubleprefixdigit(
										internaltotal + (e.getExEndTermMarks() == null ? 0 : e.getExEndTermMarks())
												+ (e.getExMidTermMarks() == null ? 0 : e.getExMidTermMarks())));
					}


					omrlist.put("exQuizMarks", super.commonHelper.doubleprefixdigit(e.getExQuizMarks()));
					omrlist.put("exAssignmentMarks", super.commonHelper.doubleprefixdigit(e.getExAssignmentMarks()));
					omrlist.put("exAttendenceMarks", super.commonHelper.doubleprefixdigit(e.getExAttendenceMarks()));
					omrlist.put("exCaseStudyMarks", super.commonHelper.doubleprefixdigit(e.getExCaseStudy()));
					
					
					List<MidTermMarks> internlm = super.midtermmarksMarks
							.findByStudentadmissionIdAndCoursesIdAndExIsActiveAndExIsDelete(task.get().getId(),
									e.getCourses().getId(), true, false);

					if (internlm.size() <= 0) {
						omrlist.put("exTotalMidterm", "NA");
					} else {

						omrlist.put("exTotalMidterm", commonHelper.doubleprefixdigit(internlm.get(0).getExMidTermMarks()));
					}

					List<ExamBarcodes> external = super.exambarcode
							.findByExIsActiveAndExIsDeleteAndStudentadmissionIdAndCoursesId(true, false,
									task.get().getId(), e.getCourses().getId());

					if (external.size() <= 0) {
						omrlist.put("exEndTermTotalMarks", "NA");

					} else {
						omrlist.put("exEndTermTotalMarks",
								commonHelper.doubleprefixdigit(external.get(0).getExEndTermMarks()));
					}

					omrlist.put("exCreditHour", e.getCourses().getCreditHours().getExCreditHourTitle());
					omrlist.put("id", e.getCourses().getId());
					omrlist.put("exGrandTotal", super.commonHelper.doubleprefixdigit(e.getExGrandTotal()));
					omrlist.put("lettergrade", e.getExLetterGrades());
					omrlist.put("exGradePoint", (int)e.getExGradePoint().intValue());
					omrlist.put("exCoursesCode", e.getCourses().getExCoursesCode());
					omrlist.put("exRemark", e.getExRemark());
					omrlist.put("exName", e.getCourses().getExName());
					theory5thsem = theory5thsem + (int) (e.getCourses().getCreditHours().getExCreditHourLecture().intValue());

					pract5thsem = pract5thsem + (int) (e.getCourses().getCreditHours().getExCreditHourPractical().intValue());
					dataList5thsem.add(omrlist);
				}

				info.put("status5thsem", "1");
				info.put("message5thsem", "success");
				info.put("message5thsem", "Fifth Semester Result");
				info.put("detailsOf5thsem", dataList5thsem);
				// SGPA / CGPA of 5th semester
				List<SemesterProgressReport> taskss5thsem = super.semesterProgressReport
						.findByStudentadmissionIdAndProgrammeYearIdAndSemesterId(task.get().getId(),
								grade5thsem.get(0).getProgrammeYear().getId(), grade5thsem.get(0).getSemester().getId());
				if (taskss5thsem.size() <= 0) {
					info.put("sgpa5thsem", "NA");
					info.put("cgpa5thsem", "NA");
					info.put("totalCreditHour5thsem", "NA");
				} else {
					info.put("sgpa5thsem", taskss5thsem.get(0).getExGradePointAv());
					if (taskss5thsem.get(0).getStudentadmission().getBatch().getId() == 8
							|| taskss5thsem.get(0).getStudentadmission().getBatch().getId() == 7) {
						info.put("cgpa5thsem", taskss5thsem.get(0).getExCamuGradePointAv());
					} else {
						info.put("cgpa5thsem",taskss5thsem.get(0).getExCamuGradePointAv() );
					}

					info.put("totalCreditHour5thsem", theory5thsem + "+" + pract5thsem);
					info.put("Semester5th", sem.get(4).getId());
					info.put("Semester5thName",sem.get(4).getExName());
					info.put("Marksheet5thsem", (taskss5thsem.get(0).getMarksheetPath() == null || taskss5thsem.get(0).getMarksheetPath() == "NA")?"NA" :serverurl+taskss5thsem.get(0).getMarksheetPath());
			
					
				}
				}
				//=================================
				
				ArrayList<Object[]> list6  = super.semesterRegistration.NoDuesDetails( sem.get(5).getId() ,task.get().getId());
				{
					List Lists6 =  new LinkedList();
					for(Object[] f: list6) {
						Map<Object, Object> NoDues = new HashMap<Object, Object>();
						NoDues.put("id",f[0] );
						NoDues.put("Amount",f[1] );
						NoDues.put("Remark",f[2] );
						NoDues.put("approveType",f[3] );
						NoDues.put("isPaid",f[4] );
						Lists6.add(NoDues);
					}
				info.put("NoDuesstatus6", "1");
				info.put("NoDues6", "success");
				info.put("detailsNoDues6", Lists6);
				}
				
				
				
				List<GradeReport> grade6thsem = super.gradeReport.findBySemesterIdAndStudentadmissionIdAndExIsActiveOrderByCoursesId(
						sem.get(5).getId(), task.get().getId() ,true);
				if (grade6thsem.size() <= 0) {
					info.put("status6", "2");
					info.put("message6", "6th Semester Result not Announced");
					return info;
				}else {
				int theory6thsem = 0;
				int pract6thsem = 0;

				List dataList6thsem = new LinkedList();
				for (GradeReport e : grade6thsem) {
					double internaltotal = 0.0, practicaltotal = 0.0;
					Double totalmarks = 0.0;

					Map<Object, Object> omrlist = new HashMap<Object, Object>();
					if (e.getCourses().getCoursesType().size() == 1) {

						if (e.getCourses().getCoursesType().get(0).getId() == 1) {
							internaltotal = (e.getExQuizMarks() == null ? 0
									: e.getExQuizMarks() + (e.getExAssignmentMarks() == null ? 0 : e.getExAssignmentMarks())
											+ (e.getExAttendenceMarks() == null ? 0 : e.getExAttendenceMarks())
											+ (e.getExCaseStudy() == null ? 0 : e.getExCaseStudy()));

							omrlist.put("exEndTermMarks", super.commonHelper.doubleprefixdigit(e.getExEndTermMarks()));
							omrlist.put("exMidtermMarks", super.commonHelper.doubleprefixdigit(e.getExMidTermMarks()));
							omrlist.put("internalmarks", super.commonHelper.doubleprefixdigit(internaltotal));
							omrlist.put("practicaltotal", "NA");

							omrlist.put("exTotalMarks",
									super.commonHelper.doubleprefixdigit(
											internaltotal + (e.getExEndTermMarks() == null ? 0 : e.getExEndTermMarks())
													+ (e.getExMidTermMarks() == null ? 0 : e.getExMidTermMarks())));
						}
						if (e.getCourses().getCoursesType().get(0).getId() == 2) {
							practicaltotal = e.getExPracticalInternalMarks() == null ? 0
									: e.getExPracticalInternalMarks() + (e.getExPracticalExternalMarks() == null ? 0
											: e.getExPracticalExternalMarks());
							omrlist.put("practicaltotal", super.commonHelper.doubleprefixdigit(practicaltotal));
							omrlist.put("exEndTermMarks", "NA");
							omrlist.put("exMidtermMarks", "NA");
							omrlist.put("internalmarks", "NA");
							omrlist.put("exTotalMarks", "NA");
						}
					}

					if (e.getCourses().getCoursesType().size() == 2) {
						practicaltotal = (e.getExPracticalInternalMarks() == null ? 0 : e.getExPracticalInternalMarks())
								+ (e.getExPracticalExternalMarks() == null ? 0 : e.getExPracticalExternalMarks());
						internaltotal = (e.getExQuizMarks() == null ? 0
								: e.getExQuizMarks() + (e.getExAssignmentMarks() == null ? 0 : e.getExAssignmentMarks())
										+ (e.getExAttendenceMarks() == null ? 0 : e.getExAttendenceMarks())
										+ (e.getExCaseStudy() == null ? 0 : e.getExCaseStudy()));
						omrlist.put("exEndTermMarks", super.commonHelper.doubleprefixdigit(e.getExEndTermMarks()));
						omrlist.put("exMidtermMarks", super.commonHelper.doubleprefixdigit(e.getExMidTermMarks()));
						omrlist.put("internalmarks", super.commonHelper.doubleprefixdigit(internaltotal));
						omrlist.put("practicaltotal", super.commonHelper.doubleprefixdigit(practicaltotal));

						omrlist.put("exTotalMarks",
								super.commonHelper.doubleprefixdigit(
										internaltotal + (e.getExEndTermMarks() == null ? 0 : e.getExEndTermMarks())
												+ (e.getExMidTermMarks() == null ? 0 : e.getExMidTermMarks())));
					}

					

					omrlist.put("exQuizMarks", super.commonHelper.doubleprefixdigit(e.getExQuizMarks()));
					omrlist.put("exAssignmentMarks", super.commonHelper.doubleprefixdigit(e.getExAssignmentMarks()));
					omrlist.put("exAttendenceMarks", super.commonHelper.doubleprefixdigit(e.getExAttendenceMarks()));
					omrlist.put("exCaseStudyMarks", super.commonHelper.doubleprefixdigit(e.getExCaseStudy()));
					
					List<MidTermMarks> internlm = super.midtermmarksMarks
							.findByStudentadmissionIdAndCoursesIdAndExIsActiveAndExIsDelete(task.get().getId(),
									e.getCourses().getId(), true, false);

					if (internlm.size() <= 0) {
						omrlist.put("exTotalMidterm", "NA");
					} else {

						omrlist.put("exTotalMidterm", commonHelper.doubleprefixdigit(internlm.get(0).getExMidTermMarks()));
					}

					List<ExamBarcodes> external = super.exambarcode
							.findByExIsActiveAndExIsDeleteAndStudentadmissionIdAndCoursesId(true, false,
									task.get().getId(), e.getCourses().getId());

					if (external.size() <= 0) {
						omrlist.put("exEndTermTotalMarks", "NA");

					} else {
						omrlist.put("exEndTermTotalMarks",
								commonHelper.doubleprefixdigit(external.get(0).getExEndTermMarks()));
					}

					omrlist.put("exCreditHour", e.getCourses().getCreditHours().getExCreditHourTitle());
					omrlist.put("id", e.getCourses().getId());
					omrlist.put("exGrandTotal", super.commonHelper.doubleprefixdigit(e.getExGrandTotal()));
					omrlist.put("lettergrade", e.getExLetterGrades());
					omrlist.put("exGradePoint", (int)e.getExGradePoint().intValue());
					omrlist.put("exCoursesCode", e.getCourses().getExCoursesCode());
					omrlist.put("exRemark", e.getExRemark());
					omrlist.put("exName", e.getCourses().getExName());
					theory6thsem = theory6thsem + (int) (e.getCourses().getCreditHours().getExCreditHourLecture().intValue());

					pract6thsem = pract6thsem + (int) (e.getCourses().getCreditHours().getExCreditHourPractical().intValue());
					dataList6thsem.add(omrlist);
				}

				info.put("status6thsem", "1");
				info.put("message6thsem", "success");
				info.put("message6thsem", "Six Semester Result");
				info.put("detailsOf6thsem", dataList6thsem);
				// SGPA / CGPA of 6th semester
				List<SemesterProgressReport> taskss6thsem = super.semesterProgressReport
						.findByStudentadmissionIdAndProgrammeYearIdAndSemesterId(task.get().getId(),
								grade6thsem.get(0).getProgrammeYear().getId(), grade6thsem.get(0).getSemester().getId());
				if (taskss6thsem.size() <= 0) {
					info.put("sgpa6thsem", "NA");
					info.put("cgpa6thsem", "NA");
					info.put("totalCreditHour6thsem", "NA");
				} else {
					info.put("sgpa6thsem", taskss6thsem.get(0).getExGradePointAv());
					if (taskss6thsem.get(0).getStudentadmission().getBatch().getId() == 8
							|| taskss6thsem.get(0).getStudentadmission().getBatch().getId() == 7) {
						info.put("cgpa6thsem", taskss6thsem.get(0).getExCamuGradePointAv());
					} else {
						info.put("cgpa6thsem",taskss6thsem.get(0).getExCamuGradePointAv() );
					}

					info.put("totalCreditHour6thsem", theory6thsem + "+" + pract6thsem);
					info.put("Semester6th", sem.get(5).getId());
					info.put("Semester6thName",sem.get(5).getExName());
					info.put("Marksheet6thsem", (taskss6thsem.get(0).getMarksheetPath() == null || taskss6thsem.get(0).getMarksheetPath() == "NA")?"NA" :serverurl+taskss6thsem.get(0).getMarksheetPath());
			
					
				}
				}
				//=================================
				
				ArrayList<Object[]> list7  = super.semesterRegistration.NoDuesDetails( sem.get(6).getId() ,task.get().getId());
				{
					List Lists7 =  new LinkedList();
					for(Object[] f: list7) {
						Map<Object, Object> NoDues = new HashMap<Object, Object>();
						NoDues.put("id",f[0] );
						NoDues.put("Amount",f[1] );
						NoDues.put("Remark",f[2] );
						NoDues.put("approveType",f[3] );
						NoDues.put("isPaid",f[4] );
						Lists7.add(NoDues);
					}
				info.put("NoDuesstatus7", "1");
				info.put("NoDues7", "success");
				info.put("detailsNoDues7", Lists7);
				}
				
				List<GradeReport> grade7thsem = super.gradeReport.findBySemesterIdAndStudentadmissionIdAndExIsActiveOrderByCoursesId(
						sem.get(6).getId(), task.get().getId() , true);
				if (grade7thsem.size() <= 0) {
					info.put("status7", "2");
					info.put("message7", "7th Semester Result not Announced");
					return info;
				}else {
				int theory7thsem = 0;
				int pract7thsem = 0;

				List dataList7thsem = new LinkedList();
				for (GradeReport e : grade7thsem) {
					double internaltotal = 0.0, practicaltotal = 0.0;
					Double totalmarks = 0.0;

					Map<Object, Object> omrlist = new HashMap<Object, Object>();
					if (e.getCourses().getCoursesType().size() == 1) {

						if (e.getCourses().getCoursesType().get(0).getId() == 1) {
							internaltotal = (e.getExQuizMarks() == null ? 0
									: e.getExQuizMarks() + (e.getExAssignmentMarks() == null ? 0 : e.getExAssignmentMarks())
											+ (e.getExAttendenceMarks() == null ? 0 : e.getExAttendenceMarks())
											+ (e.getExCaseStudy() == null ? 0 : e.getExCaseStudy()));

							omrlist.put("exEndTermMarks", super.commonHelper.doubleprefixdigit(e.getExEndTermMarks()));
							omrlist.put("exMidtermMarks", super.commonHelper.doubleprefixdigit(e.getExMidTermMarks()));
							omrlist.put("internalmarks", super.commonHelper.doubleprefixdigit(internaltotal));
							omrlist.put("practicaltotal", "NA");

							omrlist.put("exTotalMarks",
									super.commonHelper.doubleprefixdigit(
											internaltotal + (e.getExEndTermMarks() == null ? 0 : e.getExEndTermMarks())
													+ (e.getExMidTermMarks() == null ? 0 : e.getExMidTermMarks())));
						}
						if (e.getCourses().getCoursesType().get(0).getId() == 2) {
							practicaltotal = e.getExPracticalInternalMarks() == null ? 0
									: e.getExPracticalInternalMarks() + (e.getExPracticalExternalMarks() == null ? 0
											: e.getExPracticalExternalMarks());
							omrlist.put("practicaltotal", super.commonHelper.doubleprefixdigit(practicaltotal));
							omrlist.put("exEndTermMarks", "NA");
							omrlist.put("exMidtermMarks", "NA");
							omrlist.put("internalmarks", "NA");
							omrlist.put("exTotalMarks", "NA");
						}
					}

					if (e.getCourses().getCoursesType().size() == 2) {
						practicaltotal = (e.getExPracticalInternalMarks() == null ? 0 : e.getExPracticalInternalMarks())
								+ (e.getExPracticalExternalMarks() == null ? 0 : e.getExPracticalExternalMarks());
						internaltotal = (e.getExQuizMarks() == null ? 0
								: e.getExQuizMarks() + (e.getExAssignmentMarks() == null ? 0 : e.getExAssignmentMarks())
										+ (e.getExAttendenceMarks() == null ? 0 : e.getExAttendenceMarks())
										+ (e.getExCaseStudy() == null ? 0 : e.getExCaseStudy()));
						omrlist.put("exEndTermMarks", super.commonHelper.doubleprefixdigit(e.getExEndTermMarks()));
						omrlist.put("exMidtermMarks", super.commonHelper.doubleprefixdigit(e.getExMidTermMarks()));
						omrlist.put("internalmarks", super.commonHelper.doubleprefixdigit(internaltotal));
						omrlist.put("practicaltotal", super.commonHelper.doubleprefixdigit(practicaltotal));

						omrlist.put("exTotalMarks",
								super.commonHelper.doubleprefixdigit(
										internaltotal + (e.getExEndTermMarks() == null ? 0 : e.getExEndTermMarks())
												+ (e.getExMidTermMarks() == null ? 0 : e.getExMidTermMarks())));
					}

					

					omrlist.put("exQuizMarks", super.commonHelper.doubleprefixdigit(e.getExQuizMarks()));
					omrlist.put("exAssignmentMarks", super.commonHelper.doubleprefixdigit(e.getExAssignmentMarks()));
					omrlist.put("exAttendenceMarks", super.commonHelper.doubleprefixdigit(e.getExAttendenceMarks()));
					omrlist.put("exCaseStudyMarks", super.commonHelper.doubleprefixdigit(e.getExCaseStudy()));
					
					List<MidTermMarks> internlm = super.midtermmarksMarks
							.findByStudentadmissionIdAndCoursesIdAndExIsActiveAndExIsDelete(task.get().getId(),
									e.getCourses().getId(), true, false);

					if (internlm.size() <= 0) {
						omrlist.put("exTotalMidterm", "NA");
					} else {

						omrlist.put("exTotalMidterm", commonHelper.doubleprefixdigit(internlm.get(0).getExMidTermMarks()));
					}

					List<ExamBarcodes> external = super.exambarcode
							.findByExIsActiveAndExIsDeleteAndStudentadmissionIdAndCoursesId(true, false,
									task.get().getId(), e.getCourses().getId());

					if (external.size() <= 0) {
						omrlist.put("exEndTermTotalMarks", "NA");

					} else {
						omrlist.put("exEndTermTotalMarks",
								commonHelper.doubleprefixdigit(external.get(0).getExEndTermMarks()));
					}

					omrlist.put("exCreditHour", e.getCourses().getCreditHours().getExCreditHourTitle());
					omrlist.put("id", e.getCourses().getId());
					omrlist.put("exGrandTotal", super.commonHelper.doubleprefixdigit(e.getExGrandTotal()));
					omrlist.put("lettergrade", e.getExLetterGrades());
					omrlist.put("exGradePoint", (int)e.getExGradePoint().intValue());
					omrlist.put("exCoursesCode", e.getCourses().getExCoursesCode());
					omrlist.put("exRemark", e.getExRemark());
					omrlist.put("exName", e.getCourses().getExName());
					theory7thsem = theory7thsem + (int) (e.getCourses().getCreditHours().getExCreditHourLecture().intValue());

					pract7thsem = pract7thsem + (int) (e.getCourses().getCreditHours().getExCreditHourPractical().intValue());
					dataList7thsem.add(omrlist);
				}

				info.put("status7thsem", "1");
				info.put("message7thsem", "success");
				info.put("message7thsem", "Seven Semester Result");
				info.put("detailsOf7thsem", dataList7thsem);
				// SGPA / CGPA of 7th semester
				List<SemesterProgressReport> taskss7thsem = super.semesterProgressReport
						.findByStudentadmissionIdAndProgrammeYearIdAndSemesterId(task.get().getId(),
								grade7thsem.get(0).getProgrammeYear().getId(), grade7thsem.get(0).getSemester().getId());
				if (taskss7thsem.size() <= 0) {
					info.put("sgpa7thsem", "NA");
					info.put("cgpa7thsem", "NA");
					info.put("totalCreditHour7thsem", "NA");
				} else {
					info.put("sgpa7thsem", taskss7thsem.get(0).getExGradePointAv());
					if (taskss7thsem.get(0).getStudentadmission().getBatch().getId() == 8
							|| taskss7thsem.get(0).getStudentadmission().getBatch().getId() == 7) {
						info.put("cgpa7thsem", taskss7thsem.get(0).getExCamuGradePointAv());
					} else {
						info.put("cgpa7thsem",taskss7thsem.get(0).getExCamuGradePointAv() );
					}

					info.put("totalCreditHour7thsem", theory7thsem + "+" + pract7thsem);
					info.put("SemesterId",sem.get(6).getId());
					info.put("SemesterName",sem.get(6).getExName());
					info.put("Marksheet7thsem", (taskss7thsem.get(0).getMarksheetPath() == null || taskss7thsem.get(0).getMarksheetPath() == "NA")?"NA" :serverurl+taskss7thsem.get(0).getMarksheetPath());
			
				}
				}
				//============================================
				ArrayList<Object[]> list8  = super.semesterRegistration.NoDuesDetails( sem.get(7).getId() ,task.get().getId());
				{
					List Lists8 =  new LinkedList();
					for(Object[] f: list8) {
						Map<Object, Object> NoDues = new HashMap<Object, Object>();
						NoDues.put("id",f[0] );
						NoDues.put("Amount",f[1] );
						NoDues.put("Remark",f[2] );
						NoDues.put("approveType",f[3] );
						NoDues.put("isPaid",f[4] );
						Lists8.add(NoDues);
					}
				info.put("NoDuesstatus8", "1");
				info.put("NoDues8", "success");
				info.put("detailsNoDues8", Lists8);
				}
				
				
				List<GradeReport> grade8thsem = super.gradeReport.findBySemesterIdAndStudentadmissionIdAndExIsActiveOrderByCoursesId(
						sem.get(7).getId(), task.get().getId() , true);
				if (grade8thsem.size() <= 0) {
					info.put("status8", "2");
					info.put("message8", "8th Semester Result not Announced");
					return info;
				}else {
				int theory8thsem = 0;
				int pract8thsem = 0;

				List dataList8thsem = new LinkedList();
				for (GradeReport e : grade8thsem) {
					double internaltotal = 0.0, practicaltotal = 0.0;
					Double totalmarks = 0.0;

					Map<Object, Object> omrlist = new HashMap<Object, Object>();
					if (e.getCourses().getCoursesType().size() == 1) {

						if (e.getCourses().getCoursesType().get(0).getId() == 1) {
							internaltotal = (e.getExQuizMarks() == null ? 0
									: e.getExQuizMarks() + (e.getExAssignmentMarks() == null ? 0 : e.getExAssignmentMarks())
											+ (e.getExAttendenceMarks() == null ? 0 : e.getExAttendenceMarks())
											+ (e.getExCaseStudy() == null ? 0 : e.getExCaseStudy()));

							omrlist.put("exEndTermMarks", super.commonHelper.doubleprefixdigit(e.getExEndTermMarks()));
							omrlist.put("exMidtermMarks", super.commonHelper.doubleprefixdigit(e.getExMidTermMarks()));
							omrlist.put("internalmarks", super.commonHelper.doubleprefixdigit(internaltotal));
							omrlist.put("practicaltotal", "NA");

							omrlist.put("exTotalMarks",
									super.commonHelper.doubleprefixdigit(
											internaltotal + (e.getExEndTermMarks() == null ? 0 : e.getExEndTermMarks())
													+ (e.getExMidTermMarks() == null ? 0 : e.getExMidTermMarks())));
						}
						if (e.getCourses().getCoursesType().get(0).getId() == 2) {
							practicaltotal = e.getExPracticalInternalMarks() == null ? 0
									: e.getExPracticalInternalMarks() + (e.getExPracticalExternalMarks() == null ? 0
											: e.getExPracticalExternalMarks());
							omrlist.put("practicaltotal", super.commonHelper.doubleprefixdigit(practicaltotal));
							omrlist.put("exEndTermMarks", "NA");
							omrlist.put("exMidtermMarks", "NA");
							omrlist.put("internalmarks", "NA");
							omrlist.put("exTotalMarks", "NA");
						}
					}

					if (e.getCourses().getCoursesType().size() == 2) {
						practicaltotal = (e.getExPracticalInternalMarks() == null ? 0 : e.getExPracticalInternalMarks())
								+ (e.getExPracticalExternalMarks() == null ? 0 : e.getExPracticalExternalMarks());
						internaltotal = (e.getExQuizMarks() == null ? 0
								: e.getExQuizMarks() + (e.getExAssignmentMarks() == null ? 0 : e.getExAssignmentMarks())
										+ (e.getExAttendenceMarks() == null ? 0 : e.getExAttendenceMarks())
										+ (e.getExCaseStudy() == null ? 0 : e.getExCaseStudy()));
						omrlist.put("exEndTermMarks", super.commonHelper.doubleprefixdigit(e.getExEndTermMarks()));
						omrlist.put("exMidtermMarks", super.commonHelper.doubleprefixdigit(e.getExMidTermMarks()));
						omrlist.put("internalmarks", super.commonHelper.doubleprefixdigit(internaltotal));
						omrlist.put("practicaltotal", super.commonHelper.doubleprefixdigit(practicaltotal));

						omrlist.put("exTotalMarks",
								super.commonHelper.doubleprefixdigit(
										internaltotal + (e.getExEndTermMarks() == null ? 0 : e.getExEndTermMarks())
												+ (e.getExMidTermMarks() == null ? 0 : e.getExMidTermMarks())));
					}

					

					omrlist.put("exQuizMarks", super.commonHelper.doubleprefixdigit(e.getExQuizMarks()));
					omrlist.put("exAssignmentMarks", super.commonHelper.doubleprefixdigit(e.getExAssignmentMarks()));
					omrlist.put("exAttendenceMarks", super.commonHelper.doubleprefixdigit(e.getExAttendenceMarks()));
					omrlist.put("exCaseStudyMarks", super.commonHelper.doubleprefixdigit(e.getExCaseStudy()));
					
					List<MidTermMarks> internlm = super.midtermmarksMarks
							.findByStudentadmissionIdAndCoursesIdAndExIsActiveAndExIsDelete(task.get().getId(),
									e.getCourses().getId(), true, false);

					if (internlm.size() <= 0) {
						omrlist.put("exTotalMidterm", "NA");
					} else {

						omrlist.put("exTotalMidterm", commonHelper.doubleprefixdigit(internlm.get(0).getExMidTermMarks()));
					}

					List<ExamBarcodes> external = super.exambarcode
							.findByExIsActiveAndExIsDeleteAndStudentadmissionIdAndCoursesId(true, false,
									task.get().getId(), e.getCourses().getId());

					if (external.size() <= 0) {
						omrlist.put("exEndTermTotalMarks", "NA");

					} else {
						omrlist.put("exEndTermTotalMarks",
								commonHelper.doubleprefixdigit(external.get(0).getExEndTermMarks()));
					}

					omrlist.put("exCreditHour", e.getCourses().getCreditHours().getExCreditHourTitle());
					omrlist.put("id", e.getCourses().getId());
					omrlist.put("exGrandTotal", super.commonHelper.doubleprefixdigit(e.getExGrandTotal()));
					omrlist.put("lettergrade", e.getExLetterGrades());
					omrlist.put("exGradePoint", (int)e.getExGradePoint().intValue());
					omrlist.put("exCoursesCode", e.getCourses().getExCoursesCode());
					omrlist.put("exRemark", e.getExRemark());
					omrlist.put("exName", e.getCourses().getExName());
					theory8thsem = theory8thsem + (int) (e.getCourses().getCreditHours().getExCreditHourLecture().intValue());

					pract8thsem = pract8thsem + (int) (e.getCourses().getCreditHours().getExCreditHourPractical().intValue());
					dataList8thsem.add(omrlist);
				}

				info.put("status8thsem", "1");
				info.put("message8thsem", "success");
				info.put("message8thsem", "Eight Semester Result");
				info.put("detailsOf8thsem", dataList8thsem);
				// SGPA / CGPA of 8th semester
				List<SemesterProgressReport> taskss8thsem = super.semesterProgressReport
						.findByStudentadmissionIdAndProgrammeYearIdAndSemesterId(task.get().getId(),
								grade8thsem.get(0).getProgrammeYear().getId(), grade8thsem.get(0).getSemester().getId());
				if (taskss8thsem.size() <= 0) {
					info.put("sgpa8thsem", "NA");
					info.put("cgpa8thsem", "NA");
					info.put("totalCreditHour8thsem", "NA");
				} else {
					info.put("sgpa8thsem", taskss8thsem.get(0).getExGradePointAv());
					if (taskss8thsem.get(0).getStudentadmission().getBatch().getId() == 8
							|| taskss8thsem.get(0).getStudentadmission().getBatch().getId() == 7) {
						info.put("cgpa8thsem", taskss8thsem.get(0).getExCamuGradePointAv());
					} else {
						info.put("cgpa8thsem",taskss8thsem.get(0).getExCamuGradePointAv() );
					}

					info.put("totalCreditHour8thsem", theory8thsem + "+" + pract8thsem);
					info.put("Semester8thsemId",sem.get(7).getId());
					info.put("Semester8thsemName",sem.get(7).getExName());
					info.put("Marksheet8thsem", (taskss8thsem.get(0).getMarksheetPath() == null || taskss8thsem.get(0).getMarksheetPath() == "NA")?"NA" :serverurl+taskss8thsem.get(0).getMarksheetPath());
				}
				}
				//==================================
				//info.put("StudentDetails", studentinfo);
				return info;
			
	}
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getStaffDashboard(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			ArrayList<Object[]> evedetails = super.teacherCourseMapping.getSyllabusOnStaffIdDash(
					 request.getAcademicYear(), request.getStaffpersonal());
			if (evedetails.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Teacher not mapped with any courses.");
				return info;
			} else {
				String serverurl = commonHelper.getSettingValue("SERVER_IP");
				List dataList = new LinkedList();
				for (Object[] e : evedetails) {
					Map<Object, Object> staffinfo = new HashMap<Object, Object>();
					boolean isSubmit = false;
					staffinfo.put("id", e[0]);
					staffinfo.put("coursesCode", e[1]);
					staffinfo.put("courseName", e[2]);
					staffinfo.put("credithour", e[3]);
					staffinfo.put("CoursesType", e[4]);
					// staffinfo.put("section", e[5]);
					// get course type on course id

					List coursetype = new LinkedList();
					List coursetypeId = new LinkedList();
					Long convertedLong = Long.parseLong(e[0].toString());
					List<Courses> courses = super.courses.findByIdAndExIsActiveAndExIsDelete(convertedLong, true,false);
					if (courses.size() > 0) {
						for (int i = 0; i < courses.get(0).getCoursesType().size(); i++) {
							coursetype.add(courses.get(0).getCoursesType().get(i).getExName());
							coursetypeId.add(courses.get(0).getCoursesType().get(i).getId());
						}
						staffinfo.put("coursetype", coursetype);
						staffinfo.put("coursetypeId", coursetypeId);
						staffinfo.put("exSyllabusUrl",(courses.get(0).getExSyllabusUrl() == null || courses.get(0).getExSyllabusUrl() == "NA")? "NA": serverurl + courses.get(0).getExSyllabusUrl());
						// check internl marks submited or not by teacher
						List<MidTermMarks> internl = super.midtermmarksMarks.findByCoursesIdAndExIsActiveAndExIsDeleteAndStaffId(convertedLong, true, false,request.getStaffpersonal());
						for (MidTermMarks m : internl) {
							isSubmit = true;
							if (m.getExIsSubmit() == null || m.getExIsSubmit() == false) {
								isSubmit = false;
								break;
							}
						}
						
						List<InternalMarksConfiguration> config = super.internalMarksConfiguration
								.findByExIsDeleteAndExIsActiveAndProgrammesIdAndAcademicYearIdAndProgrammeYearIdAndSemesterId(
										false, true, courses.get(0).getProgrammes().getId() , request.getAcademicYear() , courses.get(0).getProgrammeYear().getId() , courses.get(0).getSemester().getId());
						if(config.size() <=0) {
							staffinfo.put("exEndDate","NA");
						}else {
							staffinfo.put("exEndDate",config.get(0).getExEndDate() == null ? "NA" : config.get(0).getExEndDate().toString().substring(0, 10));
						}
						
						staffinfo.put("credithour", courses.get(0).getCreditHours().getExCreditHourTitle());
						staffinfo.put("semester", courses.get(0).getSemester().getExName());
						staffinfo.put("stream", courses.get(0).getStream().getExIdentifier());
						staffinfo.put("batch", courses.get(0).getBatch().getExIdentifier());
						staffinfo.put("department", courses.get(0).getDepartment().getExIdentifier());
						staffinfo.put("program", courses.get(0).getProgrammes().getExIdentifier());
						staffinfo.put("studentcount", coursesRegistration.getStudentcount(courses.get(0).getId() , request.getAcademicYear()));
					} else {
						staffinfo.put("exEndDate","NA");
						staffinfo.put("coursetype", "NA");
						staffinfo.put("coursetypeId", "NA");
						staffinfo.put("batch", "NA");
						staffinfo.put("department", "NA");
						staffinfo.put("program", "NA");
						staffinfo.put("credithour", "NA");
						staffinfo.put("semester", "NA");
						staffinfo.put("stream", "NA");
					}
					staffinfo.put("isSubmit", isSubmit);
					dataList.add(staffinfo);
				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);

				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getCourseForQP(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			

			List<Courses> task = super.courses.findByProgrammesIdAndDepartmentIdAndSemesterIdAndProgrammeYearIdAndAcademicYearIdAndDegreeIdAndExIsActiveAndExIsDelete(request.getProgrammes(), request.getDepartment(),
					request.getSemester(), request.getProgrammeYear(), request.getAcademicYear() ,request.getDegree(), true, false);
			System.out.println("<<<<<" + request);
			if (task.size() <= 0) {
				info.put("status", "2");
				info.put("message", "record not found");
				return info;
			} else {
				List dataList = new LinkedList();
				String serverurl = commonHelper.getSettingValue("SERVER_IP");
				for (Courses e : task) {
					List coursestype = new LinkedList();
					List coursesTypeId = new LinkedList();
					Map<String, Object> Coursesdata = new HashMap<String, Object>();
					Coursesdata.put("id", e.getId());
					//Coursesdata.put("exCreateDate", e.getExCreateDate());
					Coursesdata.put("exCoursesCode", e.getExCoursesCode());
					Coursesdata.put("exName",e.getBatch().getExIdentifier() + " :: " + e.getExCoursesCode() + " :: " + e.getExName());
					Coursesdata.put("exqpUrl",(e.getExQpUrl() == null || e.getExQpUrl() == "NA")? "NA": serverurl + e.getExQpUrl());
					
					//Coursesdata.put("exDescrption", e.getExDescription());
					//Coursesdata.put("exIsActive", e.getExIsActive());
					//Coursesdata.put("exIsDelete", e.getExIsDelete());
					//Coursesdata.put("exName", e.getExName());
					//Coursesdata.put("exUpdatedDate", e.getExUpdateDate());
					//Coursesdata.put("academicYearId", e.getAcademicYear().getId());
					//Coursesdata.put("academicYear", e.getAcademicYear().getExYear());
					//Coursesdata.put("creditHoursId", e.getCreditHours().getId());
					Coursesdata.put("creditHours", e.getCreditHours().getExCreditHourTitle());
					for (int i = 0; i < e.getCoursesType().size(); i++) {
						coursestype.add(e.getCoursesType().get(i).getExName());
						coursesTypeId.add(e.getCoursesType().get(i).getId());
					}

					Coursesdata.put("coursesType", coursestype);
					Coursesdata.put("coursesTypeId", coursesTypeId);
					dataList.add(Coursesdata);

				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				

				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getStaffRegulation(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {

			
			List<ExamRegulations> tasks = regulation.findByExIsDeleteAndExIsActive(false, true);
			if (tasks.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Record Not Present");
				return info;
			} else {
				String serverurl = commonHelper.getSettingValue("SERVER_IP");
				List dataList = new LinkedList();
				for (ExamRegulations e : tasks) {
					List section = new LinkedList();
					List sectionId = new LinkedList();
					Map<Object, Object> Programmesdata = new HashMap<Object, Object>();
					Programmesdata.put("id", e.getId());
					Programmesdata.put("degree", e.getDegree().getExName());
					Programmesdata.put("programm", e.getProgrammes().getExIdentifier());
					Programmesdata.put("exDescription", e.getExDescription());
					Programmesdata.put("exName", e.getExName());
					Programmesdata.put("path", e.getExFilePath() == null ? "NA" : serverurl + e.getExFilePath());
					dataList.add(Programmesdata);
				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}

		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getStaffReport(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			ArrayList<Object[]> evedetails = super.teacherCourseMapping.getSyllabusOnStaffIdReport(request.getStaffpersonal());
			if (evedetails.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Teacher not mapped with any courses.");
				return info;
			} else {
				//String serverurl = commonHelper.getSettingValue("SERVER_IP");
				List dataList = new LinkedList();
				for (Object[] e : evedetails) {
					Map<Object, Object> staffinfo = new HashMap<Object, Object>();
					boolean isSubmit = false;
					staffinfo.put("id", e[0]);
					staffinfo.put("coursesCode", e[1]);
					staffinfo.put("courseName", e[2]);
					staffinfo.put("credithour", e[3]);
					staffinfo.put("section", e[4]);

					List coursetype = new LinkedList();
					List coursetypeId = new LinkedList();
					Long convertedLong = Long.parseLong(e[0].toString());
					List<Courses> courses = super.courses.findByIdAndExIsActiveAndExIsDelete(convertedLong, true,false);
					if (courses.size() > 0) {
						for (int i = 0; i < courses.get(0).getCoursesType().size(); i++) {
							coursetype.add(courses.get(0).getCoursesType().get(i).getExName());
							coursetypeId.add(courses.get(0).getCoursesType().get(i).getId());
						}
						staffinfo.put("coursetype", coursetype);
						staffinfo.put("coursetypeId", coursetypeId);						
						staffinfo.put("credithour", courses.get(0).getCreditHours().getExCreditHourTitle());
						staffinfo.put("semester", courses.get(0).getSemester().getExName());
						staffinfo.put("semesterId", courses.get(0).getSemester().getId());
						staffinfo.put("stream", courses.get(0).getStream().getExIdentifier());
						staffinfo.put("batch", courses.get(0).getBatch().getExIdentifier());
						staffinfo.put("department", courses.get(0).getDepartment().getExIdentifier());
						staffinfo.put("departmentId", courses.get(0).getDepartment().getId());
						staffinfo.put("program", courses.get(0).getProgrammes().getExIdentifier());
						staffinfo.put("programId", courses.get(0).getProgrammes().getId());
						//staffinfo.put("studentcount", coursesRegistration.getStudentcount(courses.get(0).getId() , request.getAcademicYear()));
					
						staffinfo.put("programYear", courses.get(0).getProgrammeYear().getExName());
						staffinfo.put("programYearId", courses.get(0).getProgrammeYear().getId());
						staffinfo.put("collegeId",courses.get(0).getColleges().getId());
						staffinfo.put("semesterId", courses.get(0).getSemester().getId());
						staffinfo.put("semester", courses.get(0).getSemester().getExName());
						staffinfo.put("degree", courses.get(0).getDegree().getId());
						
						staffinfo.put("academicYear", courses.get(0).getAcademicYear().getExYear());
						staffinfo.put("academicYearId", courses.get(0).getAcademicYear().getId());
						
					} else {
						staffinfo.put("exEndDate","NA");
						staffinfo.put("coursetype", "NA");
						staffinfo.put("coursetypeId", "NA");
						staffinfo.put("batch", "NA");
						staffinfo.put("department", "NA");
						staffinfo.put("program", "NA");
						staffinfo.put("credithour", "NA");
						staffinfo.put("semester", "NA");
						staffinfo.put("stream", "NA");
						
						staffinfo.put("programId", "NA");
						staffinfo.put("departmentId", "NA");
						staffinfo.put("semesterId", "NA");
					}
					//staffinfo.put("isSubmit", isSubmit);
					dataList.add(staffinfo);
				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);

				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getBatch(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
			ArrayList<Object[]> evedetails = super.coursesRegistration.GetBatchrecords(
					 request.getAcademicYear(), request.getSemester(),request.getProgrammes());
			if (evedetails.size() <= 0) {
				info.put("status", "2");
				info.put("message", "Records Not Found");
				return info;
			} else {
				List dataList = new LinkedList();
				for (Object[] e : evedetails) {
					Map<Object, Object> staffinfo = new HashMap<Object, Object>();
					staffinfo.put("BatchIdentifier", e[0]);
					staffinfo.put("BatchId", e[1]);
					dataList.add(staffinfo);
				}
				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getboards(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {

			List<StudentadmissionLog> task = super.studentadmissionLog.getboardrecords(request.getColleges(),
					request.getDegree(),request.getProgrammesId());
			System.out.println("<<<<<" + request);
			if (task.size() <= 0) {
				info.put("status", "2");
				info.put("message", "record not found");
				System.out.println("<<<<," + task);
				return info;
			} else {
				List dataList = new LinkedList();
				for (StudentadmissionLog e : task) {
					Map<String, Object> Programmesdata = new HashMap<String, Object>();
					Programmesdata.put("esstudentId", e.getStudentadmission().getId());
					Programmesdata.put("exCreateDate", e.getExCreateDate());
					Programmesdata.put("exBoardNames", e.getExTenthBoardOfPass());
					Programmesdata.put("exIsActive", e.getExIsActive());
					Programmesdata.put("exIsDelete", e.getExIsDelete());
					Programmesdata.put("exName", e.getExName());
					Programmesdata.put("exUpdatedate", e.getExUpdateDate());

					Programmesdata.put("degreeId", e.getStudentadmission().getDegree().getId());
					Programmesdata.put("degree", e.getStudentadmission().getDegree().getExName());

					Programmesdata.put("collegeId", e.getStudentadmission().getColleges().getId());
					Programmesdata.put("college", e.getStudentadmission().getColleges().getExName());

					dataList.add(Programmesdata);

				}

				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getstates(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
		List<Studentpersonal> task = super.studentpersonal.getstates(request.getColleges(),
				request.getDegree(),request.getProgrammesId());
		System.out.println("<<<<<" + request);
		if (task.size() <= 0) {
			info.put("status", "2");
			info.put("message", "record not found");
			System.out.println("<<<<," + task);
			return info;
		} else {
			List dataList = new LinkedList();
			for (Studentpersonal e : task) {
				Map<String, Object> Programmesdata = new HashMap<String, Object>();
				Programmesdata.put("esstudentId", e.getStudentadmission().getId());
				Programmesdata.put("exCreateDate", e.getExCreateDate());
				Programmesdata.put("exBoardNames", e.getExNativeState());
				
				Programmesdata.put("exUpdatedate", e.getExUpdateDate());

				Programmesdata.put("degreeId", e.getStudentadmission().getDegree().getId());
				Programmesdata.put("degree", e.getStudentadmission().getDegree().getExName());

				Programmesdata.put("collegeId", e.getStudentadmission().getColleges().getId());
				Programmesdata.put("college", e.getStudentadmission().getColleges().getExName());

				dataList.add(Programmesdata);

			}

			info.put("status", "1");
			info.put("message", "success");
			info.put("details", dataList);
			return info;
		}
	} catch (Exception e) {
		e.printStackTrace();
		logger.error("Exception occured" + e);
		StringWriter errors = new StringWriter();
		e.printStackTrace(new PrintWriter(errors));
		logger.error(errors.toString());
		info.put("status", "0");
		info.put("message", "Something went wrong");
		return info;
	}
	}

	@Override
	public Map<String, Object> getmotherTongue(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
		List<StudentadmissionLog> task = super.studentadmissionLog.getmothertongue();
		System.out.println("<<<<<" + request);
		if (task.size() <= 0) {
			info.put("status", "2");
			info.put("message", "record not found");
			System.out.println("<<<<," + task);
			return info;
		} else {
			List dataList = new LinkedList();
			for (StudentadmissionLog e : task) {
				Map<String, Object> Programmesdata = new HashMap<String, Object>();
				Programmesdata.put("id", e.getId());
				Programmesdata.put("exName", e.getExMotherTounge());
				dataList.add(Programmesdata);

			}

			info.put("status", "1");
			info.put("message", "success");
			info.put("details", dataList);
			return info;
		}
	} catch (Exception e) {
		e.printStackTrace();
		logger.error("Exception occured" + e);
		StringWriter errors = new StringWriter();
		e.printStackTrace(new PrintWriter(errors));
		logger.error(errors.toString());
		info.put("status", "0");
		info.put("message", "Something went wrong");
		return info;
	}
	}

	@Override
	public Map<String, Object> getNationality(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
		List<Studentpersonal> task = super.studentpersonal.getNationality(request.getColleges(),
				request.getDegree(),request.getProgrammesId());
		System.out.println("<<<<<" + request);
		if (task.size() <= 0) {
			info.put("status", "2");
			info.put("message", "record not found");
			System.out.println("<<<<," + task);
			return info;
		} else {
			List dataList = new LinkedList();
			for (Studentpersonal e : task) {
				Map<String, Object> Programmesdata = new HashMap<String, Object>();
				Programmesdata.put("esstudentId", e.getStudentadmission().getId());
				Programmesdata.put("exCreateDate", e.getExCreateDate());
				Programmesdata.put("exBoardNames", e.getExNationality());
				
				Programmesdata.put("exUpdatedate", e.getExUpdateDate());

				Programmesdata.put("degreeId", e.getStudentadmission().getDegree().getId());
				Programmesdata.put("degree", e.getStudentadmission().getDegree().getExName());

				Programmesdata.put("collegeId", e.getStudentadmission().getColleges().getId());
				Programmesdata.put("college", e.getStudentadmission().getColleges().getExName());

				dataList.add(Programmesdata);

			}

			info.put("status", "1");
			info.put("message", "success");
			info.put("details", dataList);
			return info;
		}
	} catch (Exception e) {
		e.printStackTrace();
		logger.error("Exception occured" + e);
		StringWriter errors = new StringWriter();
		e.printStackTrace(new PrintWriter(errors));
		logger.error(errors.toString());
		info.put("status", "0");
		info.put("message", "Something went wrong");
		return info;
	}
	}

	@Override
	public Map<String, Object> getreligion(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
		List<Studentpersonal> task = super.studentpersonal.getreligion();
		System.out.println("<<<<<" + request);
		if (task.size() <= 0) {
			info.put("status", "2");
			info.put("message", "record not found");
			System.out.println("<<<<," + task);
			return info;
		} else {
			List dataList = new LinkedList();
			for (Studentpersonal e : task) {
				Map<String, Object> Programmesdata = new HashMap<String, Object>();
				Programmesdata.put("id", e.getStudentadmission().getId());
				Programmesdata.put("exName", e.getExReligion());
				

				dataList.add(Programmesdata);

			}

			info.put("status", "1");
			info.put("message", "success");
			info.put("details", dataList);
			return info;
		}
	} catch (Exception e) {
		e.printStackTrace();
		logger.error("Exception occured" + e);
		StringWriter errors = new StringWriter();
		e.printStackTrace(new PrintWriter(errors));
		logger.error(errors.toString());
		info.put("status", "0");
		info.put("message", "Something went wrong");
		return info;
	}
	}

	@Override
	public Map<String, Object> getbloodgroup(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
		List<Studentpersonal> task = super.studentpersonal.getbloodgroup();
		System.out.println("<<<<<" + request);
		if (task.size() <= 0) {
			info.put("status", "2");
			info.put("message", "record not found");
			System.out.println("<<<<," + task);
			return info;
		} else {
			List dataList = new LinkedList();
			for (Studentpersonal e : task) {
				Map<String, Object> Programmesdata = new HashMap<String, Object>();
				Programmesdata.put("id", e.getId());
				Programmesdata.put("exName", e.getExBloodGroup());
				dataList.add(Programmesdata);

			}

			info.put("status", "1");
			info.put("message", "success");
			info.put("details", dataList);
			return info;
		}
	} catch (Exception e) {
		e.printStackTrace();
		logger.error("Exception occured" + e);
		StringWriter errors = new StringWriter();
		e.printStackTrace(new PrintWriter(errors));
		logger.error(errors.toString());
		info.put("status", "0");
		info.put("message", "Something went wrong");
		return info;
	}
	}

	@Override
	public Map<String, Object> getminaritycategory(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {

			List<StudentadmissionLog> task = super.studentadmissionLog.getminoritycategory(request.getColleges(),
					request.getDegree(),request.getProgrammesId());
			System.out.println("<<<<<" + request);
			if (task.size() <= 0) {
				info.put("status", "2");
				info.put("message", "record not found");
				System.out.println("<<<<," + task);
				return info;
			} else {
				List dataList = new LinkedList();
				for (StudentadmissionLog e : task) {
					Map<String, Object> Programmesdata = new HashMap<String, Object>();
					Programmesdata.put("esstudentId", e.getStudentadmission().getId());
					Programmesdata.put("exCreateDate", e.getExCreateDate());
					Programmesdata.put("exBoardNames", e.getExMinorityCategory());
					Programmesdata.put("exIsActive", e.getExIsActive());
					Programmesdata.put("exIsDelete", e.getExIsDelete());
					Programmesdata.put("exName", e.getExName());
					Programmesdata.put("exUpdatedate", e.getExUpdateDate());

					Programmesdata.put("degreeId", e.getStudentadmission().getDegree().getId());
					Programmesdata.put("degree", e.getStudentadmission().getDegree().getExName());

					Programmesdata.put("collegeId", e.getStudentadmission().getColleges().getId());
					Programmesdata.put("college", e.getStudentadmission().getColleges().getExName());

					dataList.add(Programmesdata);

				}

				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getStudentboards(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {

			List<StudentadmissionLog> task = super.studentadmissionLog.getStudentboards();
			System.out.println("<<<<<" + request);
			if (task.size() <= 0) {
				info.put("status", "2");
				info.put("message", "record not found");
				System.out.println("<<<<," + task);
				return info;
			} else {
				List dataList = new LinkedList();
				for (StudentadmissionLog e : task) {
					Map<String, Object> Programmesdata = new HashMap<String, Object>();
					Programmesdata.put("id", e.getStudentadmission().getId());				
					Programmesdata.put("exBoardNames", e.getExTenthBoardOfPass());
					dataList.add(Programmesdata);

				}

				info.put("status", "1");
				info.put("message", "success");
				info.put("details", dataList);
				return info;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured" + e);
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			logger.error(errors.toString());
			info.put("status", "0");
			info.put("message", "Something went wrong");
			return info;
		}
	}

	@Override
	public Map<String, Object> getStudentStates(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
		List<Studentpersonal> task = super.studentpersonal.getStudentstates();
		System.out.println("<<<<<" + request);
		if (task.size() <= 0) {
			info.put("status", "2");
			info.put("message", "record not found");
			System.out.println("<<<<," + task);
			return info;
		} else {
			List dataList = new LinkedList();
			for (Studentpersonal e : task) {
				Map<String, Object> Programmesdata = new HashMap<String, Object>();
				Programmesdata.put("id", e.getStudentadmission().getId());
				Programmesdata.put("exState", e.getExNativeState());
				dataList.add(Programmesdata);

			}
			info.put("status", "1");
			info.put("message", "success");
			info.put("details", dataList);
			return info;
		}
	} catch (Exception e) {
		e.printStackTrace();
		logger.error("Exception occured" + e);
		StringWriter errors = new StringWriter();
		e.printStackTrace(new PrintWriter(errors));
		logger.error(errors.toString());
		info.put("status", "0");
		info.put("message", "Something went wrong");
		return info;
	}
	}

	@Override
	public Map<String, Object> getFilter(CommonRequest request) {
		Map<String, Object> info = new LinkedHashMap<>();
		try {
		List<ReportRequestEntity> task = reportrequest.getall();
		System.out.println("<<<<<" + request);
		if (task.size() <= 0) {
			info.put("status", "2");
			info.put("message", "record not found");
			System.out.println("<<<<," + task);
			return info;
		} else {
			List dataList = new LinkedList();
			for (ReportRequestEntity e : task) {
				Map<String, Object> Programmesdata = new HashMap<String, Object>();
				Programmesdata.put("id", e.getId());
				Programmesdata.put("name", e.getExName());
				dataList.add(Programmesdata);

			}
			info.put("status", "1");
			info.put("message", "success");
			info.put("details", dataList);
			return info;
		}
	} catch (Exception e) {
		e.printStackTrace();
		logger.error("Exception occured" + e);
		StringWriter errors = new StringWriter();
		e.printStackTrace(new PrintWriter(errors));
		logger.error(errors.toString());
		info.put("status", "0");
		info.put("message", "Something went wrong");
		return info;
	}
	}
	
	@Override
	public Map<String, Object> getsupplycoursesforapproval(CommonRequest request) {
	Map<String, Object> info = new LinkedHashMap<>();
	try {


		Optional<Studentadmission> student = super.studentadmission.findByExIsDeleteAndExIsActiveAndExRollNo(false,true,request.getExRollNo());
		if (!student.isPresent() || !student.get().getExIsActive()) {
		info.put("status", "2");
		info.put("message", "student not present");
		return info;
		}

	List<CoursesRegistration> task = super.coursesRegistration.findByExIsDeleteAndExIsActiveAndProgrammesIdAndDegreeIdAndAcademicYearIdAndProgrammeYearIdAndSemesterIdAndRegistrationIdAndStudentadmissionId(false, true, request.getProgrammes(),request.getDegree(),request.getAcademicYear(),request.getProgrammeYear(),request.getSemester(), request.getRegistrationType(),student.get().getId());
	if (task.size() <= 0) {
	info.put("status", "2");
	info.put("message", "record not found");
	System.out.println("<<<<," + task);
	return info;
	} else {
	List dataList = new LinkedList();
	List dataLists = new LinkedList();
	Map<String, Object> data = new HashMap<String, Object>();
	data.put("exstudentId", task.get(0).getStudentadmission().getId());
	data.put("degreeId", task.get(0).getDegree().getId());
	data.put("degree", task.get(0).getDegree().getExName());
	data.put("collegeId", task.get(0).getColleges().getId());
	data.put("college", task.get(0).getColleges().getExName());
	dataLists.add(data);
	for (CoursesRegistration e : task) {
	Map<String, Object> Programmesdata = new HashMap<String, Object>();
	Programmesdata.put("exCreateDate", e.getExCreateDate());
	Programmesdata.put("exCoursesCode", e.getCourses().getExCoursesCode());
	Programmesdata.put("exIsActive", e.getExIsActive());
	Programmesdata.put("exIsDelete", e.getExIsDelete());
	Programmesdata.put("exCourseName", e.getCourses().getExName());
	Programmesdata.put("exCoursesId", e.getCourses().getId());
	Programmesdata.put("exCreditHours", e.getCourses().getCreditHours().getExCreditHourTitle());
	Programmesdata.put("exIsPaid", e.getExIsPaid()==true ? "Paid":"NotPaid" );
	dataList.add(Programmesdata);



	}



	info.put("status", "1");
	info.put("message", "success");
	info.put("details", dataList);
	info.put("detail", dataLists);
	return info;
	}
	} catch (Exception e) {
	e.printStackTrace();
	logger.error("Exception occured" + e);
	StringWriter errors = new StringWriter();
	e.printStackTrace(new PrintWriter(errors));
	logger.error(errors.toString());
	info.put("status", "0");
	info.put("message", "Something went wrong");
	return info;
	}
	}



	@Override
	public Map<String, Object> supplyofflineapproval(CommonRequest request) {
	Map<String, Object> info = new LinkedHashMap<>();
	try {
	Optional<AcademicYear> academic = super.academicYear.findByIdAndExIsDeleteAndExIsActive(request.getAcademicYear() , false , true);
	if (!academic.isPresent()) {
	info.put("status", "2");
	info.put("message", "academicYear not present");
	return info;
	}

	Optional<Colleges> clgid = super.colleges.findByIdAndExIsDeleteAndExIsActive(request.getColleges(),false,true);
	if (!clgid.isPresent()) {
	info.put("status", "2");
	info.put("message", "Colleges not present");
	return info;
	}



	Optional<Programmes> programmes = super.programmes.findByExIsDeleteAndExIsActiveAndId(false , true ,request.getProgrammes() );
	if (!programmes.isPresent()) {
	info.put("status", "2");
	info.put("message", "Programme not present");
	return info;
	}
	Optional<ProgrammeYear> programmeYear = super.programmeYear.findByIdAndExIsActiveAndExIsDelete(request.getProgrammeYear(),true,false);
	if (!programmeYear.isPresent()) {
	info.put("status", "2");
	info.put("message", "programmeYear not present");
	return info;
	}
	Optional<Semster> sem = super.semester.findByExIsDeleteAndExIsActiveAndId(false,true,request.getSemester());
	if (!sem.isPresent()) {
	info.put("status", "2");
	info.put("message", "Semster not present");
	return info;
	}

	Optional<Degree> degree = super.degree.findByExIsDeleteAndExIsActiveAndId(false,true,request.getDegree());
	if (!degree.isPresent() || !degree.get().getExIsActive()) {
	info.put("status", "2");
	info.put("message", "Degree not present");
	return info;
	}

	Optional<RegistrationType> reg = super.registrationType.findByExIsDeleteAndExIsActiveAndId(false,true,request.getRegistrationType());
	if (!reg.isPresent() || !reg.get().getExIsActive()) {
	info.put("status", "2");
	info.put("message", "Supplementary registration not present");
	return info;
	}

	Optional<FeeMaster> feemaster = super.feeMaster.findById(130L);
	if(!feemaster.isPresent()) {
		info.put("status", "2");
		info.put("message", "Fee not created");
		return info;	
	}

	Optional<Studentadmission> student = super.studentadmission.findByExIsDeleteAndExIsActiveAndExRollNo(false,true,request.getExRollNo());
	if (!student.isPresent() || !student.get().getExIsActive()) {
	info.put("status", "2");
	info.put("message", "student not present");
	return info;
	}
	String orderid = super.commonHelper.genrateOrderId();

	List<CoursesRegistration> task = super.coursesRegistration.findByExIsDeleteAndExIsActiveAndProgrammesIdAndDegreeIdAndAcademicYearIdAndProgrammeYearIdAndSemesterIdAndRegistrationIdAndStudentadmissionIdAndCoursesIdIn(false, true, request.getProgrammes(),request.getDegree(),request.getAcademicYear(),request.getProgrammeYear(),request.getSemester(), request.getRegistrationType(),student.get().getId(),request.getCoursesId());
	if (task.size() > 0) {

	int update = super.coursesRegistration.updates(request.getProgrammes(),request.getDegree(),request.getAcademicYear(),request.getProgrammeYear(),request.getSemester(), request.getRegistrationType(),student.get().getId(),request.getCoursesId(),false, true,orderid);

	List<OrderTransaction> taskss = super.transactionRepository.findByProgrammesIdAndDegreeIdAndAcademicYearIdAndProgrammeYearIdAndSemesterIdAndRegistrationIdAndStudentadmissionId( request.getProgrammes(),request.getDegree(),request.getAcademicYear(),request.getProgrammeYear(),request.getSemester(), request.getRegistrationType(),student.get().getId());
	if (taskss.size() > 0) {	
	int updatess = super.transactionRepository.updatesss(request.getProgrammes(),request.getDegree(),request.getAcademicYear(),request.getProgrammeYear(),request.getSemester(), request.getRegistrationType(),student.get().getId(),request.getExAmount());
	}else {
		Date date = new Date();
	OrderTransaction trans = new OrderTransaction();
	trans.setDegree(degree.get());
	trans.setProgrammes(programmes.get());
	trans.setProgrammeYear(programmeYear.get());
	trans.setSemester(sem.get());
	trans.setAcademicYear(academic.get());
	trans.setStudentadmission(student.get());
	trans.setFeemaster(feemaster.get());
	trans.setRegistration(reg.get());
	trans.setExRollNo(student.get().getExRollNo());
	trans.setName(student.get().getExName());
	trans.setPaymentstatus("success");
	trans.setOrderId(orderid);
	trans.setTxnDate(date);
	trans.setTxnAmount(Double.parseDouble(request.getExAmount()));
	trans.setPgType("Offline");
	trans.setPaymentSource(false);
	trans.setError("E000");
	trans.setUnmappedstatus("captured");
	trans.setErrorMessage("NO ERROR");
	trans.setQueryStatus("Y");
	super.transactionRepository.save(trans);
	}
	/*
	* if(update == 1) { update = update + 1; String s=Integer.toString(update) ;
	* info.put("status", "0"); info.put("message",
	* "Supplementary Approved Successfully"); return info; }
	*/
	info.put("status", "1");
	info.put("message", "Supplementary Registration Approved Successfully");
	return info;
	} else {
	info.put("status", "2");
	info.put("message", "No records Found");
	return info;
	}
	} catch (Exception e) {
	e.printStackTrace();
	logger.error("Exception occured" + e);
	StringWriter errors = new StringWriter();
	e.printStackTrace(new PrintWriter(errors));
	logger.error(errors.toString());
	info.put("status", "0");
	info.put("message", "Something went wrong");
	return info;
	}
	}
}
