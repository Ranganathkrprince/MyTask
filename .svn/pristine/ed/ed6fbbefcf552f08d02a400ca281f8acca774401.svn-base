package com.niftem.app.repository;

import java.util.Date;
import java.util.List;
import java.util.Optional;

import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.CrudRepository;
import org.springframework.stereotype.Repository;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.niftem.app.entity.Department;
@Repository
@Service
@Transactional
public interface DepartmentRepository extends CrudRepository<Department, Long>{

	@Modifying
	@Transactional
	@Query(value = "update ex_department set ex_is_delete = ?1,ex_is_active=?2 where id =?3", nativeQuery = true)
	int deleteDepartment(Boolean exIsDelete, Boolean is_active, Long id);
	
	List<Department> findByExIsDelete(boolean exIsDelete);

	@Modifying
	@Transactional
	@Query(value = "update ex_department set ex_name = ?1, ex_is_active = ?2, ex_identifier = ?3, ex_local_name = ?4 ,ex_update_date  = ?5 , ex_department_code = ?6 , programmes_id = ?8 , degree_id = ?9    where id =?7", nativeQuery = true)	
	int updateDepartmentRecord(String exName, Boolean exIsActive, String exIdentifier,  String exLocalName,Date date  ,String ex_department_code , Long id, Long program, Long degree );
			
	
	List<Department> findByExNameAndExIsDelete(String exName , boolean exIsDelete);
	
	Optional<Department> findByExIsDeleteAndExIsActiveAndId(boolean isDelete, boolean isActive, Long department);
	
	//Optional<Department> findByExIsDeleteAndExIsActiveAndExIdentifierAndCollegeExIdentifier(boolean delete, boolean active, String trim , String college);
	
	@Modifying
	@Transactional	
	@Query(value = "insert into ex_department_collage(department_id,collage_id)values(?1,?2)", nativeQuery = true)
	int saveDeptCollege(Long program_id, Long collage_id);
	
	@Modifying
	@Transactional
	@Query(value = "delete from ex_department_collage  where department_id =?1", nativeQuery = true)
	void deleteDeptCollege(Long id);

	List<Department> findByProgrammesIdAndCollegeIdAndDegreeId(Long programmes, Long colleges, Long degree);

//newly added
	//Optional<Department> findByExIsDeleteAndExIsActiveAndId(boolean isDelete, boolean isActive, String trim);

	//Optional<Department> findByExNameAndExIsDeleteAndExIsActive(String trim, boolean b, boolean c);

	Optional<Department> findByExIdentifierAndExIsDeleteAndExIsActive(String trim, boolean b, boolean c);

	Optional<Department> findByExNameAndExIsDeleteAndExIsActive(String trim, boolean b, boolean c);
	

	List<Department> findByExDepartmentCodeAndExIsDeleteAndExIsActive(String exDepartmentCode, boolean b, boolean c);

	List<Department> findByExIdentifierAndExIsDelete(String exIdentifier, boolean b);

	Optional<Department> findByIdAndExIsDeleteAndExIsActive(Long department, boolean b, boolean c);

	
	List<Department> findByExNameAndExIsDeleteAndProgrammesId(String exName, boolean b, Long programmes);

	List<Department> findByExIdentifierAndExIsDeleteAndProgrammesId(String exIdentifier, boolean b, Long programmes);


	
	Optional<Department> findByExIdentifierAndExIsDeleteAndExIsActiveAndProgrammesExName(String trim, boolean b,
			boolean c, String trim2);

	Optional<Department> findByExIdentifierAndExIsDeleteAndExIsActiveAndProgrammesId(String trim, boolean b, boolean c,
			Long id);

	
	List<Department> findByProgrammesIdAndCollegeIdInAndDegreeId(Long programmes, List<Long> colleges, Long degree);

	List<Department> findByProgrammesId(Long programmes);

	List<Department> findByProgrammesIdAndDegreeId(Long programmes, Long degree);

//	Optional<Department> findByExIsDeleteAndExIsActiveAndExIdentifier(boolean b, boolean c, String trim);

	
//	Optional<Department> findByExIsDeleteAndExIsActiveAndExIdentifier(boolean b, boolean c, List<String> deptList);

	Optional<Department> findByExIsDeleteAndExIsActiveAndExIdentifier(boolean b, boolean c, String trim);

	Optional<Department> findByExIdentifierAndExIsDeleteAndExIsActive(Department department, boolean b, boolean c);

	List<Department> findByProgrammesIdAndExIsDeleteAndExIsActive(Long programmes, boolean b, boolean c);

	
	Optional<Department> findByProgrammesIdAndExIsDelete(Long programmes, boolean b);

	Optional<Department> findByIdAndExIsDeleteAndExIsActive(Department department, boolean b, boolean c);
	
	Optional<Department> findByExIsDeleteAndExIsActiveAndExIdentifierAndDegreeIdAndProgrammesId(boolean b, boolean c, String trim , Long degree , Long program);

	

	Optional<Department> findByExIsDeleteAndExIsActiveAndExIdentifierAndProgrammesId(boolean b, boolean c, String trim,
			Long id);

	
	
} 
